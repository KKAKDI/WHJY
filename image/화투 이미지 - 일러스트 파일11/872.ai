%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (872.ai)
%%CreationDate: 3/25/2002 6:37 PM
%%BoundingBox: 212 326 366 565
%%HiResBoundingBox: 212.5957 326.1309 365.667 564.2417
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 11940 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC8C444A204B204A204B
%204A204B204A204B204A204B204A204B204A204B204A204B204A204B204A
%204B204A204B204A204B204A204B204A204B204A204B204A204B204A68FD
%07FC99FFFD05FC8C4BF82727525152275251522752515227525152275251
%522752512727525152275251522752512727525152275251522752515227
%5251522752515227525152275251522727F893FD05FCC2FFFD04FC8C20F8
%FD19FFF827FD05FF52FFFFFF7DF87DFD1DFF52F88CFD04FCBBFFFD04FC27
%27FD19FFA827F84BFFFFFF7DF8FFFFFFF827F8FD1EFF52F8FD04FCC2FFFD
%04FCF8A8FD19FF52F88CF852FFFFF8F827FF52F8FC27F8FD1EFFF844FCFC
%FCBBFFFCFCFC6827FD1AFFF86FFC93F8A8A8F85027A8F868FC8CF87DFD1D
%FF514BFCFCFCC2FFFCFCFC6EF8FD19FFA8F88CFCFC4AF87620C62627F8FC
%FCFC44F8FD0AFF7D5252FD10FF5226FCFCFCBCFFFCFCFC6827FD19FF7DF8
%FD04FC27F875C69FF84BFD04FCF8A8FD06FF5227F827F87DFD10FF274BFC
%FCFCC2FFFCFCFC6EF8FD19FF2726FD04FC8CF89EC6C64BF88C8CFCFC4B27
%FD04FF52F82750C6F827FD11FF5220FCFCFC99FFFCFCFC6827FD19FF5244
%FD04FC6FF8C6C6C69E274427FCFC6827FFFFFF27F89FC6C6742727522752
%515252FD0BFF274BFCFCFCC2FFFCFCFC6FF8FD19FF5227FCFC20FC4426FD
%04C62027F86EFC6FF8FFFF52F8C6C6C67AF8204B204A204BF820A8FD0AFF
%5220FCFCFCBBFFFCFCFC6827FD12FFF827205152A8FF7DF8FCFC27F84B4A
%FD04C675F82720FCFCF8FF7DF875C6C67A274AFD05FC2027A8FD0BFF4B4B
%FCFCFCC2FFFCFCFC68F8FD12FFCFF8272626F8F827F88CFCF8F8F827FD04
%C674F874F84468F852F8F874C626F820FD05FC44F8A8FD0CFF5220FCFCFC
%BBFFFCFCFC6827FD13FFA8F875C6C67427F8278C27204BF851C6C6C651F8
%C64B4B4427F86FF827F82768FD05FC68F87DFD0DFF514BFCFCFCC2FFFCFC
%FC6EF8FD14FFA7F89EC6C6C69EF8F82026FC92F8279EC6F851C67BF8F8F8
%FC442044FD07FC68F852FD0EFF5226FCFCFCBCFFFCFCFC6827FD15FF7CF8
%C7FD04C65020F8FCFCB4F8277427C6C69EF820FCFC2744FD07FC44F852FD
%0FFF274BFCFCFCC2FFFCFCFC6EF8FD14FF7DF8F8F8FD05C64AF868FCFCFC
%20F820C69EF820FCFC8CF8FD06FC6EF8F87CFD10FF5220FCFCFC99FFFCFC
%FC6827FD13FF4BF84B8C27F8C7FD04C6264BFD04FCF827C627F8FCFCFCF8
%274A6F6E4B2627F827F8277DFD0FFF274BFCFCFCC2FFFCFCFC6FF8FD12FF
%27F88CFCFCFC26F89FC6C6C67BF8FD05FCF827F8FCFCFC68F8264BF82626
%517AC6C69F26F827FD0EFF5220FCFCFCBBFFFCFCFC6827FD11FF27F8B4FD
%05FC4BF851C6C6C62726FD04FC6FF86FFCFC8C2650FD0AC69FF852FD0EFF
%4B4BFCFCFCC2FFFCFCFC68F8FD10FF27F88CFD07FC68F8279EC69EF844FC
%FCFC44F8FCFC8CF820FD09C69E4BF852FD0FFF5220FCFCFCBBFFFCFCFC68
%27FD0EFF7D27F8B4FD09FC93F8F8269F4BF820FCFC2744FC8C27F84B74FD
%05C69E7526F8F8A8FD10FF514BFCFCFCC2FFFCFCFC6EF8FD0DFF27F8F84B
%446E8CFCFCFC8C6F4420F8277D20FD05F86FF8FC44F8208C2027F8F8F820
%F8F8F84B20F852FD10FF5226FCFCFCBCFFFCFCFC6827FD0DFF7D4B522727
%20FD06F82752FD04FF7DFD08F868FD05FC8C6F68FD05FC44F8A8FD0FFF27
%4BFCFCFCC2FFFCFCFC6EF8FD21FFA852FD05F84AFD0DFC27F8CFFD0FFF52
%20FCFCFC99FFFCFCFC6827FD23FFFD04F827F84BFD0AFC8C27F8FD11FF27
%4BFCFCFCC2FFFCFCFC6FF8FD23FFFD05F8A7F82044FD07FC20F8F8FD12FF
%5220FCFCFCBBFFFCFCFC6827FD23FF27F8A87D27FFFF5227F827F84B2027
%F8277DFD13FF4B4BFCFCFCC2FFFCFCFC68F8FD07FF7C4BFD05F827F827F8
%272752527DA1FD0BFFF852FF7DF8FD05FF7D5227527DCFFD15FF5220FCFC
%FCBBFFFCFCFC6827FD06FFFD13F82727A8FD07FF5251FF7D27FD20FF514B
%FCFCFCC2FFFCFCFC6EF8FD05FF27FD16F82027A8FD04FF2752FFA8F8FD20
%FF5226FCFCFCBCFFFCFCFC6827FD05FF27FD19F852A8FFFF7DF8FFFFF8FD
%20FF274BFCFCFCC2FFFCFCFC6EF8FD05FFFD1CF87CFF7DF8FFFFF8A8FD1F
%FF5220FCFCFC99FFFCFCFC6827FD05FF52FD1CF852FFF8FFFF277DFD1FFF
%274BFCFCFCC2FFFCFCFC6FF8FD06FF27FD1CF87DF87DFF2752FD1FFF5220
%FCFCFCBBFFFCFCFC6827FD07FF52FD1BF827277CFF524BFD06FFA85252F8
%FD0427527DFD0FFF4B4BFCFCFCC2FFFCFCFC68F8FD09FF7D5227522727FD
%16F827FF5227FFFFA87D27FD0CF852FD0DFF5220FCFCFCBBFFFCFCFC6827
%FD0FFFA1FD15F827FFA8F852FD11F82752A8FD0AFF514BFCFCFCC2FFFCFC
%FC6EF8FD11FF27FD0EF827277D2727F8FFFFFD16F8207DFD08FF5226FCFC
%FCBCFFFCFCFC6827FD12FFA852FD0AF827A8FD05FF277DFFF827FD16F852
%FD07FF274BFCFCFCC2FFFCFCFC6EF8FD15FFA17D27522752277DA8FD07FF
%2752FF52274BFD16F8A1FD06FF5220FCFCFC99FFFCFCFC6827FD25FF7DF8
%FF7627FFA8FD15F8A1FD06FF274BFCFCFCC2FFFCFCFC6FF8FD25FFA8F8A8
%FFF8FFFFFF27FD13F8A7FD06FF5220FCFCFCBBFFFCFCFC6827FD26FFF87D
%FF2752FFFFFF7D27FD10F827FD07FF4B4BFCFCFCC2FFFCFCFC68F8FD26FF
%52F8FF5127FD05FF76FD0FF8FD08FF5220FCFCFCBBFFFCFCFC6827FD26FF
%A8F8A8A8F8FD07FF7D52FD09F82752FD09FF514BFCFCFCC2FFFCFCFC6EF8
%FFFFFF7D5227527DFD1FFFF876FF2752FD0AFFA7FD057DFD0CFF5226FCFC
%FCBCFFFCFCFC6827FF7DFD07F827A8FD1CFF5227FF5227FD04FF527DFD16
%FF274BFCFCFCC2FFFCFCFC6EF827FD0AF827A84B27F8272752A8FD13FFA8
%F8A1FFF87DFFFF7DF827FD16FF5220FCFCFC99FFFCFCFC6827FD15F8A1FD
%12FF27527DF827FF7DF8F87DFD16FF274BFCFCFCC2FFFCFCFC6FFD17F851
%A8FD10FF7DFD04F852F844F8A7FD16FF5220FCFCFCBBFFFCFCFC68FD18F8
%27A8FD0FFF7DF8F85220F844FCF8FD17FF4B4BFCFCFCC2FFFCFCFC68FD19
%F84BFD0EFF7DF8442027F868FCFCF8FD17FF5220FCFCFCBBFFFCFCFC68FD
%1AF8A15127277DFD08FF7D2744FCF82744FCFCFCF8FD17FF514BFCFCFCC2
%FFFCFCFC6EFD1BF826444BF852FD06FFA82020FCFCF8F8FD04FCF8FD17FF
%5226FCFCFCBCFFFCFCFC68FD1AF827FCFCFC93F852FD05FF2720FCFCFCF8
%6FFD04FCF8FD17FF274BFCFCFCC2FFFCFCFC6EFD1AF820FD04FC4BF8F827
%FFFF7DF8FD04FC2644FD04FCF8FD17FF5220FCFCFC99FFFCFCFC6827FD16
%F874F8F893FD04FC6827742727FF274BFD04FC444BFCFCFC93F8FD06FF7D
%A8A14B2776FD0BFF274BFCFCFCC2FFFCFCFC6FFD17F87B9EF8F8FD05FCF8
%C69EF852F88CFD04FC4B20FCFCFC44F8F827F827F8F8F827F84B20F8A7FD
%0AFF5220FCFCFCBBFFFCFCFC6827FD16F874C69E27F8FD04FCF8C6C65027
%F8FD05FC20F868FCFC27F875747B74C7F8F820B4FCB4F87DFD0AFF4B4BFC
%FCFCC2FFFCFCFC68FD17F84BC6C69EF820FCFCFCF8C6C6C6F826FCFC8CFC
%FC20F827FCFCF89EFD04C6F8F844FD04FCF8F8CFFD09FF5220FCFCFCBBFF
%FCFCFC6827FD13F827F8F8F8C6C6C67AF868FC8CF8C6C6C64B20FC684BFC
%FCF86FF893204BFD04C674F868FD04FCB5F82751FD09FF514BFCFCFCC2FF
%FCFCFC6EFD14F820FC20F84AC6C6C62627FC6EF8C6C6C6F820FC27F8FC8C
%F88C2720F89EC6C6C69E2044FD05FC20272651FD09FF5226FCFCFCBCFFFC
%FCFC68FD14F820FCFC44F850C6C6C7F89368F8C6C650F8F8FCF8F8446FF8
%FC20F87AFD04C627F8FD05FC68F874277CFD09FF274BFCFCFCC2FFFCFCFC
%6EFD15F8FCFCFC44F89EC6C62620FCF89E9EF844F844F84A20F86FFC4AF8
%FD04C675F8FD05FC68F82651F8FF7D27FD05F876A85220FCFCFC99FFFCFC
%FC68FD15F88CFCFCFC204BC6C65027FC274A2726FC2027F8C7F827FCFC68
%27C6C6C69FF893FD04FC4427269FF852FD0AF8274BFCFCFCC2FFFCFCFC6F
%FD15F86EFCFCFC8CF8C6C69EF8FC4420F8FCFC8CF851C62720FCFC6EF8C6
%C67BF86FFCFCFC6FF8F8509FF827FD0CF820FCFCFCBBFFFCFCFC68FD16F8
%FD04FC2674C6C6F8FC93F86FFCFCFCF89EC69EF88CFC6827C651F86FFCFC
%6E27F8519E7BFD0FF827FCFCFCC2FFFCFCFC68FD16F820FCFCFCF851C6C6
%F86868F8FCFCFC6EF8C6C6C62626FC4B2626F8926826F8F826C6C64BF84A
%FD0EF820FCFCFCBBFFFCFCFC68FD10F893686F2027F8F8F893FC4B4AC6C6
%27686F20FCFCFC26F8C6C6C67BF8FCF8F8F827F827267BC6C67427F8938C
%FD0EF827FCFCFCC2FFFCFCFC6EFD11F8FD05FC20F8F820F8279EC6F8FC44
%27FCFCFC27F851C6C6C6F88CF8264B509FC6C69E75F8F844FCFC6EFD0EF8
%20FCFCFCBCFFFCFCFC68275227FD0BF852A82720FD05FC20277A5120F8F8
%F8686FF8FCFCFCF875F8C6C6C6F84BF8C69E7B5051F8F8206FFD04FC20FD
%0EF827FCFCFCC2FFFCFCFC6EF8FFFFA85227F827F827F82752CFFFFFA8F8
%20FD05FCF84BC6C6C67520F8F8F88CFC68F8C6274AC6C626FD05F820206E
%8CFD05FC20FD0FF820FCFCFC99FFFCFCFC6827FD10FF7D2720B4FCFCFC93
%F89FFD05C675F8278C6FF8C674F8C6C6F827FD0BFCB4FD11F84BFCFCFCC2
%FFFCFCFC6FF8FD05FF7D7652A8FD08FF52F8F84AFCFCFC4AF8FD07C626F8
%4426C6C6F8519EF868FD0AFC6FFD12F820FCFCFCBBFFFCFCFC6827FFFFA8
%27FD05F827527DFFFF7D7D27FD05F8204B6827F8FD07C650F8F8C6C65126
%75F8FD07FC8C6F26F8F87B26FD10F827FCFCFCC2FFFCFCFC68F8FF7DFD12
%F851504BF827F8F8F8FD07C6F8F8C6C67427F84A686E444AF826F8F8F84B
%74C6C6FD11F820FCFCFCBBFFFCFCFC6827A8FD10F8279EFD07C69E27F8A5
%FD05C6C7F8A5C69FF8F8F82720274A5174A5FD05C6A5FD11F827FCFCFCC2
%FFFCFCFC6EF827FD0FF875FD08C65026F827F84B9EC6C6C64AF8207BFD04
%F8267BFD0AC6FD12F820FCFCFCBCFFFCFCFC6827FD11F8274AC7C6C6C67B
%F82744B4FC9320F8F84B26F82627F8F84420444BF82774FD06C6C726FD12
%F827FCFCFCC2FFFCFCFC6EFD13F826F8F8F820F84AFD06FC8C682020F8C6
%C6C6F8FC44F8FCFC44F8F827507B5027F82744FD11F820FCFCFC99FFFCFC
%FC6827FD10F826C7C6C65027F8276893FD07FCB5F8A5C6C6C6F8FCFCF893
%FCFCFC6F202720272093FC6FFD11F84BFCFCFCC2FFFCFCFC6FFD0FF8279E
%C6C6C67420F8272020F8F8204A6892FC6E2027FD04C6F8FCFC20F868FD0A
%FC44FD11F820FCFCFCBBFFFCFCFC6827FD0EF8265174C67427F84BFD04FC
%8C4B2027F8F8F82026C6C6C67427FCFC2027F84B8CFD07FC8C27FD11F827
%FCFCFCC2FFFCFCFC68FD15F86EFD08FC20F844FC204BC6C6C626F8FCFC4A
%2626F8F8206E8CFCFC9244FD13F820FCFCFCBBFFFCFCFC682751FD12F84B
%FD05FCB4684BF82768FCFC274AC6C6C7F827FCFC20519EF8745120FD04F8
%27F8276827FD0FF827FCFCFCC2FFFCFCFC6EF8FFFD15F826F8F8F8202092
%FD04FCF87BC6C626F8F8FCFC4A26C62651FD07C67BF86FFC4AFD0EF820FC
%FCFCBCFFFCFCFC68275227FD13F87B7451F8B4FD06FC8CF850C650F8F827
%FCFC4A51C67BF89FFD07C64BF8FCFC27FD0DF827FCFCFCC2FFFCFCFC6EFD
%15F89EC6C6264AFD07FC20F87B50FD04F8FCFC274AC69EF8F8279EFD05C6
%9EF868FC8CFD0DF820FCFCFC99FFFCFCFC68FD14F827C6C6C6F868FD06FC
%4BF8F874FD05F820B5F8A5C6C6F893F8F8207B9EC6C6C626F8204B20FD0C
%F84BFCFCFCC2FFFCFCFC6FFD14F874C69E51F8FD06FC27FD0AF844F89EC6
%C62768FC20FD04F8272627FD10F820FCFCFCBBFFFCFCFC68FD14F89F4AF8
%F8F8FD04FC6827F87BFD0BF875C6C6F86FFCFCFD16F8274BFCFCFCC2FFFC
%FCFC68FD15F82752A7F8FCFC8C20F826C626FD0CF8C6C62044FCFC4AFD14
%F8525220FCFCFCBBFFFCFCFC68FD14F8A8FFFF7DF8FC4BF8279EC69E27FD
%0BF82751C6F8278CFC8CFD13F852FF514BFCFCFCC2FFFCFCFC6EFD13F87D
%FFFFFF52F827F8F874C6C627FD0EF89EF8F82068FCFD12F827FFFF5226FC
%FCFCBCFFFCFCFC68FD12F852FD04FF4BFD04F875C651FD0FF827FD04F844
%27FD11F87DFFFF274BFCFCFCC2FFFCFCFC6EFD11F827FD05FF27FD04F826
%26FD28F8A8FFFF5220FCFCFC99FFFCFCFC68FD10F827FD06FFFD2EF827FF
%FFFF274BFCFCFCC2FFFCFCFC6FFD0FF876FD07FFFD2EF852FFFFFF5220FC
%FCFCBBFFFCFCFC68FD0DF827A8FD07FFA8FD2DF827FD04FF4B4BFCFCFCC2
%FFFCFCFC68FD0CF852FD09FF52FD2DF852FD04FF5220FCFCFCBBFFFCFCFC
%6827FD07F82727A8FD0BFF52FD2CF827FD05FF514BFCFCFCC2FFFCFCFC6E
%F8FFA8FD047DFD0FFFFD2DF8FD06FF5226FCFCFCBCFFFCFCFC6827FD15FF
%FD2CF8A8FD06FF274BFCFCFCC2FFFCFCFC6EF8FD14FFA7FD2CF8FD07FF52
%20FCFCFC99FFFCFCFC6827FD14FF7DFD2CF8FD07FF274BFCFCFCC2FFFCFC
%FC6FF8FD14FF7DFD2BF827FD07FF5220FCFCFCBBFFFCFCFC6827FD14FF7D
%FD2BF87CFD07FF4B4BFCFCFCC2FFFCFCFC68F8FD15FFFD2BF8FD08FF5220
%FCFCFCBBFFFCFCFC6827FD15FF52FD09F827275227FD1CF827FD08FF514B
%FCFCFCC2FFFCFCFC6EF8FD16FF52FD07F852FD04FFA727FD15F852FD04F8
%27FD08FF5226FCFCFCBCFFFCFCFC6827FD18FF52524B527DFD07FFA827FD
%13F87DFFFD04F87DFD08FF274BFCFCFCC2FFFCFCFC6EF8FD25FF7CFD12F8
%A8FF76FD04F8FD09FF5220FCFCFC99FFFCFCFC6827FD26FF27FD11F8FFFF
%FD04F827FD09FF274BFCFCFCC2FFFCFCFC6FF8FD26FFA8FD11F8A751FD04
%F87DFD09FF5220FCFCFCBBFFFCFCFC6827FD27FF52FD10F827FD04F827FD
%0AFF4B4BFCFCFCC2FFFCFCFC68F8FD28FF52FD07F827FD0CF852FD0AFF52
%20FCFCFCBBFFFCFCFC8CF8A8FD28FFA852FD0427A8FF7DFD0BF8FD0BFFF8
%6FFCFCFCC2FFFD04FC2027FD31FF52FD09F87DFD0AFF5120FD04FCBCFFFD
%04FCB4F827A8FD30FFA8FD07F827FD0AFF4BF868FD04FCC2FFFD06FC20F8
%F85227522752275227522752275227522752275227522752275227522752
%275227522752275227522752275227522752274BFD06F827522752275227
%522727F82768FD05FC99FFFD07FC8C6F204B444B204B444B204B444B204B
%444B204B444B204B444B204B444B204B444B204B444B204B444B204B444B
%204B444B204B444B204B444B204B444B204B444B4493FD07FCC2FFFD52FC
%BBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
365.667 326.1309 m
212.5957 326.1309 L
212.5957 564.2417 L
365.667 564.2417 L
365.667 326.1309 L
fu0 0 0 0 k
220.3809 548.3535 m
220.2144 465.187 l
220.3809 343.5195 l
221.2144 334.1875 229.8809 333.6875 v
349.0479 333.6875 l
357.0479 334.1855 357.8809 343.5195 v
357.8809 547.8535 l
357.5479 555.687 347.8809 556.687 v
229.5474 556.687 l
222.0474 556.8535 220.3809 548.3535 v
f0 1 1 0 k
248.0474 429.52 m
251.7144 423.688 256.3809 420.354 v
261.0474 417.0195 254.8809 417.8535 y
244.7144 409.5195 l
245.2144 403.3535 l
253.5474 397.0195 l
262.3809 392.5195 l
265.6309 390.1875 l
265.3809 385.3535 l
265.0474 380.5195 l
265.5474 378.6855 266.3809 378.5195 v
267.2144 378.3535 272.8809 379.1875 273.3809 379.1875 c
273.8809 379.1875 284.3809 383.0195 284.8809 383.0195 c
285.3809 383.0195 298.5479 381.1875 y
308.2139 375.3535 311.2139 375.1875 v
314.2139 375.0195 319.5479 374.3535 321.8809 375.3535 c
324.2139 376.3535 332.3799 382.0195 333.7139 382.6875 c
335.0479 383.3535 341.7139 388.5195 y
339.3809 403.5195 l
335.8809 414.5195 l
335.0479 431.02 l
331.8809 433.812 l
335.7139 441.687 l
334.8809 446.062 l
335.7139 449.8535 333.3809 451.187 v
331.0479 452.5205 327.3809 449.3535 y
323.0479 446.52 322.3809 446.3535 v
321.7139 446.187 311.3809 448.8535 y
312.5479 454.52 312.3809 458.3535 v
312.2139 462.187 312.8818 466.6875 313.0479 468.0205 c
312.2139 468.854 311.7139 468.0205 v
311.2139 467.187 306.8799 463.3535 305.7139 462.187 c
304.5479 461.0205 302.0479 458.3535 301.5479 457.187 c
300.7559 459.062 301.1309 460.437 v
301.5059 461.812 301.8809 465.062 y
295.5059 459.437 293.3809 456.687 v
291.2559 453.937 289.3809 448.687 289.0059 446.312 c
282.8809 447.437 l
279.7559 453.562 l
278.8809 457.187 275.1309 458.187 v
271.3809 459.187 269.6309 458.312 268.7559 456.187 c
267.8809 454.062 265.2559 454.812 y
259.6309 457.437 l
254.8809 447.062 l
254.3809 442.562 l
246.0059 434.312 l
244.6309 430.062 l
248.0474 429.52 l
f276.3809 518.687 m
272.2559 514.937 263.5059 515.062 v
254.7559 515.187 248.8809 516.312 248.5059 516.312 c
249.5059 517.437 l
253.5059 519.812 255.7559 522.562 v
258.0059 525.312 260.7559 527.812 264.5059 528.187 c
271.5059 533.562 l
269.8809 539.062 270.3809 543.187 v
270.8809 547.312 273.6309 554.312 y
276.2559 551.312 277.2559 550.187 v
278.2559 549.062 282.2559 543.562 283.0059 542.937 c
283.7559 542.312 289.7559 544.687 y
291.7559 548.312 292.6309 549.687 v
293.5059 551.062 295.0059 554.562 y
298.1309 550.187 299.2559 548.312 v
300.3809 546.437 303.0059 542.187 302.3809 532.812 c
307.3809 535.812 307.7559 536.062 v
308.1309 536.312 312.1309 538.312 312.7559 538.312 c
313.3809 538.312 320.6309 540.312 y
326.8809 539.937 328.5059 540.187 v
330.1309 540.437 334.0059 539.562 y
331.1309 537.437 330.5059 536.062 v
329.8809 534.687 326.1309 528.937 321.0059 527.062 c
321.3809 518.187 l
324.1309 516.437 325.3809 514.437 v
322.7559 509.062 315.7559 507.437 v
308.7559 505.812 300.0059 508.062 295.0059 513.437 c
290.8809 512.187 l
287.3809 514.062 l
285.1309 514.937 l
277.5059 517.812 276.3809 518.687 v
f0 0.2 1 0 k
284.2559 518.562 m
279.1309 524.312 279.0059 527.437 v
277.0059 529.937 272.8809 532.562 v
268.7559 535.187 260.5059 536.812 258.3809 537.187 c
257.3809 537.187 258.0059 536.437 v
258.6309 535.687 263.2559 529.687 264.1309 528.312 c
265.0059 526.937 274.0059 519.062 281.5059 516.312 c
282.2559 515.812 283.2559 516.437 v
284.2559 517.062 284.2559 518.562 y
f281.3809 534.687 m
281.3809 538.687 282.3809 542.437 v
283.3809 546.187 285.7559 551.937 y
288.2559 547.312 288.8809 546.312 v
289.5059 545.312 293.0059 538.937 293.2559 534.187 c
292.1309 532.312 291.6309 530.687 v
291.1309 529.062 290.8809 526.062 y
283.6309 532.937 281.3809 534.687 v
f290.5059 526.687 m
291.0059 530.812 292.1309 532.312 v
293.2559 533.812 294.5059 537.187 294.8809 539.562 c
297.2559 536.312 298.0059 534.437 v
298.7559 532.562 299.1309 529.312 y
294.5059 524.687 293.7559 521.937 v
290.5059 526.687 l
f308.1309 532.937 m
308.8809 536.437 l
308.2559 536.687 l
309.2559 540.312 313.0059 542.312 v
316.7559 544.312 323.3809 545.437 y
321.1309 541.562 320.8809 540.812 v
320.6309 540.062 318.3809 536.562 315.0059 534.687 c
311.6309 532.812 308.1309 532.937 y
f305.5059 525.687 m
314.6309 524.062 320.5059 526.562 v
325.3809 525.562 326.5059 524.687 v
327.6309 523.812 328.2559 523.312 y
325.0059 519.062 317.6309 517.312 v
310.2559 515.562 304.0059 517.437 300.3809 518.937 c
304.8809 522.937 305.5059 525.687 v
f305.8809 440.187 m
310.6309 444.562 311.3809 448.437 v
314.2559 449.312 318.1309 449.437 v
322.0059 449.562 325.0059 450.062 y
322.1309 445.562 321.0059 443.687 v
319.8809 441.812 313.8809 432.187 305.3809 429.187 c
306.2559 435.437 305.8809 440.187 v
f279.7559 454.062 m
284.2559 454.687 288.6309 445.937 v
288.6309 442.312 l
282.3809 432.812 l
280.8809 437.687 280.5059 439.187 v
280.1309 440.687 280.2559 441.937 280.3809 442.812 c
280.5059 443.687 280.7559 450.812 279.7559 454.062 c
f263.3809 442.437 m
262.3809 445.437 262.2559 447.687 v
262.1309 449.937 261.6309 455.437 y
266.7559 451.187 267.7559 450.187 v
268.7559 449.187 273.5059 445.812 275.3809 439.687 c
277.2559 433.562 277.3809 428.062 276.3809 424.812 c
269.6309 426.687 l
270.5059 431.437 268.6309 436.062 v
266.7559 440.687 263.3809 442.437 y
f295.2559 410.9375 m
292.5059 410.6875 290.7559 412.4375 v
289.0059 414.1875 289.1309 420.062 289.2559 422.687 c
289.3809 425.312 291.2559 431.312 y
292.7559 435.687 l
294.5059 442.687 l
296.6309 438.687 297.3809 437.062 v
298.1309 435.437 300.8809 430.562 301.2559 426.187 c
301.6309 421.812 299.8809 415.8125 298.8809 414.6875 c
297.8809 413.5625 296.7559 413.0625 y
295.8809 411.3125 295.2559 410.9375 v
f289.8809 414.0625 m
289.6309 416.4375 286.0059 419.6875 v
282.3809 422.937 280.2559 423.687 276.3809 424.812 c
272.5059 425.937 264.3809 428.062 263.5059 428.437 c
262.6309 428.812 263.1309 427.937 263.7559 427.312 c
264.3809 426.687 266.5059 422.937 267.6309 421.437 c
268.7559 419.937 271.8809 415.5625 275.8809 412.9375 c
279.8809 410.3125 284.6309 409.8125 287.1309 410.3125 c
289.6309 410.8125 290.1309 412.6875 289.8809 414.0625 c
f275.0059 413.6875 m
270.8809 417.1875 l
266.6309 416.5625 264.0059 417.3125 v
261.3809 418.0625 259.6309 418.1875 257.5059 417.6875 c
255.3809 417.1875 248.3809 412.1875 y
245.3809 407.8125 l
244.0059 401.4375 l
249.5059 398.3125 l
256.2559 400.8125 l
259.3809 403.0625 l
262.5059 405.6875 l
261.8809 406.4375 l
265.7559 409.5625 268.8809 411.1875 v
272.0059 412.8125 275.0059 413.6875 y
f268.0059 397.5625 m
262.6309 397.5625 260.6309 397.3125 v
258.6309 397.0625 254.6309 391.9375 y
254.3809 386.8125 l
254.6309 384.9375 l
257.3809 386.5625 258.7559 386.8125 v
260.1309 387.0625 265.3809 389.4375 265.6309 390.1875 c
266.3809 395.1875 268.0059 397.5625 v
f271.2559 384.9375 m
270.5059 381.9375 270.7559 381.1875 v
271.0059 380.4375 270.8809 376.4375 y
274.1309 374.5625 l
279.2559 379.0625 l
281.7559 386.0625 l
283.7559 390.9375 l
282.7559 392.8125 l
277.3809 387.1875 271.2559 384.9375 v
f290.1309 412.9375 m
287.2559 410.1875 286.2559 408.0625 v
285.2559 405.9375 285.0059 399.4375 284.7559 398.1875 c
284.5059 396.9375 283.6309 388.1875 y
284.3809 387.5625 l
286.7559 388.5625 l
294.0059 398.1875 l
294.7559 403.5625 l
295.7559 408.3125 295.2559 410.9375 v
291.5059 413.6875 290.1309 412.9375 v
f300.7559 391.9375 m
301.3809 386.3125 302.6309 383.8125 v
303.8809 381.3125 308.2559 377.5625 y
309.3809 380.6875 l
308.6309 385.8125 l
309.0059 393.3125 307.5059 397.3125 v
306.0059 401.3125 303.8809 403.5625 y
301.5059 405.4375 l
302.1309 400.9375 302.0059 398.3125 v
301.8809 395.6875 301.2559 393.3125 300.7559 391.9375 c
f305.0059 402.8125 m
308.0059 396.8125 308.0059 396.0625 v
308.0059 395.3125 309.6309 394.3125 y
315.2559 391.5625 317.3809 390.5625 v
319.5059 389.5625 326.7559 387.0625 y
330.7559 387.9375 l
328.7559 390.5625 l
327.8809 392.4375 l
325.8809 398.9375 323.0059 400.8125 v
320.1309 399.4375 315.3809 399.6875 v
310.6309 399.9375 305.0059 402.8125 y
f299.2559 414.1875 m
311.7559 415.6875 315.2559 416.3125 v
318.7559 416.9375 326.0059 420.062 327.2559 420.937 c
328.5059 421.812 328.7559 419.6875 y
325.7559 411.4375 l
321.7559 407.4375 315.1309 407.5625 v
308.5059 407.6875 300.2559 413.1875 y
299.2559 414.1875 l
f303.5059 423.812 m
304.7559 428.437 l
311.1309 428.312 320.2559 432.187 v
329.3809 436.062 333.1309 439.437 334.8809 446.062 c
337.1309 446.562 337.3809 443.437 v
337.6309 440.312 331.8809 433.812 y
327.8809 429.437 320.5059 426.687 v
313.1309 423.937 304.3809 423.562 303.5059 423.812 c
f*u
1 D
0.65 0.53 0.51 1 k
308.6914 537.1196 m
308.499 537.0664 303.916 535.73 297.3525 528.4102 c
290.7578 521.0532 290.4326 514.0088 290.4229 513.7124 C
290.3916 512.8237 L
291.2646 512.9912 L
291.5264 513.0415 297.7412 514.3037 303.4365 521.4971 c
308.249 527.5762 309.5293 535.979 309.582 536.334 C
309.7402 537.4111 L
308.6914 537.1196 L
f0 D
298.4082 527.4639 m
302.8174 532.3813 306.2568 534.4536 307.9355 535.2681 C
307.3965 532.7275 305.8438 526.8218 302.3252 522.377 c
298.2461 517.2241 293.8516 515.2969 291.9619 514.6626 C
292.2891 516.7778 293.5518 522.0474 298.4082 527.4639 C
f*U
*u
1 D
230.3022 557.3955 m
224.4409 557.3955 219.6724 552.627 219.6724 546.7656 C
219.6724 343.6074 L
219.6724 337.7461 224.4409 332.9785 230.3022 332.9785 C
347.96 332.9785 L
353.8213 332.9785 358.5898 337.7461 358.5898 343.6074 C
358.5898 546.7656 L
358.5898 552.627 353.8213 557.3955 347.96 557.3955 C
230.3022 557.3955 L
f0 D
221.0894 343.6074 m
221.0894 546.7656 L
221.0894 551.8457 225.2222 555.9785 230.3022 555.9785 C
347.96 555.9785 L
353.04 555.9785 357.1719 551.8457 357.1719 546.7656 C
357.1719 343.6074 L
357.1719 338.5273 353.04 334.3965 347.96 334.3965 C
230.3022 334.3965 L
225.2222 334.3965 221.0894 338.5273 221.0894 343.6074 C
f*U
276.3398 537.8174 m
276.3604 537.4082 276.8965 527.7197 280.9575 521.6274 c
285.085 515.4365 290.8672 514.522 291.1113 514.4858 C
291.3193 515.8877 L
291.2646 515.896 285.8994 516.769 282.1377 522.4136 c
279.2456 526.751 278.228 533.2622 277.8994 536.2646 C
279.5776 534.9219 283.2676 531.9707 Y
284.3213 531.1313 L
287.1045 528.938 290.916 525.9336 292.8975 521.4028 C
294.1963 521.9712 L
292.0723 526.8267 287.9365 530.0874 285.1992 532.2446 C
284.1611 533.0703 L
276.2568 539.3936 L
276.3398 537.8174 L
f285.0557 552.6133 m
285.0332 552.5581 282.8613 547.0317 281.6982 542.8779 c
280.5117 538.6396 280.8267 534.3149 280.8408 534.1328 C
282.2539 534.2412 L
282.2529 534.2559 282.2139 534.7979 282.2139 535.6694 c
282.2139 537.2524 282.3428 539.9224 283.0635 542.4961 c
283.8486 545.3022 285.0947 548.7212 285.8125 550.6265 C
286.8486 548.6445 288.752 545.0557 289.9463 543.145 c
291.4004 540.8193 292.5225 537.1519 292.5225 534.8418 c
292.5225 534.6899 292.5176 534.5435 292.5068 534.4038 C
293.9209 534.3032 L
294.1035 536.855 292.8594 541.1587 291.1484 543.896 c
289.5166 546.5073 286.376 552.6157 286.3447 552.6772 C
285.6299 554.0708 L
285.0557 552.6133 L
f294.3389 540.0205 m
294.3389 538.8521 292.8936 534.3101 291.6104 532.2246 c
290.1982 529.9282 290.0137 526.21 290.0068 526.0527 C
291.4229 525.9878 L
291.4238 526.0229 291.5986 529.5 292.8174 531.4824 c
293.8008 533.0806 294.8516 535.9116 295.3896 537.9795 C
296.2295 536.4976 297.2656 534.6689 Y
297.7891 533.7534 298.3682 530.9136 298.3682 529.7671 c
298.3682 529.6489 298.3623 529.5483 298.3486 529.4702 C
299.7471 529.2368 L
299.9521 530.4644 299.2041 534.1343 298.4961 535.3721 C
294.3389 542.7075 L
294.3389 540.0205 L
f256.6831 536.7183 m
256.7329 536.6616 261.6807 531.0479 263.6353 528.2783 c
265.6948 525.3604 275.9785 516.4468 287.1299 513.3032 C
287.3027 512.6279 287.6729 510.9683 287.6729 509.0205 c
287.6729 504.9482 289.6104 484.0308 298.5635 463.4048 C
299.8643 463.9692 L
291.0068 484.373 289.0889 505.0063 289.0889 509.0205 c
289.0889 511.7627 288.4199 513.9692 288.3916 514.062 C
288.2764 514.436 L
287.8984 514.5381 L
276.9346 517.4834 266.7964 526.2578 264.7935 529.0957 c
263.3882 531.0864 260.6035 534.3623 258.9863 536.2319 C
261.3042 535.8813 265.4492 535.1201 269.3008 533.689 c
274.8516 531.627 278.2734 526.9839 278.3071 526.9375 C
279.4546 527.769 L
279.3066 527.9736 275.7598 532.8013 269.7939 535.0176 c
263.9438 537.1914 257.5557 537.8643 257.2866 537.8921 C
255.4844 538.0767 L
256.6831 536.7183 L
f273.0449 554.7534 m
273.0317 554.7148 271.6875 550.8384 270.1987 545.5454 c
268.6543 540.0547 271.1099 533.2314 271.2153 532.9434 C
272.5464 533.4302 L
272.5278 533.4814 271.1118 537.4229 271.1118 541.5371 c
271.1118 542.7627 271.2373 544.0034 271.563 545.1616 c
272.5425 548.6445 273.4487 551.4766 273.958 553.019 C
274.8066 551.9087 276.1704 550.1704 277.3584 548.8745 c
279.2207 546.8433 281.4053 543.8105 281.6885 542.5332 C
283.0732 542.8408 L
282.667 544.6665 279.9932 548.0981 278.4033 549.8325 c
276.6172 551.7808 274.3081 554.9097 274.2852 554.9409 C
273.4868 556.0239 L
273.0449 554.7534 L
f294.5498 554.9321 m
294.5381 554.9014 293.3945 551.8223 291.9648 549.7568 c
290.4209 547.5278 289.4131 544.3672 289.3721 544.2339 C
290.7236 543.8071 L
290.7334 543.8374 291.71 546.8994 293.1299 548.9502 c
294.0771 550.3179 294.8818 552.0352 295.3721 553.1836 C
296.415 551.626 298.3369 548.7324 299.6094 546.6509 c
300.7979 544.7065 301.9482 540.6855 301.9482 536.7017 c
301.9482 535.1606 301.7754 533.6255 301.3672 532.2183 C
302.7285 531.8228 L
304.3262 537.3276 302.6455 544.4009 300.8184 547.3901 c
298.9971 550.3701 295.833 555.0381 295.8008 555.085 C
295.0264 556.2261 L
294.5498 554.9321 L
f257.9082 525.5483 m
255.4722 523.0903 L
253.3984 520.8638 251.2539 518.561 246.7725 516.6733 C
247.0474 515.312 L
247.0933 515.312 251.7124 515.3032 255.9395 514.6528 c
258.1294 514.3164 269.4336 512.8999 276.9507 518.1045 C
276.144 519.2695 L
269.0684 514.3711 258.2515 515.7314 256.1553 516.0537 c
253.9033 516.4004 251.6006 516.5669 249.8667 516.6494 C
252.9604 518.3906 254.8535 520.3467 256.5093 522.1245 C
258.8535 524.4927 L
261.7764 527.1079 264.7246 527.311 264.7539 527.313 C
264.6772 528.728 L
264.5376 528.7207 261.2227 528.5146 257.9082 525.5483 C
f323.9854 546.2266 m
323.748 546.2056 318.123 545.686 313.7119 543.311 c
309.2227 540.8931 307.1563 536.5034 307.0703 536.3179 C
308.3564 535.7227 L
308.376 535.7642 310.3223 539.8755 314.3838 542.063 c
317.2627 543.6138 320.7646 544.3247 322.6807 544.6226 C
321.7041 543.0386 319.8984 540.2593 318.0195 538.1597 c
314.8955 534.6694 310.3682 533.5679 307.9473 533.2222 C
308.1484 531.8188 L
310.7598 532.1919 315.6523 533.3892 319.0762 537.2144 c
321.9268 540.4004 324.5527 544.9756 324.6631 545.1689 C
325.335 546.3452 L
323.9854 546.2266 L
f328.5088 540.8945 m
325.5625 540.731 320.5977 540.729 320.5479 540.729 C
320.5479 539.312 L
320.5977 539.312 325.6016 539.314 328.5869 539.4795 c
330.1738 539.5674 331.6621 539.4604 332.6934 539.3467 C
331.4512 538.0942 329.4297 535.9639 328.6016 534.5439 c
327.5723 532.7793 323.4023 527.8418 316.5498 526.21 c
309.8887 524.6235 305.3701 526.4868 305.3252 526.5054 C
304.7686 525.2021 L
304.9678 525.1167 309.7324 523.1294 316.8779 524.8311 c
323.9521 526.5156 328.4404 531.4541 329.8262 533.8301 c
330.9287 535.7207 334.666 539.3052 334.7041 539.3413 C
335.7012 540.2954 L
334.3447 540.5503 L
334.2324 540.5708 331.5596 541.064 328.5088 540.8945 c
f319.5068 525.9795 m
319.5596 525.9766 324.5039 525.6372 327.3906 523.3896 C
326.4893 522.3164 323.7324 519.6611 317.373 518.04 c
309.3125 515.9858 302.1113 518.3101 301.0811 519.4873 C
300.0146 518.5537 L
301.3848 516.9888 309.0615 514.4595 317.7227 516.667 c
326.4102 518.8813 328.8916 522.9897 328.9932 523.1636 C
329.2764 523.6494 L
328.8672 524.0356 L
325.7158 527.0127 319.8369 527.3804 319.5879 527.3945 C
319.5068 525.9795 L
f320.6357 517.522 m
322.8506 516.7061 324.0889 514.9805 324.5371 514.2417 C
323.3262 512.6953 317.8027 506.4424 308.4648 507.5571 c
297.9004 508.8184 295.3115 515.0171 295.2061 515.2808 C
293.8877 514.7627 L
294.0029 514.4678 296.8398 507.5176 308.2969 506.1499 c
319.7617 504.7813 325.9082 513.7012 325.9688 513.7915 C
326.1934 514.125 L
326.0225 514.4888 L
325.9629 514.6152 324.5264 517.5996 321.126 518.8521 C
320.6357 517.522 L
f305.0859 462.3594 m
306.3418 463.0146 L
294.4072 485.9043 295.4111 514.043 295.4229 514.3242 C
294.0068 514.3828 L
293.9951 514.0977 292.9717 485.5918 305.0859 462.3594 C
f*u
1 D
290.3613 430.6978 m
290.3135 430.5132 289.1807 426.1294 288.6807 422.9644 c
288.2676 420.3452 288.2178 412.5781 291.7158 410.7285 c
293.6006 409.7305 294.8682 410.084 295.5986 410.5586 c
296.5674 411.1836 297.6689 412.7344 297.4209 416.5664 c
297.2256 419.6074 295.9795 421.8462 294.6592 424.2163 c
293.6055 426.1108 292.5146 428.0688 291.7266 430.7222 C
291.001 433.1636 L
290.3613 430.6978 L
f0 D
292.3789 411.9805 m
290.5479 412.9492 289.8945 416.8477 289.8945 420.021 c
289.8945 421.0454 289.9619 421.9937 290.0811 422.7437 c
290.3467 424.4272 290.8057 426.4937 291.1729 428.0542 C
291.8779 426.3208 292.6826 424.854 293.4209 423.5269 c
294.7139 421.2036 295.8311 419.1973 296.0068 416.4746 c
296.0283 416.1484 296.0381 415.834 296.0381 415.5332 c
296.0381 413.6113 295.6123 412.2539 294.8291 411.748 c
294.0811 411.2637 293.084 411.6074 292.3789 411.9805 c
f*U
*u
1 D
261.9917 428.2476 m
262.0234 428.2075 265.1543 424.2485 266.6182 421.9712 c
268.0854 419.6875 273.437 412.0762 280.686 410.0059 c
284.625 408.8809 287.333 408.959 288.9639 410.2461 c
290.1309 411.166 290.6777 412.6719 290.5889 414.7188 C
290.585 414.8164 L
290.5537 414.9121 L
290.5029 415.0625 289.2549 418.6758 284.4453 421.9399 c
280.4102 424.6792 275.541 425.8354 272.6318 426.5269 C
271.23 426.8716 L
260.6147 429.9937 L
261.9917 428.2476 L
f0 D
281.0757 411.3691 m
274.3032 413.3027 269.21 420.5591 267.8105 422.7368 c
266.9263 424.1128 265.5059 426.0132 264.4531 427.3882 C
266.8442 426.6851 270.8647 425.5024 Y
272.3042 425.1479 L
275.1187 424.48 279.8296 423.3599 283.6494 420.7681 c
287.7334 417.9961 289.0088 414.9785 289.1748 414.5469 C
289.1787 414.457 289.1807 414.3672 289.1807 414.2793 c
289.1807 412.8965 288.8213 411.9395 288.085 411.3574 c
286.8555 410.3867 284.4971 410.3906 281.0757 411.3691 c
f*U
284.5088 403.4219 m
284.0996 397.9102 L
283.8213 393.6094 283.5322 389.1602 282.8721 387.0684 C
284.0986 386.4082 L
284.1406 386.4609 288.2783 391.5859 290.7314 394.2031 c
293.2119 396.8496 296.9609 400.8477 295.9189 411.0918 C
294.5088 410.9492 L
294.6279 409.7773 294.6826 408.6973 294.6826 407.6953 c
294.6826 400.4902 291.8428 397.459 289.6973 395.1719 c
288.2412 393.6172 286.2256 391.2227 284.7813 389.4785 C
285.1123 391.8359 285.3213 394.834 285.5146 397.8184 C
285.9199 403.2852 L
286.3799 408.0469 288.9541 410.1055 288.9805 410.127 C
288.1172 411.25 L
287.9912 411.1543 285.0322 408.834 284.5088 403.4219 C
f296.3662 411.9785 m
296.4346 411.9766 298.0293 411.8789 299.6006 409.166 c
300.791 407.1074 301.4092 402.0527 301.4092 398.3418 c
301.4092 396.6973 301.2881 395.3184 301.042 394.5781 C
299.5615 390.1387 298.7393 387.6719 V
298.5146 388.2129 298.2549 388.8086 297.9268 389.541 c
297.2236 391.1035 296.4287 392.875 295.8896 394.5684 c
295.4365 395.9922 295.3037 397.457 295.3037 398.6836 c
295.3037 400.418 295.5693 401.6836 295.5732 401.7051 C
294.1885 402.0039 L
294.1533 401.8398 293.3291 397.9434 294.5391 394.1387 c
295.1025 392.3672 295.916 390.5566 296.6338 388.959 c
297.3076 387.459 298.0049 385.9063 298.0049 385.3535 C
299.3857 385.1309 L
302.3857 394.1289 L
303.2988 396.8672 302.7715 406.5156 300.8271 409.875 c
298.8125 413.3555 296.4795 413.3965 296.3809 413.3965 C
296.3662 411.9785 L
f294.0215 443.6685 m
294.0117 443.6226 293.0166 439.0063 291.8779 435.7544 c
290.6855 432.3452 290.6729 429.1538 290.6729 429.02 C
292.0889 429.02 L
292.0889 429.0503 292.1064 432.1138 293.2158 435.2856 c
293.8809 437.1841 294.4775 439.4536 294.8828 441.1128 C
295.6719 439.0933 296.8428 436.1772 297.5801 434.7026 c
298.5771 432.7104 300.7168 428.4321 300.7168 423.8345 c
300.7168 423.0552 300.6553 422.2661 300.5156 421.4771 c
299.4824 415.6172 297.9697 414.3535 296.4902 413.8594 C
296.9385 412.5156 L
299.5313 413.3789 300.9717 415.9043 301.9121 421.231 c
302.9531 427.1304 300.0762 432.8813 298.8477 435.3374 c
297.71 437.6108 295.4004 443.7095 295.377 443.771 C
294.5264 446.0215 L
294.0215 443.6685 L
f286.2754 439.9028 m
284.7959 437.7837 282.9541 435.147 281.7236 432.1206 c
279.4404 426.4985 282.8184 421.4966 282.9639 421.2847 C
284.1318 422.0884 L
284.1084 422.1226 282.3643 424.7222 282.3643 428.1021 c
282.3643 429.2017 282.5479 430.3843 283.0381 431.5874 c
284.2061 434.4653 285.998 437.0298 287.4375 439.0913 c
287.9717 439.856 288.4414 440.5386 288.8408 441.1704 C
288.9844 440.3647 289.167 439.5181 289.3838 438.938 C
289.7412 438.0483 L
290.2725 436.7563 291.2168 434.4565 291.2168 433.0581 c
291.2168 432.9097 291.2061 432.772 291.1836 432.647 C
292.5781 432.3931 L
292.8906 434.1128 291.7842 436.8052 291.0518 438.5874 C
290.7109 439.436 L
290.248 440.6704 289.9219 443.5688 289.9189 443.5981 C
288.5244 443.6792 L
288.3311 442.8462 287.3789 441.4819 286.2754 439.9028 c
f302.2695 466.5723 m
302.0215 466.3726 296.1416 461.605 291.8018 455.4277 c
287.3604 449.1094 288.1426 442.5405 288.1777 442.2642 C
289.584 442.4429 L
289.582 442.4595 289.5293 442.9097 289.5293 443.6694 c
289.5293 445.7856 289.9346 450.3081 292.96 454.6128 c
295.7373 458.5645 299.2158 461.9604 301.3096 463.8584 C
300.8438 462.1982 300.3291 460.0361 300.3291 458.5161 c
300.3291 458.3857 300.333 458.2603 300.3408 458.1401 C
300.5371 456.5542 L
300.7695 454.8999 301.1309 452.3428 301.1309 449.4521 c
301.1309 445.2407 300.3652 440.3218 297.3242 436.4585 C
298.4375 435.5815 L
303.9395 442.5708 302.5381 452.5088 301.9404 456.752 C
301.7549 458.2339 L
301.6006 460.5625 303.3662 465.7383 303.3838 465.7905 C
304.1816 468.1128 L
302.2695 466.5723 L
f306.2539 463.5601 m
301.6445 459.6333 300.5762 456.0332 300.5322 455.8818 C
301.8945 455.4902 L
301.9043 455.5234 302.918 458.856 307.1738 462.481 c
309.3193 464.3091 310.9209 465.9302 312.0381 467.1553 C
311.6865 465.4551 311.3271 463.3706 311.3271 461.9297 c
311.3271 461.769 311.3311 461.6167 311.3408 461.4736 C
311.377 460.98 L
311.4814 459.6294 311.5342 458.3369 311.5342 457.1021 c
311.5342 449.1768 309.3887 443.6343 305.1357 440.5972 C
305.96 439.4429 L
311.3066 443.2622 313.6055 450.5449 312.791 461.0889 C
312.7549 461.5674 L
312.5986 463.9253 314.0527 469.6201 314.0674 469.6772 C
312.8066 470.269 L
312.7852 470.2393 310.625 467.2832 306.2539 463.5601 c
f301.5244 448.8755 m
301.5615 448.835 305.1797 444.7539 305.3389 436.0073 c
305.499 427.2251 300.875 421.356 300.8281 421.2983 C
301.9326 420.4097 L
302.1367 420.6626 306.9258 426.7163 306.7568 436.0327 c
306.5859 445.3618 302.7334 449.6553 302.5693 449.8335 C
301.5244 448.8755 L
f245.9834 431.2583 m
246.0151 431.2163 249.1973 427.0347 251.8511 424.0493 c
254.3965 421.186 261.4058 414.7168 271.5034 416.4883 C
271.2583 417.8848 L
261.8643 416.2363 255.2979 422.3052 252.9106 424.9907 c
251.2656 426.8413 249.4126 429.1606 248.2529 430.6411 C
250.1133 430.3511 252.6128 430.0991 255.7681 429.7856 C
257.144 429.6489 L
261.6167 429.2017 262.7412 427.2134 262.752 427.1929 C
264.0146 427.8364 L
263.96 427.9468 262.6123 430.5269 257.2847 431.0591 C
255.9082 431.1958 L
251.5962 431.6245 248.481 431.9341 246.7192 432.3745 C
244.7632 432.8638 L
245.9834 431.2583 L
f265.314 409.7715 m
262.1616 407.6152 260.5068 406.2949 260.438 406.2402 C
258.3965 404.6074 L
260.9839 404.9863 L
261.0391 404.9941 266.541 405.7773 270.4985 404.5117 c
276.5137 402.5879 281.396 402.2598 285.4248 403.5098 C
285.0049 404.8633 L
281.2627 403.7031 276.6592 404.0293 270.9302 405.8613 c
268.397 406.6719 265.3862 406.7188 263.3022 406.6152 C
264.0527 407.1621 264.9468 407.8027 266.1143 408.6016 c
269.1646 410.6895 275.3813 412.8281 275.4438 412.8496 C
274.9849 414.1914 L
274.7227 414.1016 268.5239 411.9688 265.314 409.7715 c
f254.3271 416.1133 m
246.0996 410.7656 L
247.9414 410.4863 L
247.9956 410.4785 253.4146 409.6543 255.5059 409.0098 C
255.876 408.8945 L
258.1123 408.2012 261.4922 407.1543 264.3374 407.6563 C
264.0913 409.0527 L
261.584 408.6094 258.4014 409.5957 256.2954 410.248 C
255.9229 410.3652 L
254.5088 410.7988 251.7944 411.291 249.9751 411.5938 C
251.7979 412.7793 255.1016 414.9258 Y
258.668 417.252 262.2847 416.9844 262.3208 416.9805 C
262.4424 418.3926 L
262.2759 418.4082 258.3198 418.7168 254.3271 416.1133 C
f248.7354 407.043 m
246.7349 405.209 245.0918 403.4063 245.0229 403.3301 C
243.9458 402.1465 L
245.5474 402.1445 L
245.5728 402.1445 248.1426 402.1387 249.8608 401.6699 C
250.1602 401.5859 L
252.3164 400.9746 258.0439 399.3477 263.4038 405.209 C
262.3579 406.166 L
257.5889 400.9492 252.6543 402.3516 250.5474 402.9492 C
250.2339 403.0371 L
249.2471 403.3066 248.0693 403.4355 247.1333 403.5 C
247.7954 404.1816 248.7031 405.0898 249.6934 405.998 c
251.5479 407.6973 255.8726 408.9941 255.916 409.0078 C
255.5127 410.3672 L
255.3228 410.3105 250.832 408.9648 248.7354 407.043 c
f260.8306 397.8867 m
259.6157 398.0879 258.0347 398.1133 256.9082 398.1016 C
257.894 399.5586 259.9678 402.623 Y
258.7939 403.418 L
254.1626 396.5723 L
255.5845 396.6465 L
255.6152 396.6484 258.6987 396.8047 260.5981 396.4883 c
262.1865 396.2227 275.5469 396.1191 281.4219 403.0625 C
280.3398 403.9785 L
275.2173 397.9238 263.0518 397.5156 260.8306 397.8867 c
f264.8394 389.7129 m
264.6729 385.0508 265.1709 380 265.1758 379.9492 C
265.3589 378.1191 L
266.4512 379.5996 L
266.4736 379.6309 268.7134 382.6445 270.8643 383.7207 C
271.5112 384.0352 L
274.5605 385.5039 282.6611 389.4043 285.376 396.4316 C
284.0537 396.9434 L
281.541 390.4395 273.8076 386.7148 270.896 385.3125 C
270.2305 384.9883 L
268.7847 384.2656 267.3848 382.875 266.4458 381.8164 C
266.3433 383.2578 266.2222 385.4219 266.2222 387.6992 c
266.2222 388.3516 266.2324 389.0098 266.2554 389.6621 c
266.4106 394.0117 268.7363 396.873 268.7598 396.9023 C
267.6699 397.8086 L
267.5615 397.6777 265.0122 394.5664 264.8394 389.7129 c
f256.1807 391.1309 m
255.6953 388.0566 254.8789 385.4238 254.8711 385.3984 C
254.252 383.416 L
255.9536 384.6074 L
255.9697 384.6172 257.5645 385.7285 258.7959 386.1914 C
259.8979 386.502 L
261.6323 386.9453 264.2534 387.6133 266.083 389.7227 C
265.0117 390.6504 L
263.4731 388.877 261.1113 388.2734 259.5479 387.877 C
258.2983 387.5176 L
257.77 387.3203 257.2212 387.0293 256.7134 386.7422 C
256.9888 387.8184 257.3247 389.2891 257.5811 390.9102 c
258.0352 393.7852 261.1572 396.6328 261.189 396.6602 C
260.2402 397.7129 L
260.0967 397.584 256.7139 394.5059 256.1807 391.1309 c
f275.7144 379.5605 m
275.0938 379.0645 L
274.2744 378.3809 273.6353 377.7578 273.1094 377.2168 C
273.0659 378.1289 272.9487 379.2344 272.5605 380.5547 c
272.2627 381.5664 272.1729 382.4414 272.1729 383.127 c
272.1729 384.1641 272.3784 384.7715 272.3818 384.7813 C
271.0483 385.2617 L
271.0181 385.1777 270.312 383.1758 271.2012 380.1543 c
271.9746 377.5234 271.6831 375.4805 271.6802 375.4609 C
271.2822 372.7949 L
272.9399 374.918 L
272.9512 374.9336 274.0908 376.3828 276.001 377.9766 C
276.5889 378.4453 L
278.7432 380.1348 282.3486 382.9609 283.749 392.9219 C
282.3457 393.1191 L
281.0244 383.7227 277.8291 381.2188 275.7144 379.5605 C
f256.0088 447.1216 m
256.0361 446.8267 256.6958 439.8384 258.0283 434.6772 c
259.437 429.2183 264.418 427.272 264.6294 427.1919 C
265.1338 428.5161 L
265.0889 428.5337 260.6221 430.2993 259.4004 435.0308 c
258.4629 438.6636 257.8584 443.3198 257.5874 445.6948 C
259.0508 444.6582 261.4736 442.9604 263.3291 441.7593 c
265.5078 440.3491 269.4063 435.7349 269.4063 429.5444 c
269.4063 428.7153 269.3359 427.8579 269.1826 426.9751 C
270.5791 426.7329 L
271.9482 434.604 267.3311 440.8569 264.0996 442.9487 c
261.314 444.752 257.1699 447.7324 257.1284 447.7622 C
255.8647 448.6719 L
256.0088 447.1216 L
f260.5269 455.8486 m
260.5381 455.8027 261.6724 451.2212 261.6724 447.687 c
261.6724 443.8062 263.5918 441.4927 263.6733 441.396 C
264.7568 442.3101 L
264.7402 442.3296 263.0894 444.3496 263.0894 447.687 c
263.0894 449.874 262.6953 452.3491 262.3604 454.0698 C
263.9707 452.6548 266.2437 450.6572 Y
266.9258 450.0884 L
268.9141 448.4717 273.0508 445.1079 275.2002 437.6577 c
276.0903 434.5698 276.3701 432.0493 276.3701 430.1011 c
276.3701 426.8491 275.5918 425.1938 275.5791 425.1675 C
276.8481 424.5366 L
276.9419 424.7241 279.1094 429.2192 276.5615 438.0503 c
274.2896 445.9272 269.9199 449.4805 267.8203 451.188 C
267.1851 451.7168 L
259.9756 458.0527 L
260.5269 455.8486 L
f269.1094 457.7231 m
267.1948 454.5889 267.1724 450.5249 267.1724 450.3535 C
268.5894 450.353 L
268.5894 450.3911 268.6157 454.1963 270.3188 456.9839 c
270.9966 458.0933 272.3394 458.1582 273.0796 458.0981 c
275.1563 457.9302 277.8193 456.3838 278.8911 453.7529 c
279.9648 451.1177 279.7656 447.3452 279.6055 444.3145 c
279.4976 442.2749 279.4126 440.6646 279.6992 439.6597 C
280.1323 438.2065 L
280.7793 436.0728 281.7568 432.8481 281.5195 431.6587 C
282.9092 431.3813 L
283.2168 432.9185 282.2588 436.0786 281.4893 438.6177 C
281.0625 440.0483 L
280.8403 440.8257 280.9277 442.4839 281.0205 444.2397 c
281.1885 447.4116 281.397 451.3599 280.2036 454.2881 c
278.856 457.5957 275.6255 459.314 273.1943 459.5112 c
271.3823 459.6577 269.8936 459.0059 269.1094 457.7231 c
f279.4868 454.7266 m
279.603 453.314 L
279.8203 453.3296 284.9619 453.5986 288.0479 445.1113 C
289.3799 445.5957 L
285.9014 455.1626 279.7471 454.749 279.4868 454.7266 C
f324.709 450.8745 m
324.6836 450.8682 322.0879 450.229 319.3809 450.229 c
316.3037 450.229 312.0879 450.229 310.5469 448.688 C
311.5488 447.686 L
312.6758 448.812 316.873 448.812 319.3809 448.812 c
320.9639 448.812 322.4346 449.0068 323.502 449.1904 C
322.124 446.7729 319.1318 441.7476 315.0117 436.9839 c
309.9072 431.0806 305.0781 429.7173 305.0293 429.7046 C
305.3965 428.3354 L
305.6094 428.3921 310.6699 429.7964 316.084 436.0562 c
320.8477 441.5649 324.1289 447.4077 325.207 449.3276 C
326.3057 451.2603 L
324.709 450.8745 L
f328.2129 450.8545 m
326.7773 449.4194 321.7012 445.9746 321.6504 445.9399 C
322.4453 444.7671 L
322.6582 444.9111 327.6846 448.3223 329.2148 449.8525 c
329.8477 450.4854 331.5625 451.0454 332.8096 450.4829 c
334.0693 449.9146 334.2471 448.4009 334.1738 447.231 c
333.8525 442.0864 331.6621 437.9663 321.748 433.3286 c
311.7363 428.646 305.165 429.0562 305.0996 429.061 C
304.9951 427.647 L
305.2744 427.6265 311.9668 427.189 322.3477 432.0454 c
332.8965 436.979 335.2344 441.48 335.5879 447.1431 c
335.7803 450.2241 334.2949 451.3677 333.3926 451.7749 c
331.6367 452.5669 329.2969 451.939 328.2129 450.8545 c
f334.7852 446.6787 m
335.3105 445.3623 L
335.2783 445.353 L
335.3584 445.3599 335.6699 445.2583 335.9688 444.8696 c
336.2881 444.4546 336.9336 443.2241 336.0469 440.7603 c
334.5293 436.5435 328.0967 430.312 319.959 427.1812 c
311.5557 423.9487 303.5186 424.5542 303.4385 424.5601 C
303.3232 423.1479 L
303.6631 423.1196 311.75 422.5063 320.4688 425.8589 c
329.3047 429.2583 335.7773 435.8257 337.3809 440.2798 c
338.6758 443.8765 337.249 445.6323 336.7803 446.0835 c
336.1611 446.6821 335.3779 446.9155 334.7852 446.6787 C
f331.6914 434.1909 m
331.6992 434.1577 332.458 430.8071 331.2031 426.728 c
329.9248 422.5728 322.6475 418.4688 316.916 417.3828 c
310.8525 416.2363 298.6045 415.0703 298.4814 415.0586 C
298.6143 413.6484 L
298.7383 413.6602 311.0508 414.8301 317.1797 415.9902 c
323.4375 417.1758 331.1104 421.605 332.5586 426.312 c
333.9326 430.7778 333.1064 434.3677 333.0703 434.5181 C
331.6914 434.1909 L
f326.8555 421.0366 m
326.8662 420.9868 327.9004 415.9727 324.8271 412.1289 c
321.833 408.3867 315.6328 407.5176 311.6045 408.8594 c
307.6963 410.1621 298.9482 414.4473 298.8604 414.4902 C
298.2354 413.2188 L
298.5977 413.0391 307.1572 408.8477 311.1572 407.5156 c
315.7344 405.9902 322.5127 406.9668 325.9346 411.2441 c
329.4385 415.625 328.291 421.1069 328.2402 421.3384 C
326.8555 421.0366 L
f324.8574 411.209 m
324.9346 411.123 326.7275 409.0625 325.5322 404.8809 c
324.291 400.5391 318.0986 399.6602 312.5127 400.7168 c
306.6357 401.8281 301.9199 406.3184 301.873 406.3633 C
300.8887 405.3438 L
301.0918 405.1484 305.9463 400.5156 312.249 399.3242 c
318.4678 398.1484 325.4082 399.291 326.8955 404.4922 c
328.3223 409.4863 326 412.0625 325.9004 412.1699 C
324.8574 411.209 L
f302.7725 403.6328 m
302.8105 403.6016 306.5762 400.5117 307.6807 393.4102 c
307.9746 391.5195 308.084 389.6426 308.084 387.8984 c
308.084 384.6172 307.7012 381.8379 307.4365 380.3008 C
305.7148 382.123 302.1152 386.4785 301.7549 391.4063 C
300.3408 391.3027 L
300.8564 384.2656 307.1406 378.5645 307.4082 378.3262 C
308.2998 377.5273 L
308.5713 378.6934 L
308.6406 378.9922 310.2559 386.0801 309.0811 393.6289 c
307.8848 401.3145 303.8262 404.6055 303.6533 404.7422 C
302.7725 403.6328 L
f322.709 400.0645 m
324.3037 399.1953 325.8945 395.7383 326.376 394.2969 C
327.5176 391.248 328.0137 389.9258 V
326.1289 390.0098 321.9189 390.3281 317.5703 391.5371 c
311.8428 393.1289 308.7451 396.1582 308.7139 396.1895 C
307.7129 395.1855 L
307.8477 395.0508 311.082 391.8691 317.1914 390.1719 c
323.2148 388.498 328.8125 388.4785 329.0479 388.4785 C
330.0703 388.4785 L
327.7197 394.7441 L
327.2764 396.0762 325.5264 400.1426 323.3867 401.3086 C
322.709 400.0645 L
f313.6719 391.3965 m
316.916 387.5527 317.8242 381.8164 318.0752 379.2168 C
316.6514 380.1348 314.0781 381.7949 Y
311.7158 383.2129 309.4502 385.9434 309.4277 385.9707 C
308.334 385.0703 L
308.4326 384.9492 310.7744 382.125 313.3496 380.5801 C
319.5977 376.5488 L
319.5898 377.8672 L
319.582 378.2324 319.3643 386.8496 314.7559 392.3105 C
313.6719 391.3965 L
f324.293 400.9844 m
324.3428 400.9766 329.3711 400.3105 331.6572 397.4141 c
333.3008 395.334 334.9434 392.7383 335.8604 391.2344 C
333.7979 391.5137 330.0166 392.1328 328.2285 393.1367 C
327.5332 391.9023 L
330.2979 390.3477 336.8652 389.6758 337.1436 389.6484 C
338.5176 389.5117 L
337.8281 390.709 L
337.7246 390.8867 335.2734 395.123 332.7705 398.293 c
330.1201 401.6504 324.6982 402.3613 324.4688 402.3906 C
324.293 400.9844 L
f*u
357.8809 390.0625 m
357.6309 388.8125 350.7559 383.0625 y
349.8809 373.5625 342.7559 366.3125 y
342.2559 361.6875 339.3809 351.4375 v
336.5059 341.1875 330.8809 333.8125 y
321.3809 333.6875 l
320.2559 335.4375 319.7559 336.3125 v
319.2559 337.1875 318.5059 337.0625 317.3809 337.5625 c
316.2559 338.0625 314.5059 340.5625 313.3809 341.5625 c
312.2559 342.5625 312.2559 341.9375 309.1309 340.5625 c
306.0059 339.1875 300.0059 339.8125 296.8809 342.6875 c
293.7559 345.5625 292.6309 351.1875 288.6309 353.8125 c
284.6309 356.4375 282.2559 355.3125 279.1309 353.9375 c
276.0059 352.5625 270.2559 349.1875 264.0059 353.4375 c
257.7559 357.6875 262.2559 369.4375 262.7559 372.8125 c
263.2559 376.1875 265.1309 389.4375 y
266.0059 380.5625 l
266.6309 381.5625 l
271.5059 384.5625 l
271.6309 381.6875 271.8809 380.9375 v
272.1309 380.1875 272.5059 375.8125 y
273.7559 376.9375 274.2559 377.4375 v
274.7559 377.9375 278.3809 380.6875 280.5059 384.0625 c
282.6309 387.4375 282.7559 393.0625 y
284.1309 394.6875 l
284.3809 388.1875 l
287.3809 391.8125 289.5059 393.5625 v
291.6309 395.3125 294.2559 399.6875 y
294.1309 398.0625 295.2559 393.5625 296.1309 391.6875 c
297.0059 389.8125 298.8809 386.5625 y
300.7559 390.8125 l
301.3809 383.8125 308.0059 379.3125 y
308.7559 381.1875 308.7559 385.3125 y
311.1309 381.1875 318.6309 378.1875 y
318.8809 383.9375 315.2559 390.5625 y
314.8809 391.6875 l
323.1309 389.0625 328.8809 389.1875 y
328.1309 392.1875 l
331.3809 390.9375 337.0059 390.4375 y
334.8809 394.5625 332.7559 397.5625 v
330.6309 400.5625 324.3809 401.6875 y
329.3809 406.0625 325.5059 411.6875 y
329.0059 416.3125 327.2139 421.02 y
335.0469 426.02 332.3809 433.354 y
339.3818 439.354 346.5479 439.354 v
353.7139 439.354 357.8809 435.354 y
357.8809 390.0625 l
f1 D
331.1309 348.9375 m
333.2559 353.5625 331.3809 354.0625 y
325.3809 349.3125 l
326.0059 347.9375 326.7559 342.3125 y
329.0059 344.3125 331.1309 348.9375 v
f*U
0 D
267.5474 450.5205 m
268.8809 456.3535 l
269.7144 461.6865 260.7144 466.3535 v
251.7144 471.0205 244.3809 467.0205 y
240.3813 471.3535 233.2144 471.8535 v
226.0474 472.3535 220.7144 466.854 220.3809 465.5205 c
220.3809 454.687 l
220.3813 452.1865 223.2144 449.8535 v
221.0474 449.187 220.5474 447.187 v
220.3809 428.854 l
221.5474 424.686 233.3809 423.52 v
245.2144 422.354 249.2144 427.854 y
247.0059 431.187 l
251.8809 430.937 254.0059 430.687 v
256.1309 430.437 262.0059 429.312 y
259.1309 431.812 258.5059 435.687 v
257.8809 439.562 257.0059 446.687 y
260.6309 444.687 261.3809 444.062 v
262.1309 443.437 263.5059 442.812 y
262.8809 445.812 262.3809 448.937 v
261.8809 452.062 261.5059 455.687 y
267.5474 450.5205 l
f256.1309 421.187 m
255.0059 417.9375 248.2559 417.3125 v
241.5059 416.6875 239.7559 418.6875 236.5059 419.4375 c
233.2559 420.187 225.3809 418.8125 222.2559 411.4375 c
219.1309 404.0625 223.2559 399.8125 223.8809 398.5625 c
224.5059 397.3125 226.6309 396.8125 224.2559 395.9375 c
221.8809 395.0625 220.5059 394.3125 220.3809 393.1875 c
220.2559 392.0625 220.2559 371.1875 y
221.5059 367.9375 232.0059 368.8125 v
242.5059 369.6875 254.5059 378.8125 256.8809 385.5625 c
255.7559 386.3125 256.1309 387.8125 v
256.5059 389.3125 257.2559 392.9375 257.8809 394.0625 c
258.5059 395.1875 260.3809 397.1875 y
256.0059 397.5625 l
258.2559 402.0625 l
257.5059 401.0625 253.5059 401.6875 v
249.5059 402.3125 247.0059 402.9375 245.8809 402.9375 c
248.1309 405.9375 249.8809 406.9375 v
251.6309 407.9375 254.5059 409.3125 y
252.1309 410.3125 251.3809 410.5625 v
250.6309 410.8125 248.7559 411.4375 y
252.0059 413.6875 253.7559 414.9375 v
255.5059 416.1875 261.6309 417.9375 y
258.1309 419.6875 l
256.1309 421.187 l
f290.7139 490.0205 m
287.3809 494.3535 285.8809 495.8535 v
284.3809 497.3535 279.3804 501.854 269.0474 504.0205 c
258.7144 506.187 251.3809 505.5205 246.3809 506.0205 c
241.3809 506.5205 232.7144 505.6865 231.8809 500.8535 c
231.0474 496.0205 234.8813 492.1865 240.7144 491.3535 c
246.5474 490.5205 246.8809 491.6875 249.3809 490.5205 c
251.8809 489.3535 256.7139 484.687 265.0474 483.687 c
273.3809 482.687 277.5479 484.5205 280.2144 486.187 c
282.8809 487.8535 289.8818 488.354 291.7139 485.5205 c
290.7139 490.0205 l
f297.3809 488.5205 m
297.8809 485.5205 l
305.3799 480.8535 309.2139 478.187 v
313.0479 475.5205 319.5479 472.687 329.3809 472.687 c
339.2139 472.687 342.5479 477.8535 343.0479 480.8535 c
343.5479 483.8535 340.8809 486.354 337.3809 487.5205 c
333.8809 488.687 333.3799 488.3535 331.7139 489.687 c
330.0479 491.0205 325.5479 493.1865 317.8809 492.8535 c
310.2139 492.5205 302.7148 489.0205 297.3809 488.5205 c
f278.1309 518.187 m
281.2559 516.812 282.3809 517.187 v
283.5059 517.562 283.5059 518.562 283.1309 519.312 c
282.7559 520.062 286.5059 516.062 290.8809 515.187 c
291.2559 513.812 l
294.8809 514.687 l
294.6309 508.437 l
290.8809 510.062 288.8809 505.687 v
287.3809 513.687 l
280.3809 515.937 278.1309 518.187 v
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
