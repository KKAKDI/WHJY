%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (850.ai)
%%CreationDate: 3/25/2002 6:33 PM
%%BoundingBox: 215 317 369 556
%%HiResBoundingBox: 215.4951 317.8867 368.5654 555.9971
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13194 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC8C444B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B68FD
%07FC99FFFD05FC8C4BF82727525152275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%5251522752515227525152275251522727F893FD05FCC2FFFD04FC8C20F8
%FD44FF52F88CFD04FCBBFFFD04FC2727FD46FF52F8FD04FCC2FFFD04FCF8
%A8FD47FFF844FCFCFCBBFFFCFCFC6827FD2DFF7DF8F8F827A8FD15FF514B
%FCFCFCC2FFFCFCFC6EF8FD2CFF7DFD05F820FD15FF5226FCFCFCBCFFFCFC
%FC6827FD2CFF27FD06F87DFD14FF274BFCFCFCC2FFFCFCFC6EF8FD2CFF27
%FD06F827FD14FF5220FCFCFC99FFFCFCFC6827FD2CFFFD07F852FD14FF27
%4BFCFCFCC2FFFCFCFC6FF8FD2CFF52FD06F827FD14FF5220FCFCFCBBFFFC
%FCFC6827FD2CFFA8FD06F852FD14FF4B4BFCFCFCC2FFFCFCFC68F8FD2DFF
%7DFD05F87DFD14FF5220FCFCFCBBFFFCFCFC6827FD12FF7D52F827A8FD17
%FFA852F8F827FD15FF514BFCFCFCC2FFFCFCFC6EF8FD0FFF7D4BF8F8206F
%2020A8FD19FFF87DFD15FF5226FCFCFCBCFFFCFCFC6827FD0CFF5227F820
%2093FD04FC2027FD19FF524BFD15FF274BFCFCFCC2FFFCFCFC6EF8FD09FF
%5227F8F82092FD08FCF827FD18FF5227FD07FFA8FD05F852FD07FF5220FC
%FCFC99FFFCFCFC6827FD06FF7D27F8272093FD0BFC93F87DFD17FFA8F8FD
%06FFA8FD07F827FD06FF274BFCFCFCC2FFFCFCFC6FF8FFFFFF5227F82744
%8CFD0FFC6EF8A8FD0CFF7D52F8272752A7FD04FFF8A8FD05FFFD09F8A8FD
%05FF5220FCFCFCBBFFFCFCFC68275227F8274492FD13FC4BF8FD0BFF27FD
%07F852FFFFFFF87DFFFF7D7D27FD09F8A8FD05FF4B4BFCFCFCC2FFFCFCFC
%4AF820448CFD17FCF827FD09FF7DFD0AF827FD05F827F827FD08F827FD06
%FF5220FCFCFCBBFFFCFCFC44278CFD19FC8C277DFD08FF52FD09F8277D7D
%5127FD05FFA827FD04F82752FD07FF514BFCFCFCC2FFFCFCFC6EF8278CFD
%19FC4420A8FD07FF52FD09F8A7FFFFA8F8FD14FF5226FCFCFCBCFFFCFCFC
%682727278CFD19FC2052FD08FFFD07F8277DFD04FFF8A8FD13FF274BFCFC
%FCC2FFFCFCFC6EF8FF20208CFD19FCF87DFD08FF5127F827277DFD06FFF8
%7DFD09FF7D7DA7FD07FF5220FCFCFC99FFFCFCFC6827FFFFF827FD19FC4B
%F8FD14FF5227FD07FF2727F8F8F82752FD05FF274BFCFCFCC2FFFCFCFC6F
%F8FFFFFFF826FD19FC2727FD09FF525227527DFD05FF5227FD06FF27FD07
%F87DFD04FF5220FCFCFCBBFFFCFCFC6827FD04FFF84BFD18FC8CF8A8FD06
%FF7DFD07F8A8FFFFFF7CF87D52524B5227FD08F827FD04FF4B4BFCFCFCC2
%FFFCFCFC68F8FD04FFA8F86EFD18FC2027FD05FFA8FD09F827FD05F82727
%522727FD08F827FD04FF5220FCFCFCBBFFFCFCFC6827FD05FF7DF893FD17
%FCB5F87DFD04FF52FD09F852A8FFFFF87DFD05FF7DFD07F8A8FD04FF514B
%FCFCFCC2FFFCFCFC6EF8FD06FF52F8FD18FC6FF8FD04FF52FD09F8FD04FF
%2752FD06FFA82727F82752FD06FF5226FCFCFCBCFFFCFCFC6827FD07FF27
%20FD18FC274BFD04FF27FD07F8A8FD04FF2752FD12FF274BFCFCFCC2FFFC
%FCFC6EF8FD07FFA8F844FD17FC68F8A8FD04FF52F827F8274BFD06FF52F8
%FD12FF5220FCFCFC99FFFCFCFC6827FD08FF7D2768FD17FC2051FD10FF7D
%27FD12FF274BFCFCFCC2FFFCFCFC6FF8FD09FF2727FD17FC92F8A8FD10FF
%F8FD08FFA85252277DFD05FF5220FCFCFCBBFFFCFCFC6827FD0AFFF84BFD
%17FC2727FD06FF7D7D7DA8FD06FFF8A8FD06FF52FD05F8277CFFFFFF4B4B
%FCFCFCC2FFFCFCFC68F8FD06FF27F8F8F87CF892FD16FC8CF8A8FFFFFF52
%FD06F852FD04FFF87DA17D7D5227FD09F87DFFFF5220FCFCFCBBFFFCFCFC
%6827FD05FF52FD05F852F8FD17FC2027FFFFA8FD08F827525227F8F8F827
%272752FD09F827FFFF514BFCFCFCC2FFFCFCFC6EF8FD05FFFD06F8272720
%FD16FC92F8A8FF52FD09F827277D2752FD05FFA8FD09F8FFFF5226FCFCFC
%BCFFFCFCFC6827FD04FFA8FD06F8277DF88CFD16FC2727FF52FD08F827FF
%FFFF524BFD06FFA827FD06F87DFFFF274BFCFCFCC2FFFCFCFC6EF8FD04FF
%7DFD07F8FF2727FD16FC8CF8A8FFFD08F852FFFFFF5227FD08FFA8522727
%277DFFFFFF5220FCFCFC99FFFCFCFC6827FD04FF7DFD07F8FFFFF86FFD16
%FC2051FFFF5227F82727277DFD04FFA127FD11FF274BFCFCFCC2FFFCFCFC
%6FF8FD05FFFD07F8FFFF76F8FD16FC92F8FD0DFF7D20FD11FF5220FCFCFC
%BBFFFCFCFC6827FD05FF27FD05F87DFFFFFF2744FD16FC2752FD0DFFF8FD
%11FF4B4BFCFCFCC2FFFCFCFC68F8FD05FFA8FD05F8FD04FF7CF88CFD15FC
%68F8FD0DFFF8FD07FF52FD04F827A8FFFFFF5220FCFCFCBBFFFCFCFC6827
%FD06FFA852F827A8FD05FF2727FD16FCF87DFFFFA852F827277DFD04FFF8
%A8FD04FFA827FD07F8A8FFFF514BFCFCFCC2FFFCFCFC6EF8FD08FF5127FD
%06FFA8F88CFD15FC4BF8FF52FD06F820A8FFFF20517D275227FD09F827FF
%FF5226FCFCFCBCFFFCFCFC6827FD08FF5227FD07FF2720FD15FC8C2752FD
%0CF827F8524B52FD09F827FFFF274BFCFCFCC2FFFCFCFC6EF8FD08FF7DF8
%FD04FF7DFD04F88CFD15FC20FD0AF8A8FF2751FD04FFA7FD08F827FFFF52
%20FCFCFC99FFFCFCFC6827FD04F827A8FFFFFFF8FFFFFF7DFD05F827FD15
%FC93FD09F852FFFF5152FD05FF7DFD07F8FFFFFF274BFCFCFCC2FFFCFCFC
%6FFD07F8A8FFFFF8525227FD07F88CFD15FC20FD07F827A8FFFF5227FD07
%FF5227F82752FD04FF5220FCFCFCBBFFFCFCFC68FD08F827F8F8F82727FD
%07F820FD15FC4427FD04F8277CFD04FF2752FD10FF4B4BFCFCFCC2FFFCFC
%FC68FD08F827A82727FFFFFD08F88CFD15FCF8A8FD09FF52F8FD06FF5227
%272752A8FD04FF5220FCFCFCBBFFFCFCFC44FD07F827FFFF7DF8FFFFFF27
%27F8F8F827274BFD15FC2752FD09FF7D27FD04FF7D27FD05F8277DFFFFFF
%514BFCFCFCC2FFFCFCFC6EFD06F827FFFFFFA8F8FD05FF7D7D7DFF7DF8FD
%15FC44262727F8527DFD04FF7DF8FFFFFFA820FD07F827FFFFFF5226FCFC
%FCBCFFFCFCFC682752524B7CA8FD05FFF8A8FD09FF2744FD14FCB4FD06F8
%27FFA87D52FD0427FD0AF8FFFFFF274BFCFCFCC2FFFCFCFC6EF8FD0AFF27
%52FD09FF5220FD15FC20FD09F827F852527D52FD09F8FFFFFF5220FCFCFC
%99FFFCFCFC6827FD0AFF5152FD0AFFF86FFD14FC6827FD05F87DFFFF7D27
%FD04FF27FD07F852FFFFFF274BFCFCFCC2FFFCFCFC6FF8A85252527DFD05
%FF7DF8FD07FF5252272720FD15FCFD05F827FFFFFF7DF8FD05FF7D52F827
%F852A8FD04FF5220FCFCFCBBFFFCFCFC6827FD05F82752FFFFFFA8F8FD05
%FF7DFD06F88CFD14FC27F8F8F852FD04FF7D27FD10FF4B4BFCFCFCC2FFFC
%FCFC68FD08F852FFFFFFF87D7D522727FD07F84BFD14FC44F84BA8FD05FF
%7DF8FD10FF5220FCFCFCBBFFFCFCFC68FD0EF82727527DFD08F8FD14FCB4
%F8FD07FF7D27FD10FF514BFCFCFCC2FFFCFCFC6EFD09F8FFFFFF5227FD04
%FF52FD07F88CFD14FC2052FD06FF7DF8FD10FF5226FCFCFCBCFFFCFCFC68
%FD07F827FD04FFA8F8FD05FF52FD06F84BFD14FC4427FD06FF7D27FD10FF
%274BFCFCFCC2FFFCFCFC6EF8522727F8527DFD06FFF87DFD05FFA87D2752
%7D7DF8FD14FC92F82727A8FFFFFF7DF8FD04FFA7FD05F876FD05FF5220FC
%FCFC99FFFCFCFC6827FD0CFF2752FD0BFF2768FD14FCFD04F87DFFFF7D27
%7DA17D52FD07F827FD04FF274BFCFCFCC2FFFCFCFC6FF8FD0CFF52F8FD0B
%FF274BFD14FCFD09F827F827FD09F8A8FFFFFF5220FCFCFCBBFFFCFCFC68
%27FFFFFF7D7DA8FD06FF7DF8FD0BFF7DF8FD14FC6FFD04F8A8FF7D27FFFF
%FF7DFD08F8A8FFFFFF4B4BFCFCFCC2FFFCFCFC68F8FF27FD05F827FD05FF
%F8A7FD06FFA87D7C7DFFF868FD13FC8CF8F8F827FFFF7DF8FD04FF52FD06
%F827FD04FF5220FCFCFCBBFFFCFCFC682751FD07F827FFFFA87D2727A17D
%7D7DA152FD06F84BFD14FCF8F827FFFFFF7D27FD06FF525251527DFD05FF
%514BFCFCFCC2FFFCFCFC6EF827FD0BF827F8F8F827F827FD09F8FD14FC27
%27FD04FF7DF8FD10FF5226FCFCFCBCFFFCFCFC6827FD09F87DFFFFFFA8F8
%FD05FFFD08F88CFD13FC4427FD04FF4B52FD10FF274BFCFCFCC2FFFCFCFC
%6EF827FD07F827FD05FF277DFD04FF52FD07F84AFD13FC8CF8FD04FF5227
%FD10FF5220FCFCFC99FFFCFCFC6827FF522727F82751A8FD06FF2752FD05
%FF52FD07F8FD14FCF8A8FFFFFF5152FD06FF5227F8272752FD04FF274BFC
%FCFCC2FFFCFCFC6FF8FD0EFF7DF8FD06FF7DFD06F8FD14FCF87DFFFFFF52
%27FD04FFA7FD07F820FFFFFF5220FCFCFCBBFFFCFCFC6827FD0FFF27A8FD
%07FFA87D7DA8F86FFD13FC4B27FFFFFFF87DFD04FFFD09F87CFFFF4B4BFC
%FCFCC2FFFCFCFC68F8FFFFFF7D7627527CFD07FFF852FD0BFF2720FD13FC
%4427FFFFFF277CFFFFA7FD0AF852FFFF5220FCFCFCBBFFFCFCFC6827FFA8
%FD07F852FD05FF7D27FD0BFF5227FD13FC93F8FFFFFFF87D5227F827FD09
%F8FFFFFF514BFCFCFCC2FFFCFCFC6EF8FFFD0AF827527D7D52F8A8FD0AFF
%A8F8FD14FCF8A8FFFFF8F82752FFFF52FD06F827FD04FF5226FCFCFCBCFF
%FCFCFC68277DFD0AF852FD0427F8F8277CA8FD04FFA87DFFFF2768FD13FC
%F87DFFFFF8A8FD06FF7D7D7DA8FD06FF274BFCFCFCC2FFFCFCFC6EF8A8FD
%0AF8FD05FF52F852F8F8F85227FD06F84BFD13FC2751FFFFF8FD11FF5220
%FCFCFC99FFFCFCFC6827FF4BFD07F8277DFD05FFA8F8A8FFA852FD09F8FD
%13FC4452FFA8F8FD11FF274BFCFCFCC2FFFCFCFC6FF8FFFF52F8F8F82727
%52FD08FFF876FFFFFF76FD08F8FD13FC6FF8FF7D27FD11FF5220FCFCFCBB
%FFFCFCFC6827FD11FF5227FFFFFFA827FD07F893FD12FC6827FF7DF8FD0A
%FFA87DA8FD04FF4B4BFCFCFCC2FFFCFCFC68F8FD11FFA8F8A8FFFFFF52FD
%07F844FD13FCF8FF2727FD08FF7DFD04F827FFFFFF5220FCFCFCBBFFFCFC
%FC6827FD12FF2752FD04FF52FD06F84BFD13FC277D5227FD07FF7D27FD05
%F87DFFFF514BFCFCFCC2FFFCFCFC6EF8FFFF27F8F827FD0CFF52F8FD05FF
%A827F8F8F827F8FD13FCF87DF852FD07FF20FD06F827FFFF5226FCFCFCBC
%FFFCFCFC6827FF52FD05F8FD0CFFF87DFD09FF7DF8FD13FC2752277DFD06
%FF7DFD07F852FFFF274BFCFCFCC2FFFCFCFC6EF8FFFD06F852FD0BFF2727
%FD0AFFF8FD13FC2052F8A8FD06FF27FD07F84BFFFF5220FCFCFC99FFFCFC
%FC6827FFFD06F827FD0BFFA8F827277DA8522727F8527D2768FD12FC4B27
%F8FD07FF27FD07F8A8FFFF274BFCFCFCC2FFFCFCFC6FF8FFFD07F8FFFFFF
%27F8F8F852FD04FF204B52FD09F84AFD12FC6820F8FD07FF27FD06F827FF
%FFFF5220FCFCFCBBFFFCFCFC6827FF27FD06F8FFFF27FD05F87DFFFFFF52
%27FFFFFD08F820FD12FC6FF827FD07FF7DFD05F827A8FFFFFF4B4BFCFCFC
%C2FFFCFCFC68F8FF27FD06F8FFA8FD06F852FD04FFF87DFF52FD07F820FD
%12FC8CF827FD08FF27F8F8F827A8FD04FF5220FCFCFCBBFFFCFCFC6827FF
%FFFD05F827FF52FD06F827FD04FF5227FFA827FD07F8FD13FCF852FD08FF
%522751A8FD06FF514BFCFCFCC2FFFCFCFC6EF8FFFFA7FD04F827FF27FD06
%F852FD04FFA8F8A7FFA820FD06F8FD13FCF852FD08FF2752FD08FF5226FC
%FCFCBCFFFCFCFC6827FD04FF5227F8FFFF52FD06F852FD05FF2727FFFFA8
%52FD05F8B4FD0AFC686F684B202720F8F87CFD07FFA8F8FD09FF274BFCFC
%FCC2FFFCFCFC6EF8FD05FFA1F8A8FFA1FD06F8FD06FFA8F8A8FD07FFF868
%FC6868444B2020FD06F82752527D7DFD09FF4B27FD09FF5220FCFCFC99FF
%FCFCFC6827FD06FF2752FFFF51FD04F8A8FD07FF2727FD07FFF8F8F827F8
%274B527C27FD04F827FFFFFF7D27F8277DFD06FF277DFD09FF274BFCFCFC
%C2FFFCFCFC6FF827F852A8FFFF7DF8FFFFFFF8F827FD09FFA8F87DFD06FF
%A7A8FFFFF852FFFF27FD05F827FFFF7DFD05F87DFD04FFA7F8FD0AFF5220
%FCFCFCBBFFFCFCFC6827F8F8F82752FFFF277CFFFF277DFD0BFF4B277D52
%4B7DFD06FF2727FFFFFD07F8FFFF27FD05F827FD04FF2752FFFFFFA827F8
%F8F8277D4B4BFCFCFCC2FFFCFCFC68FD06F852FF4B27FFFFF8FD06FF5227
%7DFD04FFFD06F87CFD04FFA8F8FFFFFD06F852FFFFFD07F8FFFFFFA8F8A8
%FFFF7DFD07F82720FCFCFCBBFFFCFCFC6827FD05F827FFFFF8A87D27FD04
%FFA827F8F8F827FFFF7DFD07F87DFD04FF2776FFFD06F8A8FFFF27FD06F8
%FFFFFF5227FFFFFFFD08F8274BFCFCFCC2FFFCFCFC6EFD07F87DFF51277D
%F8FD04FF27FD05F852FF7DFD07F820FD04FF2727FF7DFD04F87DFFFFFF52
%FD06F8FFFFFFF876FFA7FD09F82726FCFCFCBCFFFCFCFC68FD08F87C7DF8
%2727FFFFFFA8FD06F827FF7DFD08F87DFFFFFFA8F8FFA8F82752A8FD05FF
%FD05F827FFFF7CF82727F827FD08F8274BFCFCFCC2FFFCFCFC6EFD07F852
%F8F8F82027FFFFFF51FD06F827FFFFFD08F827FD04FFF87D2727FD08FFA8
%FD04F8A8FFFF27F8277DFFA8FD07F8275220FCFCFC99FFFCFCFC68275252
%517DA8FD04FF7DF852FFFFFF52FD06F827FFFFA8FD07F827A8FFFFFF2752
%F8A8FD0AFF52F87DFFFFA8F8FD06FF7D27272752A8FF274BFCFCFCC2FFFC
%FCFC6FF8FD0AFF2727FFFFFF27FD06F87DFD04FF5220F8F8F827F8F827FF
%FF7DF827FFFFFF52F82727A8FD04FFF8A8FFFF2751FD0DFF5220FCFCFCBB
%FFFCFCFC6827FD0AFFA8F8A8FFFF52FD05F827FFFFFFA827527DFD05FF7D
%27F852A8F852FFFF52FD05F8FD04FF277DFFA8F8A8FD0DFF4B4BFCFCFCC2
%FFFCFCFC68F8FD0BFF2727FFFF7DFD05F8A8FFFF4BFD04F87DFD06FFA8F8
%F8F852FFFFFD06F827FFFFFFF852FF2727FD05FF5227F8F8F87DFFFFFF52
%20FCFCFCBBFFFCFCFC6827FFFFFFA17DFD06FFA8F8A8FFFFF8F8F8277DFF
%FF52FD05F852FD08FF7D27F8FF7DFD07F8FFFFFF5227A8F8A8FD04FF27FD
%06F87DFFFF514BFCFCFCC2FFFCFCFC6EF8FF27FD04F8277DFD04FF5127FF
%FF52F87DFD04FFFD07F8A7F8F8F852A8FFFFFF7DF8FFFFFD07F8FFFFFF52
%272727FD04FF27FD07F827FFFF5226FCFCFCBCFFFCFCFC682727FD07F827
%FFFFFFA8277DFF2752FD04FF7DFD06F852FD05F827FD04FFF8A8FF27FD06
%F8FFFFFF7DF8F8A8FFFFFF7DFD08F827FFFF274BFCFCFCC2FFFCFCFC6EFD
%0AF852FFFFFF2727FFF87CFD04FF7DFD06F827FD06F852FFFFFF274BFF7D
%FD06F8FD04FFF827FFFFA827FD09F852FFFF5220FCFCFC99FFFCFCFC6827
%FD09F827A8FFFFFFF852F8FD05FF7DFD05F82752FD06F827FFFFFF5227FF
%FF7D27F8F8F87DFFFFFFA1F8522727F8274B27FD06F827FFFFFF274BFCFC
%FCC2FFFCFCFC6FF852FD0DF827F851FFFFFF7DF827FD04F852FF7DFD06F8
%27FFFFFFA8F8FD04FFA827F8FD04FFF8F82752A7FD04FF7627272752A8FD
%04FF5220FCFCFCBBFFFCFCFC6827FF52FD07F827A8FF7D7D522727FFFF7D
%FD05F827A8FFFFFFFD06F827FD04FF277DFD05FFF87DFFFF5227FD12FF4B
%4BFCFCFCC2FFFCFCFC68F8FFFFCF524BF827F852A8FD05FFA1F87DFF27FD
%07F8A8FFFF52FD05F852FD04FF2752FD05FF5227FFA8F852FD12FF5220FC
%FCFCBBFFFCFCFC8CF8A8FD07FFA852277DA8FFFFFF5227FF52FD07F852FF
%FFFF7DFD04F827FD04FF7DF8FD05FFA8F8A85227FD06FFA127F8F8F827A8
%FD06FFF86FFCFCFCC2FFFD04FC2027FD06FF27FD06F8A7FFFFF827A7FD08
%F8A8FD06FFA827F8A7FFFFA8F8FD06FF2727F8A8FD05FF52FD07F8FD05FF
%5120FD04FCBCFFFD04FCB4F827A8FFFFFF7DFD08F852FFA8F87D27FD07F8
%27FD08FF52F852FFFFF8A8FD05FF7DF852FD05FFA8FD08F87DFFFFFF4BF8
%68FD04FCC2FFFD06FC20F8F8522727FD09F8272727F852FD08F827522752
%275227522727F8F82727F85227522752F8F8275227522752FD09F8522727
%F82668FD05FC99FFFD07FC8C6F204B444B204B444B204B444B204B444B20
%4B204B204B444B204B444B204B444B204B444B204B204B204B444B264B27
%4B264B4B4B264B4B4B264B4B4B264B4B4B4A93FD07FCC2FFFD52FCBBFFFD
%52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
368.5654 317.8867 m
215.4951 317.8867 L
215.4951 555.9971 L
368.5654 555.9971 L
368.5654 317.8867 L
fu0 0 0 0 k
223.2803 537.7759 m
223.2803 334.7754 l
223.7803 326.2754 234.2803 325.4414 v
350.9473 325.2754 l
360.1133 324.7754 360.7803 335.6094 v
360.7803 538.4424 l
360.6143 547.4419 351.4473 548.6089 v
232.7803 548.6089 l
223.7803 548.9429 223.2803 537.7759 v
f0 1 1 0 k
223.2803 512.2759 m
261.4463 524.6089 261.9463 524.6089 v
262.4463 524.6089 264.4463 525.2759 265.2803 524.4424 c
266.1133 523.6089 283.1143 504.1094 297.1133 473.2759 c
311.1133 442.4424 318.2803 418.4414 322.7803 372.9414 c
286.1133 368.7754 l
283.2803 390.1074 277.2803 412.7754 v
271.2803 435.4424 252.7803 485.6924 223.0303 509.9424 c
223.2803 512.2759 l
f*u
1 D
0.65 0.53 0.51 1 k
233.2012 549.1509 m
227.3398 549.1509 222.5713 544.3823 222.5713 538.521 C
222.5713 335.3633 L
222.5713 329.502 227.3398 324.7324 233.2012 324.7324 C
350.8594 324.7324 L
356.7207 324.7324 361.4893 329.502 361.4893 335.3633 C
361.4893 538.521 L
361.4893 544.3823 356.7207 549.1509 350.8594 549.1509 C
233.2012 549.1509 L
f0 D
223.9883 335.3633 m
223.9883 538.521 L
223.9883 543.6011 228.1211 547.7339 233.2012 547.7339 C
350.8594 547.7339 L
355.9395 547.7339 360.0713 543.6011 360.0713 538.521 C
360.0713 335.3633 L
360.0713 330.2832 355.9395 326.1504 350.8594 326.1504 C
233.2012 326.1504 L
228.1211 326.1504 223.9883 330.2832 223.9883 335.3633 C
f*U
*u
1 D
263.334 525.8174 m
222.7383 512.6235 L
222.7383 509.8105 L
222.9512 509.6016 L
278.4385 455.4282 285.0127 369.5859 285.0732 368.7266 C
285.124 367.9922 L
323.5361 372.1445 L
323.4873 372.8262 L
316.418 470.1079 266.3643 524.3066 265.8721 524.6758 c
264.459 525.7354 263.6582 525.8174 263.4463 525.8174 C
263.334 525.8174 L
f0 D
263.502 524.3818 m
263.6885 524.3359 264.1895 524.1655 265.0215 523.542 C
265.501 523.1426 314.8057 469.6201 322.0137 373.4043 C
320.7109 373.2637 287.7842 369.7051 286.4248 369.5566 C
285.6934 377.7734 277.2168 458.3931 224.1553 510.3979 C
224.1553 510.6934 224.1553 511.1367 224.1553 511.5942 C
225.1064 511.9033 263.1826 524.2778 263.502 524.3818 C
f*U
316.4473 524.7759 m
309.4463 525.1094 307.6133 531.7759 v
305.7803 538.4424 310.9473 540.6094 312.2803 540.7759 c
313.6133 540.9424 319.7813 541.4424 320.4473 533.9424 c
321.1133 526.4424 317.9473 524.2759 316.4473 524.7759 c
f312.9473 511.6089 m
310.6143 516.4419 302.9473 516.1089 v
295.2803 515.7759 294.6133 511.1089 294.9463 509.1089 c
295.2803 507.1089 297.2793 503.4424 305.1133 504.9424 c
312.9473 506.4424 313.1143 510.7754 312.9473 511.6089 c
f330.7803 513.2759 m
331.7793 520.1089 338.6133 520.6089 v
345.4473 521.1089 347.4463 517.1089 347.6133 515.6089 c
347.7803 514.1089 346.6143 510.2754 340.4473 509.6089 c
334.2803 508.9424 331.4473 511.2759 330.7803 513.2759 c
f314.6133 496.6089 m
312.1133 501.2759 304.7803 500.9424 v
296.9531 500.5864 296.7803 495.9419 296.7803 494.6089 c
296.7803 493.2759 299.1133 488.9419 306.1133 489.6089 c
313.1133 490.2759 314.6133 495.2754 314.6133 496.6089 c
f334.2803 498.2759 m
335.4463 503.7754 342.1133 504.1089 v
348.7803 504.4424 350.2813 500.2759 350.4473 498.7759 c
350.6133 497.2759 349.2793 493.4424 343.1133 493.4424 c
336.9473 493.4424 334.6133 496.7759 334.2803 498.2759 c
f317.7803 479.4424 m
315.9473 483.2759 308.7803 483.7759 v
301.6133 484.2759 300.4473 479.4429 300.4473 478.2759 c
300.4473 477.1089 300.9473 472.7759 309.2803 472.7759 c
317.6133 472.7759 317.7803 478.4424 317.7803 479.4424 c
f336.9473 481.6089 m
340.4473 487.4429 347.4473 485.7759 v
354.4473 484.1089 354.6133 479.7759 354.1133 478.2759 c
353.6133 476.7759 351.1143 473.7759 344.9473 475.4424 c
338.7803 477.1089 336.6143 480.4419 336.9473 481.6089 c
f321.1133 461.7759 m
317.6143 466.7759 311.4473 465.9424 v
305.2803 465.1089 303.1133 460.4424 303.6133 458.4424 c
304.1133 456.4424 306.2793 452.7754 313.6133 454.1089 c
320.9473 455.4424 321.4463 461.1094 321.1133 461.7759 c
f337.1133 463.2759 m
340.1143 469.2759 346.9473 468.4424 v
353.7803 467.6089 354.4473 463.2759 354.2803 461.7759 c
354.1133 460.2759 351.7803 455.6089 345.2803 456.4424 c
338.7803 457.2759 337.1133 461.9429 337.1133 463.2759 c
f307.4473 448.2759 m
316.4482 451.2759 320.7803 445.1089 y
319.6133 439.4429 311.1133 437.7759 v
307.4473 448.2759 l
f335.7803 446.9424 m
337.9463 453.2759 345.6133 452.7759 v
353.2803 452.2759 353.2793 446.4419 353.1133 445.6089 c
352.9473 444.7759 351.6143 441.4424 344.4473 441.4424 c
337.2803 441.4424 335.7803 445.2759 335.7803 446.9424 c
f312.7803 430.9419 m
319.9473 430.7749 321.9473 426.1089 y
320.9473 421.6089 315.9473 419.4414 v
312.7803 430.9419 l
f335.2803 427.4419 m
338.6133 431.9409 344.2803 431.2749 v
349.9473 430.6089 351.4473 426.9419 351.4473 425.9419 c
351.4473 424.9419 350.1133 420.6079 343.2803 421.2749 c
336.4473 421.9419 334.9473 425.9419 335.2803 427.4419 c
f335.4473 406.9414 m
336.4473 412.7754 343.4473 413.9414 v
350.4473 415.1094 353.1133 411.4434 353.6133 409.6094 c
354.1133 407.7754 351.6143 403.7754 344.9473 403.1094 c
338.2803 402.4414 335.9473 405.7754 335.4473 406.9414 c
f342.1133 376.9414 m
336.9463 382.1074 340.1133 388.2754 v
343.2803 394.4414 347.7803 395.1094 350.7803 394.1094 c
353.7803 393.1094 355.1133 388.4434 352.7803 383.1094 c
350.4473 377.7754 343.4463 375.7754 342.1133 376.9414 c
f343.1133 358.6094 m
344.4473 365.4414 350.7803 365.9414 v
357.1133 366.4414 359.2793 363.6074 359.6133 361.2754 c
359.9473 358.9414 358.9473 354.7754 351.7803 354.1094 c
344.6133 353.4414 343.2793 357.6094 343.1133 358.6094 c
f324.6133 353.9414 m
329.6133 357.1094 328.7803 363.1094 v
327.9473 369.1094 323.4473 369.9414 320.7803 369.4414 c
318.1133 368.9414 315.4473 364.9434 317.2803 360.1094 c
319.1133 355.2754 323.6133 353.9414 324.6133 353.9414 c
f337.1133 340.9414 m
339.2793 346.9414 344.6133 348.7754 v
349.9473 350.6094 353.7793 347.1074 354.1133 344.7754 c
354.4473 342.4414 353.4473 338.6094 347.4473 337.6094 c
341.4473 336.6094 338.1133 339.2754 337.1133 340.9414 c
f314.4473 337.6094 m
318.9473 340.1094 317.4473 346.4414 v
315.9473 352.7754 311.6143 352.7754 308.9473 352.4414 c
306.2803 352.1094 303.4473 348.1074 305.4473 343.2754 c
307.4473 338.4414 312.9473 337.7754 314.4473 337.6094 c
f331.7803 325.6094 m
333.1143 331.7754 339.9473 332.6094 v
346.7803 333.4414 348.9473 328.2754 346.7803 325.6094 c
331.7803 325.6094 l
f301.9473 358.4414 m
298.4463 361.9414 299.6133 365.7754 v
300.7803 369.6094 303.4473 370.4414 304.7803 370.7754 c
306.1133 371.1094 311.2803 371.1094 y
312.6133 366.7754 310.7803 362.9414 v
308.9473 359.1094 305.2803 356.9414 301.9473 358.4414 c
f291.4463 331.4414 m
294.4473 336.4414 292.1133 341.2754 v
289.7803 346.1094 284.4463 346.1074 281.9463 344.2754 c
279.4463 342.4414 279.4473 336.7754 282.1133 333.6094 c
284.7803 330.4414 290.2793 330.9414 291.4463 331.4414 c
f286.6133 354.1094 m
287.9473 360.1074 281.6133 363.7754 v
275.2803 367.4414 271.4473 362.7754 271.1133 361.7754 c
270.7803 360.7754 269.7803 354.6074 277.1133 352.2754 c
284.4463 349.9414 286.2803 353.1094 286.6133 354.1094 c
f266.2803 325.2754 m
262.2803 327.6094 261.2803 332.1094 v
260.2803 336.6094 265.2803 339.1074 270.2803 336.7754 c
275.2803 334.4414 278.1133 328.2754 278.2803 325.6094 C
266.2803 325.2754 L
f268.2803 336.2754 m
265.7803 341.9414 268.6133 346.2754 v
271.4463 350.6094 276.1133 351.1094 278.1133 349.4414 c
280.1133 347.7754 280.4473 343.1094 278.1133 340.1094 c
275.7803 337.1094 271.9463 335.7754 269.9463 335.7754 c
267.9463 335.7754 268.2803 336.2754 y
f237.2803 325.6094 m
236.6133 330.4414 242.6133 331.4414 v
248.6133 332.4414 254.7803 327.1094 255.7803 325.6094 C
237.2803 325.6094 L
f243.9463 337.1094 m
242.6133 343.4414 235.2803 345.4414 v
227.9463 347.4414 224.9463 342.4414 224.9463 340.9414 c
224.9463 339.4414 225.4463 334.9414 233.4463 333.7754 c
241.4463 332.6094 243.1133 335.6094 243.9463 337.1094 c
f256.4463 345.4414 m
252.6133 349.1074 253.9463 355.7754 v
255.2803 362.4414 259.7803 363.7754 262.6133 362.9414 c
265.4463 362.1094 268.4473 357.6074 265.6133 351.7754 c
262.7803 345.9414 257.7793 344.4414 256.4463 345.4414 c
f246.2803 367.2754 m
241.4463 371.4414 242.9463 376.7754 v
244.4463 382.1094 248.7803 383.7754 251.7803 382.6094 c
254.7803 381.4414 256.6133 377.9414 254.7803 372.7754 c
252.9463 367.6094 247.7803 366.1074 246.2803 367.2754 c
f236.2803 372.6094 m
230.4473 372.2754 227.6133 378.9414 v
224.7803 385.6094 229.1133 389.7754 230.7803 390.2754 c
232.4463 390.7754 237.7803 389.6094 239.2803 382.9414 c
240.7803 376.2754 237.1133 372.6094 236.2803 372.6094 c
f223.4463 367.1094 m
223.9463 367.4434 227.7803 368.2754 231.9463 365.6094 c
236.1133 362.9434 236.9463 356.9414 y
230.1133 352.4414 223.4463 355.2754 V
223.4463 367.1094 L
f285.4463 373.1094 m
284.9463 372.2754 279.6133 370.4414 274.7803 373.7754 c
269.9463 377.1074 269.4463 382.2754 y
272.2803 384.2754 276.7803 384.1094 v
281.2803 383.9414 283.6133 381.9434 284.2803 380.6094 C
285.4463 373.1094 L
f266.9463 399.1094 m
266.6133 394.6094 271.4463 391.1094 v
276.2803 387.6094 281.6133 389.4414 282.6133 389.9414 c
281.4463 397.7754 280.7803 399.4414 v
280.1133 401.1094 270.7793 403.6094 266.9463 399.1094 c
f261.7803 419.4414 m
261.9463 415.6094 266.9463 412.4414 v
271.9463 409.2754 276.9473 410.9434 277.6133 411.6094 c
275.7803 419.6074 275.2803 420.2749 v
274.7803 420.9419 266.2803 425.1089 261.7803 419.4414 c
f271.1133 432.6094 m
268.1133 429.9419 262.7803 431.1089 v
257.4463 432.2759 256.2803 437.1089 y
256.9463 439.4429 260.2803 440.7759 v
263.6133 442.1089 267.4463 440.7759 268.2803 440.2759 c
270.1133 435.7764 271.1133 432.6094 v
f263.1133 452.4424 m
260.6133 448.2759 254.7803 449.9424 v
248.9463 451.6089 248.2803 455.6089 y
249.7803 458.2754 253.1133 460.1089 v
256.4463 461.9424 259.9463 459.1089 y
263.1133 452.4424 l
f240.9463 464.9424 m
233.7793 467.1094 233.9463 474.2759 v
234.1133 481.4424 237.4463 483.4424 240.4463 483.4424 c
243.4463 483.4424 246.6133 480.2754 246.7803 474.6089 c
246.9463 468.9424 242.7793 465.1089 240.9463 464.9424 c
f223.1133 455.4424 m
223.7803 457.6089 225.7803 459.7759 230.6133 459.1089 c
235.4473 458.4419 237.9463 453.4424 y
237.1133 449.4424 232.1133 447.9424 v
227.1133 446.4424 223.9473 447.6094 222.7803 449.7759 c
223.4463 454.9424 l
F222.9463 437.9424 m
223.6133 439.9424 226.6133 441.7759 231.7803 441.1089 c
236.9463 440.4419 239.9463 435.7759 y
237.7803 430.9419 231.6133 430.4419 v
225.4463 429.9419 223.6133 432.1079 223.4463 432.9424 c
222.9463 437.9424 l
f242.1133 418.9414 m
240.2803 423.7759 233.6133 424.1089 v
226.9463 424.4419 224.9463 420.4429 225.2803 417.6094 c
225.6133 414.7754 227.6133 412.7754 234.1133 413.4414 c
240.6133 414.1094 242.1133 417.2754 242.1133 418.9414 c
f245.2803 403.2754 m
242.4463 407.7754 235.4463 407.7754 v
228.4463 407.7754 226.4463 403.9434 226.4463 402.1094 c
226.4463 400.2754 227.6133 395.6094 236.4463 396.6094 c
245.2803 397.6094 245.2803 402.1074 245.2803 403.2754 c
f316.0908 525.5283 m
316.1504 525.2764 322.1064 500.0825 324.3262 479.6162 C
324.3535 479.3618 L
326.6152 458.5044 330.0332 426.9839 322.0791 372.8789 C
323.4814 372.6719 L
331.4619 426.9565 328.0322 458.5854 325.7627 479.5146 C
325.7344 479.7686 L
323.5059 500.3252 317.5303 525.6035 317.4697 525.8564 C
316.0908 525.5283 L
f319.457 512.6475 m
319.4873 512.6499 311.2373 512.1499 Y
311.3232 510.7349 L
319.5732 511.2349 L
319.6035 511.2373 331.6035 512.4873 Y
331.457 513.8975 L
319.457 512.6475 L
f322.2559 498.6504 m
322.1826 498.6445 313.1826 497.3945 Y
313.3779 495.9902 L
322.3779 497.2402 L
322.3047 497.2344 336.5547 497.7344 Y
336.5059 499.1504 L
322.2559 498.6504 L
f324.4492 481.1465 m
324.417 481.1421 316.667 479.8921 Y
316.8936 478.4927 L
324.6436 479.7427 L
329.7969 480.3369 337.7168 481.2285 338.2813 481.2339 C
338.2803 482.6509 L
337.5117 482.6509 325.7842 481.3003 324.4492 481.1465 C
f326.7227 463.1484 m
326.6865 463.145 319.1865 462.145 Y
319.374 460.7397 L
326.874 461.7397 L
326.8496 461.7368 339.0879 462.7363 Y
338.9727 464.1484 L
326.7227 463.1484 L
f327.1982 446.6465 m
327.2197 446.6484 318.4697 445.8984 Y
318.5908 444.4863 L
327.3408 445.2363 L
328.4668 445.3672 338.1865 446.501 339.2021 446.7549 C
338.8584 448.1299 L
338.1572 447.9546 331.501 447.1465 327.1982 446.6465 C
f327.5127 427.6499 m
327.4834 427.6489 319.9834 427.1489 Y
320.0771 425.7349 L
327.5771 426.2349 L
327.5771 426.2349 L
327.6016 426.2349 337.5479 426.4839 Y
337.5127 427.8999 L
327.5127 427.6499 L
f326.2813 404.3555 m
326.7793 403.0293 L
327.8086 403.4141 336.876 406.8223 338.1445 407.584 C
337.416 408.7988 L
336.5391 408.2734 330.2773 405.8535 326.2813 404.3555 C
f316.9443 325.8398 m
318.1162 325.043 L
334.9824 349.8457 343.624 378.2051 343.709 378.4883 C
342.3516 378.8965 L
342.2666 378.6152 333.6846 350.457 316.9443 325.8398 C
f323.3271 355.8496 m
323.3428 355.7344 324.8379 344.2852 325.582 340.0684 C
326.9785 340.3145 L
326.2393 344.5 324.748 355.918 324.7334 356.0332 C
323.3271 355.8496 L
f324.8721 338.1328 m
325.1885 336.752 L
325.6807 336.8633 337.2949 339.5352 341.5498 341.2871 C
341.0107 342.5977 L
336.8633 340.8887 324.9912 338.1602 324.8721 338.1328 C
f334.3359 356.873 m
334.7246 355.5098 L
335.1553 355.6328 345.2988 358.5352 347.5684 359.5449 C
346.9922 360.8398 L
344.8135 359.8711 334.4404 356.9023 334.3359 356.873 C
f313.1221 339.1777 m
313.8779 337.2891 317.6758 327.8203 318.1904 327.0488 C
319.3721 327.832 L
319.0039 328.416 316.1504 335.4238 314.4385 339.7051 C
313.1221 339.1777 L
f291.6162 369.1953 m
291.6807 369.0195 298.1699 351.4297 304.0889 325.2852 C
305.4717 325.5977 L
299.5293 351.8398 293.0098 369.5137 292.9443 369.6895 C
291.6162 369.1953 L
f284.4736 353.5527 m
284.5977 353.4941 296.9541 347.5586 299.1367 346.1016 C
299.9229 347.2813 L
297.6572 348.791 285.5986 354.584 285.0869 354.8301 C
284.4736 353.5527 L
f297.8867 350.7383 m
299.1738 350.1445 L
303.6738 359.8945 L
302.3867 360.4883 L
297.8867 350.7383 L
f289.5703 332.4023 m
289.8486 332.166 296.4375 326.5703 300.2305 324.7988 C
300.8301 326.084 L
297.21 327.7734 290.5566 333.4238 290.4893 333.4805 C
289.5703 332.4023 L
f234.6123 374.7051 m
234.708 374.4355 244.333 347.6016 260.4551 325.2773 C
261.6045 326.1074 L
245.6035 348.2617 236.043 374.9121 235.9482 375.1797 C
234.6123 374.7051 L
f244.3232 353.4863 m
245.7373 353.3984 L
246.2275 361.2422 247.9531 368.707 247.9697 368.7813 C
246.5898 369.1035 L
246.5723 369.0273 244.8203 361.4531 244.3232 353.4863 C
f233.5674 357.5156 m
233.9268 357.4023 242.3682 354.752 243.6406 354.4961 C
243.9189 355.8867 L
242.9238 356.0859 236.416 358.1055 233.9922 358.8672 C
233.5674 357.5156 L
f253.4912 337.4023 m
251.4717 337.4141 240.7188 338.6328 240.6104 338.6465 C
240.4502 337.2383 L
240.9004 337.1855 251.5127 335.9824 253.5303 335.9824 c
255.7002 335.9824 257.1484 342.5645 257.9805 348.0859 C
256.5791 348.2969 L
255.7441 342.7598 254.332 337.7852 253.4912 337.4023 C
f240.0791 468.0913 m
240.1787 467.397 250.3633 398.2656 273.1758 361.0723 C
274.3838 361.8125 L
251.7246 398.7559 241.5811 467.6025 241.4814 468.2935 C
240.0791 468.0913 L
f242.7158 455.6479 m
242.6191 455.6323 235.1191 453.8823 Y
235.4414 452.5024 L
242.9414 454.2524 L
242.8438 454.2368 251.0938 454.9868 Y
250.9658 456.3979 L
242.7158 455.6479 L
f246.7217 436.6509 m
246.6055 436.6509 236.5303 436.6509 Y
236.5303 435.2339 L
246.8389 435.2339 L
258.8965 437.2432 L
258.6631 438.6416 L
246.8359 436.6699 246.7217 436.6509 V
f239.2197 419.6484 m
239.3398 418.2363 L
251.0898 419.2363 L
251.4697 419.2129 262.5264 418.7324 263.5303 418.7324 C
263.5303 420.1509 L
262.5566 420.1509 251.1758 420.645 251.0605 420.6499 C
250.9697 420.6479 239.2197 419.6484 Y
f243.251 402.7344 m
255.2451 402.2441 255.415 402.2383 V
256.2451 401.9961 266.6348 398.957 269.4229 397.3301 C
270.1367 398.5547 L
267.0957 400.3281 256.1895 403.4883 255.7266 403.623 C
255.6445 403.6465 L
243.3086 404.1504 L
243.251 402.7344 L
f262.5742 383.7637 m
264.8535 383.0723 271.0273 381.1504 272.2129 380.5586 C
272.8467 381.8262 L
271.3105 382.5938 263.3252 385.0176 262.9854 385.1191 C
262.5742 383.7637 L
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
