%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (861.ai)
%%CreationDate: 3/25/2002 6:35 PM
%%BoundingBox: 222 303 376 543
%%HiResBoundingBox: 222.4844 303.8955 375.5557 542.0059
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 15376 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC8C4B204A204B204A20
%4B204A204B204A204B204A204B204A204B204A204B204BF84B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B204B204B20
%92FD06FC99FFFD05FC4427204B2027444B204B444B2027444B204BF82720
%27F84B204B444B204B444BF8275152275251522752515227525152275251
%5227525152275251522752515227525152274BF84B8CFD04FCC2FFFD04FC
%44F868FCFC20F8FD06FC2020FCFCFC20F8F820F820F84A8CFCFCFC684BF8
%27A8FD17FFFCC2FD0CFFF820FD04FCBBFFFCFCFC8CF8F820F827F8F8F86F
%686F4427F8F8F827F8278C6F6892FC6FFD05F827277DFD18FFBCFCFCCAFD
%0CFFF86FFCFCFCC2FFFCFCFC4A20FC6868684B204AF8F8F82020FCFC6868
%9268FD05FC68F852FD1EFFB5FCFC92FD0CFF76F8FCFCFCBBFFFCFCFCF86F
%FCFCFCB5F86FFD0AFC8C27F86F686F202752FD1FFFFD04FCC2FFFFFFC2B5
%FCFD05FFA8F8FCFCFCC2FFFCFCFC2044FCFC8CF827FD06FC68FCFCFC6827
%2752F827F852A7FD1FFFC3FD04FCBBFFC3FCFCFCB4FD06FFF8FCFCFCBCFF
%FCFCFCF8F8F827F8278CFD05FC44FD04F82727FD1EFFC9B5BBB5BBB5C2CF
%CAFD05FCBBFD04FCBBFD06FFF8FCFCFCC2FFFCFCFC26446868FCFC6E206E
%FC6820F87DFD24FFBBFD05FCBBC9FD0AFCC3FD06FFF8FCFCFC99FFFCFCFC
%206FFCFCFC93F827F8F8F852A8BBC2FD09FFBBFD19FFCFB5FD05FCCAB5FD
%08FCB5FD07FFF8FCFCFCC2FFFCFCFC27206E4427F852FD06FFFCFCFCC2CA
%FD05FFC9FCFCCAFD18FFC9FD05FC9AFF44B56FFD05FCC2FD07FFF8FCFCFC
%BBFFFCFCFCF827202727A8FD07FFBBFCFCFCB5CAFD04FFC3FCFCFCCAFD18
%FFC9BBFCFC8C277D2752F899FCFCB5C3FD08FFF8FCFCFCC2FFFCFCFC267C
%FD0BFFA0FD04FCB5FD04FFBBFD04FCFD1DFF27F8F8F827FFC9CAFD05FFCA
%C3FFFFFFF8FCFCFCBBFFFCFCFCF8A1FD0CFFFD05FCC9FFFFFFC2FD04FCC2
%FD1DFF27F8F8FD07FFC2B5FCC2FFFFFFF8FCFCFCC2FFFCFCFC277DFD06FF
%CAC2C2BCC2CAC3FD04FCC2FFFFFFC2FD04FCB5FD1EFF2727FD05FFC9B4FC
%FCFCC3FFFFFFF8FCFCFCBCFFFCFCFC207DFD04FFCABCFD05FCB4CAC9B5BB
%6852FFFFFFCAFD04FCB5FD1EFF524BFD04FFC3FD05FCCFFFFFFFF8FCFCFC
%C2FFFCFCFC277DFD04FFBBFD07FCBBFFFFFFA7F8A8FFFFFFBBFCFCFCBCFD
%16FF99FCFCB59AFFFFFF2727FFFFFFC9FD05FCB5FD04FFF8FCFCFC99FFFC
%FCFC207DFD04FFCFB5FD06FC442752A8FF52F8FD04FFCA7627FD17FFC2FD
%05FCC3FFA127FFFFFF99FD05FCC3FD04FFF8FCFCFCC2FFFCFCFC277DFD05
%FFCAC2FD05FCCA5227F8F8512727FD05FFF87DFD16FFCAB4FD05FCC97D27
%FFFF7D4BFD04FCB4FFCAFFFFFFF8FCFCFCBBFFFCFCFCF87DFD08FFC9C2C9
%FD05FF7C27F8F852FD04FF5227FFFFA8FD14FFC9B5FD04FCB5A8F8FFA8F8
%75FCFCFCB4C2B4FCFFFFFFF8FCFCFCC2FFFCFCFC267CFD0DFF5227277DFF
%CF5127F8277DFFA8F8A8FF52277CFD13FFA7B5FCFCFC75FFF8A82727FFA1
%C2BBB4FCFCFCFFFFFFF8FCFCFCBBFFFCFCFCF8A1FD0EFFFD05F8A1FFA827
%27F87DF87DFF7DF8F827FD06FFA8FD0DFFCAC2A1F827F82727FFFFFFC3FD
%04FCBBFFFFFFF8FCFCFCC2FFFCFCFC277DFD0EFF52FD05F852FFFFA876F8
%F8F8A87DFD04F8A7FD04FFF87DFD06FFCAC9C3C9FD06FF27F8F8FD04FFB4
%FD04FCC2FFFFFFF8FCFCFCBCFFFCFCFC207DFD0FFF27FD05F852FD04FF7D
%27F827FD05F8A8FFFFFF52F852A8FD05FFB4FD04FCBBC2FFFFFFF852FFFF
%FFCAFD05FCFD04FFF8FCFCFCC2FFFCFCFC277DFD0FFF7DFD06F87DFD05FF
%A827FD06F8A7FFFF7DF8F8F87DFD04FFCAFD06FCBBFFFF5227FFFFFF76FD
%04FCCAFFFFA8FFF8FCFCFC99FFFCFCFC207DFD10FF27FD05F827FD07FF27
%FD06F8FFFFFFFD04F8A8FD04FFC9FD06FCC2FF5227FFFF7D2792B5BBCA52
%27F87DFFF8FCFCFCC2FFFCFCFC277DFD11FFFD06F8FD07FFA8FD06F87DFF
%FFFD04F827FD05FFC3FD05FCB5FF7DF8FFA82727FFFFA8FD04F87DFFF8FC
%FCFCBBFFFCFCFCF87DFD12FFFD05F8FD08FF27FD05F8FFFFFF27FD04F87D
%FD05FFCAB4FCFCFC6FFFA8F8FF27F8FFFFFFFD05F87DFFF8FCFCFCC2FFFC
%FCFC267CFD13FF7D5227F827FD07FFA827F8F8F876FFFFFF52FD05F8FFFF
%FF7D7DFFFFC3C29A2727FFF852F8CFFFFFFD06F84BFFF8FCFCFCBBFFFCFC
%FCF8A1FD16FFA82727FD07FFA85227277DFFFFFF7DFD05F8FFFFFFA8F852
%A8FFFFFFA827F827F8A8FFFF7DFD06F8A1FFF8FCFCFCC2FFFCFCFC277DFD
%07FFA87627522776FD0AFFA82727FD09FF2727FD04FFFD05F8A7FFFFFFF8
%F8277DFFFFFFA852F827FFFFFF52FD06F8FFFFF8FCFCFCBCFFFCFCFC207D
%FD05FFA827FD06F8277DFD09FFA82727FD08FFA8F8A8FFFFFFA8F8F8F827
%FD04FFF8F8F8277DFD04FF5227FFFFFF27FD05F87CFFFFF8FCFCFCC2FFFC
%FCFC277DFFFFFFA852FD0DF827F827277D7DFF7DF851FD08FF2727FD04FF
%A827F852FD04FF27FD04F87DFFFFFF7DF8FFFFFF7DFD04F827FFFFFFF8FC
%FCFC99FFFCFCFC207DFFFFFF7DFD0AF851FFFFFF7D7D52522727F82727F8
%4BFD07FF7D27A8FD05FF274BFD04FF27FD04F827A8FFFFFFF8FFFFFFA827
%F82752FD04FFF8FCFCFCC2FFFCFCFC277DFD05FFA727FD06F827FD0BFF51
%27F8F8F82752A8FD04FFF876FD05FFA7F8FD04FF76FD05F827FFFFFF207D
%FFFF52F8FD05FFA827F8FCFCFCBBFFFCFCFCF87DFD07FFA8525227527DFF
%FFFF7D52F827277CFF7DF82727FFFFA85227F82727A8FF7CF8FD06FFF87D
%FFFFFFA8FD06F8FFFFFF2752FFFFF87DFD04FF7D27F8F8FCFCFCC2FFFCFC
%FC267CFD0EFFA7FD09F876FD08FF5227F8F827F87CFD05FF2727FD04FF27
%FD05F8FFFFFF52F8FF5227FD04FF52FD04F8FCFCFCBBFFFCFCFCF8A1FD0D
%FF7DFD08F827FD0DFF27F8F82752FD04FF7DF8FD04FFA8FD05F8FFFFFF7D
%F8FF2752FFFFFF52FD05F8FCFCFCC2FFFCFCFC277DFD0CFF76FD09F8FD08
%FF7D27527DA8F8277DFF5227F8277DFFFFF8A7FD04FFA8F8F8F8A8FD04FF
%F852F8FFFFFF7DFD06F8FCFCFCBCFFFCFCFC207DFD0CFFFD07F82727FD07
%FF5227FD05F852FD05FFA827F8F87D2752FD07FF2752FD04FF27F852FFFF
%A8FD07F8FCFCFCC2FFFCFCFC277DFD0EFFA87D7D7CFD09FF27FD07F8FD08
%FFA852F8F8F8FD07FF5127FD04FF27F8A8FFFF52FD07F8FCFCFC99FFFCFC
%FC207DFD1AFF52FD07F827FD0AFF7DF8F8F852A8FD05FFF8A8FFFFFFA8F8
%FFFFFFFD06F827F8FCFCFCC2FFFCFCFC277DFD19FF7DFD08F8A8FFFFA751
%F82727A87D27F876FF7DF8F827FD04FF2727FD04FF207DFFFFFD06F8A7F8
%FCFCFCBBFFFCFCFCF87DFD19FF27F827FD05F87DFFFF4BFD06F82052FD05
%FF7D27F87CFFFFA8F8A8FFFFFF2752FFFF27FD04F87DFFF8FCFCFCC2FFFC
%FCFC267CFD22FFCFFD08F87DFD08FF7DF8F852FF2752FFFFFF7DF8FFFF52
%F827F87DFFFFF8FCFCFCBBFFFCFCFCF8A1FD21FFA8FD08F827FD0BFF5227
%277CF8FD04FF27A8FF2752FD05FFF8FCFCFCC2FFFCFCFC277DFD21FFFD07
%F8277DFD06FFA8FD06FFA852F8F827FFFFFF2752A8F8A7FD05FFF8FCFCFC
%BCFFFCFCFC207DFD20FFA8FD057DA8FD06FF7D27FD04F852A8FF7D522727
%F8F852FFFF7DF87D27FD06FFF8FCFCFCC2FFFCFCFC277DFD2BFF7DFD0CF8
%527DFF7DF8F8A8FFF8F876FD06FFF8FCFCFC99FFFCFCFC207DFD2AFF27FD
%0AF852FD07FF52F8522727A8FD06FFF8FCFCFCC2FFFCFCFC277DFD29FFA8
%7D27FD08F852FD09FFA8F8F8F8FD07FFF8FCFCFCBBFFFCFCFCF87DFD2DFF
%A8FD047DA8FD05FF7D27A8FD05FF52F827FD06FFF8FCFCFCC2FFFCFCFC26
%7CFD25FF277D7CA8FD0EFFA8F8F8F8A8FD05FFA827F8A8FD04FFF8FCFCFC
%BBFFFCFCFCF8A1FD25FF27F8F8F82727FD0CFF4BF8F8F827FD07FF52F852
%FFFFFFF8FCFCFCC2FFFCFCFC277DFD25FF52FD06F8A8FD0AFFFD05F8A8FD
%07FFA8F827A8FFF8FCFCFCBCFFFCFCFC207DFD25FF7DFD07F8FD09FF7DFD
%05F827FD09FF27F87DF8FCFCFCC2FFFCFCFC277DFD26FF27FD06F852FD08
%FF7DFD05F827FFA8F8A8FD06FF52F8F8FCFCFC99FFFCFCFC2052F827A8FD
%14FF7D27272627F827262727A8FD04FFA827FD05F852FD08FF7DFD05F827
%FF27F8F8FD07FF7DF8FCFCFCC2FFFCFCFC27F82726F827FD09FFF8FF7D52
%FFFFFF52F8F8F8274A7B50512627F82627FD05FFA852FD05F8FD08FF7DFD
%05F852A7FD04F8FD07FFF8FCFCFCBBFFFCFCFCF82726C67A27F851A8FD04
%FFA8F8277D27277D2727F8519EC67A27F8F8202726512627F82752FD05FF
%7D7D7D27F8A8FD06FFA8FD05F87C52FD04F827FD06FFF8FCFCFCC2FFFCFC
%FC264B27F8F8749F26FD0CF82774C6F8277451264BF826FD08F826A8FD07
%FF52F87DFD06FF27FD04F8FF27FD04F827FD06FFF8FCFCFCBBFFFCFCFCF8
%A1F8C774C6C6519E752627F827F8274A9FA4FD04C627F875C6C6747574C7
%C6C67451264B2027F8277DFD06FF7DF87DFD06FF51F827FFFF52FD05F8FD
%06FFF8FCFCFCC2FFFCFCFC277D2750C6C69FF820FD0EC620F89EC6C627F8
%519EC69E27264B26512626F8F827A7FD05FF7DF852FD06FFF8FFFFFF7DFD
%04F827FD06FFF8FCFCFCBCFFFCFCFC207D522750C67427F851FD04C67427
%F8272075C6C6C62726C6C67B2675262774FD05C64A514A51262727FD06FF
%A8F827FD05FFF8FD04FF27F8F8F852FD06FFF8FCFCFCC2FFFCFCFC277DFF
%7DF84A7BF875F8FD04C620F8F8F84BF8269EC64AF89EC6F851F826747BFD
%04C69E27264B264B2026F8F827A8FFFFFFA8F827FD04FFF8FD05FFF8F827
%FD07FFF8FCFCFC99FFFCFCFC207DFFFF27F85027C6277AC6C6C69E27F8F8
%507BF8279EC6C6C69E75F8514A27A4FD04C67BFD04C67A27FD05F82727FF
%FFFFF84BFFFFFFF8FD05FF7DF8FD08FFF8FCFCFCC2FFFCFCFC277DFFFF27
%26F8F8C6264BFD04C69E51F826F84B50FD04C620F875F89E74C6C6C674C6
%20269EC6C6C6FD09F8A8FFFFF827FFFFF8FD05FF7D27FD08FFF8FCFCFCBB
%FFFCFCFCF87DFFFF275150F8267520FD0EC64B4A7BF87BFD05C651F8514A
%269EC6C6C7FD09F852A8FFF827FFF8A8FD04FF7D27FD08FFF8FCFCFCC2FF
%FCFCFC267CFFFF5120C69E26F8F874FD0DC69E4BF87B9EFD04C69FF84B26
%F874FD05C64A26FD09F84BF827F87DFD04FF7C27FD08FFF8FCFCFCBBFFFC
%FCFCF8A1FFFF7D27A4C6C69F26F826C7FD0AC62627747B50FD04C651207B
%262774A5C6A5F8519EC6C6C774514B7BC6CCCE7D2727F8F87DFD04FFA8F8
%FD08FFF8FCFCFCC2FFFCFCFC277DFFFFFFF827FD04C69E26F8FD09C62627
%26F826FD06C675F84B74F87AC6C69F26F850FD09C6C7FFFF7DF827FD05FF
%F8FD08FFF8FCFCFCBCFFFCFCFC207DFD04FFF827FD05C64B7AFD08C6C726
%279E9FFD04C67A2650C72627C6C6C627F87B9E274AFD0AC6CFFFFFF827FD
%04FFF8FD08FFF8FCFCFCC2FFFCFCFC277DFD04FFCFF82674FD0DC69EC626
%27FD06C67426F89E2651C6C6C651F8279E9EFD04C6747B747B74C6C6CEFF
%FFF827FFFFFFF8FD08FFF8FCFCFC99FFFCFCFC207DFD06FF51F8F89FFD0A
%C674274BC7F8A5FD04C674A5C651F87BC6C6C62726A52627FD04C69E27FD
%05F82774CEFFFFF84BFFFFF8FD08FFF8FCFCFCC2FFFCFCFC277DFD07FFA8
%52F89FFD0AC6744BF89EFD05C67BF84B9E9FF875C6C6C651F8279EFD05C6
%9EFD07F84ACDFFA7F876FFF8FD08FFF8FCFCFCBBFFFCFCFCF87DFD09FF52
%F8FD09C69E27F87B74FD04C69F4AA526277AC79EC6C6277AC62627C6C6C6
%5126C79E27FD06F826CDFFA8F87DF8FD08FFF8FCFCFCC2FFFCFCFC267CFD
%09FFA8F874FD08C6752626F8FD05C69E4BF87550F8FD04C650F84AFD05C6
%4A27F87B9E27FD09F827F8F8FD08FFF8FCFCFCBBFFFCFCFCF8A1FD0AFF27
%27FD07C6A5514BF851FD05C67B269FF8519EC6C6C674519E274AFD04C6C7
%F851F89FC69F4A51F8519EC674522727F8A8FD07FFF8FCFCFCC2FFFCFCFC
%277DFD0BFFF875FD06C69E27267BF8FD05C65027F87B50FD04C67B262050
%FD04C675269FF851FD04C64A7BF8279EC674A7FF52F8A8FD06FFF8FCFCFC
%BCFFFCFCFC207DFD0BFF7DF8C7FD06C69E277AFD05C69E27F82774FD05C6
%50262627FD05C651F89F26C6C6C67A2720A52675C675F8275227F8FD06FF
%F8FCFCFCC2FFFCFCFC277DFD07FF7D522727F8F8F8FD0EC64BF82726FD06
%C6F82027F8FD04C675269EF87BC6C674262627F8FD05C650F85227F8FD05
%FFF8FCFCFC99FFFCFCFC207DFD06FF27F8F851747B9E2726FD0EC6A55151
%FD05C69FF875F84BC6C6C6C79E2726C7A4C6C67BF827F89FFD04C626F84A
%F8A12727FD04FFF8FCFCFCC2FFFCFCFC277DFD06FFF874FD05C69EF826FD
%16C675F851FD04C69E20504B4AFD04C675F851F8FD04C67B74F8F851A8F8
%52FFFFFFF8FCFCFCBBFFFCFCFCF87DFD06FFF89FFD06C69E27F89FFD15C6
%C726FD04C626502774FD04C6757A51F8FD05C6F82726F8F8FF7DF87DFFFF
%F8FCFCFCC2FFFCFCFC207CFD06FF2726C6C6C69E7526FD04F82774FD19C6
%50F8749EFD04C626F84A4B74FD04C67B4AF8F827FFFF52F8A8FFF8FCFCFC
%BBFFFCFCFCF8A1FD06FF7D2774C64A27F85174C6C6A52627F8517AFD17C6
%5027FD05C627202726FD05C6F851262726FFFFFF2727FFF8FCFCFCC2FFFC
%FCFC207DFD07FF52F8F82074FD08C67526F8F827267B9EFD0DC62075FD09
%C69F2027F87BFD05C651F851F8F8FD04FFF851F8FCFCFCBCFFFCFCFC207D
%FD08FFF827FD0DC69F4A27F8F8F8272627507B747B9EFD04C65120FD0AC6
%51F8757AC6C6C69E7BF827F8274BFD04FFA8F8F8FCFCFCC2FFFCFCFC277D
%FD07FF52F89EC6C6C69E7526272651747B9EFD05C67427F8F8F827F827FD
%08F850FD0AC67550FD04C69EF851F826F8A7FD05FF7DF8FCFCFC99FFFCFC
%FC207DFD07FF2750C6C6C674272051F8272727FD07F827277DA8FD09FF7D
%A12727FD10C6F85120272627CFFD06FFF8FCFCFCC2FFFCFCFC277DFD06FF
%7DF8C6C6C650F84AC6C651F8FD19FFF851FD0EC69E27F8202627F8FD07FF
%F8FCFCFCBBFFFCFCFCF87DFD06FF274BC6C69E20F87BC6C6C6F87DFD18FF
%7DF89FFD0CC674F84AF8262726CFFD07FFF8FCFCFCC2FFFCFCFC207CFD05
%FFA8F89EC6C627F852F8C69E27F827FD17FFCFF8F8F89EFD08C69E9EC64B
%F8F8F826F8FD09FFF8FCFCFCBBFFFCFCFCF8A1FD05FF27F8512751F8A8FF
%27F827F875F8A8FD15FF52F8272627F851FD07C69FF8C64AFD04F8CFFD07
%FFA8A8F8FCFCFCC2FFFCFCFC207DFD05FFF827F827F826FFFF52F8502750
%2726FD13FFA827F827264BF827F8279EC6C6C69E512627264BFD04F8A7FD
%05FF7D27F87DF8FCFCFCBCFFFCFCFC207DFD04FF27279EF89E2752FFFFFF
%20752627F851FD12FF7DF8F85120512627502620F8269F9EF89EF8262726
%FD04F827FD04FF27F8F8F87DF8FCFCFCC2FFFCFCFC277DFFFFFFA8F82626
%F826F8FD04FF76F8F8F8A8FD12FF4BF8F8264AF87426204BF87BF820F8F8
%F84B26F82620FD05F8FFFFFFFD05F8A7F8FCFCFC99FFFCFCFC207DFFFFFF
%7DF827275252A1FD04FFA8277DFD13FFA72720F82651F89FF87BF8512675
%F89FF875F851F8517CFD05F8FFFF27FD05F8FFF8FCFCFCC2FFFCFCFC277D
%FD24FF27F84BF84B262750F874F874F850272651F851F8CEFFFFFD05F8FF
%A7FD06F8FFF8FCFCFCBBFFFCFCFCF87DFD24FF2051F82750F8264B265126
%27757C7B277A274BCFFFFFFF7DF8F8F87DFF7DFD05F852FFF8FCFCFCC2FF
%FCFCFC207CFD0EFFB592CAFD05FF5252FD0CFF76A0A051A626A65175F8C6
%F8FFFFFF7DFD08FF7DF827FFFFFFFD05F8A8FFF8FCFCFCBBFFFCFCFCF8A1
%FD08FFBCB5BCFFFFFFB5FCFCC2FD04FF27F8F87DFD12FFCFF87B27F82727
%527DFD08FF5227FFFFA8F8F8F8277DFFFFF8FCFCFCC2FFFCFCFC207DFD08
%FFC2FCFCFCCAFFC2FCFCFCBBFFFFFF7DF8F8F827A8FFFFFF52517DFD0BFF
%52A852FD06F8A7FD06FF7D27FFA8F852FD06FFF8FCFCFCBCFFFCFCFC207D
%FD08FFC3FD04FCCFC2FD04FCC3FFFFA8FD05F87DFFFFA8F8F8F8277DFD0B
%FFFD07F8A8FD05FFA8F8FFF827FD07FFF8FCFCFCC2FFFCFCFC277DFD08FF
%CAFD04FC93CFFD04FCB4FFFFFFFD06F8A8FFFFFD05F827FFFFFFCAC3CAFD
%04FF7DFD06F827FD06FFF8F827FD08FFF8FCFCFC99FFFCFCFC207DFD09FF
%B5FD04FCFFBBFCFCFCB5FFFFFF52FD05F8A1FFFF27FD05F852FFFFFFFCB5
%BCFD04FF4BFD05F827FD06FFF827A8FD08FFF8FCFCFCC2FFFCFCFC277DFF
%FFCFC2C2BBC2C2CAC2FD04FCFFCAB5FCFC93FD04FF20FD04F87DFFFF7DFD
%05F827FFFFFFB5FCFCB4FFFFFFA827FD05F8207DFD04FF5227FD09FFF8FC
%FCFCBBFFFCFCFCF87DFFBCFD07FCC3C3BB924BA8FFFFCA752752FFFFFFA8
%27F8F8F8A8FFFFFF27FD05F8FFFFFFBBFCFCFCB4FD04FF7D4B5252FF4BF8
%52FFFFFF5227FD09FFF8FCFCFCC2FFFCFCFC207CCAFD09FCFFFFFFF8F8A8
%FFFFFF7DF852FD04FFA87C27F8CFFFFFA8FD04F827FFFFFFC3FD04FC99FD
%09FF7DF8F8A8FFA8F8FD09FFF8FCFCFCBBFFFCFCFCF8A1FFC3FD08FCF827
%2727F8277DFFFFFF7DF852FD06FF27F8FFFFFFA85226F827FFFFFFCFFD04
%FCBBFD0AFFA852F87DFF277DFD08FFF8FCFCFCC2FFFCFCFC207DFFFFCAB4
%FD05FCB4FF7D7D2727F8F8F820F85227F827FD05FFA82027FD05FF7DF87D
%FFFFFFBBFCFCFCB5FD0CFF7DF827F876FD08FFF8FCFCFCBCFFFCFCFC207D
%FD04FFCAC9BCC2C3FFC3C2A027F87DFFFF7D7C2727F8F8F82727527DA8A8
%2727FD05FF52F8A8FFFFFFBCBB6E76FD0EFF27F827FD08FFF8FCFCFCC2FF
%FCFCFC277DFD09FF8CFCFCFC4BFD05FFBBB592C3F8F852522727FD05F87D
%A8FFFFFF27F8A8FD04FFA8F87DFD0EFF27F852FD07FFF8FCFCFC99FFFCFC
%FC207DFD08FFB5FD04FCBBFD04FFB5FD04FC4BA8FD05FF5227F82727F8F8
%272752F827FD05FF7DF8A8FD05FF7D274B277DFD04FF762727FD06FFF8FC
%FCFCC2FFFCFCFC277DFD07FFC9FD05FCB5FFFFFFBBFD05FCBCFFFFFFA8A8
%27F852FD05FF7D522727F8F8F827277DA852F8FFFFFF27FD06F820A8A87D
%5227F8F8FD05FFF8FCFCFCBBFFFCFCFCF87DFD07FFC3FD05FCCFFFFFCAFD
%06FCC9A827FD04F87DFD09FFA827F8275252F827F8F8F827FD0BF8272752
%4B27F8A8FFFFFFF8FCFCFCC2FFFCFCFC2052FD07FF99FCFCFC93FD04FFC2
%FD05FCBB7DFD06F8FD06FFA87D7D27F827CFFD05FFA8524BFD0AF827FD06
%FF4BF8A7FFFFF8FCFCFCBBFFFCFCFC204BFD07FFCAC9CFFD06FFB5FCB4BC
%C2CFFF27FD05F852FD04FF7627F8F8F8277DFD0BFFA827FD07F8A8FD07FF
%7DF87D5227FCFCFCC2FFFCFCFC8CF8A8FD0FFFCAFD05FF52FD05F827FD04
%FF27FD05F827FD0EFFA85127F82727A8FD09FF7DF8F844FCFCFCBCFFFD04
%FC6FF87DFD14FFFD04F8277DFD04FF7DFD06F852FD1EFFA827F8FD04FCC2
%FFFD05FC4BF82727522752275227522752275227522752275227F8F8F827
%522752275227FD07F8275227522752275227522752275227522752275227
%52275227522752275227F820FD05FC99FFFD06FCB5444B264B4B4B264B4B
%4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B204B2627F827274B26
%4B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B8C
%FD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
375.5557 303.8955 m
222.4844 303.8955 L
222.4844 542.0059 L
375.5557 542.0059 L
375.5557 303.8955 L
fu0 0 0 0 k
229.3525 516.1182 m
229.5195 320.7852 l
229.6865 311.9521 238.3525 311.2852 v
359.0195 310.9512 l
368.0186 312.7852 368.1855 320.1182 v
368.5195 526.2842 l
368.1865 533.6172 358.5195 534.7842 v
292.0195 534.9512 l
239.1865 527.4512 l
229.3525 516.1182 l
f0 0.2 1 0 k
347.3525 389.1182 m
343.8525 395.1182 337.1025 400.7432 v
330.3525 406.3682 323.3525 410.2432 y
314.9775 415.8682 l
311.3525 416.3682 310.8525 416.9932 v
310.3525 417.6182 309.6025 418.9932 y
305.2275 420.7432 304.2275 421.6182 v
303.2275 422.4932 300.8525 423.1182 y
300.6025 423.8682 299.9775 424.3682 v
299.3525 424.8682 295.3525 425.9932 y
294.2275 427.2432 292.6025 428.2432 v
290.9775 429.2432 282.2275 429.4932 276.3525 428.3682 c
270.4775 427.2432 265.3525 424.3682 262.3525 423.7432 c
259.3525 423.1182 252.4775 421.9932 249.1025 422.4932 c
245.7275 422.9932 238.1025 426.6182 236.2275 427.6182 c
234.3525 428.6182 232.9775 429.6182 y
231.7275 429.8682 231.4775 428.4932 v
231.2275 427.1182 233.1025 419.9932 y
236.7275 415.9932 l
237.3525 415.1182 l
236.2275 409.6182 238.4775 405.7432 v
240.7275 401.8682 249.2275 398.2432 y
250.4775 396.3682 250.7275 395.6182 v
250.9775 394.8682 253.3525 388.8682 255.7275 387.1182 c
249.3525 385.9932 247.2275 385.7432 v
245.1025 385.4932 243.4775 383.7432 243.3525 382.2432 c
243.2275 380.7432 244.6025 378.9932 244.9775 378.4932 c
245.3525 377.9932 248.2275 374.1182 y
245.6025 368.8682 245.2275 367.6182 v
244.8525 366.3682 239.6025 355.2432 y
249.3525 356.6182 l
251.1025 364.2432 254.3525 367.4932 v
258.7275 360.3682 260.3525 355.6182 v
267.6025 359.7432 l
263.4775 368.1182 263.2275 370.7432 v
270.8525 370.1182 272.7275 369.8682 v
274.6025 369.6182 284.8525 369.1182 289.7275 372.7432 c
310.6025 371.3682 l
311.8525 370.2432 l
314.1025 366.1182 315.1025 364.9932 v
306.6025 359.6182 303.9775 357.8682 v
301.3525 356.1182 299.2275 353.2432 300.1025 350.1182 c
306.9775 349.6182 307.9775 349.4932 v
308.9775 349.3682 312.4775 349.6182 y
314.7275 348.4932 l
316.7275 346.4932 l
319.2275 349.2432 320.3525 349.4932 v
321.4775 349.7432 321.9775 351.8682 323.3525 351.9932 c
324.7275 352.1182 327.4775 350.4932 328.9775 350.4932 c
330.4775 350.4932 333.3525 351.1182 y
338.3525 354.9932 340.7275 356.6182 v
343.1025 358.2432 347.3525 360.3682 347.8525 360.7432 c
348.3525 361.1182 349.6025 363.2432 350.4775 364.6182 c
351.3525 365.9932 353.9775 367.6182 y
354.7275 372.7432 355.6025 374.2432 v
356.4775 375.7432 355.1025 380.4932 354.2275 383.6182 c
353.3525 386.7432 349.6025 388.6182 347.3525 389.1182 c
f0 1 1 0 k
229.3525 516.1182 m
229.5195 525.9512 l
228.8535 534.6182 241.1865 534.9512 v
293.1865 534.7842 l
291.0195 528.1182 278.6865 530.1182 v
277.8525 526.4512 273.5195 525.2842 v
269.1865 524.1182 265.6855 525.6182 265.0195 526.4512 c
261.3535 520.4512 253.1865 522.9512 v
250.8535 517.1182 241.1865 519.6182 v
236.6865 512.9512 229.3525 516.1182 v
f*u
1 D
0.65 0.53 0.51 1 k
239.4404 535.4932 m
233.5791 535.4932 228.8105 530.7246 228.8105 524.8633 C
228.8105 321.0391 L
228.8105 315.1777 233.5791 310.4092 239.4404 310.4092 C
358.5986 310.4092 L
364.46 310.4092 369.2285 315.1777 369.2285 321.0391 C
369.2285 524.8633 L
369.2285 530.7246 364.46 535.4932 358.5986 535.4932 C
239.4404 535.4932 L
f0 D
230.2275 321.0391 m
230.2275 524.8633 L
230.2275 529.9434 234.3604 534.0762 239.4404 534.0762 C
358.5986 534.0762 L
363.6787 534.0762 367.8105 529.9434 367.8105 524.8633 C
367.8105 321.0391 L
367.8105 315.959 363.6787 311.8271 358.5986 311.8271 C
239.4404 311.8271 L
234.3604 311.8271 230.2275 315.959 230.2275 321.0391 C
f*U
231.79 430.0283 m
231.0635 429.5908 230.6816 428.6104 230.8164 427.5303 c
230.8252 427.4551 231.8633 419.9385 232.6855 419.1172 C
233.2451 418.6494 L
233.9248 418.123 235.0635 417.2402 236.793 415.0156 c
239.1416 411.9971 243.7314 408.334 247.3477 407.4307 c
250.417 406.6631 253.2861 403.3564 253.3154 403.3232 c
253.5703 403.0273 254.0176 402.9932 254.3145 403.248 c
254.6113 403.502 254.6455 403.9492 254.3906 404.2461 c
254.2627 404.3965 251.2031 407.9277 247.6914 408.8057 c
244.416 409.624 240.0654 413.1182 237.9121 415.8857 c
236.0723 418.252 234.7979 419.2393 234.1133 419.7695 C
233.6875 420.1191 L
233.3516 420.709 232.4434 425.9375 232.2227 427.7061 c
232.1523 428.2666 232.3242 428.6963 232.5215 428.8145 c
232.6992 428.9219 233.0439 428.8164 233.4463 428.5371 c
235.2598 427.2676 243.3213 422.4229 249.6289 421.9121 c
256.1475 421.3838 264.6563 423.376 268.6162 424.96 c
272.6943 426.5918 282.1162 430.3604 293.3408 427.4326 c
293.7188 427.333 294.1064 427.5605 294.2051 427.9395 c
294.3037 428.3174 294.0771 428.7051 293.6982 428.8037 c
282.0225 431.8496 272.2979 427.958 268.1445 426.2979 c
264.2578 424.7432 256.0332 422.8145 249.7432 423.3242 c
243.8135 423.8047 235.9004 428.5498 234.2588 429.6982 c
233.0449 430.5488 232.1914 430.2705 231.79 430.0283 c
f277.5938 425.1113 m
277.2295 424.9678 277.0508 424.5576 277.1934 424.1934 c
277.3359 423.8291 277.7471 423.6494 278.1113 423.792 c
278.2402 423.8418 291.0713 428.7588 300.3193 423.1777 c
300.6543 422.9756 301.0908 423.083 301.292 423.418 c
301.4941 423.7529 301.3867 424.1895 301.0518 424.3916 c
291.1992 430.3369 278.1445 425.3271 277.5938 425.1113 c
f281.1846 423.6396 m
280.8047 423.5469 280.5723 423.1641 280.6641 422.7842 c
280.7568 422.4033 281.1396 422.1709 281.5205 422.2627 c
281.6484 422.2939 294.4395 425.3115 305.9102 420.4658 c
306.2705 420.3135 306.6855 420.4814 306.8379 420.8428 c
306.9902 421.2031 306.8223 421.6182 306.4609 421.7705 c
294.5488 426.8037 281.7246 423.7715 281.1846 423.6396 c
f291.5273 421.3086 m
291.1455 421.2207 290.9082 420.8408 290.9961 420.459 c
291.084 420.0781 291.4639 419.8398 291.8447 419.9277 c
291.9297 419.9473 300.4346 421.8301 309.9385 418.2871 c
310.3047 418.1504 310.7129 418.3369 310.8496 418.7041 c
310.9863 419.0703 310.7998 419.4785 310.4326 419.6152 c
300.5137 423.3125 291.8887 421.3926 291.5273 421.3086 c
f299.2275 417.8154 m
298.8428 417.7471 298.5869 417.3789 298.6553 416.9941 c
298.7236 416.6084 299.0918 416.3525 299.4766 416.4209 c
299.5684 416.4365 308.7031 417.999 316.8945 414.3057 c
317.251 414.1445 317.6709 414.3027 317.8311 414.6602 c
317.9922 415.0166 317.834 415.4365 317.4766 415.5967 c
308.876 419.4756 299.6182 417.8857 299.2275 417.8154 c
f241.3525 421.1914 m
239.792 416.8564 241.4355 411.1592 241.5068 410.918 c
241.6172 410.543 242.0107 410.3281 242.3857 410.4385 c
242.6943 410.5293 242.8945 410.8115 242.8945 411.1182 c
242.8945 411.1846 242.8857 411.251 242.8662 411.3174 c
242.8555 411.3555 242.1035 413.9688 242.1035 416.8652 c
242.1035 417.8252 242.2324 418.7988 242.4521 419.7383 C
243.5547 418.6777 245.6846 415.7236 246.8184 408.0146 c
246.875 407.6279 247.2354 407.3604 247.6221 407.417 c
248.0098 407.4736 248.2773 407.834 248.2207 408.2217 c
246.542 419.6318 242.709 421.4424 242.2773 421.6113 C
241.5996 421.877 L
241.3525 421.1914 L
f*u
1 D
255.1963 417.582 m
254.5264 417.2393 L
254.9092 416.5908 L
259.0117 409.6328 268.043 413.4287 268.1338 413.4678 C
269.0234 413.8516 L
268.3877 414.583 L
262.5908 421.2578 255.2695 417.6191 255.1963 417.582 C
f0 D
266.5137 414.4033 m
264.3975 413.7412 259.5439 412.8242 256.665 416.6455 C
258.3896 417.2578 262.6299 418.1221 266.5137 414.4033 C
f*U
236.6641 415.6172 m
236.6396 415.5186 236.3672 414.3486 236.3672 412.6279 c
236.3672 410.7285 236.6992 408.1592 238.0615 405.6162 c
240.5195 401.0293 247.6914 398.1074 248.7422 397.6992 C
248.9424 397.4307 249.376 396.8203 249.7188 396.1338 C
249.918 395.7012 L
254.085 386.4648 258.8545 381.9004 262.123 379.6973 c
269.8477 374.4912 287.5791 371.9414 294.4824 371.5771 c
299.5303 371.3115 310.0342 370.7568 311.1582 370.4365 c
311.5342 370.3291 311.9268 370.5479 312.0342 370.9238 c
312.1416 371.2998 311.9229 371.6924 311.5469 371.7998 c
310.4834 372.1035 304.2568 372.4814 294.5566 372.9932 c
288.7783 373.2979 270.5449 375.7314 262.915 380.873 c
259.7998 382.9727 255.2393 387.3506 251.21 396.2832 C
250.9863 396.7686 L
250.459 397.8232 249.7686 398.6914 249.7402 398.7275 C
249.6182 398.8799 L
249.4355 398.9482 L
249.3574 398.9775 241.6543 401.9121 239.3105 406.2861 c
236.9756 410.6445 238.0313 415.2402 238.042 415.2861 c
238.1328 415.666 237.8984 416.0488 237.5176 416.1396 c
237.1377 416.2305 236.7559 415.9971 236.6641 415.6172 c
f309.3232 376.2988 m
308.9473 376.1904 308.7305 375.7979 308.8389 375.4219 c
308.9434 375.0586 311.4814 366.4688 318.0967 361.5498 c
324.6318 356.6904 328.5117 355.6416 328.6738 355.5996 c
329.0518 355.501 329.4375 355.7275 329.5371 356.1045 c
329.6367 356.4824 329.4102 356.8701 329.0332 356.9707 c
328.9951 356.9805 325.2227 358.0166 318.9424 362.6865 c
312.7178 367.3154 310.2246 375.7305 310.2002 375.8145 c
310.0918 376.1904 309.6982 376.4072 309.3232 376.2988 c
f345.9941 389.4395 m
345.9092 389.0576 346.1494 388.6787 346.5313 388.5938 c
346.5732 388.584 350.792 387.6133 352.6064 385.042 c
354.4434 382.4414 354.4766 379.6445 354.4766 379.6162 c
354.4785 379.2256 354.7959 378.9092 355.1875 378.9102 c
355.5781 378.9111 355.8945 379.2275 355.8945 379.6182 c
355.8945 379.75 355.8701 382.877 353.7646 385.8604 c
351.6309 388.8818 347.0342 389.9336 346.8398 389.9766 c
346.458 390.0615 346.0791 389.8213 345.9941 389.4395 c
f348.4668 385.6582 m
348.082 385.6289 347.7988 385.2988 347.8193 384.9131 c
347.8398 384.5283 348.1729 384.2305 348.5586 384.2432 c
348.5977 384.2451 352.5205 384.2637 354.6611 374.6318 c
354.7461 374.249 355.124 374.0088 355.5059 374.0938 c
355.8887 374.1787 356.1289 374.5566 356.0439 374.9385 c
353.6064 385.9111 348.6758 385.6729 348.4668 385.6582 c
f347.165 381.7832 m
347.0742 381.4043 347.3086 381.0215 347.6875 380.9287 c
347.8984 380.877 352.8662 379.5781 353.4795 372.2266 c
353.5117 371.8359 353.8545 371.5469 354.2441 371.5791 c
354.6348 371.6113 354.9238 371.9541 354.8916 372.3438 c
354.1904 380.7607 348.2666 382.249 348.0146 382.3076 c
347.6348 382.3975 347.2559 382.1621 347.165 381.7832 c
f347.3057 378.4014 m
347.0576 378.0996 347.1006 377.6533 347.4023 377.4043 c
347.4463 377.3672 351.8867 373.6455 352.9893 367.8193 c
353.0615 367.4346 353.4326 367.1816 353.8174 367.2549 c
354.2021 367.3271 354.4541 367.6982 354.3818 368.083 c
353.1807 374.4287 348.501 378.3359 348.3027 378.499 c
348 378.7471 347.5547 378.7031 347.3057 378.4014 c
f347.5986 375.0215 m
347.2842 374.7891 347.2168 374.3447 347.4492 374.0303 c
347.4766 373.9932 350.1777 370.29 350.6494 366.3662 c
350.6953 365.9785 351.0488 365.7012 351.4365 365.7471 c
351.8252 365.7939 352.1025 366.1475 352.0557 366.5352 c
351.54 370.8379 348.71 374.71 348.5898 374.8721 c
348.3574 375.1865 347.9141 375.2539 347.5986 375.0215 c
f345.0664 373.3291 m
344.7656 373.0791 344.7246 372.6328 344.9746 372.332 c
345.0068 372.293 348.1904 368.4238 348.8184 364.1816 c
348.876 363.7939 349.2363 363.5264 349.623 363.584 c
350.0107 363.6416 350.2783 364.002 350.2207 364.3887 c
349.5332 369.0322 346.2051 373.0693 346.0635 373.2393 c
345.8135 373.5391 345.3672 373.5801 345.0664 373.3291 c
f343.6963 370.1299 m
343.4131 369.8594 343.4033 369.4111 343.6738 369.1279 c
343.71 369.0898 347.3105 365.2588 347.3105 360.2852 c
347.3105 359.8936 347.6279 359.5762 348.0195 359.5762 c
348.4111 359.5762 348.7285 359.8936 348.7285 360.2852 c
348.7285 365.8398 344.8613 369.9365 344.6973 370.1084 c
344.4268 370.3906 343.9785 370.4004 343.6963 370.1299 c
f335.8906 363.7627 m
335.5342 363.5986 335.3779 363.1787 335.541 362.8232 c
335.6182 362.6553 337.4473 358.6934 339.666 356.3027 c
339.9326 356.0166 340.3809 355.999 340.668 356.2656 c
340.9541 356.5322 340.9717 356.9805 340.7051 357.2676 c
338.6426 359.4883 336.8477 363.375 336.8301 363.4131 c
336.667 363.7695 336.2461 363.9258 335.8906 363.7627 c
f333.9219 361.2764 m
333.5586 361.1309 333.3818 360.7178 333.5273 360.3545 c
333.5986 360.1777 335.2852 356.002 337.3984 354.2412 c
337.6992 353.9902 338.1465 354.0313 338.3965 354.3311 c
338.6475 354.6318 338.6064 355.0791 338.3066 355.3291 c
336.4688 356.8613 334.8594 360.8418 334.8438 360.8818 c
334.6982 361.2451 334.2852 361.4219 333.9219 361.2764 c
f331.1377 359.9883 m
330.749 359.9619 330.4551 359.6318 330.4785 359.2432 c
330.4854 359.1152 330.7109 356.0713 334.8857 352.418 c
335.1807 352.1602 335.6279 352.1904 335.8857 352.4844 c
336.1436 352.7793 336.1143 353.2266 335.8193 353.4844 c
332.1377 356.7061 331.8945 359.3076 331.8926 359.334 c
331.8623 359.7207 331.5254 360.0156 331.1377 359.9883 c
f328.2432 358.1035 m
327.8828 357.9512 327.7148 357.5352 327.8672 357.1748 c
327.9443 356.9932 329.7773 352.6914 331.8516 350.6172 c
332.1279 350.3408 332.5771 350.3398 332.8535 350.6172 c
333.1299 350.8936 333.1299 351.3428 332.8535 351.6191 c
330.9756 353.4971 329.1904 357.6855 329.1719 357.7275 c
329.0195 358.0879 328.6035 358.2559 328.2432 358.1035 c
f323.4551 359.4551 m
323.085 359.3281 322.8877 358.9248 323.0156 358.5547 c
323.0928 358.3311 324.9336 353.0352 327.6846 350.2842 c
327.9609 350.0068 328.4102 350.0068 328.6865 350.2842 c
328.9639 350.5605 328.9629 351.0098 328.6865 351.2861 c
326.1689 353.8047 324.373 358.9639 324.3555 359.0156 c
324.2285 359.3857 323.8252 359.582 323.4551 359.4551 c
f319.0459 362.1455 m
318.6631 362.0693 318.4141 361.6963 318.4902 361.3125 c
318.5469 361.0322 319.8945 354.416 322.5029 351.6338 c
322.7705 351.3477 323.2188 351.333 323.5039 351.6016 c
323.79 351.8691 323.8037 352.3174 323.5361 352.6025 c
321.2051 355.0908 319.8936 361.5254 319.8799 361.5908 c
319.8037 361.9736 319.4297 362.2227 319.0459 362.1455 c
f315.3115 363.9697 m
315.3037 363.7031 315.1914 357.3486 319.7354 349.2705 c
319.9268 348.9297 320.3584 348.8086 320.7002 349.001 c
321.041 349.1924 321.1621 349.624 320.9697 349.9658 c
316.6318 357.6787 316.7266 363.8721 316.7275 363.9336 c
316.7373 364.3242 316.4277 364.6494 316.0371 364.6592 c
315.6465 364.6689 315.3213 364.3604 315.3115 363.9697 c
f312.8115 364.1436 m
312.7979 363.7627 312.5176 354.707 316.5439 346.1494 c
316.7109 345.7949 317.1328 345.6436 317.4873 345.8096 c
317.8418 345.9766 317.9932 346.3984 317.8271 346.7529 c
313.9512 354.9893 314.2246 364.0029 314.2275 364.0928 c
314.2412 364.4834 313.9365 364.8125 313.5449 364.8262 c
313.1543 364.8408 312.8252 364.5352 312.8115 364.1436 c
f314.4863 365.3916 m
314.0537 365.1309 303.8467 358.9551 301.2959 355.7246 c
298.5488 352.2441 299.6699 349.8994 299.7188 349.8008 c
299.8916 349.4561 300.3057 349.3193 300.6533 349.4844 c
301.002 349.6504 301.1514 350.0713 300.9922 350.4229 c
300.9609 350.4912 300.2617 352.126 302.4092 354.8457 c
304.8008 357.876 315.1143 364.1152 315.2188 364.1787 c
315.5537 364.3809 315.6611 364.8164 315.459 365.1514 c
315.2568 365.4863 314.8213 365.5938 314.4863 365.3916 c
f309.7627 362.3213 m
309.375 362.2715 309.0996 361.917 309.1494 361.5283 c
309.1904 361.2051 310.1738 353.5742 311.5195 349.876 c
311.6533 349.5078 312.0596 349.3184 312.4277 349.4521 c
312.7959 349.5859 312.9854 349.9922 312.8516 350.3604 c
311.5596 353.9102 310.5654 361.6299 310.5557 361.708 c
310.5059 362.0957 310.1514 362.3701 309.7627 362.3213 c
f306.8115 359.8076 m
306.8037 359.583 306.6602 354.2676 308.5332 349.8418 c
308.6855 349.4814 309.1016 349.3135 309.4619 349.4658 c
309.8223 349.6182 309.9902 350.0342 309.8379 350.3945 c
308.0889 354.5273 308.2266 359.7109 308.2275 359.7627 c
308.2402 360.1543 307.9326 360.4814 307.542 360.4932 c
307.1504 360.5059 306.8232 360.1982 306.8115 359.8076 c
f304.6533 358.2314 m
304.6172 358.0107 303.8008 352.7949 305.3936 349.7861 c
305.5762 349.4404 306.0049 349.3086 306.3516 349.4922 c
306.6973 349.6748 306.8291 350.1035 306.6455 350.4502 c
305.2754 353.0371 306.0439 357.9561 306.0518 358.0059 c
306.1143 358.3916 305.8516 358.7559 305.4648 358.8174 c
305.0791 358.8799 304.7148 358.6172 304.6533 358.2314 c
f302.1855 356.1895 m
302.1475 356.084 301.2764 353.5713 302.5254 350.3613 c
302.667 349.9961 303.0781 349.8154 303.4424 349.958 c
303.8076 350.0996 303.9883 350.5107 303.8457 350.875 c
302.7979 353.5684 303.5137 355.6943 303.5205 355.7158 c
303.6484 356.084 303.4551 356.4883 303.0879 356.6182 c
302.7197 356.748 302.3164 356.5566 302.1855 356.1895 c
f280.7861 419.9746 m
280.7734 419.6611 281.0166 419.3975 281.3301 419.3848 c
281.3691 419.3828 285.3096 419.1934 287.6182 416.8838 c
287.8398 416.6631 288.1982 416.6631 288.4199 416.8838 c
288.6416 417.1055 288.6416 417.4648 288.4199 417.6865 c
285.7939 420.3125 281.5547 420.5107 281.375 420.5176 c
281.0625 420.5303 280.7998 420.2871 280.7861 419.9746 c
f279.4717 418.0977 m
279.3906 417.7949 279.5703 417.4844 279.873 417.4033 c
279.9209 417.3906 284.7061 416.084 286.7266 413.2861 c
286.9102 413.0322 287.2646 412.9756 287.5186 413.1582 c
287.7725 413.3418 287.8291 413.6963 287.6455 413.9502 c
285.3867 417.0781 280.377 418.4424 280.165 418.499 c
279.8633 418.5791 279.5527 418.3994 279.4717 418.0977 c
f278.1602 416.3291 m
278.0439 416.0381 278.1846 415.709 278.4756 415.5918 c
278.5068 415.5791 281.6836 414.2852 283.3955 411.9502 c
283.5811 411.6973 283.9355 411.6426 284.1885 411.8281 c
284.4404 412.0127 284.4951 412.3682 284.3096 412.6201 c
282.4023 415.2217 279.0391 416.5879 278.8965 416.6445 c
278.6064 416.7607 278.2764 416.6191 278.1602 416.3291 c
f276.4697 413.2559 m
276.3936 412.9521 276.5781 412.6445 276.8818 412.5684 c
276.9131 412.5605 280.0635 411.749 281.7529 409.752 c
281.9561 409.5127 282.3135 409.4834 282.5527 409.6855 c
282.791 409.8877 282.8213 410.2451 282.6191 410.4844 c
280.6904 412.7646 277.2998 413.6328 277.1563 413.668 c
276.8535 413.7441 276.5459 413.5596 276.4697 413.2559 c
f275.1299 410.7246 m
275.0713 410.417 275.2734 410.1211 275.5801 410.0615 c
275.6045 410.0566 278.0811 409.5518 280.0791 407.0938 c
280.2764 406.8506 280.6338 406.8135 280.877 407.0107 c
281.1201 407.209 281.1563 407.5654 280.959 407.8086 c
278.6875 410.6035 275.9082 411.1533 275.791 411.1758 c
275.4844 411.2334 275.1885 411.0313 275.1299 410.7246 c
f273.4639 407.2295 m
273.4023 406.9229 273.6006 406.624 273.9072 406.5625 c
273.9385 406.5557 277.0498 405.9102 278.3994 404.1113 c
278.5869 403.8604 278.9424 403.8096 279.1934 403.998 c
279.4434 404.1855 279.4941 404.541 279.3066 404.791 c
277.6953 406.9395 274.2754 407.6455 274.1309 407.6738 c
273.8232 407.7354 273.5254 407.5361 273.4639 407.2295 c
f271.665 405.5068 m
271.543 405.2188 271.6768 404.8877 271.9648 404.7637 c
271.9941 404.751 274.9951 403.4277 277.3574 399.1758 c
277.5088 398.9023 277.8545 398.8037 278.1279 398.9561 c
278.4014 399.1074 278.5 399.4531 278.3486 399.7266 c
275.7832 404.3447 272.543 405.75 272.4063 405.8076 c
272.1182 405.9287 271.7871 405.7939 271.665 405.5068 c
f270.3457 400.5391 m
270.2061 400.2588 270.3193 399.918 270.5986 399.7783 c
270.6387 399.7588 274.5518 397.791 276.4697 396.0332 c
276.7002 395.8213 277.0586 395.8369 277.2705 396.0684 c
277.4824 396.2988 277.4668 396.6572 277.2354 396.8691 c
275.2012 398.7344 271.2725 400.709 271.1064 400.792 c
270.8262 400.9326 270.4863 400.8193 270.3457 400.5391 c
f270.6797 397.0391 m
270.5391 396.7588 270.6523 396.418 270.9326 396.2783 c
271.9082 395.7891 274.6055 394.2197 275.3555 392.8467 c
275.5049 392.5713 275.8496 392.4707 276.124 392.6201 c
276.3994 392.7705 276.5 393.1152 276.3506 393.3896 c
275.2773 395.3564 271.5957 397.2139 271.4395 397.292 c
271.1602 397.4326 270.8193 397.3184 270.6797 397.0391 c
f270.0039 394.1875 m
269.873 393.9033 269.998 393.5674 270.2832 393.4355 c
270.3213 393.418 274.1768 391.6377 275.4102 390.0967 c
275.6055 389.8525 275.9629 389.8125 276.207 390.0088 c
276.4512 390.2041 276.4912 390.5605 276.2949 390.8057 c
274.8936 392.5566 270.9238 394.3896 270.7559 394.4668 c
270.4707 394.5967 270.1348 394.4717 270.0039 394.1875 c
f268.7461 391.9756 m
268.5488 391.7324 268.5859 391.376 268.8291 391.1787 c
269.5576 390.5859 271.5605 388.9082 272.0771 388.2637 c
272.2725 388.0195 272.6289 387.9795 272.874 388.1758 c
273.1182 388.3711 273.1572 388.7275 272.9619 388.9727 c
272.2646 389.8428 269.6543 391.9678 269.5439 392.0576 c
269.3008 392.2559 268.9434 392.2188 268.7461 391.9756 c
f270.9746 423.9404 m
270.8877 423.6387 271.0625 423.3252 271.3633 423.2393 C
274.8633 422.2393 L
275.165 422.1533 275.4785 422.3271 275.5645 422.6289 c
275.6504 422.9297 275.4756 423.2432 275.1748 423.3291 C
271.6748 424.3291 L
271.374 424.416 271.0605 424.2412 270.9746 423.9404 c
f271.3457 422.5381 m
271.2061 422.2578 271.3184 421.918 271.5996 421.7773 C
273.9326 420.6113 L
274.2129 420.4707 274.5527 420.584 274.6934 420.8643 c
274.833 421.1445 274.7207 421.4854 274.4395 421.625 C
272.1064 422.792 L
271.8262 422.9316 271.4863 422.8184 271.3457 422.5381 c
f271.3457 420.7051 m
271.2061 420.4248 271.3184 420.084 271.5996 419.9443 C
273.5996 418.9443 L
273.8789 418.8037 274.2197 418.917 274.3594 419.1973 c
274.5 419.4775 274.3867 419.8184 274.1064 419.958 C
272.1064 420.958 L
271.8262 421.0986 271.4854 420.9854 271.3457 420.7051 c
f271.1396 418.6006 m
271.0566 418.2979 271.2354 417.9863 271.5371 417.9043 C
273.3701 417.4043 L
273.6719 417.3223 273.9834 417.5 274.0664 417.8018 c
274.1484 418.1045 273.9707 418.416 273.668 418.498 C
271.835 418.998 L
271.5332 419.0801 271.2217 418.9023 271.1396 418.6006 c
f271.8057 417.1006 m
271.7236 416.7979 271.9014 416.4863 272.2031 416.4043 C
274.0371 415.9043 L
274.3389 415.8223 274.6504 416 274.7334 416.3018 c
274.8154 416.6045 274.6377 416.916 274.335 416.998 C
272.502 417.498 L
272.2002 417.5801 271.8877 417.4023 271.8057 417.1006 c
f297.0215 413.8877 m
296.8721 413.6133 296.9746 413.2686 297.25 413.1201 c
298.8115 412.2734 301.3359 410.7334 301.8916 409.9561 c
302.0732 409.7012 302.4268 409.6416 302.6816 409.8232 c
302.9365 410.0059 302.9961 410.3594 302.8135 410.6143 c
301.9307 411.8525 298.2109 413.8887 297.7891 414.1162 c
297.5146 414.2656 297.1709 414.1631 297.0215 413.8877 c
f293.833 411.8447 m
293.708 411.5576 293.8389 411.2236 294.127 411.0986 c
294.1641 411.082 297.9316 409.4346 300.3506 407.6611 c
300.6025 407.4756 300.958 407.5303 301.1426 407.7832 c
301.3281 408.0352 301.2734 408.3906 301.0205 408.5752 c
298.499 410.4248 294.7373 412.0693 294.5791 412.1377 c
294.292 412.2627 293.958 412.1318 293.833 411.8447 c
f292.8359 409.5186 m
292.707 409.2334 292.834 408.8975 293.1191 408.7686 c
293.1699 408.7461 298.1914 406.4629 299.9199 404.4189 c
300.1221 404.1797 300.4795 404.1504 300.7188 404.3525 c
300.958 404.5547 300.9873 404.9121 300.7852 405.1514 c
298.8916 407.3906 293.8018 409.7041 293.5859 409.8018 c
293.3008 409.9307 292.9639 409.8037 292.8359 409.5186 c
f290.3369 407.5205 m
290.207 407.2363 290.332 406.8984 290.6172 406.7695 c
290.6738 406.7432 296.3262 404.1318 298.377 400.9766 c
298.5479 400.7139 298.8994 400.6396 299.1611 400.8096 c
299.4238 400.9805 299.499 401.332 299.3281 401.5938 c
297.0967 405.0264 291.333 407.6895 291.0889 407.8008 c
290.8037 407.9307 290.4678 407.8057 290.3369 407.5205 c
f289.1816 403.71 m
289.0391 403.4307 289.1494 403.0898 289.4277 402.9463 c
289.4951 402.9121 296.1836 399.4668 298.415 396.7578 c
298.6143 396.5156 298.9717 396.4814 299.2129 396.6807 c
299.4551 396.8799 299.4893 397.2373 299.29 397.4785 c
296.9102 400.3691 290.2275 403.8105 289.9443 403.9561 c
289.666 404.0986 289.3252 403.9883 289.1816 403.71 c
f288.5215 399.0557 m
288.3721 398.7803 288.4727 398.4375 288.749 398.2871 c
288.8057 398.2559 294.4902 395.1563 295.8994 393.2783 c
296.0869 393.0273 296.4424 392.9766 296.6934 393.165 c
296.9434 393.3525 296.9941 393.708 296.8066 393.958 c
295.25 396.0332 289.5322 399.1514 289.29 399.2832 c
289.0146 399.4326 288.6709 399.3311 288.5215 399.0557 c
f287.1709 395.6875 m
287.04 395.4033 287.166 395.0674 287.4502 394.9355 c
287.4893 394.918 291.377 393.1182 293.6045 390.7314 c
293.8184 390.5029 294.1768 390.4902 294.4063 390.7041 c
294.6348 390.917 294.6475 391.2764 294.4336 391.5049 c
292.0508 394.0576 288.0898 395.8896 287.9229 395.9668 c
287.6377 396.0967 287.3018 395.9717 287.1709 395.6875 c
f286.9756 391.9453 m
286.8867 391.6455 287.0586 391.3301 287.3584 391.2412 c
287.3848 391.2334 290.0049 390.4414 291.041 388.8135 c
291.209 388.5498 291.5596 388.4717 291.8232 388.6396 c
292.0879 388.8076 292.166 389.1582 291.9971 389.4229 c
290.7305 391.4121 287.8037 392.292 287.6797 392.3291 c
287.3789 392.417 287.0645 392.2461 286.9756 391.9453 c
f285.3047 389.5947 m
285.2256 389.291 285.4063 388.9814 285.71 388.9023 c
287.1348 388.5303 289.6367 387.6982 290.2852 387.0498 c
290.5068 386.8291 290.8652 386.8291 291.0869 387.0498 c
291.3086 387.2715 291.3086 387.6309 291.0869 387.8525 c
290.0098 388.9297 286.4033 389.8936 285.9961 390 c
285.6934 390.0791 285.3828 389.8975 285.3047 389.5947 c
f284.7969 386.8965 m
284.7354 386.5889 284.9346 386.291 285.2412 386.2295 c
285.2744 386.2227 288.5059 385.5703 289.9111 384.79 c
290.1846 384.6377 290.5293 384.7363 290.6816 385.0098 c
290.834 385.2832 290.7354 385.6279 290.4619 385.7803 c
288.9023 386.6475 285.6035 387.3135 285.4639 387.3408 c
285.1572 387.4023 284.8584 387.2031 284.7969 386.8965 c
f305.998 407.5088 m
305.875 407.2207 306.0078 406.8857 306.2959 406.7637 c
306.3535 406.7393 312.0244 404.2949 313.584 402.4219 c
313.7842 402.1816 314.1416 402.1494 314.3828 402.3496 c
314.623 402.5498 314.6553 402.9072 314.4551 403.1484 c
312.7217 405.2285 306.9863 407.7021 306.7432 407.8066 c
306.4551 407.9297 306.1221 407.7959 305.998 407.5088 c
f304.9961 403.835 m
304.876 403.5459 305.0137 403.2139 305.3027 403.0947 c
305.3496 403.0752 310.0449 401.1152 311.9355 399.0664 c
312.1484 398.8369 312.5068 398.8223 312.7373 399.0342 c
312.9668 399.2471 312.9814 399.6055 312.7686 399.8359 c
310.708 402.0674 305.9385 404.0586 305.7363 404.1416 c
305.4473 404.2617 305.1152 404.124 304.9961 403.835 c
f305.0059 400.0254 m
304.873 399.7412 304.9971 399.4033 305.2793 399.2715 c
305.3291 399.248 310.25 396.9453 312.1797 395.498 c
312.4297 395.3096 312.7852 395.3604 312.9727 395.6113 c
313.1611 395.8613 313.1104 396.2168 312.8594 396.4043 c
310.8359 397.9229 305.9658 400.2021 305.7598 400.2988 c
305.4756 400.4316 305.1377 400.3076 305.0059 400.0254 c
f304.707 395.9229 m
304.5391 395.6582 304.6172 395.3076 304.8809 395.1396 c
304.917 395.1172 308.5098 392.8271 309.6182 391.7178 c
309.8398 391.4961 310.1992 391.4961 310.4199 391.7168 c
310.6416 391.9385 310.6416 392.2979 310.4209 392.5186 c
309.2246 393.7158 305.6416 396 305.4902 396.0967 c
305.2256 396.2646 304.875 396.1865 304.707 395.9229 c
f303.8145 392.1309 m
303.7158 391.834 303.876 391.5127 304.1729 391.4131 c
305.2305 391.0596 308.1357 389.876 308.8662 388.6592 c
309.0273 388.3906 309.376 388.3037 309.6445 388.4648 c
309.9131 388.626 310 388.9746 309.8389 389.2432 c
308.7617 391.0371 304.9619 392.3457 304.5322 392.4893 c
304.2354 392.5879 303.9141 392.4277 303.8145 392.1309 c
f303.335 389.5156 m
303.207 389.2295 303.3359 388.8945 303.6221 388.7676 c
304.8535 388.2197 308.2197 386.6572 308.9893 386.0156 c
309.2305 385.8154 309.5879 385.8477 309.7881 386.0879 c
309.9883 386.3291 309.9561 386.6865 309.7158 386.8867 c
308.6846 387.7451 304.5508 389.5947 304.083 389.8027 c
303.7969 389.9307 303.4629 389.8018 303.335 389.5156 c
f302.6494 387.1357 m
302.5479 386.8398 302.7051 386.5176 303.001 386.415 c
304.957 385.7402 307.9414 384.5605 308.4521 384.0498 c
308.6729 383.8291 309.0322 383.8291 309.2529 384.0498 c
309.4746 384.2715 309.4746 384.6309 309.2529 384.8525 c
308.3721 385.7324 304.1982 387.2012 303.3701 387.4873 c
303.0742 387.5889 302.752 387.4316 302.6494 387.1357 c
f302.0332 385.2432 m
301.8721 384.9746 301.96 384.627 302.2275 384.4648 c
303.3643 383.7832 306.4512 381.8477 307.084 381.0879 c
307.2842 380.8477 307.6416 380.8154 307.8828 381.0156 c
308.123 381.2158 308.1553 381.5732 307.9551 381.8145 c
307.0859 382.8574 303.2461 385.1768 302.8115 385.4375 c
302.543 385.5986 302.1943 385.5107 302.0332 385.2432 c
f320.2227 396.4453 m
320.042 396.1895 320.1025 395.835 320.3584 395.6553 C
326.0254 391.6553 L
326.2813 391.4746 326.6357 391.5352 326.8154 391.791 c
326.9961 392.0469 326.9355 392.4014 326.6797 392.5811 C
321.0127 396.5811 L
320.7568 396.7617 320.4033 396.7012 320.2227 396.4453 c
f320.4609 394.1943 m
320.2344 393.9785 320.2266 393.6191 320.4424 393.3936 c
320.5938 393.2363 324.1426 389.5283 325.4795 388.3584 c
325.7148 388.1523 326.0732 388.1758 326.2793 388.4121 c
326.4854 388.6475 326.4619 389.0059 326.2256 389.2119 c
324.9268 390.3486 321.2988 394.1387 321.2617 394.1768 c
321.0459 394.4033 320.6865 394.4111 320.4609 394.1943 c
f318.707 390.5889 m
318.5391 390.3242 318.6172 389.9736 318.8818 389.8066 c
320.7695 388.6104 323.9258 386.4297 324.3604 385.6699 c
324.5156 385.3975 324.8623 385.3037 325.1338 385.459 c
325.4063 385.6143 325.5 385.9609 325.3447 386.2324 c
324.6436 387.459 320.3438 390.2227 319.4893 390.7637 c
319.2246 390.9316 318.874 390.8525 318.707 390.5889 c
f318.4258 386.9912 m
318.2197 386.7559 318.2432 386.3975 318.4795 386.1914 c
318.5889 386.0957 321.1875 383.8252 322.8604 382.6533 c
323.1172 382.4746 323.4707 382.5361 323.6504 382.793 c
323.8291 383.0498 323.7676 383.4033 323.5107 383.583 c
321.8887 384.7188 319.252 387.0215 319.2256 387.0449 c
318.9902 387.251 318.6318 387.2275 318.4258 386.9912 c
f316.8994 384.125 m
316.7109 383.875 316.7617 383.5195 317.0127 383.332 c
317.9238 382.6475 320.3994 380.7344 320.9102 380.0967 c
321.1055 379.8525 321.4619 379.8125 321.707 380.0088 c
321.9512 380.2041 321.9912 380.5615 321.7949 380.8057 c
321.1035 381.6699 318.04 383.9785 317.6924 384.2383 c
317.4424 384.4268 317.0869 384.376 316.8994 384.125 c
f315.7939 381.6953 m
315.5674 381.4795 315.5596 381.1201 315.7754 380.8936 c
316.7422 379.8799 319.3389 377.1348 319.7324 376.6104 c
319.9199 376.3604 320.2754 376.3096 320.5264 376.498 c
320.7764 376.6855 320.8271 377.041 320.6387 377.292 c
320.1338 377.9648 316.9561 381.2988 316.5957 381.6768 c
316.3799 381.9033 316.0205 381.9111 315.7939 381.6953 c
f336.6641 391.9805 m
336.4961 391.7168 336.1436 391.6406 335.8789 391.8086 C
341.3936 388.2988 L
341.6582 388.1309 341.9961 388.2168 342.1641 388.4805 c
342.332 388.7451 342.2412 389.1035 341.9775 389.2715 C
336.4922 392.7617 L
336.7559 392.5938 336.832 392.2451 336.6641 391.9805 c
f334.2539 390.1523 m
334.0508 389.9141 334.0801 389.5557 334.3184 389.3535 c
335.2334 388.5752 337.7236 386.4121 338.2432 385.7637 c
338.4385 385.5195 338.7959 385.4795 339.04 385.6758 c
339.2842 385.8711 339.3242 386.2275 339.1279 386.4727 c
338.4473 387.3232 335.3984 389.9238 335.0527 390.2168 c
334.8145 390.4199 334.457 390.3906 334.2539 390.1523 c
f332.7959 387.4326 m
332.6016 387.1875 332.2432 387.1475 331.998 387.3428 C
338.5127 382.165 L
338.7578 381.9697 339.1016 382.0205 339.2959 382.2656 c
339.4912 382.5107 339.4375 382.877 339.1924 383.0713 C
332.707 388.2275 L
332.9521 388.0332 332.9912 387.6777 332.7959 387.4326 c
f331.458 386.1924 m
331.2334 385.9746 331.2275 385.6152 331.4453 385.3906 c
333.4902 383.2822 336.8594 379.7256 337.1992 379.1592 c
337.3604 378.8906 337.709 378.8037 337.9775 378.9648 c
338.2461 379.126 338.333 379.4746 338.1719 379.7432 c
337.6533 380.6074 332.8105 385.6123 332.2598 386.1797 c
332.042 386.4043 331.6826 386.4102 331.458 386.1924 c
f331.2432 380.9727 m
331.0469 380.7275 331.0869 380.3711 331.3311 380.1758 C
336.3311 376.1758 L
336.5762 375.9795 336.9326 376.0195 337.1279 376.2637 c
337.3242 376.5088 337.2842 376.8652 337.04 377.0605 C
332.04 381.0605 L
331.7949 381.2568 331.4385 381.2168 331.2432 380.9727 c
f330.5908 378.8223 m
330.3857 378.5859 330.4111 378.2275 330.6484 378.0225 C
335.6484 373.6895 L
335.8848 373.4844 336.2432 373.5098 336.4482 373.7471 c
336.6533 373.9834 336.6279 374.3418 336.3906 374.5469 C
331.3906 378.8799 L
331.1543 379.085 330.7959 379.0596 330.5908 378.8223 c
f330.2656 375.832 m
330.0557 375.6006 330.0723 375.2422 330.3047 375.0313 C
333.9717 371.6982 L
334.2031 371.4883 334.5615 371.5049 334.7725 371.7373 c
334.9824 371.9688 334.9658 372.3271 334.7334 372.5381 C
331.0664 375.8711 L
330.835 376.0811 330.4766 376.0645 330.2656 375.832 c
f263.6221 380.3242 m
248.9873 378.9941 246.7012 373.0371 245.4727 369.8369 C
245.3584 369.542 L
244.2139 366.5986 239.0967 355.6963 239.0449 355.5859 C
238.501 354.4287 L
249.9219 355.8057 L
250.04 356.2793 L
253.1953 368.9004 259.0137 370.1582 260.7217 370.2432 c
262.3271 370.3232 264.8438 370.0771 267.7578 369.792 c
270.7813 369.4961 274.208 369.1611 277.6689 369.0771 c
284.6074 368.9082 290.5986 372.0254 290.8496 372.1582 c
291.1963 372.3408 291.3281 372.7695 291.1465 373.1152 c
290.9639 373.4619 290.5352 373.5947 290.1885 373.4121 c
290.1299 373.3809 284.2617 370.334 277.7031 370.4932 c
274.2949 370.5762 270.8955 370.9092 267.8955 371.2021 c
264.9258 371.4932 262.3613 371.7441 260.6514 371.6592 c
258.7207 371.5625 252.2266 370.2012 248.7979 357.0977 C
248.0645 357.0098 242.6768 356.3594 240.8701 356.1416 C
242.2305 359.0547 245.7295 366.585 246.6797 369.0283 C
246.7959 369.3291 L
247.9131 372.2412 249.9941 377.6621 263.75 378.9121 c
264.1182 378.9463 264.3945 379.2549 264.3945 379.6172 c
264.3945 379.6387 264.3936 379.6602 264.3916 379.6826 c
264.3564 380.0723 264.0117 380.3594 263.6221 380.3242 c
f247.0859 386.1523 m
245.1416 385.875 243.6855 384.874 243.0928 383.4053 c
242.4912 381.917 242.8682 380.1348 244.127 378.5166 C
247.7793 373.7012 L
248.0166 373.3896 248.4697 373.3174 248.7813 373.5537 c
249.0928 373.79 249.1621 374.2236 248.9258 374.5352 C
245.2461 379.3857 L
244.291 380.6133 243.9932 381.8525 244.4063 382.875 c
244.8057 383.8613 245.8555 384.5449 247.2861 384.75 C
256.1289 386.085 L
255.7422 386.0264 255.377 386.292 255.3184 386.6797 c
255.2598 387.0664 255.5225 387.4268 255.9102 387.4854 C
247.0859 386.1523 L
f262.9092 371.4854 m
262.5596 371.4297 262.3105 371.1289 262.3105 370.7861 c
262.3105 370.749 262.3135 370.7119 262.3193 370.6748 c
262.7568 367.9043 265.7617 361.8359 266.7412 359.9102 C
265.8389 359.418 261.916 357.2783 260.7891 356.6631 C
259.3418 361.8545 255.2734 367.4561 255.0898 367.7051 c
254.8574 368.0205 254.4141 368.0879 254.0986 367.8555 c
253.7842 367.624 253.7168 367.1797 253.9482 366.8652 c
253.9941 366.8027 258.54 360.5879 259.6602 355.4668 C
259.8623 354.5439 L
268.6357 359.3291 L
268.3145 359.9453 L
268.2734 360.0244 264.1953 367.8799 263.7188 370.8955 c
263.6582 371.2822 263.2949 371.5459 262.9092 371.4854 c
f241.9785 361.8135 m
241.9629 361.4229 242.2666 361.0928 242.6582 361.0771 C
250.9912 360.7432 L
251.3818 360.7275 251.7119 361.0322 251.7275 361.4229 c
251.7432 361.8135 251.4385 362.1436 251.0479 362.1592 C
242.7148 362.4932 L
242.3232 362.5088 241.9941 362.2041 241.9785 361.8135 c
f246.0371 361.5693 m
243.7031 356.2354 L
243.5469 355.877 243.71 355.458 244.0684 355.3018 c
244.4277 355.1455 244.8457 355.3086 245.002 355.667 C
247.3359 361.001 L
247.4922 361.3594 247.3291 361.7783 246.9707 361.9346 c
246.6113 362.0908 246.1934 361.9277 246.0371 361.5693 C
f264.8516 365.4092 m
258.0176 361.7422 L
257.6729 361.5576 257.543 361.1279 257.7285 360.7832 c
257.9131 360.4385 258.3428 360.3086 258.6875 360.4941 C
265.5215 364.1611 L
265.8662 364.3457 265.9961 364.7754 265.8105 365.1201 c
265.626 365.4648 265.1963 365.5947 264.8516 365.4092 C
f262.3848 363.9805 m
262 363.9063 261.749 363.5352 261.8232 363.1504 C
262.8232 357.9834 L
262.8975 357.5996 263.2695 357.3477 263.6543 357.4229 c
264.0381 357.4971 264.2891 357.8682 264.2148 358.2529 C
263.2148 363.4199 L
263.1406 363.8037 262.7686 364.0557 262.3848 363.9805 c
f256.3232 427.5859 m
256.3154 427.5449 255.3789 423.5361 246.5557 423.9922 c
246.165 424.0127 245.832 423.7119 245.8115 423.3213 c
245.791 422.9307 246.0918 422.5967 246.4824 422.5771 c
256.6563 422.0508 257.6787 427.1113 257.7168 427.3271 c
257.7852 427.708 257.5332 428.0684 257.1523 428.1426 c
256.7725 428.2158 256.4023 427.9648 256.3232 427.5859 c
f261.7871 427.5439 m
261.6328 427.3398 257.9316 422.5586 251.2842 423.4863 c
250.8965 423.54 250.5381 423.2705 250.4844 422.8828 c
250.4307 422.4951 250.7002 422.1367 251.0879 422.083 c
258.583 421.0361 262.7461 426.4609 262.9199 426.6924 c
263.1543 427.0059 263.0908 427.4482 262.7783 427.6836 c
262.4668 427.9189 262.0225 427.8555 261.7871 427.5439 c
fu326.3525 409.7852 m
326.4385 413.6318 318.3525 415.4512 v
311.6855 416.9512 307.6855 414.4512 y
309.5195 409.6172 317.5195 407.9512 v
325.5195 406.2852 326.3525 409.7852 y
f260.5195 417.7852 m
263.0195 415.6182 260.6865 413.6182 v
256.6855 413.6172 255.5195 416.9512 v
257.3525 418.7852 260.5195 417.7852 v
f235.1865 424.7842 m
237.3525 424.7852 238.0195 423.9512 v
238.6865 423.1182 237.6855 422.4512 236.0195 422.4512 c
234.3525 422.4512 233.8525 422.6172 234.0195 423.7842 c
234.1865 424.9512 235.1865 424.7842 y
f316.1855 426.9512 m
317.0195 433.1182 312.0195 435.9512 v
307.0195 438.7842 301.6855 437.9512 300.8525 438.6182 c
301.8525 435.6182 302.3525 433.1182 v
302.8525 430.6182 308.0186 424.7852 316.1855 426.9512 c
f338.6855 421.6182 m
333.1855 422.7842 333.6855 430.6182 v
334.1855 438.4512 338.5195 440.9512 y
344.3525 437.4512 344.3525 430.1182 v
344.3525 422.7842 340.0186 421.6182 338.6855 421.6182 c
f349.8525 432.4512 m
347.6855 428.7842 346.6855 426.2842 v
345.9297 424.3955 346.3516 416.6191 351.1855 416.2852 c
356.0195 415.9512 357.0195 422.6172 355.0195 425.7842 c
353.0195 428.9512 349.6855 431.6182 349.8525 432.4512 c
f331.1855 445.6182 m
326.3516 449.9512 320.6855 448.7842 v
315.0195 447.6182 311.3535 444.1182 309.5195 443.4512 c
314.6865 442.1182 317.0195 441.4512 v
319.3525 440.7842 331.0186 440.7842 331.1855 445.6182 c
f312.1855 455.1182 m
308.3525 459.7842 302.1855 456.6182 v
296.0195 453.4512 293.3525 449.2842 292.5195 448.7842 c
297.1855 448.7842 300.3525 448.7842 v
303.5195 448.7842 312.0186 450.1182 312.1855 455.1182 c
f296.5195 461.6182 m
295.0029 466.1865 287.8525 463.9512 v
282.5195 462.2842 281.0195 457.6182 278.3525 455.4512 c
282.0195 455.2852 284.8525 454.9512 v
287.6865 454.6182 295.6855 453.2842 296.5195 461.6182 c
f273.8525 468.2842 m
270.5195 472.7842 263.0195 469.7842 v
256.3525 467.1182 254.1865 462.6182 y
258.8525 461.9512 261.3525 461.7842 v
263.8525 461.6182 273.0195 462.1172 273.8525 468.2842 c
f259.3525 475.9512 m
256.8525 480.1182 250.3525 479.6182 v
243.8525 479.1182 241.5195 475.2842 237.5195 474.7842 c
241.0195 473.9512 243.3525 472.4512 v
245.6865 470.9512 256.3525 467.4512 259.3525 475.9512 c
f273.6865 483.7842 m
267.5195 482.2842 263.5195 487.7842 v
259.5195 493.2842 257.8525 497.9512 257.3525 498.7842 c
262.8535 497.4512 265.1865 496.9512 v
267.5195 496.4512 276.5195 490.6172 273.6865 483.7842 c
f287.0195 499.4512 m
287.6855 495.9512 287.5195 494.4512 v
287.3525 492.9512 290.1855 479.7852 297.1855 481.9512 c
303.8389 485.0977 298.6855 490.7842 v
293.8525 496.1182 287.6855 498.6182 287.0195 499.4512 c
f304.6855 495.9512 m
305.8525 492.1182 306.3525 488.6182 v
306.8525 485.1182 308.708 474.0049 315.0195 476.2842 c
321.0195 478.4512 314.0195 489.6182 310.5195 491.4512 c
307.0195 493.2842 304.6855 495.9512 y
f324.3525 483.6182 m
325.3525 479.4512 325.3525 477.9512 v
325.3525 476.4512 326.6865 461.6182 335.5195 464.4512 c
340.5195 468.1182 335.0195 474.6182 v
329.5195 481.1182 325.3525 482.2842 324.3525 483.6182 c
f364.0195 489.9512 m
360.6855 489.6172 357.1855 487.2842 v
353.6855 484.9512 349.3535 477.9512 354.0195 474.4512 c
358.6855 470.9512 364.5195 479.2842 364.3525 483.7842 c
364.1855 488.2842 364.0195 489.9512 y
f367.6855 473.1182 m
363.8525 469.9512 361.3525 468.1182 v
358.8525 466.2842 351.1855 457.1182 357.1855 454.1182 c
363.1855 451.1182 367.3516 458.7852 367.6855 462.9512 c
368.0195 467.1182 367.6855 473.1182 y
f341.0195 394.2852 m
338.1855 399.6172 332.8525 400.4512 v
327.5195 401.2852 322.6855 400.7852 y
326.3525 395.9512 330.3525 393.6182 v
334.3525 391.2852 340.5195 392.2852 341.0195 394.2852 c
f346.8525 349.6182 m
342.0195 349.4512 341.0195 356.1182 v
340.0195 362.7852 341.6855 367.4512 y
345.6855 365.7852 349.1855 360.1182 v
352.6855 354.4512 349.5195 350.4512 346.8525 349.6182 c
f335.3525 338.4512 m
335.8535 344.9512 330.0195 346.6182 v
324.1855 348.2852 319.5195 348.2852 y
322.0195 342.4512 324.8525 339.1182 v
327.6855 335.7852 333.0195 336.1172 335.3525 338.4512 c
f355.5195 347.6182 m
352.5186 352.9512 356.6855 356.6182 v
360.8525 360.2852 366.0195 362.1182 y
366.1865 355.9512 364.5195 351.4512 v
362.8525 346.9512 358.0195 345.7852 355.5195 347.6182 c
f346.3525 320.4512 m
345.0195 325.6191 339.0195 325.2852 v
333.0195 324.9512 327.5195 320.9512 y
331.3525 316.4521 337.8525 315.7852 v
344.3525 315.1182 345.8525 318.7842 346.3525 320.4512 c
f302.6855 333.1182 m
305.5195 338.4521 301.5195 341.7852 v
297.5195 345.1182 292.0195 345.1172 291.0195 345.9512 c
290.0195 346.7852 292.1855 341.9512 292.5195 339.9512 c
292.8525 337.9512 296.6855 330.1182 302.6855 333.1182 c
f285.0195 335.4512 m
288.0195 340.4521 283.8525 343.7852 v
279.6865 347.1182 274.3525 349.2852 273.8525 349.7852 c
273.3525 350.2852 274.5195 345.1172 275.0195 342.4512 c
275.5195 339.7852 279.0195 334.1172 285.0195 335.4512 c
f304.1855 319.1182 m
299.1855 319.4521 296.0195 317.2852 v
292.8525 315.1182 292.0195 311.2852 y
301.3525 310.6182 l
304.1865 311.6182 305.0195 314.6182 v
305.8525 317.6182 304.1855 319.1182 y
f286.0195 322.2852 m
281.8525 323.4512 277.8525 320.6182 v
273.8525 317.7852 272.6865 311.7852 y
274.3525 311.4512 l
279.3525 312.6172 283.8525 315.4512 v
288.3525 318.2852 286.8525 321.4521 286.0195 322.2852 c
fU257.3438 475.4092 m
312.9375 474.6709 367.6865 429.6934 368.2324 429.2393 C
369.1387 430.3291 L
368.5879 430.7871 313.4639 476.082 257.3623 476.8262 C
257.3438 475.4092 L
f333.9521 464.5869 m
333.9971 464.4824 338.2959 454.5352 340.8438 449.0967 C
339.3955 448.7344 329.6807 446.3057 Y
330.0244 444.9307 L
342.8643 448.1406 L
342.4922 448.9229 L
340.0264 454.1006 335.3008 465.0391 335.2529 465.1484 C
333.9521 464.5869 L
f314.1436 476.8682 m
314.1436 475.8818 317.835 464.3398 319.2432 459.9736 C
318.293 459.4854 310.5283 455.498 Y
311.1758 454.2373 L
320.9619 459.2627 L
320.7764 459.8359 L
318.8018 465.9482 315.6396 475.9844 315.5605 476.8896 C
314.1436 476.8682 L
f296.4541 483.332 m
303.9541 466.332 L
305.251 466.9043 L
297.751 483.9043 L
296.4541 483.332 L
f293.6299 461.6465 m
294.5752 460.5898 L
294.6221 460.6318 299.2891 464.7852 303.1367 466.4688 C
302.5684 467.7676 L
298.5107 465.9922 293.8271 461.8223 293.6299 461.6465 C
f272.1016 484.6172 m
272.1797 484.5391 279.4453 477.2676 282.96 473.3408 C
278.3594 471.0527 273.4355 468.7012 272.7813 468.5713 C
272.8525 467.1592 L
273.6113 467.1592 279.5615 470.0547 284.4199 472.4844 C
285.2363 472.8926 L
284.6387 473.582 L
281.4092 477.3076 273.1865 485.5361 273.1035 485.6191 C
272.1016 484.6172 L
f252.7139 503.6729 m
263.7559 501.4648 289.0576 490.0869 289.3115 489.9717 C
289.8945 491.2637 L
288.8496 491.7344 264.1924 502.8232 252.9922 505.0625 C
252.7139 503.6729 L
f261.5059 508.7363 m
267.7705 499.2148 L
268.9355 500.0215 L
262.6992 509.5 L
261.5059 508.7363 L
f277.6865 505.126 m
278.0977 503.9961 281.7148 494.0586 282.2188 493.0508 C
283.4863 493.6846 L
283.1328 494.3916 280.6211 501.2041 279.0186 505.6104 C
277.6865 505.126 L
f338.3936 518.1016 m
338.4043 517.6553 339.5605 473.083 353.7012 440.0889 C
355.0039 440.6475 L
340.9727 473.3857 339.8213 517.6904 339.8105 518.1338 C
338.3936 518.1016 L
f352.4404 443.6201 m
353.7646 443.1152 L
354.1758 444.1943 357.7871 453.6846 358.04 454.6963 C
356.665 455.04 L
356.4893 454.3359 354.042 447.8252 352.4404 443.6201 C
f346.9512 460.8975 m
348.2539 460.3389 L
348.9912 462.0596 354.9355 474.9414 354.9961 475.0713 C
353.709 475.665 L
353.4639 475.1338 347.6963 462.6357 346.9512 460.8975 C
f342.6426 480.5059 m
339.3115 482.0518 336.4326 485.5283 336.4023 485.5654 C
335.3027 484.6709 L
335.4404 484.502 338.7129 480.5107 342.5889 478.96 C
343.0859 478.7617 L
351.9131 490.1846 L
350.792 491.0508 L
343.2881 481.3398 342.6426 480.5059 V
f341.1777 494.6279 m
340.2207 495.3359 336.0234 498.4375 Y
335.1816 497.2979 L
341.5723 492.5742 L
341.9678 493.2666 L
342.7314 494.6035 346.9932 499.665 349.1396 502.1553 C
348.0654 503.0811 L
347.832 502.8096 342.8643 497.0361 341.1777 494.6279 C
f339.2324 511.4658 m
338.2383 512.4199 333.5938 516.8789 Y
332.6113 515.8564 L
339.4727 509.2705 L
344.4424 516.7246 L
343.2627 517.5107 L
339.9863 512.5957 339.2324 511.4658 V
f314.666 427.3096 m
314.9277 427.1045 341.1572 406.4541 367.5381 371.6895 C
368.667 372.5469 L
342.168 407.4658 315.8018 428.2207 315.5391 428.4268 C
314.666 427.3096 L
f350.6436 417.1035 m
351.0938 394.8477 351.126 393.2256 V
349.6494 393.502 339.9834 395.3145 Y
339.7217 393.9219 L
352.5791 391.5107 L
352.0615 417.1328 L
350.6436 417.1035 L
f337.8945 422.5967 m
338.3105 408.8428 338.3643 407.0889 V
336.707 407.6035 324.8125 411.2949 Y
324.3926 409.9414 L
339.8408 405.1475 L
339.3105 422.6396 L
337.8945 422.5967 L
f334.2256 338.5186 m
334.3994 338.4082 351.8291 327.4014 365.6152 314.3535 C
366.5898 315.3828 L
352.6992 328.5293 335.1553 339.6074 334.9795 339.7178 C
334.2256 338.5186 L
f344.7646 322.0713 m
344.9404 320.665 L
356.9404 322.165 L
356.7646 323.5713 L
344.7646 322.0713 L
f345.8936 351.1182 m
345.8936 350.0977 349.6543 331.6611 350.4082 327.9766 C
351.7969 328.2598 L
350.0166 336.9639 347.3525 350.2373 347.3105 351.1279 C
345.8936 351.1182 L
f348.0723 340.0879 m
349.1328 339.1484 L
356.8828 347.8984 L
355.8223 348.8379 L
348.0723 340.0879 L
f249 332.417 m
289.2725 326.4873 329.082 319.4902 329.4795 319.4199 C
329.7256 320.8164 L
329.3281 320.8857 289.5 327.8867 249.2061 333.8193 C
249 332.417 L
f317.7988 329.1758 m
324.7988 320.4258 L
325.9063 321.3105 L
318.9063 330.0605 L
317.7988 329.1758 L
f303.249 318.2324 m
303.9561 317.0039 L
306.2383 318.3184 312.3789 321.8154 313.3662 322.21 C
312.8389 323.5264 L
311.5576 323.0137 303.5879 318.4268 303.249 318.2324 C
f283.3271 336.3926 m
291.0059 327.9063 292.1602 326.6309 V
289.835 325.4502 285.4307 322.1875 284.4277 321.4346 C
285.2783 320.3008 L
288.6514 322.8311 292.6377 325.5303 293.4697 325.6689 C
294.748 325.8818 L
284.3779 337.3438 L
283.3271 336.3926 L
f265.6152 337.8545 m
275.3652 328.6045 L
276.3408 329.6318 L
266.5908 338.8818 L
265.6152 337.8545 L
f272.4355 324.9414 m
273.2695 323.7949 L
278.7695 327.7949 L
277.9355 328.9414 L
272.4355 324.9414 L
f254.6016 336.8672 m
259.1982 332.2705 260.2197 331.249 V
259.0029 330.4932 253.7295 327.2207 Y
254.4766 326.0156 L
262.4854 330.9873 L
255.6035 337.8691 L
254.6016 336.8672 L
f300.5488 333.4258 m
308.5488 323.4258 L
309.6563 324.3105 L
301.6563 334.3105 L
300.5488 333.4258 L
f283.0059 530.4932 m
275.043 530.3398 273.5879 534.6436 273.5303 534.8262 C
272.1738 534.4141 L
272.2412 534.1895 273.9326 528.9004 283.0332 529.0762 c
292.0381 529.249 294.5586 534.4316 294.6611 534.6514 C
293.3789 535.2549 L
293.2881 535.0664 291.0752 530.6484 283.0059 530.4932 c
f272.4941 525.7998 m
267.7383 524.4629 265.8242 526.7871 265.7451 526.8867 C
265.1172 527.6768 L
264.582 526.8223 L
264.5654 526.7949 262.8447 524.0586 259.6885 523.3076 c
256.4336 522.5322 253.4287 523.4502 253.3984 523.4609 C
252.8877 523.6201 L
252.5928 523.1709 L
252.5752 523.1455 250.8525 520.5645 247.5293 519.8086 c
244.1992 519.0518 241.5703 520.5479 241.5439 520.5635 C
240.9199 520.9258 L
240.5664 520.2949 L
240.4268 520.0439 237.0664 514.1914 229.585 516.7871 C
229.1201 515.4482 L
236.3369 512.9443 240.2959 517.4531 241.4326 519.0508 C
242.4893 518.5791 244.8838 517.7539 247.8438 518.4268 c
250.9375 519.1299 252.7861 521.1152 253.4688 521.9795 C
254.5088 521.7256 257.123 521.2393 260.0166 521.9287 c
262.7275 522.5742 264.4824 524.3809 265.2842 525.3857 C
266.3467 524.5381 268.748 523.2744 272.8779 524.4355 c
278.5684 526.0361 279.3516 529.8252 279.3828 529.9854 C
277.9912 530.2559 L
277.9648 530.1299 277.292 527.1494 272.4941 525.7998 c
f250.5693 529.1504 m
245.0547 528.2314 242.1631 531.2979 242.043 531.4287 C
240.7217 532.8662 L
240.8115 530.917 L
240.8232 530.667 241.042 524.7617 236.1289 523.124 c
231.374 521.5391 230.2109 523.8184 230.1621 523.916 C
228.8721 523.3301 L
228.9365 523.1836 230.5361 519.7656 236.5771 521.7793 c
240.8623 523.207 241.8936 527.293 242.1426 529.5068 C
243.6299 528.4619 246.542 527.042 250.8027 527.752 c
257.2998 528.835 257.5596 534.3721 257.5605 534.4277 C
256.1445 534.4785 L
256.1367 534.2969 255.8965 530.0381 250.5693 529.1504 c
f261.4629 530.1582 m
257.6738 529.8555 255.6611 531.4785 255.6406 531.4951 C
254.7285 530.4102 L
254.8262 530.3281 257.168 528.3926 261.5762 528.7451 c
266.1846 529.1133 267.6426 534.2129 267.7021 534.4297 C
266.3369 534.8076 L
266.3242 534.7637 265.0752 530.4463 261.4629 530.1582 c
f269.6865 531.9932 m
267.2246 531.9932 266.873 532.9609 266.8701 532.9707 C
265.4941 532.6309 L
265.541 532.4199 266.0557 530.5762 269.6865 530.5762 c
273.25 530.5762 274.2783 532.5508 274.3203 532.6348 C
273.0586 533.2813 L
273.0303 533.2285 272.3164 531.9932 269.6865 531.9932 c
f236.5713 529.9912 m
233.6592 530.207 233.0469 531.0586 233.0557 531.3682 C
231.6553 531.5781 L
231.6348 531.4639 231.5557 530.8584 232.0664 530.2002 c
232.7725 529.2871 234.2529 528.7412 236.4668 528.5781 c
238.3311 528.4395 241.6191 529.0342 242.6982 534.5625 C
241.3066 534.833 L
240.8516 532.498 239.6602 529.7627 236.5713 529.9912 c
fu0 1 1 0 k
337.3525 486.1182 m
336.8525 491.4512 331.3525 492.7842 v
325.8525 494.1182 321.0195 493.9512 y
323.8516 488.7842 328.1855 485.7842 v
332.5195 482.7842 336.0195 483.2842 337.3525 486.1182 c
f337.0195 499.1182 m
337.3516 502.7852 332.1855 504.9512 v
327.0195 507.1182 323.5195 505.9512 y
324.0186 501.4512 329.1855 498.2842 v
334.3525 495.1182 336.3535 498.1182 337.0195 499.1182 c
f334.6855 516.1182 m
334.3516 522.1182 329.6855 522.6182 v
325.0195 523.1182 321.6855 522.4512 320.6855 522.9512 c
319.6855 523.4512 323.5195 519.1182 324.8525 516.9512 c
326.1855 514.7842 332.0186 512.2842 334.6855 516.1182 c
f341.1855 516.7842 m
335.6855 516.4512 335.6855 522.6182 v
335.6855 528.7842 338.8525 532.4512 338.8525 532.9512 c
338.8525 533.4512 342.5195 529.2842 344.3525 524.6182 c
346.1855 519.9512 344.1855 517.1172 341.1855 516.7842 c
f344.1855 515.2842 m
341.6855 519.4512 346.8525 522.9512 v
352.0195 526.4512 356.3525 527.1182 y
355.8525 521.7842 353.8525 518.2842 v
351.8525 514.7842 346.8516 512.2842 344.1855 515.2842 c
f349.1855 499.4512 m
346.0186 503.6172 350.1855 507.2842 v
354.3525 510.9512 360.6855 512.7842 y
361.0186 507.9512 358.1855 503.2842 v
355.3525 498.6182 353.1855 497.2852 349.1855 499.4512 c
f351.0195 489.1182 m
349.0195 492.7842 352.8525 496.6182 v
356.6855 500.4512 361.5195 501.1182 y
362.1855 496.6172 359.3525 492.2842 v
356.5195 487.9512 352.0195 487.9512 351.0195 489.1182 c
f279.0195 504.4512 m
273.5195 503.4512 272.3525 508.6182 v
271.1865 513.7842 273.1865 518.2842 273.1865 519.1182 c
277.8525 515.7852 279.5195 513.4512 v
281.1865 511.1182 283.1855 505.6182 279.0195 504.4512 c
f263.5195 507.9512 m
265.3535 511.6182 261.1865 514.9512 v
257.0195 518.2842 252.5195 519.1182 y
252.5195 515.1182 254.5195 511.1182 v
256.5195 507.1182 260.1855 506.2852 263.5195 507.9512 c
f255.1865 504.6182 m
254.6865 509.4512 249.1865 509.4512 v
243.6865 509.4512 239.6865 505.7842 y
243.0195 501.7842 247.6865 500.7842 v
252.3525 499.7842 255.1865 502.7842 255.1865 504.6182 c
f267.1865 337.2852 m
270.5195 340.6172 266.6865 344.9512 v
262.8525 349.2852 258.6865 350.2852 y
258.5195 346.1191 259.5195 342.7852 v
260.5195 339.4512 262.5195 336.6191 267.1865 337.2852 c
f256.8525 336.9512 m
259.1865 339.4521 255.6865 343.7852 v
252.1865 348.1182 247.6865 348.2852 y
247.5195 344.6172 249.3525 339.9512 v
251.1865 335.2852 255.0195 335.7842 256.8525 336.9512 c
f250.5195 332.6182 m
250.6865 337.9521 243.1865 338.2852 v
235.6865 338.6182 233.1865 334.9512 y
236.5195 330.1172 242.8525 329.4512 v
249.1865 328.7852 250.5195 331.2852 250.5195 332.6182 c
f256.0195 327.7852 m
252.1865 330.2852 248.6865 326.6182 v
245.1865 322.9512 246.8525 320.9521 245.3525 318.2852 c
249.6855 318.4512 251.5195 319.1182 v
253.3525 319.7852 259.3525 322.4521 256.0195 327.7852 c
f319.3525 328.9512 m
322.1855 332.9512 318.1855 336.9512 v
314.1855 340.9512 309.8525 341.7852 y
310.6855 337.1182 311.6855 333.6182 v
312.6855 330.1182 314.8525 327.7842 319.3525 328.9512 c
f273.8525 326.4512 m
270.1855 329.6182 266.0195 325.1182 v
261.8525 320.6182 262.3525 316.7852 y
267.5195 317.7852 271.1865 318.6182 v
274.8525 319.4512 276.5195 323.4512 273.8525 326.4512 c
fUULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
