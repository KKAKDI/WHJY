%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (875.ai)
%%CreationDate: 3/25/2002 6:37 PM
%%BoundingBox: 217 320 371 559
%%HiResBoundingBox: 217.7681 320.2461 370.8389 558.3564
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13722 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC6E204B204B204B204B
%204B204B204B204B204B204B204B204B204B202720272027202720272027
%202720272027204B204B204B204B204B204B204B204B204B204B204A44FD
%07FC99FFFD05FC6827F85227525152275251522727FD23F8525152275251
%522752515227525152275251522727F86FFD05FCC2FFFD04FC68F851FD0A
%FF27FD25F87DFD13FF7DF84BFD04FCBBFFFD04FC274BFD0AFF27FD27F87D
%FD13FFA8F892FCFCFCC2FFFCFCFC8CF8FD0AFF27FD29F876FD13FF2720FC
%FCFCBBFFFCFCFC444BFD09FF52FD2BF87DFD12FF7D27FCFCFCC2FFFCFCFC
%4A27FD08FF76FD2DF852FD11FF7DF8FCFCFCBCFFFCFCFC4452FD07FF27FD
%2FF87DFD10FF7D27FCFCFCC2FFFCFCFC4B27FD05FF7D27FD13F876FD0BF8
%27FD11F8A7FD0FFF7DF8FCFCFC99FFFCFCFC4452FD04FF27FD0EF8272752
%7DA8FFFFA8FD0AF827FFFF765227FD0EF8FD0FFF7D27FCFCFCC2FFFCFCFC
%4B27FFFF7DFD05F8272752527D7D7DA8FD0AFF7DFD0BF8FD07FF7D7D7D52
%27522727FD05F8FD0EFF7DF8FCFCFCBBFFFCFCFC2052FF5227527DA8FD14
%FF7DFD0AF852FD11FF7D27F8F8FD0DFF7D27FCFCFCC2FFFCFCFC4A27FD1A
%FF7DFD0AF852FD0FFF52FFFFFFA85227FD0CFF7DF8FCFCFCBBFFFCFCFC20
%52FD1AFF7DFD0AF8FD10FF27F8A8FFFFFFA8A8FD0BFF7D27FCFCFCC2FFFC
%FCFC4A27FD1AFFA8FD09F827FD10FF52F8F827A8FD0EFF7DF8FCFCFCBCFF
%FCFCFC4452FF52A8FD18FF27FD08F87DFD11FFF86F20F827A8FD0CFF7D27
%FCFCFCC2FFFCFCFC4B27FF2727A8FD17FF27FD08F8FD12FF4B20FC8C27F8
%27A1FD0AFF7DF8FCFCFC99FFFCFCFC4452FF52F827A8FD16FFA8FD07F8A8
%FD12FF7DF8FCFCFC9320F827A8FD08FF7D27FCFCFCC2FFFCFCFC4B27FF20
%4B2020A7FD16FF27FD05F852FD14FFF86EFD04FC8C27F827A8FD06FF7DF8
%FCFCFCBBFFFCFCFC2052FF2768FC20F87DFD15FFA8FD04F827FD15FF5120
%FCFC9368FCFC9320F851FD05FF7D27FCFCFCC2FFFCFCFC4A27FFF868FCFC
%44F852FD15FF27F8F8F8A8FD15FF52F8FCFC20F844FCFCFC68F8F8A8FFFF
%FF7DF8FCFCFCBBFFFCFCFC2052FFF88CFCFCFC44F87DFD15FFF8F852FD17
%FFF893FCB5F8F844FCFCFC8C4BF87DFFFF7D27FCFCFCC2FFFCFCFC4A27FF
%F8FD05FC44F87DFD13FF7DF8F8FD18FF4B20FCFC4BF8F844FD04FC6FF852
%FF7DF8FCFCFCBCFFFCFCFC44527D27FD06FC2027A8FD10FF7DF827F87DFD
%18FFA8F88CFC8CF868F820FD04FC93F8767D27FCFCFCC2FFFCFCFC4B277D
%F8FC2020FD04FCF827FD0EFF5227F84A8CF87DFD19FFF84BFCFC202768F8
%F8FD04FC92F84BF8FCFCFC99FFFCFCFC44527D27FC6FF893FCFCFCB5F87D
%FD0AFFA852F82744938CFCF87DFD19FFA1F8B4FC93F8938C27F8B4FCFCFC
%6FF827FCFCFCC2FFFCFCFC4B2752F8FC68F8F8FD04FC6FF8FD08FFA720F8
%F86EFCFCF8FCFCF8FD1BFF2720FCFC2720FCFC27F88CFCFCFC26F8FCFCFC
%BBFFFCFCFC20524B4BFC93F82044FD04FC274BFD05FF7D27F8278CFCFCFC
%20F8FCB4F8FD1BFF7C208CFC8CF88CFCFC27F8B4FCFC6827FCFCFCC2FFFC
%FCFC4A274B20FCFCF844F8FD04FC68F8A8FFFFFF27F820FD05FC44F8F8FC
%6826FD1CFFF827FCFC2027FCFCFC27F8FCFC6EF8FCFCFCBBFFFCFCFC2052
%4B4BFCFCF86FF84BFD04FC2052FFFF272768FD05FC68F8F84BFC4B27FD1C
%FFA8F86FFCB5F86FFCFCFC2720FC6827FCFCFCC2FFFCFCFC4A275220FCFC
%27446EF892FCFCFC6FF8FF27278CFD05FC8C2720F88CFCF87DFD1DFF52F8
%FCFC4BF8FCFCFC8CF8446FF8FCFCFCBCFFFCFCFC44527D27FCFC4427FC4B
%F8B4FCFCFC274BF868FD06FC27206F20FC8CF8A8FD1EFF2720FCFC2720FC
%FCFC68F84427FCFCFCC2FFFCFCFC4B277DF8FCFC8CF8FCFCF820FCFCFC20
%F844FD06FC27F8FCF86FFC4AF8FD1FFFA1F844FC8CF868FCFCFC20F8F8FC
%FCFC99FFFCFCFC4452FFF8FCFCFC2768FC8C2744FCFC6FF8FD06FC4BF8B4
%2027FCFCF87DFD20FF76F868FC44278CFCFCB4F827FCFCFCC2FFFCFCFC4B
%27FFF86FFCFC204BFCFC68F868FC8C6FFD05FC26F8FC8CF868FC8CF8A8FD
%21FF51F868FCF826FCFCFC4AF8FCFCFCBBFFFCFCFC2052FF2720FCFC6FF8
%FCFCFC44208CFD05FC8C27F8B4FC2720FCFC2727FD20FFA85127F8278C93
%F86FFCFC6827FCFCFCC2FFFCFCFC4AF827F8F8FCFCFCF844FCFCFCF827FD
%04FC68F820FCFC26F8FCFC8CF8A8FD1DFF7C20F8F820206E8CFCFC4BF8FC
%FC6EF8FCFCFCBBFFFCFCFC2027446FFD04FC4427FCFCFCB5F84BFCFC44F8
%44FCFC6FF893FCFC204BFD1BFFA827F8F84B68FD06FC9368F820FC6827FC
%FCFCC2FFFCFCFC4A20FD07FCF86FFCFCFC6FF88CF82068FCFC92F86EFCFC
%44F8A8FD19FF7D27F84B68FD05FC4427F8F8F827F820FC6FF8FCFCFCBCFF
%FCFCFC444BFD07FC6FF8FD04FC27F8278CFCFCB4F84BFCFC8C277CFD18FF
%A8202744B4FD04FC8C4BF820206FFD06FC6827FCFCFCC2FFFCFCFC4B20FD
%05FC686E8C2020FCFCFC686EFD04FCF820FCFC8CF8F8FD18FF52F8268CFD
%05FC20F8F86EFD09FC68F8FCFCFC99FFFCFCFC444BFC9320F8F82720F8F8
%278CFD07FC20278CFCFCB44427F852FD14FFA827F86FFD04FC8C4BF82768
%FD0BFC6827FCFCFCC2FFFCFCFC4B204AF82044FD04FC8C204BFD06FC44F8
%8CFD06FC6FF8207DFD11FF52F820FD04FC9220F82092FD0DFC6EF8FCFCFC
%BBFFFCFCFC204B686F2020F86F8CFD09FC8C27F8202092FD06FC44F852FD
%0FFF272068FCFCFC6827F8278CFD0FFC6827FCFCFCC2FFFCFCFC4A20FCFC
%FC8C6FF8F8208CFD0AFC6827F8268CFD05FC44F852FD0CFFA8F8F88CFCFC
%68F8F820FD0CFC68686F2020F8F8F8FCFCFCBBFFFCFCFC2027206F8CFCFC
%FC68F8F8B4FD0BFC93F82768FD05FC44F87DFD0AFFA1F827FCFC8C27FD11
%F827204B44936827FCFCFCC2FFFCFCFC4A2752F826FCFC68F820FCFCFC44
%27F8FD09FC44F8208CFD04FC44F8A8FD08FF52F86FFD04FC206E6892FD13
%FC6FF8FCFCFCBCFFFCFCFC445252278CFC8C2044FCFC6FF8202027FCFC68
%B4FD06FC8C27F84BFD04FC2027FD06FFA827F892FD16FC684B20FCFCFC44
%27FCFCFCC2FFFCFCFC4B27F844FCFCF820FCFC20F86FFCFCF8FCFC8CF84B
%8CFD06FC6EF8F844FCFCFCF852FD04FF27F8F820204A686EFD0EFC686E20
%20F8F8F820FCFC8CF8F8FCFCFC99FFFCFCFC442720FCFC4BF8FC8C27F893
%FCFCFC2744FCFC27F8F8F827204B204B2027F8F8206FFC93F8A8FD04FF7D
%A152522727F8F8F8272027F8272027F82720F8F827205252A84B27FCFCFC
%27F827FCFCFCC2FFFCFCFC4BF88CFC92F88CFC2720FCFCFC44FC4427FCFC
%4427FC8C684B204A206F684A2027F88CFC4BF8FD0CFFA8FD0A7DA8FD05FF
%A7F868FCFC6FF86EF8FCFCFCBBFFFCFCFC2027FCFC2027FC27F8B4FCB4F8
%F88CFCF86FFC92F8FD10FC274BFD1CFF2720FCFCFCF84B6827FCFCFCC2FF
%FCFCFC4A20FCFCF88C6FF8FCFCFCF8F8F86FFC6EF8FCFCF868FD0FFC68F8
%7DFD1AFFA8F88CFCFC44F8FC6EF8FCFCFCBBFFFCFCFC204BFC6FF893F86F
%FCFC4427A87DF8FCFC4B20FCF893446F8CFD0DFC4427FD1AFF4B27FCFCFC
%2744FC6827FCFCFCC2FFFCFCFC4A20FC2026F86FFCFC44F87DFFFF2744FC
%8C272020446FF8F8F84B206E686F204A2027F8F8F827F852FD19FF2044FC
%FC92F8FCFC6FF8FCFCFCBCFFFCFCFC444B68F8F827FCFC44F87DFFFFFF7D
%278CFC8C20204B6820F8F8274B2027F8274B527DA8A87D5227F87CFD0AFF
%527DFD0BFFA8F8FCFCFC4427FCFC6827FCFCFCC2FFFCFCFC4B20F8F84BFC
%FC20F87DFD05FF2720FCFC44F820FCFD04F827FD0DFFA8FD06FFA85127F8
%F8A8FD0BFF5120FCFCFC2044FCFC6EF8FCFCFC99FFFCFCFC2027F86FFC6F
%F827A8FD07FFF84BFCFC2027FCFD05F827FD0FFF7D522727FD04F852FD0C
%FF2720FCFCFCF893FCFC2027FCFCFCC2FFFCFCFC4BF88C4427F852FD09FF
%A8F84AFC6F20FCFD07F8A7FD08FFA77627FD0AF8FD0DFFF86EFCFC6820FC
%FC8CF8F8FCFCFCBBFFFCFCFC2027F82752FD0CFFA8F86FFCFCFC20FD07F8
%A8FD04FFA852FD0DF8A8FD0DFFF88CFCFC4B20FCFC272027FCFCFCC2FFFC
%FCFC4A27FD10FFA8F84AFCFCFD09F8A7FFA827FD0EF87DFD0DFFA7F8FCFC
%FCF86FFC26F86EF8FCFCFCBBFFFCFCFC2052FD11FFA8F84BFC27FD09F852
%FD0FF852FD0EFF7627FCFCFC278C6FF8936827FCFCFCC2FFFCFCFC4A27FD
%13FFF827FD19F827FD0FFF4B20FCFC8CF8FCF84AFC6FF8FCFCFCBCFFFCFC
%FC4452FD13FF7DFD19F827FD10FF274BFCFC44272027FCFC6827FCFCFCC2
%FFFCFCFC4B27FD0FFF7D7D7C7D7DFD18F827FD11FF2768FCFC2720F868FC
%FC26F8FCFCFC99FFFCFCFC4452FD0BFF7D2727FD1DF827FD12FFF86FFCFC
%F82720FCFCFCF827FCFCFCC2FFFCFCFC4B27FD08FFA727FD20F851FD13FF
%F8FCFC8CF8F88CFCFC44F8F8FCFCFCBBFFFCFCFC2052FD05FFA85227FD21
%F827F82727527DFD0FFFF8FCFC6FF84BFCFC8C204B27FCFCFCC2FFFCFCFC
%4A27FFFFFF5227FD23F8C6C6C6745126F8F8277DFD0BFF7DF8FCFC20F88C
%FCFC20F87DF8FCFCFCBBFFFCFCFC2052A852FD23F8274A514B51509FC6C6
%C69F4B27F87DFD09FF7DF8FCFCF820FCFC4BF8FF7D27FCFCFCC2FFFCFCFC
%4AFD27F82626512626F8F826519EC6C651F82052FD07FF4B20FC6FF8FCFC
%4BF8A7FF7DF8FCFCFCBCFFFCFCFC44272727FD24F84AFD05C67427F8F8F8
%9FC6C65027F87DFD05FF5244FCFC938C27F8A8FFFF7D27FCFCFCC2FFFCFC
%FC4B27FFFFA85127FD22F850752627F8F8F827264B9E7BF826F8F8F8A7FD
%04FFF86FFCFC68F8F8CFFFFFFF7DF8FCFCFC99FFFCFCFC4452FD06FFA87D
%2727F827FD1BF820F851519FFD04C67427F852A8FD08FFF88CFC202752FD
%05FF7D27FCFCFCC2FFFCFCFC4B27FD07FF27F826C626F8F89F747BFD17F8
%9EFD05C67BF8F827FD0AFFA7F86FF8277DFD06FF7DF8FCFCFCBBFFFCFCFC
%2052FD06FFF8279E9FF82774C6C6C7FD18F826C6C6C75027F852A8FD0BFF
%51F8F852FD08FF7D27FCFCFCC2FFFCFCFC4A27FD05FFF827C675F827C69F
%5026FD0DF826FD0CF82626F82752FD0EFF2727CFFD09FF7DF8FCFCFCBBFF
%FCFCFC2052FD04FFF827C675FD05F8274A75FD0BF851A427FD0BF82752FD
%11FFA8FD0BFF7D27FCFCFCC2FFFCFCFC4A27FFFFFF2727C627F82750FD05
%C6FD0BF827C6C69EFD0CF8FD1EFF7DF8FCFCFCBCFFFCFCFC4452FFFF52F8
%9EC6267BFD04C67A51FD0BF827F8C6C6C6F827FD0AF8A8FD1DFF7D27FCFC
%FCC2FFFCFCFC4B27FF7DF874C6C6C674512627F8F82727FD0AF89EF850C6
%C6F89EFD0AF852FD1DFF7DF8FCFCFC99FFFCFCFC4452A82726512627F827
%27527DA8FFFFFD0AF874C67427C6C6F8C6C627FD08F827FD1DFF7D27FCFC
%FCC2FFFCFCFC4B27F8F827F82752FD07FF52FD08F8272720C6C6F851C6F8
%C6C674FD09F8A8FD1CFF7DF8FCFCFCBBFFFCFCFC20277DFFFFFFF82752FD
%06FF27FD07F87DFFFFF84BC67BF8C6F8C6C6C6F87DFD07F827FD0BFF5227
%FD0FFF7D27FCFCFCC2FFFCFCFC4A27FD04FF52F8F8F8A8FD04FFFD06F827
%FD04FFA8F851C6F850F8C6C6C6F8FFFF27FD06F8A8FD08FF52F8F87DFD0F
%FF7DF8FCFCFCBBFFFCFCFC2052FD04FFA8F8684BF827A8FF7DFD04F827A8
%FD06FF7DF89F2627F8C6C6C6F8FFFFFFA84BFD05F8FD06FF7DF827F827FD
%10FF7D27FCFCFCC2FFFCFCFC4A27FD05FF2726FC9220F82027F82051FD0A
%FF52F89FF8F8C6C67AF8FD06FF5227F8F827FFFFFF52F8F86F8CF87DFD10
%FF7DF8FCFCFCBCFFFCFCFC4452FD05FFA8F892FCFC8C27F82752FD0CFF27
%5027F8C6C67B20FD0BFFA852F82768FCFC4B27FD11FF7D27FCFCFCC2FFFC
%FCFC4B27FD06FF2720FCFCFC8CFC4420F84BA8FD09FF52262026C6C6264B
%FD09FFA720F82068FD04FCF8A8FD11FF7DF8FCFCFC99FFFCFCFC4452FD06
%FF7DF88CFC44F844FCFC6FF8274BFD09FFF8514BC6C62752FD07FF5227F8
%4B8CFD05FC204BFD12FF7D27FCFCFCC2FFFCFCFC4B27FD07FFF84AFCFCF8
%F8F892FCFC6827F851A8FD06FF27209FC6C6F8A8FD04FFA827F82044FCFC
%FC68FD04FCF87DFD12FF7DF8FCFCFCBBFFFCFCFC2052FD04FFA852F8F8F8
%FCFCB4F8F8F84BFCFCFC6F202652FD05FFA8F8C6C65027FFFFFF7CF8F820
%6FFD04FC6827FCFCFC6FF8FD13FF7D27FCFCFCC2FFFCFCFC4A27FFFF7D27
%F8F8F852F844FCFC6EF84AF8F868FCFCFC44F8F8A8FD04FFF875C6F852FF
%51F8F84A8CFD05FC44F820FCFCFCF876FD13FF7DF8FCFCFCBBFFFCFCFC20
%525227FD05F8FF5227FCFCFC4BF8FC44F8F893FCFC8C4BF852FFFFFF5226
%75F87DF82744FD07FC44F8F86FFCFC8C27A8FD13FF7D27FCFCFCC2FFFCFC
%FC4AFD07F827FFFFF86EFCFCFC2020FC8C26F84B8CFCFC92F827A8FF7DF8
%F827F84AFD08FC20F820F8FCFCFC2627FD14FF7DF8FCFCFCBCFFFCFCFC44
%FD07F84BFFFF5220FCFCFC68F868FCFC92F82044B4FCB42027A8FFF8F820
%B4FD07FC932027682744FCFCB4F8A8FD14FF7D27FCFCFCC2FFFCFCFC4BFD
%07F8A8FFFFA8F868FCFCFC44F868FCFCFC6826F84AFCFC20F852F820FD07
%FC8C4AF84BFC4AF8FCFCFC2027FD15FF7DF8FCFCFC99FFFCFCFC44FD06F8
%27FD04FF52278CFCFCFC202768FD04FC6FF82768FC20F844FD07FC6827F8
%93FCB4F86FFCFC8CF8A8FD15FF7D27FCFCFCC2FFFCFCFC4BFD06F827FD05
%FFF826FD04FC20F868FD05FC20F820FC44FD06FC6EF8F844FCFCFC2020FC
%FCFC2027FD16FF7DF8FCFCFCBBFFFCFCFC20FD06F8A8FD06FFF84BFD04FC
%442068FD05FC6827F892FD04FC6827F84B8CFCFCFC20278CFCFC6FF8FD17
%FF7D27FCFCFCC2FFFCFCFC4AFD05F827FD07FFA8F84AFD04FC44F820FD06
%FC4BF84A8C6FF8F820FD05FC44F868FCFC8CF87DFD17FF7DF8FCFCFCBBFF
%FCFCFC20FD04F827A8FD08FFA8F84BFD04FC6827F893FD05FC6FF8F8206F
%8CFD05FC44F868FCFCB4F852FD18FF7D27FCFCFCC2FFFCFCFC4AFD04F852
%FD0AFFA7F8278CFCFCFC8C26F84BFD0EFC44F844FCFC92F827FD19FF7DF8
%FCFCFCBCFFFCFCFC44F8F8F852FD0CFF7DF82768FD04FC6FF82768FD0BFC
%20F868FCFC6FF827FD1AFF7D27FCFCFCC2FFFCFCFC4BF8F8F852FD08FFA8
%52F8F8F820204B8CFD04FC8CF8F8208CFD08FCF82068FC8C27F852FD1BFF
%7DF8FCFCFC99FFFCFCFC44FD04F8A8FD06FF51F8F86F8CFD05FC684B20F8
%F82720F8F8FD06FC4BF84B8CFC20F8F8FD1DFF7D27FCFCFCC2FFFCFCFC4B
%FD05F8FD04FFA8F82768FD05FC8C4BF8F8206F8CFD08FC6E4420F86EFCFC
%FC8C2020F87DFD1BFF7DF8FCFCFCBBFFFCFCFC20FD05F827FFFFA8F84BFD
%05FC6F20F8206FFD0CFC4427F82768FD06FC4BF852FD1AFF7D27FCFCFCC2
%FFFCFCFC4AFD06F852A7F86FFD04FC44F8F84B8CFD08FC4A8CFD07FC44F8
%F84AFD05FC92F827FD19FF7DF8FCFCFCBBFFFCFCFC20FD08F86FFCFC8C4B
%F82744FD08FC934427F86FFD09FC6FF82768FD04FC93F87CFD18FF7D27FC
%FCFCC2FFFCFCFC4AFD07F84AFC6FF8F8F827448CFCFCFC8C684B20F8F827
%F84AFCFCFC268CFD07FC44F8208CFCFCFC8CF876FD17FF7DF8FCFCFCBCFF
%FCFCFC44FD06F86FFCFC684B444B2027FD05F827204B68FC2027FCFCFC4B
%F8F820B4FD06FC8C4BF86FFCFCFC92F87DFD16FF7D27FCFCFCC2FFFCFCFC
%4BFD07F82044FD0FFC68F88CFCFC8CF8926820F84B68FD06FC6EF820FCFC
%FC4AF8A8FD15FF7DF8FCFCFC99FFFCFCFC44FD0AF84B8CFD0CFC2720FCFC
%93F86FFCFCFC932027F827204B68FCFCB4F84BFCFCFC6FF8A8FD14FF7D27
%FCFCFCC2FFFCFCFC4BFD0DF826204B204AF82720FCFC6FF8FCFC92F8268C
%92FD06FC684B20F8F8272026F8278CFCFC6FF8A7FD13FF7DF8FCFCFCBBFF
%FCFCFC20FD0BF87D7D4B5127524B27F893FCB4F86FFC6FF84BFC27F82768
%FD09FC684B2027F827FCFCFC6FF8A8FD12FF7D27FCFCFCC2FFFCFCFC4AFD
%0CF8FD05FFA8F868FCFC20208C26F86EFC4BF8A727F8F82044FD0BFC68FD
%04FC6FF87CFD11FF76F8FCFCFCBBFFFCFCFC68FD0CF852FD04FF204BFCFC
%44F820F820B4FC6FF8A8FFFFFFA82727F827204B686FFD0BFC6FF87DFD10
%FF274BFCFCFCC2FFFD04FCFD05F8A87D27FD05F8A8FFFF7DF88CFC44F8F8
%268CFCFC4AF8A8FD08FF7D522727F8F8F827F820204B264A204B2020F84B
%A8FD0DFF7DF88CFCFCFCBCFFFD04FC6FF8F8F827FD04FFA87D27F8F8FFFF
%2720FCFC9244B4FCFC8C27F8A8FD10FF7D7D7D5227524B5227522727F852
%FD0CFF7DF844FD04FCC2FFFD05FC68F8F8F85227522752275227F8274BF8
%4A204B204A204BF8F8F85227522752275227522752275227522752275227
%5227522752275227522752275227522752275227522752F8F844FD05FC99
%FFFD07FC684B264B4B4B264B4B4B264B4B4B264B4B4B264B4B27264B4B4B
%264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B
%4B4B264B4B4B264B4B4B266F8CFD06FCC2FFFD52FCBBFFFD52FCC2FFFD52
%FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
370.8389 320.2461 m
217.7681 320.2461 L
217.7681 558.3564 L
370.8389 558.3564 L
370.8389 320.2461 L
fu0 0 0 0 k
225.3032 541.7178 m
225.3032 336.8838 l
227.1362 327.3838 235.9697 327.3838 v
244.8032 327.3838 353.6367 327.3838 y
363.6367 327.8838 363.6367 341.0518 v
363.6367 354.2178 363.6367 542.2178 y
362.8047 551.0513 350.9707 551.0513 v
339.1367 551.0513 235.6367 551.0513 y
227.3032 551.5508 225.3032 541.7178 v
f0 1 1 0 k
363.6367 503.7178 m
358.6367 510.7178 350.3037 515.5513 v
341.9707 520.3848 329.3047 525.8848 327.9707 526.8848 c
330.1367 521.3848 330.6367 518.5513 v
331.1367 515.7178 337.3047 496.2178 348.4707 486.7178 c
340.1367 485.3843 333.1367 482.7178 v
326.1367 480.0513 314.8027 472.0513 311.1367 469.0513 c
307.4707 466.0513 301.9707 462.5513 y
308.6377 462.3843 310.9707 461.7178 v
313.3037 461.0513 322.1377 459.7178 329.9707 460.0513 c
337.8037 460.3848 351.8027 462.7178 353.6367 463.7178 c
353.1367 462.7178 352.1367 461.5513 v
351.1367 460.3848 347.4707 453.0513 345.9707 447.0513 c
344.4707 441.0513 342.6367 423.8838 342.6367 422.3838 c
342.6367 420.8838 340.9707 413.0498 340.3037 411.3838 c
347.4707 415.0498 352.8037 418.8838 v
358.1367 422.7178 362.9697 429.5518 363.6367 433.7173 c
363.6367 503.7178 l
f225.3032 483.8848 m
229.4697 485.0513 231.3032 485.0513 v
228.1362 494.2178 228.9697 502.2178 v
229.8032 510.2178 231.1367 520.0518 230.8032 521.8848 c
233.9697 519.0508 234.9697 518.2178 v
235.9697 517.3848 247.4697 510.5513 253.4697 491.0513 c
256.3032 496.3843 260.3032 499.2178 v
264.3032 502.0513 272.1362 504.5513 272.9697 505.0513 c
273.8032 505.5513 282.4697 509.0513 283.8032 510.0513 c
284.4697 503.8843 282.9697 497.7178 v
281.4697 491.5513 278.9697 484.3848 272.8032 476.8848 c
278.9697 475.2178 284.3032 469.5513 v
289.6372 463.8848 298.1372 450.0513 y
294.6362 451.0513 292.9692 451.2173 v
291.3032 451.3853 288.6372 451.0513 287.8032 450.8853 c
286.9697 450.7173 274.1362 448.7183 266.4697 452.3853 c
267.6367 445.2173 267.6367 443.7173 v
267.6367 442.2173 268.3032 432.8853 y
266.3032 433.7173 l
262.9702 437.7173 261.6367 438.7173 v
260.3032 439.7173 251.6362 446.3853 248.4697 457.3848 c
245.8037 455.5518 244.6367 453.8853 v
243.4697 452.2173 235.6367 442.3853 225.3032 442.0513 c
225.3032 457.8848 l
230.6367 466.7178 l
225.3032 468.3848 l
225.3032 483.8848 l
f255.4697 327.5518 m
258.9702 336.2178 262.1367 339.3838 v
255.9697 338.3857 252.3032 338.7178 v
248.6367 339.0518 243.4697 340.8838 241.9697 341.5518 c
240.4697 342.2178 233.9697 344.3838 y
238.4697 348.2178 239.3032 349.0518 v
240.1367 349.8838 243.4697 354.2178 248.9697 356.8838 c
254.4697 359.5518 260.3032 359.3838 y
252.4697 365.3857 249.4697 369.2178 v
246.4697 373.0518 242.8037 382.2178 241.6367 384.7178 c
240.4697 387.2178 235.6367 397.8838 y
243.9702 393.2178 247.1367 391.7178 v
250.3032 390.2178 260.6367 386.3838 267.8032 381.8838 c
274.9697 377.3838 281.9697 371.0518 y
285.6367 376.3838 292.6372 379.3838 v
299.6377 382.3838 324.6367 392.2178 330.6367 396.2178 c
326.1377 387.5518 324.9707 384.5518 v
323.8037 381.5518 320.6377 373.5498 317.9707 369.3838 c
315.3037 365.2178 311.4697 359.0518 303.6367 356.5518 c
303.9697 356.0518 305.6367 355.5518 v
307.3037 355.0518 313.3027 350.7178 316.6367 346.0518 c
319.9707 341.3838 328.6367 334.2178 332.1367 331.2178 c
330.9707 330.8857 329.8037 331.2178 v
328.6367 331.5518 318.8037 332.0498 316.3037 331.8838 c
313.8037 331.7178 296.6362 332.3857 282.9697 338.2178 c
277.4697 329.5518 270.3032 327.5518 v
255.4697 327.5518 l
f0 0.2 1 0 k
246.8032 416.1768 m
243.1782 415.3018 239.5532 412.3018 v
235.9282 409.3018 231.5532 401.9268 228.9282 399.8018 c
228.4282 399.4268 229.9282 399.5518 v
231.4282 399.6768 243.6782 402.3018 245.4282 402.5518 c
247.1782 402.8018 256.1782 405.1768 y
270.1782 401.4268 l
276.6782 393.6768 277.5532 392.1768 v
278.4282 390.6768 283.0532 380.1768 284.1782 374.8018 c
285.3032 376.1768 286.0532 377.0518 v
286.8032 377.9268 293.8032 389.0518 291.0532 400.6768 c
303.3037 409.3018 l
310.5537 411.3018 314.9287 413.4268 v
319.3037 415.5518 322.5537 417.3018 324.3037 417.8018 c
326.0537 418.3018 330.1787 418.0518 y
327.8037 419.3018 326.4287 420.3018 v
325.0537 421.3018 318.5537 423.9268 314.5537 425.4268 c
310.5537 426.9268 302.4287 428.4268 y
264.9282 423.8018 l
246.8032 416.1768 l
f*u
1 D
0.65 0.53 0.51 1 k
235.2246 551.7598 m
229.3633 551.7598 224.5947 546.9912 224.5947 541.1299 C
224.5947 337.4717 L
224.5947 331.6104 229.3633 326.8428 235.2246 326.8428 C
353.3828 326.8428 L
359.2441 326.8428 364.0127 331.6104 364.0127 337.4717 C
364.0127 541.1299 L
364.0127 546.9912 359.2441 551.7598 353.3828 551.7598 C
235.2246 551.7598 L
f0 D
226.0117 337.4717 m
226.0117 541.1299 L
226.0117 546.21 230.1445 550.3428 235.2246 550.3428 C
353.3828 550.3428 L
358.4629 550.3428 362.5947 546.21 362.5947 541.1299 C
362.5947 337.4717 L
362.5947 332.3916 358.4629 328.2607 353.3828 328.2607 C
235.2246 328.2607 L
230.1445 328.2607 226.0117 332.3916 226.0117 337.4717 C
f*U
252.8032 550.8013 m
248.0532 545.5513 243.8032 541.0513 v
239.5532 536.5513 229.0532 531.0513 y
240.8032 533.0513 246.0532 533.5513 v
251.3032 534.0513 271.0532 534.5513 278.3032 538.3013 c
276.0532 532.8013 277.3032 526.0513 v
278.5532 519.3013 284.0532 513.3013 284.3032 508.8013 c
289.3032 516.0513 292.0532 520.3013 v
294.8032 524.5513 297.8032 531.5513 297.0532 537.8013 c
302.3037 535.0513 311.5537 534.0513 v
320.8037 533.0513 328.5537 534.8013 339.0537 528.0513 c
333.3037 534.3013 330.3037 537.8013 v
327.3037 541.3013 321.0537 548.3013 315.3037 551.0513 c
252.8032 550.8013 l
f230.0981 522.231 m
230.1147 522.0615 230.123 521.8594 230.123 521.6265 c
230.123 520.2661 229.853 517.8594 229.5244 514.9263 c
229.1128 511.2544 228.6006 506.6846 228.3457 501.8384 c
228.3027 501.0234 228.2832 500.2241 228.2832 499.4429 c
228.2832 492.6641 229.7476 487.3384 230.3628 485.3926 C
228.8706 485.187 225.9316 484.7266 224.9517 484.1665 C
225.6548 482.936 L
226.4136 483.3696 229.5742 483.8784 231.3882 484.0977 C
232.2759 484.2051 L
231.9688 485.0449 L
231.9438 485.1128 229.7017 491.3457 229.7017 499.4937 c
229.7017 500.2358 229.7202 500.9937 229.7607 501.7642 c
230.0137 506.5684 230.5234 511.1152 230.9331 514.7686 c
231.1973 517.127 231.4111 519.0508 231.4966 520.4785 C
232.6421 519.2578 234.4204 517.4761 236.1362 516.228 c
239.6753 513.6543 249.5796 503.9941 252.8643 490.3848 C
253.3936 488.1929 L
254.2139 490.2944 L
254.2427 490.3691 257.2339 497.8125 266.0693 501.3945 c
273.5396 504.4229 280.8384 507.9365 283.3677 509.1748 C
283.3755 508.7188 283.3818 508.1758 283.3818 507.5498 c
283.3818 505.7393 283.3301 503.4663 283.105 502.1729 c
282.0645 496.1885 279.2739 484.9966 272.2783 477.2773 C
271.5288 476.4502 L
272.5962 476.1235 L
272.6523 476.1064 278.2583 474.3535 283.3145 469.5381 c
286.8335 466.187 291.7231 458.7231 294.9595 453.7837 c
295.7466 452.5825 296.3472 451.6704 296.8306 450.9556 C
294.938 451.4048 292.1372 452.0103 290.8032 452.0103 C
288.4692 451.7339 L
284.0005 451.0884 273.5371 449.5757 266.6128 452.938 C
265.3867 453.5337 L
265.6035 452.188 L
265.6162 452.1118 266.8447 444.4595 266.8447 441.5513 C
266.9771 436.7729 267.043 434.4106 V
265.4146 436.1372 262.5728 439.0474 260.4785 440.6177 c
257.6401 442.7466 249.9595 452.1626 249.0015 457.6729 C
248.8066 458.7935 L
247.8862 458.1245 L
247.769 458.0391 245.001 456.0137 243.938 454.1528 c
243.0078 452.5259 236.0972 443.9536 225.7051 442.5024 C
225.9014 441.1001 L
236.8081 442.6216 243.978 451.3667 245.1685 453.4497 c
245.7612 454.4868 247.0645 455.6504 247.9175 456.3486 C
249.5942 450.3813 256.748 441.645 259.6279 439.4849 c
262.5386 437.3013 267.2305 432.1274 267.2778 432.0757 C
268.5649 430.6528 L
268.2617 441.5513 L
268.2617 443.8931 267.542 448.8989 267.1919 451.1997 C
274.4063 448.3169 283.9453 449.6479 288.6724 450.3306 C
290.8032 450.5923 L
292.6899 450.5923 298.3179 449.1304 298.3745 449.1157 C
300.9004 448.4575 L
299.0547 450.3022 L
298.7075 450.6489 297.52 452.4614 296.145 454.561 c
292.8735 459.5542 287.9292 467.1001 284.292 470.5645 c
280.1807 474.48 275.8491 476.4185 273.9761 477.1353 C
280.709 485.0713 283.4688 495.9922 284.5015 501.9297 c
284.7446 503.3286 284.8003 505.6914 284.8003 507.5552 c
284.8003 509.0454 284.7646 510.2173 284.7617 510.3232 C
284.7271 511.4302 L
283.7363 510.9351 L
283.6465 510.8901 274.6538 506.4038 265.5371 502.708 c
258.6177 499.9028 255.1323 495.0005 253.7065 492.4512 C
249.9287 505.5381 240.4697 514.8291 236.9702 517.3745 c
234.3208 519.3013 231.3706 522.728 231.3413 522.7627 C
229.874 524.4736 L
230.0981 522.231 L
f*u
1 D
233.8467 507.7437 m
233.8882 507.2393 234.8838 495.3188 237.3887 488.5552 c
239.1846 483.7061 242.0073 478.6006 243.4785 476.0674 C
241.9849 476.4424 239.6416 476.7935 236.4893 476.5068 c
230.7988 475.9897 228.6411 473.8916 228.5522 473.8022 C
227.4717 472.7222 L
228.9941 472.5952 L
231.0913 472.4204 237.6318 469.6973 241.0967 468.1733 C
235.1909 464.2275 231.6284 457.522 230.3677 452.731 c
229.1997 448.2925 224.9307 445.1567 224.8877 445.1255 C
225.6128 443.9136 L
231.3057 446.6792 234.2754 450.52 237.147 454.2349 c
238.771 456.3364 240.3047 458.3208 242.2666 460.0151 c
246.2612 463.4653 249.582 464.7451 250.9717 465.167 C
251.3896 460.5957 253.5718 455.9824 257.7651 451.0903 c
260.6567 447.7163 262.3867 443.8062 262.4038 443.7671 C
263.7461 444.1997 L
263.7388 444.2339 263.0049 447.7065 262.7607 452.3384 c
262.5913 455.5625 261.5557 458.9224 260.8545 460.8828 C
265.4727 459.0225 272.8975 458.9155 276.147 459.3486 c
279.7148 459.8247 286.3091 458.1323 286.3755 458.1152 C
286.748 459.4829 L
285.1602 459.9365 274.854 465.7832 269.9536 469.1362 c
266.5063 471.4946 263.1221 472.5552 261.3789 472.9868 C
264.1172 476.126 273.1006 486.6294 275.6968 492.2544 c
278.7168 498.7983 278.9995 502.5957 279.0103 502.7539 C
279.1846 505.3711 L
277.7163 503.1982 L
277.6538 503.1064 271.4429 493.9585 265.335 488.5835 c
260.3232 484.1729 255.314 480.7378 253.5933 479.5923 C
251.875 483.1841 248.0083 488.0288 244.8359 491.9883 c
243.0513 494.2153 241.5103 496.1382 240.9155 497.1582 c
239.1968 500.1045 235.2271 508.0386 235.187 508.1182 C
233.8467 507.7437 L
f0 D
245.6553 475.1748 m
245.6108 475.2471 241.1631 482.4448 238.7178 489.0474 c
237.1362 493.3179 236.1582 499.9009 235.6616 504.041 C
236.9648 501.4868 238.6797 498.1777 239.6909 496.4443 c
240.3389 495.334 241.8354 493.4663 243.73 491.1021 c
247.0737 486.9287 251.2349 481.7354 252.6475 478.2827 C
252.9692 477.4961 L
253.6851 477.9546 L
253.748 477.9946 260.0527 482.0469 266.2715 487.519 c
270.4946 491.2358 274.6123 496.5034 276.9458 499.6782 C
276.4893 497.9937 275.7285 495.7051 274.4097 492.8481 c
271.4883 486.5181 259.6431 473.1563 259.5234 473.022 C
258.6641 472.0552 L
259.9419 471.8516 L
259.9883 471.8442 264.6021 471.0801 269.1528 467.9663 c
272.165 465.9058 277.5327 462.7129 281.5322 460.5151 C
279.6265 460.7915 277.5552 460.9663 275.9595 460.7539 c
272.2344 460.2568 263.6904 460.5503 259.9287 462.9023 C
258.0122 464.1001 L
258.9019 462.0225 L
258.9238 461.9707 261.1055 456.8281 261.3457 452.2642 c
261.4287 450.6802 261.5669 449.2603 261.7139 448.0376 C
260.9536 449.272 259.9902 450.6724 258.8413 452.0122 c
254.6021 456.9585 252.4497 461.5601 252.2612 466.0806 C
252.2275 466.8896 L
251.4302 466.749 L
251.2485 466.7173 246.9238 465.9097 241.3398 461.0874 c
239.2705 459.3003 237.6943 457.2612 236.0254 455.1021 c
234.2134 452.7583 232.3462 450.3667 229.7729 448.2563 C
230.5879 449.4419 231.3286 450.813 231.7388 452.3716 c
233.0083 457.1968 236.6958 464.1035 242.9072 467.6875 C
244.1035 468.3774 L
242.8452 468.9468 L
242.4756 469.1143 234.9946 472.4863 230.8872 473.6338 C
231.9873 474.1821 233.8086 474.8403 236.6172 475.0957 c
241.8159 475.5679 244.71 474.1807 244.7383 474.1665 C
246.9565 473.0762 L
245.6553 475.1748 L
f*U
326.6484 527.2803 m
326.6787 527.2085 329.6406 520.0322 330.6162 516.1294 c
331.6514 511.9868 336.876 498.0317 347.1318 487.04 C
343.5313 486.4116 333.2881 484.2964 324.9453 479.4126 c
318.9209 475.8862 313.0586 471.2554 308.7783 467.874 c
305.708 465.4492 303.2832 463.5342 302.0068 462.9448 C
299.6162 461.8413 L
302.2373 461.5957 L
302.3174 461.5884 310.2637 460.8394 314.6875 460.1021 c
318.7285 459.4287 337.4492 457.9336 352.4912 462.6323 C
350.5732 460.0649 347.3535 454.9438 345.6133 447.4614 c
343.8379 439.8286 342.8096 430.0107 342.1943 424.1436 c
341.9463 421.7686 341.749 419.8936 341.6084 419.1904 c
341.1182 416.7393 339.6328 411.0381 339.6182 410.9795 C
339.2002 409.3779 L
340.6475 410.1826 L
340.6934 410.2061 345.2158 412.7256 348.457 414.9678 C
349.5576 415.7061 L
353.3887 418.2334 360.5205 422.9424 363.9746 433.0728 C
362.6328 433.5298 L
359.3359 423.8564 352.4668 419.3232 348.7764 416.8877 C
347.6504 416.1338 L
345.582 414.7021 342.9932 413.1631 341.4072 412.2471 C
341.8896 414.1396 342.6602 417.2197 342.999 418.9131 c
343.1523 419.6787 343.3418 421.4893 343.6045 423.9971 c
344.2158 429.8311 345.2383 439.5933 346.9941 447.1411 c
349.416 457.5552 355.0098 463.5024 355.0654 463.5615 C
354.3096 464.7168 L
339.2334 459.1885 319.0967 460.8042 314.9199 461.5005 c
311.8408 462.0132 307.1436 462.5244 304.457 462.7993 C
305.8115 463.7378 307.5195 465.0737 309.6563 466.7617 c
313.9043 470.1172 319.7227 474.7129 325.6621 478.1899 c
335.665 484.0454 348.5195 485.8315 348.6484 485.8491 C
350.0469 486.0376 L
349.0605 487.0464 L
338.2246 498.1348 332.8398 513.0781 331.9912 516.4731 c
331.293 519.2646 329.6836 523.4917 328.7217 525.9233 C
330.1738 525.145 332.1436 524.1636 334.4951 522.9976 c
340.1123 520.2139 347.1045 516.7495 351.6602 513.7114 c
358.9336 508.8633 362.666 502.9839 362.7031 502.9253 C
363.9043 503.6768 L
363.748 503.9272 359.9873 509.8643 352.4463 514.8911 c
347.8145 517.979 340.7783 521.4658 335.124 524.2676 c
331.7422 525.9438 328.8213 527.3911 327.6963 528.1411 C
325.7578 529.4336 L
326.6484 527.2803 L
f337.7275 515.3892 m
338.124 514.834 338.9434 513.0181 339.8936 510.916 c
341.7656 506.7705 344.5947 500.5054 347.7178 495.9033 c
351.3809 490.5044 355.0488 484.7993 356.5156 482.5039 C
354.0469 482.4385 348.4873 482.0195 343.2656 479.6987 C
331.8555 474.3398 L
326.3164 471.6899 320.5879 468.9497 318.0469 467.9619 C
318.3818 466.5972 L
318.4717 466.6069 327.4248 467.5928 334.3037 467.5928 C
338.4492 467.5195 L
344.7432 467.3579 352.5771 467.1548 363.2129 469.6108 C
362.8945 470.9917 L
352.4336 468.5776 344.6992 468.7769 338.4854 468.9365 C
334.3037 469.0098 L
330.4102 469.0098 325.917 468.7002 322.6553 468.4243 C
325.459 469.709 328.999 471.4023 332.4678 473.061 C
343.8418 478.4038 L
350.3564 481.2993 357.707 481.0952 357.7803 481.0933 C
359.1182 481.0493 L
358.4023 482.1802 L
358.3545 482.2554 353.5918 489.77 348.8896 496.6992 c
345.8359 501.2002 343.0371 507.3979 341.1846 511.499 c
341.0176 511.8696 340.8701 512.1929 340.7178 512.5293 C
342.459 510.8828 344.5244 508.9473 345.5869 508.0181 C
346.8018 507.0459 L
349.7119 504.7876 356.5254 499.5 362.6846 488.4561 C
363.9229 489.1465 L
357.623 500.4424 350.6484 505.8545 347.6709 508.1655 C
346.5205 509.0845 L
344.5547 510.8042 338.8506 516.2583 338.7939 516.3135 C
337.7275 515.3892 L
f355.3857 451.0376 m
354.1387 447.5239 353.0293 442.5435 351.8535 437.27 c
350.4678 431.0493 349.0342 424.6162 347.4102 421.0986 C
348.6748 420.46 L
357.1777 435.9653 L
357.8125 437.145 358.709 438.2446 359.6592 439.4087 c
361.2295 441.3354 363.0107 443.519 363.9795 446.5884 C
362.6279 447.0142 L
361.7402 444.2046 360.124 442.2212 358.5605 440.3042 c
357.5674 439.0864 356.6289 437.936 355.9297 436.6372 C
353.4639 432.1411 351.0918 427.8154 V
351.834 430.6685 352.542 433.8403 353.2373 436.9614 c
354.3516 441.9614 355.5039 447.1313 356.7217 450.5649 c
359.3916 458.0894 363.5518 463.0435 363.5938 463.0923 C
362.5137 464.0103 L
362.3369 463.8022 358.1475 458.8213 355.3857 451.0376 c
f263.0532 437.0513 m
265.5532 431.8013 l
258.0532 432.8013 251.3032 431.0513 v
244.5532 429.3018 228.0532 422.3018 225.8032 421.5518 c
226.0532 420.3018 l
229.3032 419.5518 231.5532 418.8018 v
233.8032 418.0518 249.3032 414.8018 259.5532 415.0518 c
256.8032 409.3018 254.0532 402.5518 v
251.3032 395.8018 250.0532 390.3018 y
258.3032 392.8018 262.5532 395.3018 v
266.8032 397.8018 272.3032 400.8018 279.5532 411.0518 c
282.0532 407.3018 292.0532 399.0518 v
302.0537 390.8018 311.8037 391.3018 y
308.0537 396.0518 306.5537 400.3018 v
305.0537 404.5518 302.0537 416.5518 295.8032 422.8018 c
303.0537 425.8018 311.3037 434.3013 v
319.5537 442.8013 321.8037 448.5513 322.8037 449.5513 c
315.5537 447.0513 310.8037 446.0513 v
306.0537 445.0513 291.5532 442.8013 285.0532 437.5513 c
280.8032 442.5513 277.5532 444.8013 v
274.3032 447.0513 270.8032 450.8013 y
266.6367 451.8853 l
267.1367 445.0513 267.3032 443.5513 v
267.4697 442.0513 267.4697 433.3853 y
263.0532 437.0513 l
f238.0674 411.5674 m
235.8467 409.4775 233.9478 406.9678 232.2725 404.7549 c
230.7183 402.7021 229.2505 400.7627 227.8496 399.5947 C
225.7056 397.8096 L
238.4263 400.3525 L
240.6973 400.7354 L
245.4834 401.5244 252.7158 402.7158 256.6201 404.667 C
255.9863 405.9346 L
252.2739 404.0791 245.1685 402.9092 240.4668 402.1338 C
238.1802 401.749 L
233.1729 400.7471 230.4448 400.2021 V
231.4126 401.292 232.3892 402.5615 233.4023 403.8994 c
235.0444 406.0693 236.9048 408.5264 239.0391 410.5361 c
243.1021 414.3604 247.2129 415.6104 247.2539 415.6221 C
246.853 416.9814 L
246.6733 416.9287 242.3911 415.6357 238.0674 411.5674 c
f269.4678 401.6514 m
269.6221 401.4268 273.2744 396.0791 275.7788 393.3252 c
278.188 390.6748 282.8569 378.8955 283.3486 374.2275 C
283.5103 372.6904 L
284.5693 373.8154 L
284.7378 373.9951 288.7192 378.2939 290.7407 386.3799 c
292.7563 394.4443 291.5493 400.4443 291.4966 400.6963 C
290.1099 400.4072 L
290.1157 400.376 290.4751 398.5771 290.4751 395.6768 c
290.4751 393.3076 290.2349 390.2002 289.3657 386.7236 c
288.0181 381.333 285.7451 377.7061 284.4736 375.9736 C
283.3301 381.5459 279.1787 391.6924 276.8276 394.2783 c
274.3901 396.96 270.6758 402.3955 270.6387 402.4502 C
269.4678 401.6514 L
f234.9053 397.7646 m
245.1597 375.0049 L
248.6426 367.458 255.2231 362.0537 258.2866 359.8291 C
249.2222 358.9424 243.2681 354.0186 241.0522 351.8018 c
238.3477 349.0986 233.6279 344.8721 233.5806 344.8291 C
232.3179 343.7002 L
234.0088 343.5947 L
235.6934 343.4893 238.1641 342.458 240.7803 341.3682 c
244.1416 339.9658 247.9512 338.3779 251.4966 338.0947 c
255.2212 337.7979 258.6357 338.1865 260.8667 338.5674 C
257.2002 334.6338 254.9897 328.3428 254.8828 328.0303 C
256.2236 327.5713 L
256.2529 327.6572 259.2051 336.1377 263.7036 339.2158 C
263.1172 340.4854 L
263.063 340.4697 257.6543 339.0244 251.6099 339.5068 c
248.2891 339.7725 244.5898 341.3154 241.3257 342.6768 c
239.1831 343.5693 237.2612 344.3701 235.6221 344.7627 C
237.1919 346.1865 240.1167 348.8623 242.0542 350.7998 c
244.312 353.0576 250.6123 358.3369 260.3218 358.5928 C
262.6719 358.6553 L
260.6792 359.9014 L
260.5806 359.9639 250.8022 366.1611 246.4468 375.5986 C
238.6816 392.833 237.1367 396.2627 V
240.145 394.4619 245.958 391.1025 249.8008 389.6396 c
252.0825 388.7705 272.3589 380.8428 281.519 370.335 C
282.1631 369.5967 L
282.6641 370.4424 L
282.6987 370.501 286.2646 376.3174 299.3105 381.3916 c
311.4551 386.1143 323.4658 391.7061 329.3154 394.79 C
328.0938 392.4756 326.1172 388.6748 324.6631 385.6045 C
323.4043 382.5068 L
320.6689 375.417 314.9785 360.6631 302.3428 356.7275 C
302.5176 355.3428 L
302.5674 355.3408 307.5654 355.0107 312.5303 349.5732 C
312.916 349.1514 L
317.5908 344.0303 324.9004 336.042 330.3564 331.7178 C
328.2588 332.0674 325.3574 332.3877 322.0264 332.2588 c
314.5732 331.9736 294.4937 333.2549 283.3755 338.9326 C
282.7891 339.2314 L
282.4473 338.6689 L
282.3984 338.5889 277.4937 330.624 270.3496 328.4795 C
270.7568 327.1221 L
277.4248 329.1221 282.0791 335.5381 283.3247 337.415 C
294.7876 331.8467 314.6338 330.5576 322.0811 330.8428 c
328.376 331.085 333.3018 329.6377 333.3506 329.6221 C
333.9141 330.9111 L
328.6377 334.0303 319.0918 344.4873 313.9629 350.1064 C
313.5771 350.5283 L
310.3594 354.0537 307.168 355.5654 305.0527 356.2314 C
316.7354 361.2979 322.0791 375.1338 324.7266 381.9971 C
325.9443 384.9971 L
328.1602 389.6768 331.6426 396.1514 331.6777 396.2158 C
332.8633 398.4189 L
330.6982 397.165 L
326.1846 394.5518 312.5859 388.0752 298.7964 382.7119 c
287.7407 378.4131 283.335 373.6748 281.98 371.9072 C
272.3521 382.3486 252.5747 390.0986 250.3057 390.9639 c
245.1802 392.917 236.019 398.5967 235.9272 398.6533 C
233.9517 399.8818 L
234.9053 397.7646 L
f*u
1 D
246.5122 386.5928 m
246.5669 386.5283 251.9922 380.1064 253.6909 377.1943 c
254.3511 376.0615 260.2852 366.4932 276.5669 357.5791 C
274.271 357.6514 271.1245 357.4131 267.103 356.2314 c
262.8965 354.9932 258.1372 352.9385 253.9385 351.126 c
249.6099 349.2588 245.521 347.4932 242.9204 346.9971 C
243.0762 345.5928 L
243.1523 345.5947 250.7559 345.8271 254.1084 344.8701 c
257.4141 343.9248 267.6099 345.1768 274.4683 347.9248 C
273.5068 346.6924 272.4019 345.083 271.4194 343.1182 c
269.0381 338.3564 265.6118 333.4111 263.6182 331.8604 C
264.2773 330.6299 L
264.4331 330.6807 268.1162 331.915 270.3975 333.1826 C
271.0337 333.5264 L
273.6885 334.9482 279.7773 338.2529 284.0034 345.2979 C
285.4087 344.3545 289.1919 342.0713 294.6489 340.8604 C
303.4326 339.1846 L
308.2393 338.333 312.7783 337.5283 315.3174 336.6338 C
315.9854 337.8623 L
315.9541 337.8877 312.7422 340.3643 310.3047 342.8018 c
307.9873 345.1201 299.7373 350.5479 291.3755 353.5654 C
293.8931 354.6475 298.7231 357.2959 304.8115 363.5576 c
313.6006 372.5967 315.6621 381.5225 315.7451 381.8975 C
316.2734 384.2725 L
314.5527 382.5518 L
314.498 382.4971 309.0732 377.0889 305.9326 375.1553 C
304.5186 374.2666 L
300.2393 371.5576 291.4067 365.9775 284.7124 364.5732 C
283.4268 365.5615 277.0396 370.376 269.8857 374.1768 c
261.5508 378.6045 250.9932 385.04 247.4722 387.6221 C
246.5122 386.5928 L
f0 D
280.8667 356.9365 m
262.1553 366.1572 255.6011 376.7334 254.9155 377.9092 c
254.0283 379.4287 252.2368 381.7822 250.6465 383.7822 C
255.7617 380.5088 263.4351 375.999 269.2207 372.9248 c
277.0693 368.7549 284.0459 363.2979 284.1152 363.2432 C
284.3701 363.0439 L
284.688 363.1064 L
291.6763 364.458 300.8623 370.2744 305.2773 373.0693 C
306.6748 373.9482 L
308.7246 375.208 311.5859 377.7686 313.5029 379.5713 C
312.2803 376.2998 309.5195 370.4326 303.7959 364.5459 c
295.3276 355.835 289.1968 354.2549 289.1362 354.2393 C
286.6738 353.6357 L
289.0903 352.876 L
297.8384 350.126 306.8994 344.2041 309.3027 341.7998 c
310.3506 340.7529 311.5068 339.7256 312.5186 338.8643 C
310.0088 339.4463 306.9326 340.0049 303.6807 340.5811 C
294.9575 342.2432 L
288.4546 343.6885 284.2749 346.833 284.2334 346.8643 C
283.5854 347.3584 L
283.1855 346.6494 L
279.1563 339.4854 272.9956 336.1846 270.3647 334.7764 C
269.709 334.4209 L
268.8413 333.9385 267.7363 333.4561 266.7144 333.0459 C
268.8184 335.6201 271.1396 339.3896 272.687 342.4834 c
274.8467 346.8037 277.7534 349.5029 277.7822 349.5283 C
276.9385 350.6592 L
270.8447 347.0029 257.7056 345.3154 254.498 346.2334 c
252.7461 346.7334 250.0327 346.9268 247.6797 346.999 C
249.7139 347.7705 252.001 348.7471 254.5 349.8252 c
258.6621 351.6221 263.3789 353.6592 267.5034 354.8721 c
275.6338 357.2627 280.2646 355.6514 280.3105 355.6357 C
280.8667 356.9365 L
f*U
302.4219 427.3545 m
302.5137 427.3369 311.6855 425.5947 316.3398 424.126 c
319.4551 423.1416 324.8369 420.3643 328.0557 418.6357 C
326.2881 418.6377 324.1572 418.5049 322.79 417.96 C
319.7725 416.4736 L
315.3584 414.1943 307.9697 410.3799 302.7529 410.0088 C
302.8545 408.5947 L
308.3613 408.9873 315.9111 412.8857 320.4229 415.2139 C
323.3174 416.6436 L
325.6289 417.5674 330.9365 417.1006 330.9893 417.0947 C
331.4014 418.4189 L
331.001 418.6455 321.5332 423.9717 316.7666 425.4775 c
312.0313 426.9717 303.0645 428.6768 302.6855 428.7471 C
302.4219 427.3545 L
f245.3726 411.6143 m
241.1343 408.3721 238.6558 405.9053 238.5522 405.8018 C
239.4834 404.7373 L
239.5239 404.7686 243.5957 407.8428 247.3032 407.8428 c
251.2183 407.8428 257.2891 409.5342 259.5542 411.7998 C
258.5522 412.8018 L
256.7642 411.0146 251.1924 409.2607 247.3032 409.2607 c
246.1455 409.2607 244.9883 409.001 243.9023 408.6377 C
244.6108 409.2197 245.3774 409.833 246.2339 410.4893 c
250.334 413.624 253.7578 414.8721 253.792 414.8838 C
253.3149 416.2178 L
253.1675 416.167 249.6611 414.8936 245.3726 411.6143 c
f282.8818 398.6201 m
282.8818 396.833 282.9429 395.1436 283.1006 393.958 c
283.1792 393.3701 283.2119 392.7939 283.2119 392.2412 c
283.2119 391.3818 283.124 390.6201 283.0151 389.9229 C
282.3384 392.3193 281.2769 395.7842 280.1953 398.1006 c
278.4521 401.8369 275.6943 406.6084 275.6665 406.6572 C
274.4399 405.9463 L
274.4673 405.8994 277.1948 401.1787 278.9111 397.501 c
280.6118 393.8564 282.3481 386.9482 282.3657 386.8799 C
282.9097 384.7041 L
283.7148 386.7979 L
283.7681 386.9365 285.0234 390.2607 284.5059 394.1455 c
284.0269 397.7373 284.4995 406.2705 284.728 407.085 C
283.3809 407.5244 L
283.1729 406.9014 282.8818 402.5244 282.8818 398.6201 c
f295.6147 422.2354 m
295.9917 420.8682 L
302.709 422.7217 306.9502 421.4971 310.3574 420.5146 C
310.8594 420.3701 L
312.5977 419.8896 314.3291 419.4131 V
312.6348 419.2178 310.6152 418.9307 308.6504 418.4932 c
304.2412 417.5127 299.7705 417.0107 299.7256 417.0049 C
299.8818 415.5967 L
299.9268 415.6025 304.4717 416.1123 308.957 417.1104 c
313.3438 418.085 318.29 418.3408 318.3389 418.3428 C
318.4863 419.7354 L
311.248 421.7334 L
310.751 421.876 L
307.3604 422.8545 302.7178 424.1943 295.6147 422.2354 C
f225.3032 376.8018 m
227.8032 378.5518 232.8032 380.3018 v
237.8032 382.0518 241.3032 384.5518 y
242.3032 382.5518 l
239.8032 381.0518 239.5532 379.0518 v
239.3032 377.0518 237.3032 364.8018 230.3032 359.5518 c
235.6367 352.3838 238.3032 348.3838 v
234.0532 344.3018 l
236.6367 344.0498 237.8032 343.3838 v
238.9697 342.7178 243.1367 341.2178 243.8032 340.8838 c
249.6367 331.5518 250.6367 330.2178 v
251.6367 328.8838 251.9702 328.2178 251.1367 328.2178 c
250.3032 328.2178 248.3037 329.8857 245.6367 330.7178 c
242.9697 331.5518 237.1362 332.8838 234.9697 334.3838 c
233.8032 328.8838 233.3032 327.8838 v
225.3032 328.7178 225.3032 336.7178 v
225.3032 344.7178 225.3032 376.8018 y
f225.439 467.3706 m
228.4497 466.4966 229.6899 466.1367 V
228.5972 464.4419 226.0254 460.3794 224.8291 457.8545 C
226.1104 457.248 L
227.5718 460.333 231.3574 466.104 231.3955 466.1621 C
231.9224 466.9644 L
225.8345 468.7319 L
225.439 467.3706 L
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
