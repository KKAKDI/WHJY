%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (855.ai)
%%CreationDate: 3/25/2002 6:34 PM
%%BoundingBox: 220 303 374 542
%%HiResBoundingBox: 220.9014 303.1455 373.9717 541.2563
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC92204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B44FD
%07FC99FFFD05FC6827F85227525152275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%5251522752515227525152275251522727F86FFD05FCC2FFFD04FC68F827
%FD44FF7DF84BFD04FCBBFFFD04FC274BFD46FF7DF892FCFCFCC2FFFCFCFC
%8CF8FD48FF2744FCFCFCBBFFFCFCFC444BFD48FF2727FCFCFCC2FFFCFCFC
%4A27FD45FFA852F852F8FCFCFCBCFFFCFCFC4452FD44FF5227F87D7D27FC
%FCFCC2FFFCFCFC4B27FD42FFA8F8F8F8FFFF7DF8FCFCFC99FFFCFCFC4452
%FD41FF52F8F827FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD3FFFA827F8F827
%FD04FF7DF8FCFCFCBBFFFCFCFC2052FD3EFF7D27F8F827FD05FF7D27FCFC
%FCC2FFFCFCFC4A27FD3DFF52FD04F8FD06FF7DF8FCFCFCBBFFFCFCFC2052
%FD3CFF52FD04F8FD07FF7D27FCFCFCC2FFFCFCFC4A27FD3BFF27FD04F8A8
%FD07FF7DF8FCFCFCBCFFFCFCFC4452FD3AFF27FD04F852FD08FF7D27FCFC
%FCC2FFFCFCFC4B27FD39FF27FD04F827FD09FF7DF8FCFCFC99FFFCFCFC44
%52FD38FF27FD05F8A8FD09FF7D27FCFCFCC2FFFCFCFC4B27FD37FF27FD05
%F827FD0AFF7DF8FCFCFCBBFFFCFCFC2052FD36FF52FD06F8FD0BFF7D27FC
%FCFCC2FFFCFCFC4A27FD35FF52FD06F87DFD0BFF7DF8FCFCFCBBFFFCFCFC
%2052FD34FF7DFD06F827FD0CFF7D27FCFCFCC2FFFCFCFC4A27FD33FFA827
%FD06F87DFD0CFF7DF8FCFCFCBCFFFCFCFC4452FD33FF27FD06F827FD0DFF
%7D27FCFCFCC2FFFCFCFC4B27FD32FF52FD07F8A8FD0DFF7DF8FCFCFC99FF
%FCFCFC4452FD31FFA8FD07F827FD0EFF7D27FCFCFCC2FFFCFCFC4B27FD31
%FFFD08F87DFD0EFF7DF8FCFCFCBBFFFCFCFC2052FD30FF4BFD07F827FD0F
%FF7D27FCFCFCC2FFFCFCFC4A27FD2FFF7DFD08F876FD0FFF7DF8FCFCFCBB
%FFFCFCFC2052FD2FFF27FD07F827FD10FF7D27FCFCFCC2FFFCFCFC4A27FD
%2EFF52FD08F827FD10FF7DF8FCFCFCBCFFFCFCFC4452FD1FFFA8A8FD0DFF
%FD09F8FD11FF7D27FCFCFCC2FFFCFCFC4B27FD16FF76FD08FFF852FD0CFF
%27FD08F827FD11FF7DF8FCFCFC99FFFCFCFC4427FD14FFA82751FD07FF7D
%F827FD0BFFA8FD09F87DFD11FF7D27FCFCFCC2FFFCFCFC4BF827FD12FFA8
%F8F852FD07FF27F8F8FD0BFF27FD09F8FD12FF7DF8FCFCFCBBFFFCFCFC20
%F8F852FD11FF27F8277DFD07FFF829F8A8FD09FFA8FD09F852FD12FF7D27
%FCFCFCC2FFFCFCFC20F8F8F87DFD0FFF27F829F8A7FD06FF52F8072751FD
%09FF27FD09F87DFD12FF7DF8FCFCFCBBFFFCFCFC20FD04F8A8FD0DFF52F8
%2F07F8FD07FF27002F0627FD08FFA8FD0AF8FD13FF7D27FCFCFCC2FFFCFC
%FC26FD05F8FD0CFF52F8280729F8FFFFFFA8FFFFFFF8280707F87DFD07FF
%27FD09F851FD13FF7DF8FCFCFCBCFFFCFCFC20FD05F827FD0AFFA8F82807
%2F0627FFFFA827FFFF7D27072F072827FD06FFA8FD0AF87DFD13FF7D27FC
%FCFCC2FFFCFCFC4BFD06F84BFD09FFF82707070728F8FFFF7DF8A8FF52F8
%07070706F8A8FD05FF27FD0AF8FD14FF7DF8FCFCFC99FFFCFCFC4427FD06
%F87DFD07FF2727072F072F0627FFFF272752FF2728072F072F0527FD04FF
%A827FD09F852FD14FF7D27FCFCFCC2FFFCFCFC4B27FD06F820A8FD05FF76
%F806FD040727F8FFFFF80027FF2706FD040729F87DFFFFFF52FD0AF87DFD
%14FF52F8FCFCFCBBFFFCFCFC2052FD07F827FD05FF27052F072F072F0552
%FF7DF829F8FFF828072F072F0728F8FFFFFFFD0BF8FD13FFA827F827FCFC
%FCC2FFFCFCFC4A2752FD07F87DFFFFFF7DF8FD0607007DFFF82807F8A127
%06FD0607F87DFF7DFD0AF827FD12FF27FD04F8FCFCFCBBFFFCFCFC2052A8
%FD08F8FFFFFF2728072F072F072FF8FF2727072FF87D2728072F072F072F
%0052FF4BFD0AF852FD10FF7DFD05F827FCFCFCC2FFFCFCFC4A27FF27FD08
%F8FFFFF806FD05070027A8F8060707272752000706290707072727FFFD0B
%F8FD0FFFA827FD07F8FCFCFCBCFFFCFCFC4B52FFFFFD08F8527DF82F072F
%072F06F87C27002F072F06277D270727F82F072F05527CFD0AF827FD0EFF
%5227FD07F827FCFCFCC2FFFCFCFC4B27FFFF52FD08F82705FD040706FD04
%F82907070728F8FFF827F8F8060707272727FD0AF827FD0CFFA8FD0BF8FC
%FCFC99FFFCFCFC4B52FFFFA8FD08F827052F072F0627F8F8F827072F072F
%07F8FF7DF851F829072F0052FD04FF7D52FD05F8A1FD0BFF7DFD0AF84B27
%FCFCFCC2FFFCFCFC4B27FFFFFF52FD08F827070706F82675262700FD0507
%F8FFF826C62606070705F8F8F82752FFFFFF51F8F8F8FD0BFF27FD0AF87D
%7DF8FCFCFCBBFFFCFCFC2652FD04FFFD06F87D27052F2727509FF8C7F829
%072F072F07F827279EC7F829072F072F07280527F8277DFF7D277DFD09FF
%A827FD0AF87DFF7D27FCFCFCC2FFFCFCFC4B27FD04FF7DF8F8F827A8FFF8
%2700F874C6F875C6F8FD0607F8269EC64AF805FD090700F8F87DFD0AFF7D
%FD0BF87DFFFF7DF8FCFCFCBBFFFCFCFC2652FD05FF27F827A8FFF82707F8
%9EC64BF8C6C6F82F072F072F06F8A4C6C69F4B27F82F072F072F072F072F
%0728F852FD08FF7DFD0AF8277DFFFFFF7D27FCFCFCC2FFFCFCFC4B27FD05
%FFA8F8A8FFF8270628F8C67426FD04F806FD040727F8279EC6C69F26F8F8
%29FD090728F827FD06FF52FD0BF852FD04FF7DF8FCFCFCBCFFFCFCFC4B52
%FD07FFA8F827072F0727F827F827F8FF2728072F072FF85227FD04F827F8
%00052F072F072F072F072F0729F827FD04FF52FD0BF84BFD05FF7D27FCFC
%FCC2FFFCFCFC4B27FD06FFA8F805FD070706F87DFF7DF8290707F827FF52
%27272752A8FF7DF8F8FD0B07F852FFFF27FD0CF8FD06FF7DF8FCFCFC99FF
%FCFCFC4B52FD06FFF827072F072F072F072FF852FFFF52F8052FF8F87D27
%F8280528F8274BFFA8F8072F072F072F072F072F0729F8FF27FD0CF8FD07
%FF7D27FCFCFCC2FFFCFCFC4B27FD05FFF827FD08070027FFFF27F8000707
%07F8F800FD05070627F8FFF828FD0B07272727FD0BF87DFD07FF7DF8FCFC
%FCBBFFFCFCFC2652FD04FFF827072F072F072F072F0627A8FF2727062F07
%2F072F062F072F072F072F07272752002F072F072F072F072F072F062752
%FD0AF852FD08FF7D27FCFCFCC2FFFCFCFC4B27FFFFFF2700FD09070027FF
%7DF806FD0F0706F85227FD0C07F852FD0AF8A8FD08FF7DF8FCFCFCBBFFFC
%FCFC2652FFFF2727072F072F072F072F0728F8FFFF27052F072F072F072F
%072F072F072F072F072F00270028052700280629072F072F072752FD09F8
%7DFD09FF7D27FCFCFCC2FFFCFCFC4B27FF7DF806FD0907F852FFA8F8FD12
%0727F82727527D7D2727F8F800070707004BFD08F827FD0AFF7DF8FCFCFC
%BCFFFCFCFC4B52A827062F072F072F072F072F0627A8FF2727072F072F07
%2F072F072F072F072F072F072F0552FD08FF7C27F82F0728F827FD07F8A8
%FD0AFF7D27FCFCFCC2FFFCFCFC4B2727F8FD0A072721FFFF2700FD120727
%27A82727F84B277DA8FFFF27F8280627FD07F852FD0BFF7DF8FCFCFC99FF
%FCFCFC4B27F82F072F072F072F072F072FF87DFFFFF82F072F072F072F07
%2F072F072F072F072F072FF87D7DFD07F8277DFF7DF828F827FD06F8A8FD
%0BFF7D27FCFCFCC2FFFCFCFC4BF828FD0A0706F8FFFFFFF8FD120706F8A8
%7DFD09F827A827F827FD06F827FD0CFF7DF8FCFCFCBBFFFCFCFC2027072F
%06280527F827F827052727FFFFFFF828072F072F072F072F072F072F072F
%072F072727FF52FD0AF8277D272727FD05F8FD0DFF7D27FCFCFCC2FFFCFC
%FC4BF827F8F8F84C527D7C7D5227F852FFFFFF2700FD100706F8A8FF52FD
%0CF8517DFD05F852FD0DFF7DF8FCFCFCBBFFFCFCFC2627277DFD09FFA852
%27A8FF7DF8062F072F072F072F072F072F072F072FF852FFFF27FD0CF827
%51FD05F8A8FD0DFF5227FCFCFCC2FFFCFCFC4B27FFA87D2751F82727FFFF
%FF27F8F820A8FF27F806FD0D07F827FFFFFF52FD12F827FD0DFF52F8F8FC
%FCFCBCFFFCFCFC4B27FD08F8A8FFFFA8F8F8F827A8FF2727062F072F072F
%072F072F072FF8F8A8FFFFFF4BFD12F8FD0DFF4BF8F827FCFCFCC2FFFCFC
%FC4BFD09F87DFFFFFF27FD04F87CFF27F800FD090700F8F8FD04FF52FD11
%F827FD0CFF27F8F827F8FCFCFC99FFFCFCFC4BFD09F852FFFFFF7DFD05F8
%27FF7D27F828072F072F072F06F850277DFFFFFF27FD11F87DFD0BFFF8F8
%F8277D27FCFCFCC2FFFCFCFC4BFD09F827FD04FFFD07F852A752F8F806FD
%040727F851F87DFFFFFF27FD11F8FD0BFFF8F8F827FF7DF8FCFCFCBBFFFC
%FCFC26FD0AF8FD04FF52FD08F827FF52F8052F0728F8514A5127FFFFFFFD
%11F87DFD0AFFF8F8F827FFFF7D27FCFCFCC2FFFCFCFC4BFD0AF8A8FFFFFF
%A8FD08F827FFFF7DF8F807F84B264B2651FFFFFFFD11F8A8FD09FFFD04F8
%A8FFFF7DF8FCFCFCBBFFFCFCFC26FD0AF87DFD04FF27FD08F8FFFFFFA827
%00F89E51265127FFFFFFFD10F827FD09FFFD04F87DFFFFFF7D27FCFCFCC2
%FFFCFCFC4BFD0AF827FD04FF7DFD08F8FD04FF7DF826C674277427FFFFFF
%FD10F87DFD08FFFD04F827FD04FF7DF8FCFCFCBCFFFCFCFC4BFD0AF827FD
%05FF27FD07F8FD05FFF875C67BF87B20FFFFFFFD0FF827FD08FF27FD04F8
%FD05FF7D27FCFCFCC2FFFCFCFC4BFD0BF8A8FD04FF27FD07F8FD05FF2650
%C674267427FFFF7CFD0FF827FD07FF27FD04F87DFD05FF7DF8FCFCFC99FF
%FCFCFC4BFD0BF852FD04FFA8FD07F8FD05FF2751C67BF89F26FFFFA1FD0F
%F87DFD06FF52FD04F827FD06FF7D27FCFCFCC2FFFCFCFC4BFD0BF827FD05
%FF20FD06F87DFD04FF5126C674267427FFFF51FD0FF8A8FD05FF7DFD05F8
%7DFD06FF7DF8FCFCFCBBFFFCFCFC26FD0CF8FD05FF52FD06F87DFD04FF7C
%27C651267BF8FFFF52FD0EF827FD05FFA827FD04F827FD07FF7D27FCFCFC
%C2FFFCFCFC4BFD0CF852FD04FFA8FD06F827FD05FFF8C6264B7427FFFF27
%FD0EF852FD05FFFD06F8A8FD07FF7DF8FCFCFCBBFFFCFCFC26FD0CF84BFD
%05FF27FD05F852FD05FF2750514B7BF8FFFF27FD0EF87DFD04FF52FD05F8
%4BFD07FF52F827FCFCFCC2FFFCFCFC4BFD0DF8FD05FF27FD06F8FD05FF52
%F820517427FFFFFD0FF8FD04FF7DFD06F8A7FD05FF7D20F8F8F8FCFCFCBC
%FFFCFCFC4BFD0DF852FD04FF7DFD05F827FD06FF27F8747B20FFFFFD0EF8
%27FD04FFFD06F827FD05FF5227F8F8F827FCFCFCC2FFFCFCFC4BFD0DF827
%FD04FFA8FD06F8FD07FFF87B264BFFA7FD0EF851FFFFFFFD07F87DFD04FF
%27FD04F876F8FCFCFC99FFFCFCFC4BFD06F87D7DFD06F8FD05FFFD06F87D
%FD06FFF8C6514BFF7DFD0EF8A8FFFF7DFD06F827FD04FF27FD04F8FF7D27
%FCFCFCC2FFFCFCFC4BFD06F87DFF27FD05F852FD04FF27FD05F852FD05FF
%A8F8C62652FF52FD0EF8FFFFA8FD07F851FFFFFFFD05F8FFFF7DF8FCFCFC
%BBFFFCFCFC26FD06F8FFFFA8FD05F827FD04FF52FD05F827FD05FF5227C6
%277DFF27FD0EF8FFFF27FD07F8FFFFFFFD05F8A8FFFF7D27FCFCFCC2FFFC
%FCFC4BFD05F827FFFFFF27FD05F8CFFFFFFF7DFD05F827FD05FF5126C6F8
%A7FF27FD0DF852FF7DFD07F827FFCFFD05F87DFFFFFF7DF8FCFCFCBBFFFC
%FCFC26FD05F851FFFFFF52FD05F852FFFFFFA8FD06F8FD05FFF875C6F8FF
%FFFD0EF876FFFD08F87DFF27FD04F852FD04FF7D27FCFCFCC2FFFCFCFC4B
%FD05F87DFD04FFFD05F820FD04FFFD06F87DFD04FFF89E7BF8FFA7FD0EF8
%A827FD08F8FF27FD05F8A8FD04FF7DF8FCFCFCBCFFFCFCFC4BFD05F8FD05
%FF27FD05F8A8FFFFFF27FD05F852FFFFFFA8F8C64A27FF7DFD0EF8A8FD08
%F85252FD05F87DFD05FF7D27FCFCFCC2FFFCFCFC4BFD05F8FD05FF27FD05
%F827FFFFFFFD07F8FFFFFF4B27C62727FF27FD0EF827FD08F87DFD06F8FD
%06FF7DF8FCFCFC99FFFCFCFC4B52F8F8F87DFD05FF7DFD05F827FFFFFF52
%FD05F827FFFFFF2751C6F8A1FF27FD0DF827FD09F827FD05F8A8FD06FF7D
%27FCFCFCC2FFFCFCFC4B2752F8F8A8FD05FFA7FD06F87DFFFF52FD06F87D
%FFFFF89F9EF8FFFFFD17F820FD05F827FD07FF7DF8FCFCFCBBFFFCFCFC26
%52FF2727FD07FFFD06F827FFFF7DFD06F827FF7C27C67520FFA8FD1DF8A8
%FD07FF2727FCFCFCC2FFFCFCFC4BF8FFA8CFFD07FF27FD06F8A8FF7CFD07
%F8FF274AC62052FF7DFD1CF827FD07FF7CF8F8FCFCFCBBFFFCFCFC26F8F8
%A8FD08FF27FD06F87DFFFFFD07F8A8F8A5C627A8FF27FD1CF8A8FD06FF7D
%27F827FCFCFCC2FFFCFCFC4BF8F8F8A7FD07FF52FD07F8FFFFFD07F82727
%C675F8FFFF27FD1BF827FD06FFA820F8F8F8FCFCFCBCFFFCFCFC4BFD04F8
%A8FD06FF4BFD07F8A8FFFD08F850C62652FFFFFD1CF87DFD06FF27F8F8F8
%27FCFCFCC2FFFCFCFC4BFD05F8A7FD05FF7DFD07F84BFF27FD07F8C69EF8
%A8FF7CFD1CF8FD06FF7DFD05F8FCFCFC99FFFCFCFC4BFD06F8A8FD04FF7D
%FD08F8FFFD08F8505127FFFF52FD1BF87DFD06FFFD05F827FCFCFCC2FFFC
%FCFC4BFD07F8FD04FF7DFD08F8A827FD07F827F87DFFFFFD1CF8A8FD05FF
%27FD06F8FCFCFCBBFFFCFCFC2627FD07F8FFFFFF7DFD08F85252FD08F826
%FFFFA8FD1BF827FD05FF7DFD06F827FCFCFCC2FFFCFCFC4B2727FD06F827
%FFFFA7FD09F8A8FD08F827FFFF76FD1BF87DFD05FFFD08F8FCFCFCBBFFFC
%FCFC2652A8FD07F852FFFFFD09F8FFFD08F827FFFF27FD1AF827FD05FF52
%FD07F827FCFCFCC2FFFCFCFC4B27FF52FD07F87DFFFD09F87D27FD08F8A8
%A8FD1BF827FD05FFFD09F8FCFCFCBCFFFCFCFC4B52FFFF27FD06F827A8FD
%09F8277DFD08F84B7CFD1BF87DFD04FF27FD08F827FCFCFCC2FFFCFCFC4B
%27FFFFFFFD07F827FD0AF8A1FD09F87DFD1BF8FD04FFA8FD08F84BF8FCFC
%FC99FFFCFCFC4B52FFFFFF52FD11F8FFFD09F87DFD1AF827FD04FF52FD07
%F8527D27FCFCFCC2FFFCFCFC4B27FFFFFFA8FD11F85252FD08F82752FD19
%F876FD04FFFD08F8A87DF8FCFCFCBBFFFCFCFC2652FD04FF4BFD10F8527D
%FD09F8A1FD19F8A8FFFFFF52FD07F852FF7D27FCFCFCC2FFFCFCFC4A27FD
%05FFFD11F8FFFD09F84B27FD18F8FD04FFFD08F8FFFF76F8FCFCFCBBFFFC
%FCFC6827A8FD04FF27FD10F8A852FD09F87DFD17F852FFFFFFA8FD07F87D
%FFFF274BFCFCFCC2FFFD04FCF852FD04FF52FD10F87D52FD09F852FD17F8
%52FFFFFF27FD07F8FFFF7DF88CFCFCFCBCFFFD04FC92F852FD04FFFD10F8
%4BFFFD09F82752FD16F8FD04FF27FD06F827FF7CF844FD04FCC2FFFD05FC
%8CF8F827522720FD10F827FD0AF827FD16F827522727FD07F827F8F844FD
%05FC99FFFD07FC684B204B2027204B2027204B2027204B2027204B204B20
%4B444B204B444B204B444B204B444B204B444B204B444B204B444B204B44
%4B204B444B204B2027204B2027206F8CFD06FCC2FFFD52FCBBFFFD52FCC2
%FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
373.9717 303.1455 m
220.9014 303.1455 L
220.9014 541.2563 L
373.9717 541.2563 L
373.9717 303.1455 L
fu0 0 0 0 k
228.4365 525.3677 m
228.1865 320.3682 l
229.1865 310.6182 238.6865 310.6182 v
357.9365 310.8682 l
366.1865 311.1182 366.4365 321.8682 v
366.4365 523.1177 l
367.9365 533.3677 355.4365 534.1177 v
238.6865 534.1177 l
229.6865 534.3677 228.4365 525.3677 v
f1 0.6 0 0 k
265.9365 446.0342 m
269.4365 451.3677 269.7695 458.8677 v
270.1025 466.3677 270.6025 470.8677 270.9365 472.8677 c
264.1025 466.0342 261.6025 463.0342 v
259.1025 460.0342 252.1025 453.3677 252.1025 437.5342 c
239.1025 426.5347 228.4365 410.5352 v
228.4365 406.5352 l
243.1025 411.7021 252.4365 408.5352 v
254.7695 420.3677 260.6025 428.0342 v
264.1035 430.8677 264.2695 433.3677 v
264.4365 435.8677 265.9365 446.0342 y
f0 0.2 1 0 k
265.9365 446.0342 m
263.6025 444.0347 262.4365 443.2012 v
261.2695 442.3677 257.4365 438.8682 255.9365 437.7012 c
254.4365 436.5342 254.7695 434.0342 255.4365 433.0342 c
256.1025 432.0342 257.1035 432.7012 257.7695 432.7012 c
258.4365 432.7012 263.1035 433.5342 263.7695 433.5342 c
264.4365 433.5342 268.7695 434.5342 y
268.2695 440.0342 269.2695 443.0342 v
267.7695 446.8672 265.9365 446.0342 v
f281.2695 437.5342 m
288.2695 441.8682 289.6025 447.2012 v
292.9365 444.2007 290.2695 437.5342 v
293.2695 436.8682 295.9365 434.2012 v
294.2695 433.5342 292.1025 433.0342 v
289.9365 432.5342 284.7695 431.0342 281.1025 435.0342 c
281.2695 437.5342 l
f1 0.6 0 0 k
277.4365 460.5342 m
275.6025 454.7012 273.9365 451.7012 v
272.2695 448.7012 264.7695 441.5347 270.7695 428.7012 c
264.9365 426.2007 262.2695 418.7012 v
259.6025 411.2012 261.4365 405.0342 267.2695 401.2012 c
273.1025 397.3682 280.4355 394.7021 283.6025 389.0352 c
287.1025 397.3682 288.9365 399.8682 v
290.7695 402.3682 295.4365 405.8672 297.6025 411.2012 c
299.7695 416.5352 300.4365 423.0342 294.1025 427.5342 c
287.7695 432.0342 281.2695 429.3677 279.7695 426.8677 c
276.7695 428.8677 l
282.2695 432.2012 281.6025 440.7012 v
280.9365 449.2012 277.4365 460.5342 y
f287.1025 443.2012 m
282.7695 449.3677 283.6025 455.8677 v
284.4365 462.3677 289.1025 475.2012 y
290.4355 470.0347 291.6025 466.7012 v
292.7695 463.3677 295.4365 458.0347 296.9365 455.7012 c
298.4365 453.3677 300.6045 447.7007 298.6035 442.0342 c
308.4365 441.8677 316.4365 436.3677 v
324.4365 430.8677 327.9365 424.7007 326.9365 410.3682 c
325.9365 410.5352 l
320.9365 423.7017 300.7695 420.0347 v
305.1025 430.3682 293.4365 433.2012 v
295.9365 434.2012 l
293.2695 437.5342 290.2695 437.5342 v
293.2695 442.5347 289.6025 447.2012 v
287.1025 443.2012 l
f0 0.2 1 0 k
283.4365 389.7012 m
282.9355 374.8682 289.1025 372.8682 v
287.4365 352.3672 280.9365 342.2012 v
283.7695 334.5352 l
290.2695 344.3682 293.1025 364.3682 v
295.9365 384.3682 292.1025 403.0352 y
289.6025 401.5352 288.9365 399.8682 v
288.2695 398.2012 283.4365 389.7012 y
f*u
1 D
0.65 0.53 0.51 1 k
238.3574 534.5762 m
232.4961 534.5762 227.7275 529.8076 227.7275 523.9463 C
227.7275 320.4561 L
227.7275 314.5947 232.4961 309.8262 238.3574 309.8262 C
356.5156 309.8262 L
362.377 309.8262 367.1455 314.5947 367.1455 320.4561 C
367.1455 523.9463 L
367.1455 529.8076 362.377 534.5762 356.5156 534.5762 C
238.3574 534.5762 L
f0 D
229.1445 320.4561 m
229.1445 523.9463 L
229.1445 529.0264 233.2773 533.1592 238.3574 533.1592 C
356.5156 533.1592 L
361.5957 533.1592 365.7275 529.0264 365.7275 523.9463 C
365.7275 320.4561 L
365.7275 315.376 361.5957 311.2441 356.5156 311.2441 C
238.3574 311.2441 L
233.2773 311.2441 229.1445 315.376 229.1445 320.4561 C
f*U
295.7695 310.8682 m
289.1025 327.5352 l
301.4365 359.5342 302.4365 415.2012 v
318.1035 419.2012 327.1035 404.8682 v
332.7695 409.8682 327.4365 427.8677 v
343.7705 445.2012 366.1035 456.2012 v
366.1035 445.2012 l
332.4355 421.8687 321.7695 351.5352 v
339.1035 386.5342 366.1035 405.8682 v
366.1035 401.8682 l
351.4355 392.8691 337.7695 349.5352 v
347.4375 367.5352 366.1035 377.8682 v
366.4365 373.2012 l
347.4365 362.8682 335.4365 310.8682 v
295.7695 310.8682 l
f343.1035 310.5352 m
350.4375 334.5352 366.1035 350.8682 v
366.1035 328.5352 l
359.5947 321.5352 356.5156 310.5352 v
343.1035 310.5352 l
f294.1025 310.8682 m
272.4365 353.8682 272.4365 395.2012 v
262.1035 398.2021 255.7695 406.5352 v
251.4365 405.5352 l
258.7695 388.8691 262.4365 376.5352 v
266.1025 364.2012 267.7695 345.8682 268.1025 339.8682 c
268.4365 333.8682 276.1025 310.8682 y
294.1025 310.8682 l
f272.4365 310.5352 m
267.7695 331.8682 263.7695 342.8682 v
259.7695 353.8682 246.7695 385.8672 244.7695 404.2012 c
238.7695 405.8672 228.4365 402.2012 v
228.4365 357.8682 l
231.7695 350.5352 233.4365 349.5352 v
235.1025 348.5352 239.1025 363.2012 240.4365 372.2012 c
251.1035 366.2012 250.7695 324.8682 v
241.1025 339.5352 228.4365 349.5352 v
228.7695 336.2012 l
238.7695 326.5352 242.4365 310.5352 v
272.4365 310.5352 l
f301.7695 444.8677 m
318.1035 502.2012 365.1035 525.2012 v
365.4365 523.8682 364.4365 523.2012 v
363.4365 522.5342 338.7705 511.5347 321.1035 441.8677 c
320.4375 440.2012 318.1035 439.8677 v
312.4365 445.8677 301.7695 444.8677 v
f228.4365 474.2012 m
240.4365 461.2012 252.1025 442.8677 y
251.1025 441.5342 l
247.4355 439.8672 242.1025 433.5342 y
231.4355 450.5347 228.1025 461.2012 v
228.4365 474.2012 l
f270.71 473.8921 m
270.626 473.8164 262.3223 466.2236 256.3418 457.0034 c
252.249 450.6938 251.5518 444.2266 251.5518 440.5513 c
251.5518 439.2993 251.6309 438.3965 251.6865 437.9087 C
234.7451 423.8193 227.8701 410.3203 227.8027 410.1846 C
229.0703 409.5508 L
229.1367 409.6846 235.9688 423.0952 252.8877 437.0713 C
253.1973 437.3271 L
253.1367 437.7251 L
253.1318 437.7554 252.9863 438.771 252.9863 440.4326 c
252.9863 443.9082 253.625 450.21 257.5313 456.2319 c
261.9141 462.9897 267.5703 468.8608 270.1982 471.4424 C
269.8271 468.7559 269.2275 464.1528 269.2275 462.3677 c
269.2275 458.4185 268.3242 449.9336 264.9063 446.0884 c
262.6484 443.5483 260.2451 441.7534 258.3145 440.311 c
256.8555 439.2212 255.7031 438.3604 255.1094 437.5298 c
254.5098 436.6895 254.1914 435.605 254.1914 434.5918 c
254.1914 433.958 254.3164 433.3516 254.5742 432.8506 c
254.9639 432.0933 255.6426 431.6592 256.4365 431.6592 c
257.8623 431.6592 261.7793 432.4111 263.4922 432.7539 C
263.3936 432.2588 263.083 431.5161 262.1855 430.6187 c
260.1816 428.6152 254.5518 420.9341 251.9434 409.3154 C
249.4863 410.1592 241.333 412.1201 228.1807 407.0293 C
228.6924 405.707 L
243.6748 411.5068 252.0537 407.7646 252.1357 407.7266 C
252.9463 407.3506 L
253.1299 408.2236 L
255.5771 419.9702 261.2197 427.6489 263.1875 429.6167 c
265.4326 431.8613 264.9238 433.6455 264.8584 433.8418 C
264.6592 434.4399 L
264.042 434.3115 L
263.9824 434.2993 258.0938 433.0762 256.4365 433.0762 c
256.2715 433.0762 256.0293 433.1201 255.834 433.499 c
255.458 434.231 255.54 435.6938 256.2627 436.7056 c
256.7285 437.3569 257.8027 438.1597 259.1631 439.1753 c
261.1455 440.6563 263.6123 442.499 265.9658 445.147 c
270.5918 450.3511 270.6445 461.8794 270.6445 462.3677 c
270.6445 464.7876 271.875 473.1802 271.8877 473.2646 C
272.1758 475.2246 L
270.71 473.8921 L
f*u
1 D
276.7559 461.5659 m
276.7383 461.5063 275.0078 455.5859 274.0391 453.4053 C
273.0713 451.8672 L
271.2002 449.084 267.6025 443.7334 267.6025 437.3818 c
267.6025 434.7144 268.2842 431.8672 269.9482 428.9624 C
267.8438 427.9536 261.9824 424.311 260.4854 414.4746 c
260.3711 413.7227 260.3174 413 260.3174 412.3057 c
260.3174 403.5039 268.9902 399.2051 273.3223 397.0576 C
275.3145 396.0146 L
277.2666 394.8135 281.9229 391.667 283.0137 388.3936 C
283.626 386.5586 L
284.3447 388.3545 L
284.3838 388.4541 288.3213 398.251 290.9375 400.8672 c
293.6182 403.5479 299.8955 409.8242 299.8955 418.1182 c
299.8955 425.8999 293.5186 430.2754 287.2197 430.5757 c
282.917 430.7803 280.4912 428.5146 279.5469 427.3691 C
279.001 427.7891 278.3613 428.2808 277.665 428.8164 C
279.25 429.9946 282.3125 433.1333 282.3125 439.8442 c
282.3125 440.7324 282.2588 441.6831 282.1406 442.6997 c
280.8955 453.4019 278.1338 461.5171 278.1064 461.5981 C
277.3809 463.7085 L
276.7559 461.5659 L
f0 D
276.0576 397.2217 m
273.9521 398.3271 L
269.5869 400.4912 261.7354 404.3828 261.7354 412.3135 c
261.7354 412.9375 261.7842 413.5859 261.8867 414.2617 c
263.5459 425.1641 270.8584 427.8394 271.168 427.9482 C
272.0088 428.2417 L
271.5361 428.9956 L
269.7256 431.8672 269.0449 434.7036 269.0449 437.3657 c
269.0449 443.3384 272.4707 448.4336 274.248 451.0762 C
275.334 452.8301 L
275.9541 454.2266 276.8369 456.9668 277.4414 458.9282 C
278.3301 455.8647 279.8818 449.8535 280.7324 442.5356 c
280.8438 441.5757 280.8945 440.6816 280.8945 439.8491 c
280.8945 431.9507 276.3408 429.6104 276.127 429.5049 C
275.1045 429.002 L
276.0039 428.3062 L
279.8799 425.3247 L
280.293 426.0005 L
280.377 426.1392 282.416 429.3853 287.1523 429.1597 c
291.0693 428.9731 298.4775 426.4253 298.4775 418.1182 c
298.4775 410.4121 292.708 404.6416 289.9355 401.8691 c
287.7256 399.6592 284.8652 393.249 283.6396 390.3545 C
281.8926 393.3066 278.2744 395.8574 276.0576 397.2217 C
f*U
*u
1 D
284.2578 462.8213 m
282.6416 457.4365 281.7227 449.5347 286.5166 442.4697 C
287.0527 441.6797 L
287.6533 442.4219 L
287.9883 442.8354 289.1885 444.3843 289.8887 445.9517 C
290.252 444.9443 290.6006 443.604 290.6006 442.1338 c
290.6006 440.7212 290.2793 439.1958 289.3418 437.7539 C
288.7666 436.8682 L
289.8047 436.6714 L
289.8379 436.665 292.7422 436.0957 294.8428 434.4077 C
294.123 434.1943 293.0977 433.9458 291.8662 433.8228 C
291.9355 432.4092 L
291.9844 432.4087 296.8535 432.3506 299.3525 428.7163 c
300.2959 427.3442 300.5898 425.7549 300.5898 424.3062 c
300.5898 421.9214 299.793 419.9175 299.7803 419.8857 C
299.208 418.4785 L
300.6543 418.9443 L
301.3564 419.1699 317.9492 424.3159 326.0625 409.2813 C
326.9277 407.6787 L
327.374 409.4453 L
327.4277 409.6592 328.0215 412.1006 328.0215 415.5928 c
328.0215 419.751 327.1797 425.4004 323.5811 430.5576 c
318.8896 437.2793 310.7207 441.3501 299.3398 442.7056 C
299.585 443.6299 299.9277 445.2554 299.9277 447.3564 c
299.9277 449.9165 299.4082 453.0869 297.5459 456.229 c
293.2793 463.4292 290.374 471.3467 290.1445 476.3999 C
288.7656 476.5977 L
288.7363 476.5098 285.7441 467.7773 284.2578 462.8213 c
f0 D
284.376 454.4341 m
284.376 457.376 284.9307 460.1323 285.6152 462.4141 c
286.5635 465.5762 288.123 470.2681 289.1328 473.2666 C
290.0938 468.1782 292.7236 461.5869 296.3262 455.5063 c
298.0205 452.6484 298.4893 449.7207 298.4893 447.355 c
298.4893 444.4492 297.7813 442.3921 297.7686 442.355 C
297.4688 441.5083 L
298.3623 441.4131 L
309.7559 440.2095 317.8467 436.2886 322.4102 429.7588 c
325.793 424.9185 326.5742 419.5029 326.5742 415.5342 c
326.5742 413.9004 326.4404 412.5273 326.3027 411.5254 C
318.751 423.3013 305.6318 421.5483 301.499 420.6226 C
301.749 421.5317 302.0176 422.8149 302.0176 424.2954 c
302.0176 425.9795 301.6641 427.8555 300.5205 429.519 c
299.1455 431.5195 297.2266 432.5708 295.5459 433.1445 C
296.0674 433.312 296.4355 433.4536 296.4658 433.4663 C
297.375 433.856 L
296.7129 434.5918 L
294.9844 436.5132 292.3721 437.4492 290.9941 437.8354 C
291.7402 439.2959 292.0381 440.7764 292.0381 442.1528 c
292.0381 445.5601 290.3945 448.3174 290.292 448.4863 C
288.9844 448.0176 L
288.9912 447.9727 288.9941 447.9253 288.9941 447.875 c
288.9941 447.0171 288.0859 445.4316 287.1836 444.1646 C
285.1494 447.5483 284.376 451.106 284.376 454.4341 C
f*U
262.3643 443.6187 m
263.5088 442.7827 L
264.0137 443.4727 265.7217 445.3911 266.9033 445.167 c
267.6904 445.0176 268.1611 443.8267 268.418 442.854 C
269.7881 443.2144 L
269.2646 445.2046 268.3818 446.3301 267.166 446.5596 c
264.8965 446.9878 262.6162 443.9648 262.3643 443.6187 C
f263.5439 434.0737 m
263.6621 432.6616 L
264.6689 432.7456 268.0313 433.1079 268.9805 434.2476 C
267.8916 435.1548 L
267.5078 434.6938 265.333 434.2236 263.5439 434.0737 C
f281.165 437.9248 m
282.041 436.8105 L
286.8193 440.5649 287.7383 443.1997 287.7754 443.3101 C
286.4326 443.7642 L
286.4238 443.7407 285.5518 441.3716 281.165 437.9248 C
f280.3027 434.8843 m
280.7617 433.9663 283.0303 432.0146 286.1914 431.6636 c
289.3057 431.3174 292.9961 432.4766 293.1514 432.5259 C
292.7217 433.8765 L
292.6865 433.8652 289.1592 432.7593 286.3477 433.0718 c
283.5674 433.3813 281.7764 435.1055 281.5703 435.5181 C
280.3027 434.8843 L
f288.4883 399.4951 m
288.5381 399.2139 293.292 371.0889 280.2861 341.1504 C
281.5859 340.5859 L
294.7686 370.9307 289.9346 399.457 289.8838 399.7412 C
288.4883 399.4951 L
f291.4932 403.2227 m
291.5723 402.8447 299.2402 365.0869 282.5586 333.1963 C
283.8145 332.54 L
300.7363 364.8906 292.96 403.1318 292.8799 403.5146 C
291.4932 403.2227 L
f282.9775 389.3682 m
282.9775 387.752 283.1465 373.5313 289 371.9346 C
289.373 373.3018 L
285.292 374.415 284.3955 385.2764 284.3945 389.3682 C
282.9775 389.3682 L
f266.1025 445.0342 m
265.4365 442.0342 264.9365 441.0342 v
260.4355 437.5342 260.6025 433.0342 v
262.2695 433.2012 l
262.9365 437.8672 264.2695 439.0342 v
265.6025 440.2012 267.4365 442.8682 267.2695 445.7012 c
266.4355 445.7007 266.1025 445.0342 v
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
