%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (860.ai)
%%CreationDate: 3/25/2002 6:35 PM
%%BoundingBox: 220 318 374 557
%%HiResBoundingBox: 220.6938 318.6533 373.7646 556.7632
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 11502 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC92444A204B204A204B
%204A204B204A204B204A204B204A204B204A204B204A204B204A204B204A
%204B204A204B204B204B204B204B204B204B204B204B204B204B204B44FD
%07FC99FFFD05FC6827F82727525152275251522752515227525127275251
%522752515227525152275251522752515227525152275251522752515227
%5251522752515227525152275251522727F84BFD05FCC2FFFD04FC68F827
%FD11FFA820F82727527D7DA8FD08FFA84B27F82752FD1CFF7DF827FD04FC
%BBFFFD04FC2752FD13FFA827FD09F852A8FFFF52F827446F4420F8FD1CFF
%A8F86FFCFCFCC2FFFCFCFC6EF8FD16FF27FD0BF827F892FD04FC8CF820FD
%1CFF52F8FCFCFCBBFFFCFCFC2652FD17FF4BFD0BF8B5FD06FC8CFD04277D
%FD18FF7DF8FCFCFCC2FFFCFCFC4B27FD18FF27FD09F84AFD07FC26F82744
%4AF8277DFD17FFF8FCFCFCBCFFFCFCFC4B52FD18FFA827FD08F8FD07FC4B
%F8B4FD04FC202752FD047DFD12FFF8FCFCFCC2FFFCFCFC4B27FD19FF7DFD
%08F8FD07FCF86EFD06FC20FD06F8274B7DFFFFFFA87DA7FD08FFF8FCFCFC
%99FFFCFCFC4B52FD1AFF7DFD04F84B204BFD06FC4427FD07FCB5FD0FF8A1
%FD07FFF8FCFCFCC2FFFCFCFC4B27FD1BFF52F8F8FCFC4A20FD06FC2044FD
%08FC4BFD0DF8A7FD08FFF8FCFCFCBBFFFCFCFC2652FD1BFFA8F8B4FCFC68
%27FD06FCF86FFD08FC8CFD0BF827FD0AFFF8FCFCFCC2FFFCFCFC4B27FD1B
%FF7C27FD04FCF868FD05FCF8FD0AFC44FD09F87DFD0BFFF8FCFCFCBBFFFC
%FCFC2652FD1BFFA120FD04FC6FF86FFCFCFC93F8FD0BFCFD07F852A8FD0C
%FFF8FCFCFCC2FFFCFCFC4B27FD17FF7D7D275227F8FD05FC6EF827204A20
%20FD0BFC27FD04F827A8FD0EFFF8FCFCFCBCFFFCFCFC4B52FD14FFA852FD
%07F893FD06FC444B442720FD0BFCF8F8277DFD11FFF8FCFCFCC2FFFCFCFC
%4B27FD13FF27FD09F868FD09FCF84AFD0AFC8CF852FD13FFF8FCFCFC99FF
%FCFCFC4B52FD11FF7DFD0BF893FD09FCF88CFD0AFC4BF8FD14FFF8FCFCFC
%C2FFFCFCFC4B27FD0FFF52FD0DF8FD09FC6FF8FD0AFC6FF8A7FD14FFF8FC
%FCFCBBFFFCFCFC2652FD0AFFA87D4B27FD0FF8FD09FC4427FD09FC92F87C
%FD15FFF8FCFCFCC2FFFCFCFC4B27FD0AFF7D27522727FD0EF844FD08FC4A
%20FD09FCF8F8F876FD14FFF8FCFCFCBBFFFCFCFC2652FD11FF7D5227FD0B
%F893FD06FC204BFD08FC8CFD04F8277DFD12FFF8FCFCFCC2FFFCFCFC4B27
%FD15FF5227FD09F8278CFD04FC20F8FD08FC20FD06F852FD11FFF8FCFCFC
%BCFFFCFCFC2027FD15FF27FFFFA87D4B52277DA87DF8F8446F6827F8F844
%FD06FC27FD08F87DFD10FFF8FCFCFCC2FFFCFCFC4BF8CFFD13FFA7F8A8FD
%09FF27FD09F86E8CFC44FD0AF827FD10FFF8FCFCFC99FFFCFCFC4B51F8FD
%13FF52F852FD09FF27FD0CF82727FD0AF8A8FD0FFFF8FCFCFCC2FFFCFCFC
%4B2727F8A8FD11FF20F827FD09FF7DFD09F851FD04FFFD0AF87DFD0FFFF8
%FCFCFCBBFFFCFCFC26527DF8F852A8FD0EFF7DF8F8F8FD09FF7DFD08F827
%FD05FF7DFD09F852FD0FFFF8FCFCFCC2FFFCFCFC4B27FFFD05F8527CFD0B
%FFFD04F8A1FD09FFFD07F827A8FD06FF76FD08F827FD0FFFF8FCFCFCBBFF
%FCFCFC2652FF27FD09F8527DFD05FF27FD04F852FD09FFFD06F84BFD09FF
%7DFD07F827FD0FFFF8FCFCFCC2FFFCFCFC4B27FF27FD0CF8277DFFA8FD06
%F8FD09FFFD05F827FD0BFFA8FD07F8FD0FFFF8FCFCFCBCFFFCFCFC4B52FF
%7DFD0EF85227FD06F852FD08FF27F8F8F852FD0EFF7D27FD04F8A8FD0EFF
%F8FCFCFCC2FFFCFCFC4B27FF7CFD16F827FD08FF27F8F852FD11FF7DF8F8
%F87DFD0EFFF8FCFCFC99FFFCFCFC4B52FFA8FD17F8A8FD07FF7DF87DFD14
%FF5227F8A8FD0DFFF8FCFCFCC2FFFCFCFC4B27FFFFFD17F827FD07FF7D27
%FD15FFA7F8F87DFD0DFFF8FCFCFCBBFFFCFCFC2652FFFF27FD17F8FD07FF
%5227FD13FFA827F8F8F8A8FD0DFFF8FCFCFCC2FFFCFCFC4B27FFFF7DFD17
%F8A7FD06FF2752FD10FFA176FD06F8FD0EFFF8FCFCFCBBFFFCFCFC2652FF
%FFFF27FD16F876FD06FF2752FD0CFFA85227FD08F852FD0EFFF8FCFCFCC2
%FFFCFCFC4B27FFFFFF52FD16F852FD06FFF87DFD09FF7D27FD0CF8FD0FFF
%F8FCFCFCBCFFFCFCFC4B52FFFFA87CFD16F84BFD06FF277DFD07FF7C27FD
%0DF8FD10FFF8FCFCFCC2FFFCFCFC4B27FF52FD18F852FD06FFF8FD06FFCF
%FD0FF8A7FD10FFF8FCFCFC99FFFCFCFC4B5252FD19F852FD05FF7D27FD06
%FFFD0FF82727A1A8FD0EFFF8FCFCFCC2FFFCFCFC4B27FD1AF87DFD05FF7D
%F8FD05FF27FD13F82752FD0CFFF8FCFCFCBBFFFCFCFC2627FD1AF8A8FD05
%FF5227FD04FF7DFD16F8277DFD0AFFF8FCFCFCC2FFFCFCFC4BFD1BF8FD06
%FF5227FD04FF27FD18F827FD09FFF8FCFCFCBBFFFCFCFC2627FD19F852FD
%06FF2752FD04FFFD1BF8FD08FFF8FCFCFCC2FFFCFCFC4B27FF52FD17F87D
%FD06FF277DFFFFFF52FD1CF8FD07FFF8FCFCFCBCFFFCFCFC4B52FFFF52FD
%16F87DFD05FF7DF87D7DA8FF52FD1DF8FD06FFF8FCFCFCC2FFFCFCFC4B27
%FFFFFFFD19F826FD05F826FD20F827FD05FFF8FCFCFC99FFFCFCFC4B52FF
%FFFFA8FD12F820B4FCFCFC9368B5FD06FC6827FD1EF87DFD04FFF8FCFCFC
%C2FFFCFCFC4B27FD04FF52FD10F844FD0FFC8CFD1EF827FD04FFF8FCFCFC
%BBFFFCFCFC2652FD05FF27FD0EF844FD11FC20FD1EF87DFFFFFFF8FCFCFC
%C2FFFCFCFC4B27FD05FFA8FD09F82026F8F8F8FD12FC26FD1EF827FFFFFF
%F8FCFCFCBBFFFCFCFC2652FD06FF7D27FD05F84BFCFCFCF8F827FD12FC20
%F8F827FCFC44FD19F8FFFFFFF8FCFCFCC2FFFCFCFC4B27FD08FF7D2727F8
%6FFD04FCF8F8F8FD12FC20F8F820FCFCFC8C20FD17F87DFFFFF8FCFCFCBC
%FFFCFCFC4B52FD09FFA8F86FFD05FC27F8F88CFD04FC9368B4FD0AFCF8F8
%F84BFD05FC27FD16F84BFFFFF8FCFCFCC2FFFCFCFC4B27FD08FF7DF86FFD
%06FCFD05F826F8F8F820F8F820FD07FC68F8F8F868FD06FCF8F827FCFCFD
%11F827FFFFF8FCFCFC99FFFCFCFC4B52FD06FF7D27F86FFD04FC4427F827
%204B204B686F8CFCFCFC6827F86F684B4427F827F8F8F8B5FD06FC20218C
%FCFCFCFD04F827527DA15127FD06F827FFFFF8FCFCFCC2FFFCFCFC4B27FD
%04FF7DF82044FD05FCF82044FD0DFC44F8F820204B448CFCFC8C20F8FD06
%FC6EF8FD04FC92F8F852FD06FFA827FD04F820FFFFF8FCFCFCBBFFFCFCFC
%2652FFFFFF27F86FFD06FCF8278CFD0DFC68F868FD09FC8CF868FD05FC68
%F8FD05FCF852FD09FF7D27F8F8F8FFFFF8FCFCFCC2FFFCFCFC4B27FFFF4B
%F8FD07FC44F8FD0EFC8CF844FD0BFC44F8FD05FC6EF8FD05FCF87DFD0AFF
%A827F8F8FFFFF8FCFCFCBBFFFCFCFC2652FFA8F893FD07FC2744FD0AFC93
%686F8C4B20FCFCFC8C4BF8F8F8278CFCFCFCF84BFD04FC6827FD05FC277D
%FD0CFF27F8FFFFF8FCFCFCC2FFFCFCFC4B27FF2726FD07FC6EF8FCFC8C44
%27F820F827F8F8F827F8F8F8FCFCFC4420F84A8C9220F8FCFCFC8CF86FFC
%FCFC4B20FD05FC204BFD0DFF7DFFFFF8FCFCFCBCFFFCFCFC4B52FF2768FD
%07FC204BFC4BF827206F686F68B4FD04FC68F8F827F82744FD05FCF8FD04
%FC6FF893FCB4F893FD05FC92F8FD10FFF8FCFCFCC2FFFCFCFC4B27FFF86E
%FD04FC8C4A20F8F820F88CFD0CFC44F844FD08FCF8FD05FC4AF8FCF820FD
%07FCF852FD0FFFF8FCFCFC99FFFCFCFC4B52A82744FCFCFC44F8F84B446F
%F893FD0DFC6FF8FD08FC93F8FD05FC8CF820278CFD07FC204BFD0FFFF8FC
%FCFCC2FFFCFCFC4B27F8F820FCFC44F844FD04FCF8FD0EFC68202092FD06
%FC6827FD06FCF8278CFD08FC8CF8FD0FFFF8FCFCFCBBFFFCFCFC20F868FC
%F84B8CF868FD05FCF8FD0EFC27F84BF8278CFD04FC6FF8FD06FC2768FD0A
%FC274BFD0EFFF8FCFCFCC2FFFCFCFC27F8FCFC8CF820F8FD06FCF868FD0B
%FC8C4AF84BC6C62026FCFC2027F8F8FD06FCF868FD0AFC44F8FD0EFFF8FC
%FCFCBBFFFCFCFC264BFCFCFCB5F84BFD06FC204BFD09FC9320F8269FC6C6
%C6C7F86FF8274427F827FD04FC8CF8FD0CFCF8A8FD0DFFF8FCFCFCC2FFFC
%FCFC4B20FD04FC2768FD06FC2720FD08FC8CF8277AFD06C627F84AFD04FC
%F84BFCFCFC4BF8208CFD0AFC2052FD0DFFF8FCFCFCBCFFFCFCFC4B4BFD04
%FC204BFD06FCF86FFD07FC93F851FD08C62627FD05FC4BF8FCFC6FF86FF8
%27FD0AFC2027277DA8FD0AFFF8FCFCFCC2FFFCFCFC4B20FD04FC4A20FD06
%FCF868FD06FC6EF875FD09C62720FD05FC44208C27F84AFC8CF8FD0AFC20
%FD05F87DFD08FFF8FCFCFC99FFFCFCFC4B4BFD04FC6827FD06FCF8FCFCFC
%8C6F4427F875FD0AC6F893FD05FC4BF8272093FCFCFCF88CFD08FC93FD07
%F852FD07FFF8FCFCFCC2FFFCFCFC4B20FD05FCF8FD06FCF8FCFC20F8F84B
%44F84AFD09C674F8FD06FCF86EFD06FCF86EFD07FC6EFD09F827FD06FFF8
%FCFCFCBBFFFCFCFC204BFD05FC2744FD05FCF84BF82768FCFCFC68F826C7
%FD06C69E27F892FD04FC68F8FD07FC2768FD06FC4BFD0BF827FD05FFF8FC
%FCFCC2FFFCFCFC4B20FD05FC44F8FD05FC92F8F8FD06FC8C26F84B74C6C6
%C674F8204BF86EFCFCFC68F8FD07FCF8FD06FC4AFD0DF827A8FFFFFFF8FC
%FCFCBBFFFCFCFC264BFD06FCF86FFD05FC2720FD07FC2027F827F8F8F827
%44FCFC6FF893FCFCFCF8FD06FC2027FD06FCFD0FF827A8FFFFF8FCFCFCC2
%FFFCFCFC4B20FD06FC6EF892FD04FCF84AFD06FC44F868FD0AFC4AF8FCFC
%FCF8FD06FCF844FD05FC68FD10F8207DFFF8FCFCFCBCFFFCFCFC4B4BFD07
%FC4BF84B444B20F844FD06FC4B44FD0CFC2720FCFCF8FD05FC93F8FD06FC
%4BFD12F827F8FCFCFCC2FFFCFCFC4B20FD07FC20F8204B204A20F844FD05
%FC2027FD0CFC68F8FC8CF8FD05FC6826FD06FCFD15F8FCFCFC99FFFCFCFC
%F827FCFC684BF827F8278CFD05FC44F844FD04FC6FF8FD0DFCF8934427FD
%05FC9320FD06FC27FD14F8FCFCFCC2FFFCFCFC27F84BF8F8206E2020FD08
%FC68F844FCFCFC68F88CFD0CFC20442044FD05FC6827FD05FC8CFD13F8FF
%F8FCFCFCBBFFFCFCFC2652F8F868FCFC92F893FD08FC68F868FCFCFCF84B
%FD0BFC93F820F8FD06FC6FF8FD05FC68FD11F827FFFFF8FCFCFCC2FFFCFC
%FC4B27F868FD04FC26F8FD09FC20F8FCFCFC20F8F8F820F826F820206E68
%6EF8F868FD07FC2026FD05FC27FD0FF8277DFFFFFFF8FCFCFCBBFFFCFCFC
%2652F893FD05FC4BF893FD08FCF84B8C4BF893686F6893686F684B2027F8
%4BF8FD08FC4B20FD04FC93FD0FF827A8FD04FFF8FCFCFCC2FFFCFCFC4B27
%2744FD06FC4BF84AFD08FCF8F8F84AFD0DFC2068FD07FCF86EFCFCFC8CFD
%11F827FD04FFF8FCFCFCBCFFFCFCFC4B525227FD07FC6FF8278CFD06FC6F
%F8FD0FFCF86FFD06FC8CF88CFC684BFD13F852FFFFFFF8FCFCFCC2FFFCFC
%FC4B27CFF88CFD08FCF8F88CFD05FC204AFD0EFC8CF8F8FD06FC4AFD19F8
%FFFFFFF8FCFCFC99FFFCFCFC4B52FF2744FD09FC202768FD04FC4B20FD0D
%FC8C27204BF893FCFCFC6FFD1AF852FFFFF8FCFCFCC2FFFCFCFC4B27FF51
%27FD0AFC44F8206E686FF826FD0CFC6827F8FCFC4BF84A4420FD1BF827FF
%FFF8FCFCFCBBFFFCFCFC2652FF7DF8FD0BFC8C4B2020F827F8B4FD09FC6F
%20F820FD04FC6F2027FD1DF8A8FFF8FCFCFCC2FFFCFCFC4B27FFFFF8FD10
%FC20F820FD07FC4420F84B8CFD08FC8CFD1CF852FFF8FCFCFCBBFFFCFCFC
%2652FFFFF8FD10FC27F8F844FD04FC93202744B5FD0AFC2027FD1BF852FF
%F8FCFCFCC2FFFCFCFC4B27FFFF2768FD0FFCF82768F8F84B4426F84BFD0C
%FC20FD1EF8FFF8FCFCFCBCFFFCFCFC4B52FFFF276FFD0DFCB4F8F8F8FCFC
%6F20274492FD0BFCB4F827A827FD1BF827FFF8FCFCFCC2FFFCFCFC4B27A7
%F8F820FC8C6E684A204B4468FCFCFC4AFD04F8FD11FC92F827A8FF52FD1C
%F8FFF8FCFCFC99FFFCFCFC4B27FD15F8FD10FC93F827FD04FFFD1CF8FFF8
%FCFCFCC2FFFCFCFC27FD16F844FD0EFC6EF876FD05FF52FD1BF8FFF8FCFC
%FCBBFFFCFCFC20FD16F827FD08FC8CFCFCFC4427F852FD07FF27FD1AF8FF
%F8FCFCFCC2FFFCFCFC26FD17F84A2027FD0CF8A8FD07FF7DFD1AF8FFF8FC
%FCFCBBFFFCFCFC20FD26F8FD09FF52FD18F827FFF8FCFCFCC2FFFCFCFC26
%FD25F876FD0AFF27FD18F8FFF8FCFCFCBCFFFCFCFC20FD24F827FD0CFF27
%FD0AF827FD0CF8FFF8FCFCFCC2FFFCFCFC27FD24F8A8FD0DFF4BFD0AF8FF
%52FD0AF8A7F8FCFCFC99FFFCFCFC20FD22F8277DFD0FFF7D27FD08F8A8FF
%FF7D2727FD06F852F8FCFCFCC2FFFCFCFC27FD22F87DFD12FF7DFD07F827
%FD05FF7D2727F8F8F820F8FCFCFCBBFFFCFCFC20FD21F852FD16FF7D27FD
%04F8FD09FF5227F8F8FCFCFCC2FFFCFCFC20FD20F852FD19FFA852F8F87D
%FD09FFA827F8FCFCFCBBFFFCFCFC20FD1FF87DFD1DFF52A8FD0BFFF8FCFC
%FCC2FFFCFCFC26FD1EF87DFD2BFFF8FCFCFCBCFFFCFCFC20FD1DF852FD2C
%FFF8FCFCFCC2FFFCFCFC27FD1DF8FD2DFFF8FCFCFC99FFFCFCFC20FD1CF8
%7DFD2DFFF8FCFCFCC2FFFCFCFC27FD13F820FD08F8A8FD2DFFF8FCFCFCBB
%FFFCFCFC20FD12F827A827FD06F827FD2EFFF8FCFCFCC2FFFCFCFC20FD11
%F827A8FFA827FD05F87DFD2DFFA8F8FCFCFCBBFFFCFCFC44FD0EF82727A8
%FD04FFA827FD04F8A8FD2DFF5127FCFCFCC2FFFD04FCFD05F851527D7DFD
%0EFF52F8F8F8FD2DFF7DF868FCFCFCBCFFFD04FC6FF8277DFD14FFA8F827
%FD2CFF7DF820FD04FCC2FFFD05FC8CF8F8F8522752275227522752275227
%522752275227522727F85227522752275227522752275227522752275227
%5227522752275227522752275227522752275227522727F8F844FD05FC99
%FFFD07FC684B204B444B204B444B204B444B204B444B204B444B204B444B
%204B444B204B444B204B444B204B444B204B444B204B444B204B444B204B
%444B204B444B204B444B206F8CFD06FCC2FFFD52FCBBFFFD52FCC2FFFD52
%FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
373.7646 318.6533 m
220.6938 318.6533 L
220.6938 556.7632 L
373.7646 556.7632 L
373.7646 318.6533 L
fu0 0 0 0 k
227.9771 540.7085 m
227.9771 367.041 l
230.3101 329.708 l
231.9771 328.375 l
234.3105 326.375 237.4771 326.375 v
355.8105 326.208 l
365.8096 326.042 366.4766 336.375 v
366.6436 540.542 l
365.8096 549.0415 356.4766 549.375 v
236.8101 549.2085 l
229.9771 548.7085 227.9771 540.7085 v
f0 1 1 0 k
283.7686 531.5835 m
281.5186 528.0835 283.2686 522.7085 v
280.0186 518.7085 l
278.8936 515.7085 282.0186 513.2085 v
285.1436 510.7085 287.1436 510.0835 y
290.0186 509.2085 291.1436 507.8335 v
292.2686 506.4585 294.0186 503.7085 294.5186 503.5835 c
295.0186 503.4585 301.8936 503.7085 y
304.2686 506.3335 l
307.2686 504.2085 310.3936 503.8335 v
313.5186 503.4585 316.7686 505.0835 317.8936 505.8335 c
319.0186 506.5835 323.0186 511.2085 y
323.2686 513.8335 l
325.7686 516.4585 326.7686 518.4585 v
327.7686 520.4585 330.1436 525.2085 329.8936 526.8335 c
329.6436 528.4585 328.0186 531.4585 y
323.3936 535.5835 l
319.1436 541.9585 311.7686 539.8335 v
310.0186 545.2085 304.5186 545.8335 v
299.0186 546.4585 295.0186 543.2085 293.1436 540.7085 c
291.2686 538.2085 286.6436 536.9585 y
283.7686 531.5835 l
f235.6436 371.708 m
234.3101 378.375 234.1436 380.875 v
233.9771 383.375 232.9771 387.875 231.9771 389.708 c
230.9771 391.541 230.9771 394.541 231.9771 396.208 c
228.3101 399.041 l
227.8101 424.541 l
230.3101 427.707 233.8101 428.041 v
231.4771 434.2085 235.6436 438.375 v
239.8101 442.542 244.4771 443.7085 245.6436 444.2085 c
246.8101 444.7085 250.8101 449.042 252.1436 451.2085 c
253.4771 453.375 261.9771 458.375 y
269.4771 461.7085 l
276.1436 461.375 l
280.6431 460.542 281.8101 460.542 v
282.9771 460.542 284.4766 460.5415 285.3101 460.875 c
286.1436 461.2085 295.4766 463.208 301.6436 458.875 c
307.8105 454.542 310.8105 456.7085 y
328.9766 451.875 l
332.1436 448.2085 l
333.6436 441.875 l
332.9775 436.0425 334.8105 432.375 v
336.6436 428.708 341.3105 420.708 339.3105 414.708 c
337.3105 408.708 330.3105 390.208 y
325.9766 383.041 l
313.8105 377.541 l
310.3105 376.708 l
298.8105 367.874 296.9771 364.541 v
295.1436 361.208 285.9771 356.208 y
265.8101 355.041 l
244.8101 359.541 l
237.3101 364.375 l
234.1436 368.041 l
235.6436 371.708 l
f0 0.2 1 0 k
267.4771 413.708 m
267.6436 412.541 268.6436 412.041 v
269.6436 411.541 272.6436 410.042 273.1436 408.875 c
273.6436 407.708 276.3101 407.709 278.1436 407.375 c
279.9771 407.041 283.4771 406.542 286.4771 408.375 c
289.4771 410.208 291.4766 413.875 291.3101 418.375 c
291.1436 422.875 288.6431 424.874 287.8101 425.541 c
286.9771 426.208 285.8101 426.708 284.8101 426.708 c
283.8101 426.708 283.3101 425.875 282.8101 425.375 c
282.3101 424.875 280.6431 423.374 278.8101 422.541 c
276.9771 421.708 274.3105 420.375 273.4771 419.208 c
272.6436 418.041 269.4771 415.542 268.9771 415.375 c
268.4771 415.208 267.4771 413.708 y
f*u
1 D
0.65 0.53 0.51 1 k
237.8984 549.917 m
232.0371 549.917 227.2686 545.1484 227.2686 539.2871 C
227.2686 336.1289 L
227.2686 330.2676 232.0371 325.499 237.8984 325.499 C
356.7227 325.499 L
362.584 325.499 367.3525 330.2676 367.3525 336.1289 C
367.3525 539.2871 L
367.3525 545.1484 362.584 549.917 356.7227 549.917 C
237.8984 549.917 L
f0 D
228.6855 336.1289 m
228.6855 539.2871 L
228.6855 544.3672 232.8184 548.5 237.8984 548.5 C
356.7227 548.5 L
361.8027 548.5 365.9346 544.3672 365.9346 539.2871 C
365.9346 336.1289 L
365.9346 331.0488 361.8027 326.917 356.7227 326.917 C
237.8984 326.917 L
232.8184 326.917 228.6855 331.0488 228.6855 336.1289 C
f*U
*u
1 D
284.1602 427.3418 m
283.6279 427.0762 282.9741 426.4512 282.2163 425.7275 c
281.3354 424.8848 280.3364 423.9307 279.4932 423.5088 C
277.9819 422.9277 L
276.4678 422.415 274.5835 421.7783 272.792 419.8584 c
269.7314 416.5791 268.1304 415.4111 267.3267 415.0088 c
266.7715 414.7314 266.4668 414.2539 266.4897 413.7002 c
266.541 412.4727 268.1982 411.3223 268.8809 411.0498 c
269.645 410.7441 271.8398 409.3037 272.3872 408.4824 c
273.4351 406.9102 278.9956 406.2871 282.1162 406.167 c
286.7607 405.9883 291.3086 410.5693 291.8486 415.9707 c
292.3716 421.2002 291.0732 424.3438 287.5083 426.4824 C
287.5859 426.4287 L
287.249 426.6982 285.498 428.0107 284.1602 427.3418 c
f0 D
267.9604 413.7412 m
269.2998 414.4111 271.2192 416.0957 273.8281 418.8916 c
275.376 420.5498 277.0015 421.0996 278.436 421.585 C
280.127 422.2412 L
281.1611 422.7588 282.2422 423.791 283.1958 424.7021 c
283.8135 425.293 284.4526 425.9033 284.7939 426.0742 c
285.1733 426.2637 286.1626 425.749 286.7017 425.3213 C
286.7383 425.292 L
286.7788 425.2676 L
289.8848 423.4043 290.9111 420.8369 290.4385 416.1113 c
289.9688 411.417 286.1055 407.4316 282.1709 407.583 c
277.0586 407.7803 273.8989 408.7695 273.5669 409.2676 c
272.7686 410.4658 270.2544 412.0273 269.4063 412.3662 c
268.8486 412.5889 267.9927 413.3809 267.9263 413.7188 C
267.9429 413.7295 267.9604 413.7412 Y
f*U
276.2559 436.0815 m
273.0791 435.771 L
267.271 435.249 L
265.7061 435.2036 L
262.2422 435.1411 257.0078 435.0454 254.1182 431.8506 c
251.5278 428.9873 252.4492 425.4395 253.0586 423.0918 c
253.2607 422.3145 253.4351 421.6436 253.4351 421.208 c
253.4351 420.5244 253.2515 419.3672 253.0571 418.1416 c
252.6909 415.8311 252.2759 413.2119 252.6138 411.4102 c
252.958 409.5742 253.8125 408.3164 254.8989 408.0459 c
255.52 407.8906 256.1299 408.0977 256.5308 408.5986 c
256.5654 408.6426 260.3418 412.9922 267.1616 413.167 C
267.1255 414.583 L
259.5522 414.3896 255.4624 409.5322 255.4233 409.4834 c
255.3682 409.4141 255.3257 409.3994 255.2422 409.4209 c
254.9468 409.4941 254.3091 410.0596 254.0063 411.6719 c
253.7139 413.2314 254.126 415.8311 254.457 417.9199 c
254.6689 419.2578 254.8521 420.4131 254.8521 421.208 c
254.8521 421.8242 254.6567 422.5771 254.4307 423.4482 c
253.834 425.7451 253.0923 428.6035 255.1689 430.8994 c
257.6475 433.6387 262.5127 433.7275 265.7319 433.7861 C
267.3491 433.8335 L
273.2275 434.3618 L
276.3643 434.6685 L
278.1011 434.8022 281.6362 433.6279 281.938 430.3105 c
282.2485 426.8926 280.8506 423.874 280.8359 423.8438 C
282.1177 423.2373 L
282.1821 423.374 283.6963 426.624 283.3491 430.4395 c
282.9893 434.396 278.9268 436.2866 276.2559 436.0815 C
f254.6128 403.248 m
254.8696 401.835 256.6299 400.4531 258.4937 398.9893 c
259.4678 398.2246 260.4751 397.4346 261.1211 396.7295 c
261.6104 396.1963 262.1162 395.3662 262.6523 394.4873 c
264.0459 392.2041 265.7798 389.3623 268.6772 389.5 c
271.1221 389.6172 272.3105 391.04 272.8013 391.8789 c
273.5273 393.1191 273.6489 394.6162 273.1108 395.6924 c
272.3315 397.25 271.2036 401.9121 271.5073 403.5811 c
271.7651 404.998 273.5503 406.8018 276.2319 406.5039 C
276.3882 407.9121 L
273.0381 408.2842 270.5225 406.085 270.1128 403.835 c
269.7246 401.7002 271.0186 396.7061 271.8433 395.0576 c
272.1626 394.4199 272.0537 393.4072 271.5781 392.5947 c
271.2324 392.0039 270.3867 391.001 268.6099 390.916 c
266.5518 390.8174 265.123 393.1592 263.8623 395.2256 c
263.2891 396.165 262.748 397.0518 262.166 397.6865 c
261.4414 398.4775 260.3877 399.3047 259.3691 400.1045 c
257.9429 401.2246 256.168 402.6182 256.0073 403.502 c
255.791 404.6904 256.8911 408.085 257.6348 409.9443 C
256.3193 410.4717 L
256.1064 409.9404 254.2534 405.2256 254.6128 403.248 c
f289.0542 409.8799 m
291.9624 408.7539 295.2065 405.2607 296.7681 401.5742 c
297.6875 399.4023 297.8853 397.4766 297.3242 396.1514 c
296.0898 393.2344 293.3701 392.4395 289.0098 393.7207 c
286.6455 394.416 282.6284 394.3398 279.4004 394.2783 C
277.3101 394.25 L
274.6606 394.25 272.9927 395.8613 272.9761 395.8779 C
271.9756 394.874 L
272.0591 394.791 274.0537 392.832 277.3101 392.832 C
279.4272 392.8613 L
282.3931 392.917 286.4546 392.9951 288.6104 392.3613 c
294.9683 390.4922 297.5684 393.0898 298.6299 395.5986 c
299.542 397.7539 298.8311 400.3389 298.0732 402.127 c
296.3486 406.1982 292.8506 409.9307 289.5659 411.2021 C
289.0542 409.8799 L
f297.8926 423.7451 m
293.4531 423.2119 290.6704 419.1084 290.5537 418.9346 C
291.7324 418.1475 L
291.7578 418.1846 294.2793 421.8838 298.0615 422.3369 c
299.6484 422.5283 301.0723 422.1621 302.1787 421.2793 c
303.3398 420.3535 304.1025 418.9033 304.2715 417.3008 c
304.417 415.9209 303.9375 414.8311 303.4287 413.6768 c
302.877 412.4258 302.252 411.0068 302.4385 409.1377 C
302.5293 408.2539 L
302.8418 405.2705 303.1377 402.4531 301.9746 399.1074 c
301.1387 396.7031 299.7148 395.627 297.7441 395.9092 C
297.543 394.5068 L
300.2041 394.125 302.2529 395.5938 303.3125 398.6426 c
304.5801 402.2871 304.2539 405.3955 303.9395 408.4014 C
303.8486 409.2783 L
303.6992 410.7764 304.1973 411.9082 304.7256 413.1055 c
305.2861 414.3779 305.8662 415.6943 305.6816 417.4492 c
305.4727 419.4268 304.5186 421.2266 303.0625 422.3877 c
301.6523 423.5117 299.8643 423.9814 297.8926 423.7451 c
f290.0938 435.1372 m
287.9092 433.7314 282.2471 432.749 282.1904 432.7393 C
282.4297 431.3428 L
282.6738 431.3848 288.4341 432.3838 290.8604 433.9458 c
292.1528 434.7769 295.4951 436.6113 298.6108 435.6953 c
300.8105 435.0483 301.4443 433.8228 300.9473 431.1719 c
300.4688 428.624 300.2207 424.1641 300.9961 422.4199 C
302.291 422.9961 L
301.7129 424.2949 301.8408 428.2461 302.3398 430.9102 c
302.7344 433.0117 302.8174 435.9336 299.0107 437.0547 c
295.334 438.1357 291.5498 436.0742 290.0938 435.1372 c
f299.3555 445.356 m
297.9619 444.7368 293.4136 443.7505 291.4771 443.7505 c
289.0884 443.7505 286.0254 443.1113 284.5903 441.3179 c
283.2578 439.6523 279.873 434.8198 279.7295 434.6147 C
280.8906 433.8018 L
280.9253 433.8521 284.3926 438.8022 285.6968 440.4321 c
286.8193 441.8354 289.5122 442.3335 291.4771 442.3335 c
293.6382 442.3335 298.3608 443.3633 299.9316 444.061 c
301.0605 444.5625 304.8438 443.9053 306.3496 441.0449 c
307.9629 437.981 310.667 433.8335 312.5029 432.1816 c
314.0996 430.7441 314.7002 427.2373 314.1084 422.8018 c
313.5332 418.4932 309.6221 415.25 304.5967 414.915 C
304.6904 413.501 L
310.3975 413.8809 314.8477 417.6289 315.5127 422.6143 c
316.1768 427.5869 315.4248 431.458 313.4502 433.2344 c
311.7998 434.7212 309.1816 438.7085 307.6035 441.7051 c
305.7695 445.189 301.1563 446.1563 299.3555 445.356 c
f296.2666 393.5859 m
296.333 393.5059 297.8901 391.5781 297.4409 388.1328 c
296.9648 384.4854 293.4165 382.3174 291.3438 381.3506 C
289.1401 380.3633 L
286.5342 379.2158 283.2915 377.7881 281.7183 376.6084 c
280.1055 375.3984 278.1523 374.3936 274.8154 375.2285 c
271.708 376.0059 268.7788 379.2861 268.0024 382.8584 c
267.2334 386.3965 268.7681 389.7041 268.7837 389.7373 C
267.5039 390.3457 L
267.4316 390.1934 265.7432 386.5811 266.6177 382.5576 c
267.5005 378.4951 270.877 374.7529 274.4717 373.8535 c
278.394 372.8721 280.7661 374.1221 282.5688 375.4736 c
284.0117 376.5557 287.1719 377.9482 289.7114 379.0664 C
291.9434 380.0654 L
294.2793 381.1563 298.2827 383.6309 298.8467 387.9492 c
299.3809 392.0459 297.4341 394.4004 297.3511 394.499 C
296.2666 393.5859 L
f245.4097 430.5439 m
243.4614 429.8623 237.2007 426.916 238.4409 417.6143 c
239.4585 409.9844 243.4536 401.6885 247.7793 401.5 c
251.6592 401.3311 255.4673 402.1475 255.6274 402.1826 C
255.3267 403.5674 L
255.2891 403.5596 251.5322 402.7549 247.8408 402.916 c
244.6772 403.0537 240.8662 410.1484 239.8462 417.8018 c
238.7471 426.042 244.1846 428.6143 245.8774 429.2061 c
249.0049 430.2998 253.4985 429.6797 253.5435 429.6738 C
253.7437 431.0762 L
253.5459 431.1045 248.8662 431.7529 245.4097 430.5439 c
f277.0044 446.9033 m
275.3984 446.582 270.2759 445.9219 268.1978 446.0815 c
265.8335 446.2632 256.9561 444.874 253.7832 441.3491 c
250.6978 437.9209 249.0239 430.998 248.9541 430.7051 C
250.333 430.377 L
250.3491 430.4453 251.9941 437.2422 254.8369 440.4009 c
257.5381 443.4028 265.8262 444.8423 268.0894 444.6685 c
270.3232 444.4966 275.5713 445.1714 277.2827 445.5137 c
277.3418 445.5254 283.2534 446.647 287.2783 442.0737 C
288.3418 443.0103 L
284.6948 447.1543 279.3311 447.3691 277.0044 446.9033 c
f241.1904 398.8848 m
240.0601 396.8496 242.4814 393.0234 245.4014 390.9619 c
248.0908 389.0635 252.6069 385.5703 255.5083 383.0098 c
257.6475 381.1221 262.2217 380.0283 265.2979 380.6699 c
266.6333 380.9482 267.5513 381.5498 267.9521 382.4082 C
266.668 383.0078 L
266.4663 382.5762 265.877 382.2383 265.0083 382.0576 c
262.3975 381.5127 258.2363 382.4922 256.4458 384.0723 c
253.5083 386.6641 248.939 390.2002 246.2188 392.1201 c
243.4272 394.0898 241.9058 397.2539 242.4297 398.1973 c
243.0454 399.3057 245.7275 401.2861 246.7095 401.9551 C
245.9106 403.127 L
245.5215 402.8613 242.0796 400.4854 241.1904 398.8848 c
f313.9795 419.8516 m
314.0049 419.8457 316.4629 419.2373 317.1494 417.4531 c
317.9248 415.4385 318.5625 410.1426 317.0166 407.2051 c
315.2305 403.8135 315.1016 400.6621 315.1016 395.875 c
315.1016 390.6963 312.9844 384.9277 312.1602 384.5088 C
311.3535 384.0586 L
309.7793 383.1445 306.8486 381.4424 304.6543 382.6602 c
301.8281 384.2305 298.7461 388.417 298.7158 388.459 C
297.5713 387.623 L
297.7046 387.4404 300.8662 383.1436 303.9668 381.4219 c
306.8643 379.8125 310.2471 381.7783 312.0654 382.833 C
312.793 383.2412 L
314.6768 384.1816 316.5195 391.2705 316.5195 395.875 c
316.5195 400.8672 316.6924 403.5469 318.2705 406.5449 c
320.124 410.0645 319.3008 415.8086 318.4717 417.9629 c
317.5146 420.4502 314.4365 421.2002 314.3057 421.2305 C
313.9795 419.8516 L
f307.3623 454.3906 m
306.5713 453.8477 306.0654 452.9229 305.9395 451.7871 c
305.748 450.0703 304.9072 445.2144 304.0537 443.9351 C
305.2334 443.1489 L
306.5332 445.0996 307.3408 451.5664 307.3477 451.6299 c
307.4043 452.1396 307.5928 452.8291 308.1641 453.2217 c
308.7432 453.6187 309.6279 453.6641 310.7959 453.3564 c
313.835 452.5571 318.9893 448.1216 319.8545 446.5356 c
320.6924 444.999 321.9443 440.1748 320.4629 435.0728 c
319.0781 430.3018 314.8965 428.374 314.8545 428.3545 C
315.4316 427.0605 L
315.627 427.1475 320.25 429.2568 321.8242 434.6782 c
323.3711 440.0059 322.2002 445.1953 321.0986 447.2144 c
320.0078 449.2139 314.4727 453.855 311.1572 454.7271 c
309.5723 455.144 308.2959 455.0308 307.3623 454.3906 c
f286.5991 461.7041 m
284.9507 461.437 283.3931 461.1846 282.354 461.2495 C
280.21 461.5625 L
277.7075 462.0146 274.5928 462.5771 271.6167 460.8188 c
267.2344 458.2295 264.9307 455.1191 264.769 451.5742 c
264.5889 447.6138 267.5488 444.9546 267.6748 444.8438 C
268.6138 445.9053 L
268.5879 445.9282 266.0361 448.2402 266.1851 451.5098 c
266.3232 454.5469 268.3931 457.2681 272.3374 459.5981 c
274.8599 461.0884 277.5684 460.5991 279.958 460.168 C
282.2656 459.8345 L
283.4634 459.7598 285.0215 460.0127 286.8262 460.3052 c
289.1733 460.6855 291.834 461.1167 294.0557 460.8389 c
299.1865 460.1973 301.6904 458.1816 301.9365 454.4946 c
302.2578 449.6753 301.1357 445.2637 301.124 445.2192 C
302.4961 444.8643 L
302.5449 445.0522 303.6875 449.5332 303.3506 454.5889 c
303.0557 459.0107 300.0732 461.5151 294.2314 462.2451 c
291.8076 462.5483 289.0405 462.0996 286.5991 461.7041 c
f256.186 454.688 m
253.8872 453.6538 251.6821 451.23 249.5498 448.8857 c
248.4253 447.6494 247.3628 446.4819 246.3394 445.5718 c
245.3311 444.6753 244.1133 444.249 242.7036 443.7554 c
240.2754 442.9053 237.2539 441.8477 234.3975 437.7822 c
231.7148 433.9653 232.2827 429.5156 233.7085 426.625 c
235.0234 423.96 237.0947 422.251 239.1138 422.167 C
239.1733 423.583 L
237.7173 423.6436 236.0317 425.1182 234.9795 427.252 c
233.3652 430.5244 233.5811 434.1558 235.5566 436.9673 c
238.1519 440.6606 240.8188 441.5942 243.1719 442.4175 c
244.6587 442.9385 246.0635 443.4302 247.2808 444.5122 c
248.3608 445.4722 249.4478 446.667 250.5981 447.9321 c
252.6333 450.1689 254.7373 452.4819 256.7676 453.396 c
258.4795 454.166 260.0815 454.2725 261.0542 453.6812 c
261.6973 453.2905 262.0503 452.6133 262.1025 451.6694 C
262.4355 444.8442 L
263.8516 444.9058 L
263.5176 451.7476 L
263.418 453.5396 262.5234 454.4468 261.7905 454.8926 c
260.3984 455.7388 258.3555 455.6641 256.186 454.688 c
f227.3335 424.3379 m
228.6206 423.7441 L
230.375 427.5449 233.6152 427.3447 233.7524 427.335 C
233.8716 428.7471 L
233.6948 428.7627 229.5171 429.0684 227.3335 424.3379 C
f235.2529 399.0469 m
233.1309 398.3398 231.6016 397.1045 230.8301 395.4766 c
230.085 393.9043 230.0796 392.0527 230.8149 390.123 c
232.2588 386.332 233.6157 382.4209 233.7695 379.5039 c
233.8359 378.2383 234.6729 370.3359 235.751 369.6182 c
236.5288 369.0996 237.4414 368.8447 239.5845 369.1748 c
241.689 369.498 250.2632 370.4785 253.7622 369.3652 c
256.2451 368.5762 260.1504 368.6943 263.2788 370.7373 c
266.2339 372.667 268.0444 376.0313 268.5146 380.4658 C
267.1055 380.6162 L
266.6753 376.5615 265.127 373.6377 262.5039 371.9238 c
259.7793 370.1445 256.2852 370.0508 254.1919 370.7158 c
250.4932 371.8926 242.0391 370.9863 239.3691 370.5752 c
237.4956 370.2871 236.9624 370.5391 236.6367 370.7471 C
236.248 371.5156 235.3535 376.3711 235.1846 379.5781 c
235.0127 382.8467 233.5225 386.9951 232.1392 390.627 c
231.8374 391.4199 231.686 392.1885 231.686 392.9131 c
231.686 393.6133 231.8276 394.2725 232.1108 394.8701 c
232.7129 396.1406 233.9546 397.1201 235.7012 397.7031 c
239.3315 398.9131 241.4766 397.915 241.4976 397.9053 C
242.1274 399.1748 L
242.0215 399.2275 239.4829 400.458 235.2529 399.0469 c
f227.1055 400.3008 m
227.4854 396.6885 231.6221 395.5684 231.7979 395.5225 C
232.1577 396.8936 L
232.124 396.9023 228.7915 397.8174 228.5146 400.4492 C
227.1055 400.3008 L
f308.7744 381.4365 m
309.7549 380.8369 310.2813 380.1084 310.3389 379.2705 c
310.4043 378.3135 309.8389 377.2227 308.8613 376.4238 C
307.5449 375.3682 L
305.46 373.7129 302.3105 371.2109 299.4756 368.376 c
295.6226 364.5234 290.6904 364.7842 288.7485 365.0762 c
286.2778 365.4463 279.5894 364.5576 275.1641 363.9688 c
273.6738 363.7705 272.2666 363.584 271.9771 363.584 c
271.8359 363.584 270.5488 363.752 268.8232 369.5762 c
267.5566 373.8506 268.6606 379.5127 268.6719 379.5693 C
267.2822 379.8467 L
267.2329 379.6016 266.0967 373.7891 267.4639 369.1738 c
268.8613 364.458 270.3374 362.166 271.9771 362.166 c
272.3442 362.166 273.3311 362.2959 275.3506 362.5635 c
279.4331 363.1064 286.2656 364.0146 288.5386 363.6738 c
290.6929 363.3506 296.168 363.0635 300.4775 367.374 c
303.2549 370.1514 306.3672 372.623 308.4258 374.2588 C
309.7598 375.3262 L
311.1055 376.4287 311.8506 377.9395 311.7529 379.3682 c
311.6904 380.2764 311.251 381.583 309.5127 382.6455 C
308.7744 381.4365 L
f323.9258 448.7104 m
322.1475 447.7417 321.0293 445.8203 320.9355 443.5718 C
322.3516 443.5122 L
322.4248 445.2593 323.2666 446.7373 324.6045 447.4658 c
325.6885 448.0566 326.9092 448.0439 327.9512 447.4312 c
330.7725 445.7725 332.4648 443.8877 332.7695 439.1631 c
333.0088 435.4531 333.8975 433.2041 335.5107 429.1211 C
337.9766 422.6357 L
340.3779 415.9365 337.7891 413.8701 335.0488 411.6826 C
333.1426 410.042 L
330.4199 407.3193 329.6475 403.0957 328.7529 398.2041 C
328.2813 395.6768 L
327.208 390.1602 323.2754 388.2227 320.165 387.5684 c
317.2314 386.9512 314.7119 387.71 314.6865 387.7178 C
314.2656 386.3643 L
314.3818 386.3281 317.1475 385.4854 320.4561 386.1816 c
323.9863 386.9238 328.4512 389.127 329.6719 395.4053 C
330.1475 397.9492 L
331.0342 402.7988 331.7344 406.6299 334.1445 409.04 C
335.9336 410.5752 L
338.8027 412.8652 342.0547 415.4609 339.3105 423.1143 C
336.8291 429.6416 L
335.2686 433.5908 334.4082 435.7671 334.1836 439.2539 c
333.8398 444.5825 331.8193 446.8008 328.6699 448.6528 c
327.21 449.5112 325.4365 449.5332 323.9258 448.7104 c
f*u
1 D
311.3691 540.3618 m
305.4316 537.8721 304.6836 528.8867 304.4375 525.9336 c
304.3105 524.4077 303.8164 522.5 303.293 520.48 c
302.4814 517.3452 301.5605 513.7925 301.7695 510.6616 c
301.9307 508.2368 303.707 505.915 306.5205 504.4512 c
309.9561 502.6646 313.9111 502.6587 316.8438 504.436 c
322.2666 507.7227 323.2129 512.3311 323.3232 512.9897 C
323.5576 513.6216 324.167 514.207 324.8779 514.8833 c
326.4063 516.3359 328.499 518.3257 328.8496 522.6514 c
328.8857 523.0928 328.9023 523.5083 328.9023 523.9009 c
328.9023 527.2109 327.7041 528.8818 326.54 530.5034 c
325.8037 531.5313 325.1074 532.502 324.6514 533.9243 c
323.8457 536.4414 321.627 538.7969 318.8613 540.0718 c
316.3477 541.2305 313.6865 541.3335 311.3691 540.3618 c
f0 D
307.1748 505.7085 m
304.8398 506.9238 303.3096 508.8574 303.1836 510.7554 c
302.9902 513.6587 303.8799 517.0938 304.665 520.1245 c
305.2041 522.2046 305.7129 524.1699 305.8496 525.8164 c
306.4707 533.2729 308.4551 537.603 311.918 539.0552 c
313.8643 539.8711 316.1191 539.7749 318.2686 538.7847 c
320.6475 537.6875 322.624 535.6104 323.3018 533.4927 c
323.8252 531.8569 324.6201 530.749 325.3887 529.6772 c
326.6465 527.9243 327.7324 526.4102 327.4375 522.7656 c
327.1299 518.98 325.415 517.3491 323.9014 515.9102 c
323.0869 515.1357 322.3184 514.4043 321.9766 513.4468 C
321.9521 513.3799 L
321.9414 513.3076 L
321.9355 513.2622 321.2285 508.751 316.1094 505.6479 c
313.1064 503.8281 309.5244 504.4858 307.1748 505.7085 c
f*U
291.6357 538.2603 m
289.4268 531.4336 291.2373 525.8003 296.3594 523.5591 c
301.9834 521.0986 305.2344 523.1948 305.3701 523.2856 C
304.5879 524.4678 L
304.4766 524.3955 301.7939 522.7285 296.9277 524.8579 c
291.6709 527.1577 291.4438 533.0635 292.9844 537.8237 c
294.7798 543.3735 300.3691 545.752 304.7168 545.1724 c
309.207 544.5737 310.9541 539.5342 310.9717 539.4834 C
312.3154 539.9326 L
312.2354 540.1743 310.2813 545.8608 304.9043 546.5776 c
299.9883 547.2329 293.668 544.5405 291.6357 538.2603 c
f283.0767 531.8003 m
280.9849 529.0117 281.8413 525.3159 282.4077 522.8696 C
282.7705 520.9878 L
282.8081 520.4976 282.6919 519.7061 282.5693 518.8687 c
282.1943 516.312 281.6274 512.4482 284.604 510.606 c
286.2485 509.5879 287.5732 509.0679 288.6372 508.6504 c
289.8477 508.1753 290.6475 507.8613 291.2568 507.0991 c
292.248 505.8599 295.4766 504.8418 298.314 505.334 c
300.7246 505.752 302.3955 507.1274 303.1465 509.3115 C
301.8066 509.7725 L
301.2256 508.083 299.9688 507.0591 298.0718 506.7305 c
295.5088 506.2856 292.9194 507.2896 292.3633 507.9849 c
291.5176 509.042 290.4751 509.4512 289.1553 509.9692 c
288.144 510.3667 286.8857 510.8604 285.3501 511.811 c
283.165 513.1636 283.6123 516.2129 283.9717 518.6626 c
284.1123 519.6211 284.2334 520.4482 284.1836 521.0962 C
283.7886 523.1895 L
283.251 525.5103 282.5146 528.689 284.2104 530.9497 c
286.4961 533.9971 291.5151 534.6655 291.5654 534.6719 C
291.3892 536.0781 L
291.1592 536.0493 285.7266 535.3335 283.0767 531.8003 c
f289.7744 461.4668 m
291.1797 461.2832 L
291.3296 462.4277 294.8521 489.3672 295.0181 493.8486 C
293.6021 493.9014 L
293.438 489.4854 289.811 461.7466 289.7744 461.4668 C
f283.1436 530.7085 m
286.1436 534.7085 291.3936 535.0835 v
293.2686 540.9585 294.5186 541.7085 v
289.3936 544.7085 284.5186 545.2085 v
279.6436 545.7085 270.5186 546.3335 267.0186 547.9585 c
264.3936 549.0835 266.1436 547.8335 v
267.8936 546.5835 271.3936 543.8335 273.6436 541.4585 c
275.8936 539.0835 280.1436 532.8335 283.1436 530.7085 c
f282.6436 524.0835 m
275.0186 524.3335 270.5186 522.3335 v
266.0186 520.3335 258.8936 515.5835 255.8936 515.0835 c
252.8936 514.5835 248.8936 513.9585 249.3936 513.5835 c
249.8936 513.2085 251.6436 513.0835 253.1436 513.2085 c
254.6436 513.3335 261.0186 512.4585 264.2686 511.5835 c
267.5186 510.7085 272.0186 509.3335 278.0186 507.9585 c
284.0186 506.5835 288.5186 509.4585 y
285.3936 510.4585 283.7686 512.2085 v
282.1436 513.9585 282.8936 516.9585 283.1436 518.2085 c
283.3936 519.4585 283.5186 522.4585 282.6436 524.0835 c
f288.6436 509.0835 m
290.3936 506.3335 290.6436 505.2085 v
290.8936 504.0835 292.1436 491.0835 293.5186 488.0835 c
294.1436 488.0835 295.0186 488.8335 v
295.8936 489.5835 304.7686 497.9585 306.2686 498.9585 c
307.7686 499.9585 310.1436 503.5835 y
303.6436 505.9585 302.6436 509.2085 v
301.2686 506.5835 297.7686 506.0835 v
294.2686 505.5835 293.0186 506.9585 291.5186 507.9585 c
290.0186 508.9585 288.6436 509.0835 y
f322.7686 536.2085 m
327.8936 537.3335 332.0186 536.3335 v
336.1436 535.3335 339.0186 534.0835 342.5186 534.2085 c
346.0186 534.3335 348.3936 534.7085 349.3936 534.8335 c
350.3936 534.9585 352.6436 534.2085 351.6436 533.7085 c
350.6436 533.2085 345.6436 529.9585 344.2686 528.7085 c
342.8936 527.4585 339.0186 525.0835 335.3936 523.8335 c
331.7686 522.5835 328.3936 521.0835 327.5186 519.9585 c
328.8936 524.3335 328.1436 526.3335 v
327.3936 528.3335 325.3936 530.0835 324.8936 531.9585 c
324.3936 533.8335 322.7686 536.2085 y
f316.4766 505.042 m
322.1436 509.4585 322.6436 513.2085 v
323.3936 514.4585 l
327.1436 512.7085 328.2686 512.2085 v
329.3936 511.7085 335.2686 508.9585 336.1436 502.5835 c
337.0186 496.2085 338.3936 489.7085 338.7686 488.5835 c
339.1436 487.4585 339.8936 486.7085 338.5186 487.5835 c
337.1436 488.4585 331.5186 491.4585 328.3936 492.9585 c
325.2686 494.4585 317.5596 499.1255 316.4766 505.042 c
f304.8936 443.9585 m
306.5186 449.9585 306.6436 451.7085 v
306.7686 453.4585 308.5186 454.7085 310.0186 454.3335 c
311.5186 453.9585 318.3936 449.7085 319.5186 448.4585 c
320.6436 447.2085 321.6436 444.5835 y
323.3936 449.2085 326.6436 449.5835 329.8936 446.8335 c
333.1436 444.0835 333.7686 438.9585 y
336.0186 444.4585 341.7686 446.0835 347.8936 444.0835 c
354.0186 442.0835 359.2686 437.4585 359.6436 436.3335 c
360.0186 435.2085 361.1436 435.0835 y
362.6436 441.8335 361.0186 453.7085 354.3936 462.2085 c
347.7686 470.7085 338.8936 472.9585 337.1436 473.2085 c
335.3936 473.4585 332.2686 474.2085 y
339.6436 480.9585 340.5186 486.9585 340.0186 488.4585 c
339.5186 489.9585 338.5186 489.0835 y
333.1436 482.8335 324.5186 482.2085 320.8936 481.2085 c
317.2686 480.2085 309.1436 478.8335 304.5186 473.2085 c
299.8936 467.5835 299.6436 459.9585 y
302.8936 458.2085 302.6436 454.8335 v
302.3936 451.4585 301.3936 444.8335 y
304.8936 443.9585 l
f339.6436 417.583 m
346.7686 419.208 353.3936 412.708 v
360.0186 406.208 363.8936 402.708 366.2686 402.583 c
366.3936 401.458 l
362.3936 394.958 354.5186 392.958 v
360.1436 389.583 362.5186 378.958 v
364.8936 368.333 362.7686 365.083 363.5186 359.458 c
364.2686 353.833 366.5186 349.333 y
366.6436 347.833 l
363.1436 351.583 359.1436 352.458 v
355.1436 353.333 345.1436 355.708 340.6436 359.833 c
340.7686 356.458 341.8936 353.958 v
343.0186 351.458 344.0186 347.583 y
343.5186 347.083 342.5186 347.958 v
341.5186 348.833 334.0186 351.958 330.5186 352.708 c
327.0186 353.458 313.8936 360.083 310.0186 376.708 c
313.7686 379.333 308.6436 381.958 v
312.0186 383.458 312.8936 384.458 v
313.7686 385.458 314.1436 386.708 y
321.1436 385.083 325.5186 389.333 v
329.8936 393.583 329.8936 400.583 y
330.5186 406.583 332.8936 409.083 v
335.2686 411.583 338.7686 412.208 339.6436 417.583 c
f298.8936 366.583 m
299.2686 362.708 295.6436 357.958 v
292.0186 353.208 286.7686 348.583 283.8936 345.583 c
281.0186 342.583 277.6436 333.458 277.3936 326.708 c
276.2686 326.083 l
276.8936 326.958 275.0186 328.833 v
273.1436 330.708 266.5186 333.958 265.0186 338.583 c
260.6436 332.583 253.7686 332.083 v
246.8936 331.583 236.0186 332.083 232.2686 328.208 c
227.8936 329.583 227.8936 335.458 v
227.8936 367.708 l
231.5186 371.833 235.0186 373.208 v
235.6436 369.583 238.1436 369.708 v
240.6436 369.833 247.7686 370.958 251.8936 370.208 c
256.0186 369.458 265.1436 369.458 266.8936 376.083 c
267.2686 372.083 268.8936 367.333 v
270.5186 362.583 271.3936 362.708 273.7686 363.083 c
276.1436 363.458 286.3936 364.458 289.5186 364.333 c
292.6436 364.208 297.3936 365.583 298.8936 366.583 c
f251.3936 449.8335 m
244.6436 448.8335 240.6436 454.5835 v
236.6436 460.3335 233.1436 468.2085 228.2686 465.7085 c
228.1436 468.7085 l
230.8936 476.5835 238.3936 477.5835 v
234.7686 482.5835 233.7686 488.9585 v
232.7686 495.3335 232.8936 501.3335 228.2686 505.8335 c
227.5186 507.8335 l
231.2686 503.4585 234.0186 501.2085 v
236.7686 498.9585 241.2686 497.8335 246.6436 496.9585 c
252.0186 496.0835 259.6436 494.8335 261.7686 490.4585 c
263.3936 494.3335 265.5186 497.4585 v
267.6436 500.5835 269.5186 505.3335 269.2686 508.3335 c
269.7686 509.0835 270.5186 506.7085 v
271.2686 504.3335 272.3936 498.5835 273.6436 495.3335 c
274.8936 492.0835 279.3936 485.2085 279.0186 476.5835 c
278.6436 467.9585 275.5186 463.5835 276.2686 461.8335 c
276.1436 461.3335 l
272.2686 460.7085 269.6436 458.4585 v
266.7686 456.7085 265.6436 453.2085 v
264.5186 449.7085 267.3936 445.7085 y
267.5186 445.4585 266.6436 445.2085 v
265.7686 444.9585 262.7686 444.5835 y
263.2686 450.0835 262.5186 452.8335 v
261.7686 455.5835 256.5186 455.9585 251.3936 449.8335 c
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
