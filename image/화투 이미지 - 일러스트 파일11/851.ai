%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (851.ai)
%%CreationDate: 3/25/2002 6:33 PM
%%BoundingBox: 223 303 377 543
%%HiResBoundingBox: 223.0146 303.9355 376.0869 542.0469
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13572 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC8C204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204A68FD
%07FC99FFFD05FC8C27F82727525152275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%52515227525152275251522752515227272093FD05FCC2FFFD05FC20F8FD
%43FFA827F8FD05FCBBFFFD04FC4BF8FD46FF2720FD04FCC2FFFD04FCF87D
%FD46FFA1F88CFCFCFCBBFFFD04FCF8FD48FFF86FFCFCFCC2FFFD04FCF8FD
%48FF2768FCFCFCBCFFFD04FCF8FD48FFF86FFCFCFCC2FFFD04FCF8FD48FF
%2768FCFCFC99FFFD04FCF8FD06FF5227F8277DFD3DFFF893FCFCFCC2FFFD
%04FCF8FD05FF7D207DFF51F87DFD3CFF2768FCFCFCBBFFFD04FCF8FD05FF
%5227FFFFFF5227FD3CFF276FFCFCFCC2FFFD04FCF8FD05FFA8F8A1FFFFA7
%F8FD3CFF2768FCFCFCBBFFFD04FCF8FD06FFF852FFFFFF277DFD3BFF276F
%FCFCFCC2FFFD04FCF8FD06FF27F8FFFFFF27F87DFD15FFA77652FD22FF27
%68FCFCFCBCFFFD04FCF8FD06FF2752FF277DFF52277DFD13FF27FD04F8A8
%FD20FFF86FFCFCFCC2FFFD04FCF8FD06FFF87DFF7CF8FFFF52F8A8FD11FF
%52FD06F8FD20FF2768FCFCFC99FFFD04FCF8FD05FFA8F8FFFFA8F8FFFFFF
%277DFD11FF27FD06F8FD20FFF893FCFCFCC2FFFD04FCF8FD06FFF82727F8
%27FFFFFF277DFD11FFFD07F8FD20FF2768FCFCFCBBFFFD04FCF8FD06FFA8
%522752A8FFFFFFF87DFD11FFFD07F8FD20FF276FFCFCFCC2FFFD04FCF8FD
%0DFFA8F8FD12FFFD07F8FD20FF2768FCFCFCBBFFFD04FCF8FD0DFF7D27FD
%12FF27FD05F87DFD20FF276FFCFCFCC2FFFD04FCF8FD0DFF2752FD12FF52
%FD04F820FD21FF2768FCFCFCBCFFFD04FCF8FD0DFF277CFD13FF27F8F827
%7DFD21FFF86FFCFCFCC2FFFD04FCF8FD0DFFF876FD14FFF827A8FD22FF27
%68FCFCFC99FFFD04FCF8FD0DFF5251FD07FFA87D7DFD0AFFF87DFD23FFF8
%93FCFCFCC2FFFD04FCF8FD0BFF7D52F8272752A8FFFFFF52FD04F827A8FD
%07FFF8FD07FF7D7DFD1BFF2768FCFCFCBBFFFD04FCF8FD09FF7DF8272727
%F852F8F87DFFFF27FD05F827FD06FF7D27FD04FF7D27FD04F852FD19FF27
%6FFCFCFCC2FFFD04FCF8FD08FF4BF852FFA8F8A7FFFF27F8A8FFFD07F87D
%FD05FF7DF8FFFFFFA8FD07F8A1FD18FF2768FCFCFCBBFFFD04FCF8FD07FF
%52F8A8FFA1F852FD04FFF8A1FF52FD06F827FD05FF274BFFFFA827FD07F8
%52FD18FF276FFCFCFCC2FFFD04FCF8FD06FF7DF8525227F876A87DA7FFFF
%277DFFFF27FD07F852A7FFFF5227FF27FD09F87DFD18FF2768FCFCFCBCFF
%FD04FCF8FD06FF2727F82727A852F8F8F8FFFFF8FD04FFA852524BA8A87D
%27F8F852F827F8277DA8FD05F82752FD19FFF86FFCFCFCC2FFFD04FCF8FD
%05FF7DF8A8FFFFFFA8F87DFFF8522727FD0CFFA852F8F8F8A7FD04FF7C52
%277DFD1BFF2768FCFCFC99FFFD04FCF8FD05FF5227FD05FFF852FF52F827
%7DFFA84BF8F8F87DFD08FFF8A8FD24FFF893FCFCFCC2FFFD04FCF8FD05FF
%2752FFFFA85252A7F8F8F8207DFFFF27FD05F827A8FD06FFF8FD16FF5251
%2752FD0BFF2768FCFCFCBBFFFD04FCF8FD05FF2752FFA827F827A8FFA827
%7DFFFFFFFD07F827FD05FFA8F8FD15FF27FD04F827FD0AFF276FFCFCFCC2
%FFFD04FCF8FD05FF2727FF27F87DF8A8A8F8F8FD04FFFD08F876FD04FF7D
%27FD06FF7D52F82751CFFD08FFA1FD06F852FD09FF2768FCFCFCBBFFFD04
%FCF8FD05FF7DF87DF8A827275227F8FD05FF27FD07F827FD04FF7DF8FD05
%FF27FD06F8FD08FFA1FD07F8FD09FF276FFCFCFCC2FFFD04FCF8FD06FF52
%FD05F82752FD06FFA8FD07F827FD04FF2752FD04FF27FD07F87DFD07FF7D
%FD07F8FD09FF2768FCFCFCBCFFFD04FCF8FD08FF52F852FD0AFFA827FD06
%F87DFFFFFF524BFFFFFFA1FD08F8A8FD08FFFD07F8FD09FFF86FFCFCFCC2
%FFFD04FCF8FD08FF7DF8FD0DFFA8522752527DF827A8FFF87DFFCF27FD08
%F827FD09FF27FD06F8FD09FF2768FCFCFC99FFFD04FCF8FD08FF2752FD14
%FF27F87D277D52F8275227FD05F84BA8FD09FFA827FD04F827FD09FFF893
%FCFCFCC2FFFD04FCF8FD08FF2752FD09FFA827F8F8F827A7FD05FF52FD04
%F87DFFFFFFA7515252A8FD0DFF52F8F8F8A8FD09FF2768FCFCFCBBFFFD04
%FCF8FD08FFF87DFD09FF27FD06F852FD05FFA8F87DFD18FFA82727FD0AFF
%276FFCFCFCC2FFFD04FCF8FD08FFF87DFD09FFFD08F8A8FD05FFF8FD1AFF
%5227FD07FF7DA8FF2768FCFCFCBBFFFD04FCF8FD08FF277DFD09FFFD08F8
%52FD04FF7DF8FD1AFF5127FD04FF7D27F8F8F827F86FFCFCFCC2FFFD04FC
%F8FD08FF2752FD09FFFD09F8FD04FF7DF8FD0DFF7D27F8F8F8277DFD06FF
%7DF8FFFFFF7DFD07F868FCFCFCBCFFFD04FCF8FD08FF5227FD09FFA8FD09
%F87DFFFF7D27FD05FF7D2727277CFFFFA8FD07F852FD05FF7D27FFFFFF27
%FD07F86FFCFCFCC2FFFD04FCF8FD08FFA8F8A8FD09FFCF4B27F8F8F8277D
%52F8F82752F8FFFFFFA827FD05F827FF7DFD08F8A8FD04FF7DF8FFFFCFFD
%08F868FCFCFC99FFFD04FCF8FD09FF2751FD13FF7D27F8277DFFFF27FD07
%F8A17DFD08F827FD04FF7D27FFFF27FD08F893FCFCFCC2FFFD04FCF8FFFF
%FF27F8F8277DFF7DF8A8FD14FF27F8F8F827FD08F852FFFD09F82752FFFF
%FFF8A8FD08F8272768FCFCFCBBFFFD04FCF8FFFF52FD04F82752FFF852FD
%09FFA852527CFD07FF4B52FFA8FD09F8A8FFA8FD07F8525227F852A8F8F8
%52FFFFA87D7D7DFFFF276FFCFCFCC2FFFD04FCF8FFFFFD07F8A8A7F8A8FD
%07FF27FD05F87DFD05FF2751FFFFFFFD07F876FD04FF5227F8F8F87DFFFF
%FF7DF8F8F8A7FD09FF2768FCFCFCBBFFFD04FCF8FFFFFD07F827FF4B27FD
%06FF7DFD07F87DFD04FF277DFD04FF7652275252A8FD10FFA8F8FD0AFF27
%6FFCFCFCC2FFFD04FCF8FFFFFD08F8FFA7F8A8FD05FF27FD08F827F82727
%2076FD1BFFF8FD06FFA87D7DFF2768FCFCFCBCFFFD04FCF8FFFF27FD07F8
%FFFF2727FD05FF52FD07F8277D7D5252F8F87CFD0DFF5227F8F8F827A8FD
%06FF277DFFFFFF52FD04F827F86FFCFCFCC2FFFD04FCF8FFFFA8FD07F8FF
%FFA8F8A8FD04FFA8FD06F84BA8FD04FF2727F827FD0BFF52FD07F87DFD05
%FFF87DFFFFA1FD07F868FCFCFC99FFFD04FCF8FFFFFF7DFD06F8FFFFFF4B
%27FF2727F8F8277D51527DFD07FFF8A8A827F8A8FF7D27272752A8FFFF27
%FD07F827A8FD04FF277DFFFF4BFD07F893FCFCFCC2FFFD04FCF8FD04FF7D
%FD05F8FFFFFFA7FD07F827FD0AFFF8FFFFFF52F827FD06F8A7FFFD09F827
%7DFFFFFFF87DFFFFFD07F82768FCFCFCBBFFFD04FCF8FD06FF52522727FD
%04FFFD08F827272752A8FD05FFF8FD04FF7DFD07F852FF52FD08F82727F8
%2752277D7DF820FD05F87D276FFCFCFCC2FFFD04FCF8FD08FFA8F8FD04FF
%FD0DF852FD04FFF8FD05FF27FD06F827FFFF27FD06F852FFFFA85227F8F8
%F876FF52F82727A8FF2768FCFCFCBBFFFD04FCF8FD09FF2776FFFFA8FD0E
%F8A8FFFFFFF8FD05FF7D27FD05F87DFFFFFF7D27272752A8FD06FF2727FD
%09FF276FFCFCFCC2FFFD04FCF8FD09FF2727FF76F827FD0DF8272727F8F8
%A8FD05FFA8522727F87DFD10FFF87DFD09FF2768FCFCFCBCFFFD04FCF8FD
%09FFA8F827F87DFF27527D7DFF27FD08F852527DF827A8FD1AFF277DFD09
%FFF86FFCFCFCC2FFFD04FCF8FD05FF7D7D7DA7A8F8F8A8FFFFF87DFD04FF
%5227FD05F8CFFFFFFFF82727A8FD19FFF87DFD04FF5227F827522768FCFC
%FC99FFFD04FCF8FFFFFF52FD05F827F827FFFFFF5227FD07FF7DA1A8FD05
%FFF8FF2727A8FFFFFFA87D517DA8FFFFFFA827F8F8F84BA8FD06FF2751FF
%FFFFFD07F893FCFCFCC2FFFD04FCF8FFFF27FD07F827F8FFFFFF2752FD05
%FF7D277DA8FD06FFF8FFFF52207DFF27FD05F852FFA820FD06F87DFD05FF
%2752FFFF27FD07F868FCFCFCBBFFFD04FCF8FF7CFD08F852277CFFFF524B
%FFFFFFA827FD04F852FD05FFF8FFFFFF52FD09F8A87DFD07F827A8FD04FF
%5227FFA8FD08F86FFCFCFCC2FFFD04FCF8FFFD09F8FF4B27FFFF2752FFFF
%FF27FD06F852FD04FFF8FD04FF27FD08F8527DFD08F876FD04FF2752FF27
%FD08F868FCFCFCBBFFFD04FCF8FF27FD07F827FFFFF8A8FF5251FFFFFF27
%FD06F827A8FFFFFFF8FD04FFA8FD08F827FF27FD08F87DFFFFFF52F827FD
%07F827276FFCFCFCC2FFFD04FCF8FF27FD06F87DF8FFFF2727FF2752FFFF
%FF27FD07F827527DA8F8FD05FF52FD07F8A8FFFF27FD06F827F8277DFF27
%F87DFFA852F827F852FF2768FCFCFCBCFFFD04FCF8FFFF2727F827F8FF52
%27FFFFA8F87D5227FFFFFFA827FD06F82727F8F8F852FD05FF7D2727F827
%27FD05FF7D52275252A8FFFF4BF8F8274BFD09FFF86FFCFCFCC2FFFD04FC
%F8FD06FFF8A82727FFFFFF2727F852FD05FF762727F84B7DFD04FFF8F827
%7DFD17FFA852F852FD09FF2768FCFCFC99FFFD04FCF8FD06FFF87DF87DFD
%04FFF8277DFD0FFFF8A151F827FD18FF2752FD05FF7D27F8F8F893FCFCFC
%C2FFFD04FCF8FD06FF5127F8A8FD04FF7DF87DFD0EFF27F8F8275227F852
%2727F8277DFFFFFF7D27F827277DFD08FFF87DFD04FF52FD05F868FCFCFC
%BBFFFD04FCF8FD04FF7D27F8F8F8FD06FF2727FD0DFF27FD05F85252FD06
%F827FF52FD06F852FD07FF277DFFFFFFA8FD06F86FFCFCFCC2FFFD04FCF8
%FFFFFFA8FD06F8FD05FFF8F87DFD0BFFA8FD07F8FFFD07F852FD08F827FD
%06FFF87DFFFFA8FD07F868FCFCFCBBFFFD04FCF8FFFFFF7DFD06F852FD04
%FF272727FD0BFF7DFD07F87DFD07F827FD09F87DFD05FF277DFF51FD08F8
%6FFCFCFCC2FFFD04FCF8FFFFFF27FD06F827FD04FFF87DF852FD0AFF27FD
%07F87D52FD07F820FD09F82752FFFFFFF851F8277DFF27FD05F868FCFCFC
%BCFFFD04FCF8FFFFFF7DFD07F8FD04FF52277DF8FD0AFF52FD07F87DFF27
%FD05F8277DFD08F8A85227F827A827F87CFD05FF7D7DFFF86FFCFCFCC2FF
%FD04FCF8FFFFFFA8FD07F8FD04FF2752FF2727FD09FF52FD07F8A1FFA827
%F8F8F827A8FFA852FD05F8A8FFFFFFA827F8F87DFD09FF2768FCFCFC99FF
%FD04FCF8FD04FF27FD06F8FD04FF5227FFA8F8A8FD09FFFD07F8FD17FFA8
%277DFD09FFF893FCFCFCC2FFFD04FCF8FD05FF27FD04F827FD04FF7D27FF
%FFF852FD09FF7DFD05F8A7FD18FFF87DFD09FF2768FCFCFCBBFFFD04FCF8
%FD06FF5227F8F87DFD04FFA8F827F8F8F8A8FFFFFFA87D7DFFFFFF7DF8F8
%F87DFD19FFF8A8FD09FF276FFCFCFCC2FFFD04FCF8FD08FF5227FD05FFA8
%FD06F8A8A827FD04F87DFFFF52F87DFD06FF7D7DA1FD11FFF8FFFFFFA852
%FD04F8522768FCFCFCBBFFFD04FCF8FD08FF7D27FD05FF4BFD06F82752FD
%06F87DFFA8F8FD05FF52FD04F827FD10FFF8FFFFA827FD07F86FFCFCFCC2
%FFFD04FCF8FD09FFF8FD05FFFD07F827FD07F827FFFFF8FD04FF27FD06F8
%52FFFF7D2727F82752FD07FFF8522727FD08F868FCFCFCBCFFFD04FCF8FD
%09FF277CFD04FFFD07F82727FD07F8FFFFF8FFFFFF7DFD07F827FF52FD06
%F827FD06FFF84B5227FD08F86FFCFCFCC2FFFD04FCF8FD09FF274BFD04FF
%FD07F87D51FD07F8FFFFF8FFFFFFFD08F827FFFD09F8CFFFFFFF7DF8FFFF
%FF27FD07F868FCFCFC99FFFD04FCF85252517DFD05FFA1F8FD04FF52FD05
%F852FFFFFD07F8FFFF277DFFFF27FD07F87D7DFD09F827A1A8FF7D27FD04
%FF27FD06F893FCFCFCC2FFFD04FCFD06F87DFD04FFF8A8FFFFFFA820F8F8
%F8527DFFFFA7FD06F8FFFFF87DFFFFFD07F827FFFFFD0DF820F8FD05FFA8
%27F827522768FCFCFCBBFFFD04FCFD07F8A8FFFFFF2752FD04FF52F82752
%F8F8F852FFFF52272727F827FF2752FFA8FD06F84B27272752FD08F87CFF
%FFA85227FD0AFF276FFCFCFCC2FFFD04FCFD07F827FFFFFF52F8FD04FF4B
%277DFD05F87DFD05FFCFF82727527DF8F852275252FD06F8A82727F827F8
%27A1FD04FF5227FD0AFF2768FCFCFCBBFFFD04FCFD08F82752A8A8F8A8FF
%FFFFF87DFD06F851FD07FFF827272751FFFFFF7DFD07F87DFD0BFF5127F8
%F8F852FD06FF276FFCFCFCC2FFFD04FCFD08F82727F820F852FFFFA7F8A8
%FD06F852FD08FFF8F852FD04FF27FD07F827F8F8F8277DFD06FF27FD05F8
%52FD05FF2768FCFCFCBCFFFD04FCF87D272727F852A8FFFFFF7C2727FFFF
%52277DFD07F827F82752FD04FF7DF8FD04FFA8FD0EF827FD05FFFD07F8FD
%05FFF86FFCFCFCC2FFFD04FCF8FD0BFFA8F8A1FFF87DA1FD0BF852FFFFFF
%7DF8FD04FF7DFD0FF852FD04FFFD07F852FD04FF2768FCFCFC99FFFD04FC
%F8FD0CFF27527DF8FFFF27FD0AF827A8FFFFFFF8FD04FF7DFD0FF820F827
%2752FD07F852FD04FFF893FCFCFCC2FFFD04FCF8FD04FFA8275252A8FFFF
%FF52F82727FFFFA8F8F8F827FD07F852FFFFFFF87DFFFFFFA8FD06F8A827
%FD07F8277D7D5227FD07F827FD04FF2768FCFCFCBBFFFD04FCF8FFFFFF7D
%FD05F87CFFFFFFF8F8FD04FF52F87DFF27FD07F8FFFFFFF87DFFFFFF27F8
%27F8527DFFFFFF27FD05F827FD05FFF827FD05F87DFD04FFF84BFCFCFCC2
%FFFD04FCF8FFFFA8FD07F8A7FFFF2727FD04FFF876FFFFA827FD05F827FF
%FFFF274BFFFF52F8FD0AFF7D7C7DFD04FF7D5227F8A827FD04F8FD04FF27
%F868FCFCFCBBFFFD04FCF8FFFF7DFD07F827FFFFA8F8FFFFFF7D27FD04FF
%A827FD05F8A8FFFF2752FF7DF8A8FD10FF27FD04F852FF7DF8F827FFFFFF
%7DF8F86FFCFCFCC2FFFD04FCF8FFFFA7FD08F827FFFF2727FFFF2052FD06
%FFA751525252F87DFF7DF8A8F87DFD10FF27FD06F8A8FFFF2727FFFFFF27
%272768FCFCFCBCFFFD04FCF8FFFFFF27FD06F82727F8275227FF7DF8FD0C
%FF7CF87D7D20F87DFD06FF5227277CFD07FF27FD06F852FFFFFFF87DFF7D
%F8FFF86FFCFCFCC2FFFD04FCF8FD04FF52F827F8277CFFFFA827F8F851F8
%7DFD08FFA8A8FFFFFFA7F852F827FD05FFA8FD05F827FD06FFFD07F852FF
%FFFF52F8CFF87DFF2768FCFCFC99FFFD04FCF8FD0EFFA827F827FD07FFA8
%F8F8F82752FFFFA8F8217DFD05FFFD07F8A1FD05FFFD07F851FFFFFFA8F8
%2627FFFFF893FCFCFCC2FFFD04FCF8FD10FFF84BFD07FFFD06F827FFFFFF
%F852FD04FF51FD07F827FD05FFFD07F852FD04FF27F8A8FF7DF868FCFCFC
%BBFFFD04FCF8FD10FF5227FD06FFA8FD07F87DFFFF5227FD04FF27FD07F8
%52FD05FF27FD06F852FFFFFFA82752FFF8F8F86FFCFCFCC2FFFD04FCF8FD
%09FF7D27F8F827CFFFFFF852FD05FF7DFD07F84BFFFF7C27FD04FFFD08F8
%A8FD05FFA1FD06F8CFFFFFFF27F8A8FD04F868FCFCFCBBFFFD04FCF8FD08
%FF52FD06F8FFFF7DF8FD06FFFD07F827FFFFFFF8FD04FF27FD06F852FFA8
%5227527DFFA827F8F8F852FFFFFF7DF827FD05F86FFCFCFCC2FFFD04FCF8
%FD08FFFD08F8FFFFF852FD05FF27FD06F827FFFFFF207DFFFFFF27FD05F8
%52FFA8FD05F827FFFFA827F8A8FFFFFFF8277DFF52F8F8F868FCFCFCBCFF
%FD04FCF8FFFF4BF8F82752FFFD08F827FF5227FD06FF27FD05F827FFFFFF
%2752FFFFA827F852277DA8FFFF27FD06F87DFFFFFF2752FFFF2727FD04FF
%7D27F86FFCFCFCC2FFFD04FCF8FFFD06F852FD09F87DFFF852FD06FF5227
%FD04F852FFFF52F8FFA8F827FD07FFFD07F852FFFFFF7DF8FF51F8A8FD06
%FF2768FCFCFC99FFFD04FCF87DFD07F852FD0AF852F8FD0BFF762751FF7D
%27A82727FD05FF7DA8FFFD08F8FD04FF2727F87DFD07FFF893FCFCFCC2FF
%FD04FCF87DFD07F8527D27F8F8F820277DFF7D27F8F8FD0BFF7D2027FFF8
%27F8FD04FF27FD0BF827FD04FF52F827FD08FF2768FCFCFCBBFFFD04FCF8
%A8FD07F827FD0BFFA8F87DFD0BFFA827F827F8FD04FF27FD0CF852FD04FF
%27F8FD09FF206FFCFCFCC2FFFD04FCF8FF27FD07F8FD0CFF2727FD0DFF52
%F827FFFFFF7DFD0DF8FD04FF52F8CFFD04FFA14BF8277C2768FCFCFCBBFF
%FD04FC277DFF27FD06F8FD0DFFF87DFD0DFF7DF8FFFFFF27FD07F8A84BF8
%F8F8A8FFFFFF7DF8A8FD04FF5227FD05F8B4FCFCFCC2FFFD04FC2027A8FF
%A852F827F8F827FD0CFF7DF8FD0EFF2052FFFFFD07F827FFFFFF52F8A8FF
%FFA7FD0DF827FD04FCBCFFFD05FCF827A8FD05FFA8274BFD0CFF2727FD0D
%FF5227FFFFFD07F8FD05FF2752FFA8F852A8FD05FF52FD05F88CFD04FCC2
%FFFD06FC20F827522752275227F827522752275227522752275227F82752
%27522752275227522752274BF85227FD06F84B275227522727F827F82727
%52275227522752F8F8F8278CFD05FC99FFFD07FC8C4B264B4B4B264B264B
%264B4B4B264B4B4B264B4B4B204B4B4B264B4B4B264B4B4B264B4B4B204B
%2027204B444B204B444B204B444B2027444B204B444B204B444B2093FD07
%FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
376.0869 303.9355 m
223.0146 303.9355 L
223.0146 542.0469 L
376.0869 542.0469 L
376.0869 303.9355 L
fu0 0 0 0 k
231.2207 526.2417 m
231.2207 320.7422 l
231.4707 311.2422 242.2207 311.2422 v
252.9707 311.2422 356.9707 311.4922 y
366.9707 309.2422 367.7207 323.2422 v
368.4707 337.2422 367.7207 525.7417 y
367.0537 534.2417 357.2207 534.7417 v
241.3877 534.7417 l
232.2207 534.4082 231.2207 526.2417 v
f*u
1 D
0.65 0.53 0.51 1 k
241.1426 535.4502 m
235.2813 535.4502 230.5127 530.6816 230.5127 524.8203 C
230.5127 321.1621 L
230.5127 315.3008 235.2813 310.5332 241.1426 310.5332 C
357.7998 310.5332 L
363.6611 310.5332 368.4297 315.3008 368.4297 321.1621 C
368.4297 524.8203 L
368.4297 530.6816 363.6611 535.4502 357.7998 535.4502 C
241.1426 535.4502 L
f0 D
231.9297 321.1621 m
231.9297 524.8203 L
231.9297 529.9004 236.0625 534.0332 241.1426 534.0332 C
357.7998 534.0332 L
362.8799 534.0332 367.0117 529.9004 367.0117 524.8203 C
367.0117 321.1621 L
367.0117 316.082 362.8799 311.9512 357.7998 311.9512 C
241.1426 311.9512 L
236.0625 311.9512 231.9297 316.082 231.9297 321.1621 C
f*U
299.2207 490.9917 m
293.2207 493.4917 293.9707 501.2417 v
294.7207 508.9917 300.2207 509.2417 301.7207 508.9917 c
303.2207 508.7417 307.9707 506.7417 306.2207 499.4917 c
304.4707 492.2417 300.2207 490.9917 299.2207 490.9917 c
f285.4707 480.2417 m
284.9707 485.7417 280.7207 487.4917 v
276.4707 489.2417 272.9707 487.9917 272.2207 485.7417 c
271.4707 483.4917 272.4707 479.9917 276.9707 478.4917 c
281.4707 476.9917 285.4707 479.4917 285.4707 480.2417 c
f305.7207 479.4917 m
305.7207 485.2417 312.2207 486.2417 v
318.7207 487.2417 319.9707 483.2417 320.2207 481.9917 c
320.4707 480.7417 319.9707 477.4917 313.9707 476.4917 c
307.9707 475.4917 305.7207 479.4917 y
f285.7207 462.9917 m
286.7207 468.7417 281.2207 472.7417 v
275.7207 476.7417 270.7207 473.7417 269.9707 471.7417 c
269.2207 469.7417 269.4707 464.9917 275.2207 462.4917 c
280.9707 459.9917 285.4707 461.9917 285.7207 462.9917 c
f303.9707 460.7417 m
305.4707 466.2417 310.2207 467.9917 v
314.9707 469.7417 318.9707 467.9917 319.7207 465.4917 c
320.4707 462.9917 319.4707 459.9917 314.4707 458.2417 c
309.4707 456.4917 304.7207 459.2417 303.9707 460.7417 c
f284.2207 448.2417 m
283.7207 454.2417 278.7207 456.9917 v
273.7207 459.7417 268.9707 457.7417 267.9707 454.2417 c
266.9707 450.7417 268.9707 447.4917 274.2207 445.9917 c
279.4707 444.4917 283.7207 446.7417 284.2207 448.2417 c
f299.9707 441.4917 m
302.4707 446.9917 307.9707 447.9917 v
313.4707 448.9917 316.2207 445.9917 316.4707 443.2417 c
316.7207 440.4917 314.9707 437.4917 309.2207 436.9917 c
303.4707 436.4917 300.4707 439.4917 299.9707 441.4917 c
f283.9707 434.7417 m
282.2207 439.7417 276.4707 440.2417 v
270.7207 440.7417 268.2207 437.4917 268.7207 433.9917 c
269.2207 430.4917 272.4707 429.4917 276.4707 429.9917 c
280.4707 430.4917 284.2207 432.4917 283.9707 434.7417 c
f303.2207 426.2417 m
305.4707 430.2417 310.7207 429.7417 v
315.9707 429.2417 317.2207 426.7417 316.7207 423.7417 c
316.2207 420.7417 313.7207 419.4922 308.9707 420.2417 c
304.2207 420.9917 303.2207 424.4917 303.2207 426.2417 c
f285.4707 419.4922 m
284.2207 425.2417 277.7207 425.9917 v
271.2207 426.7417 270.2207 422.9917 269.9707 420.7417 c
269.7207 418.4922 271.7207 415.9922 277.9707 415.4922 c
284.2207 414.9922 285.4707 417.9922 285.4707 419.4922 c
f302.4707 409.2422 m
305.2207 413.9922 310.7207 414.2422 v
316.2207 414.4922 317.9707 411.4922 318.4707 408.4922 c
318.9707 405.4922 316.2207 403.2422 311.2207 402.9922 c
306.2207 402.7422 302.9707 405.7422 302.4707 409.2422 c
f285.4707 404.9922 m
282.9707 410.4922 278.4707 411.9922 v
273.9707 413.4922 270.2207 410.4922 270.2207 407.4922 c
270.2207 404.4922 271.9707 401.9922 277.4707 401.4922 c
282.9707 400.9922 285.7207 403.4922 285.4707 404.9922 c
f294.2207 379.2422 m
287.4707 382.9922 287.4707 389.2422 v
287.4707 395.4922 290.7207 398.7422 294.7207 398.4922 c
298.7207 398.2422 301.9707 394.7422 301.4707 388.9922 c
300.9707 383.2422 296.2207 378.9922 294.2207 379.2422 c
f345.2207 455.7417 m
338.4707 457.7417 336.7207 462.9917 v
334.9707 468.2417 337.7207 471.7417 341.2207 472.2417 c
344.7207 472.7417 348.4707 470.4917 349.2207 465.4917 c
349.9707 460.4917 347.7207 455.9917 345.2207 455.7417 c
f336.2207 441.9917 m
334.9707 447.9917 330.2207 449.9917 v
325.4707 451.9917 320.4707 450.4917 319.4707 446.7417 c
318.4707 442.9917 321.7207 439.7417 327.2207 438.4917 c
332.7207 437.2417 335.4707 440.7417 336.2207 441.9917 c
f367.4707 449.9917 m
367.2207 451.2417 364.7207 453.7417 358.9707 452.4917 c
353.2207 451.2417 352.9707 443.4917 y
355.2207 440.9917 359.9707 441.2417 v
364.7207 441.4917 367.7207 443.7417 367.7207 445.2417 c
367.4707 449.9917 l
f353.7207 426.2417 m
353.7207 432.7417 358.7207 433.9917 v
363.7207 435.2417 365.4707 433.9917 366.4707 431.4917 c
367.4707 428.9917 366.2207 426.2417 361.9707 424.2417 c
357.7207 422.2417 354.9707 424.9917 353.7207 426.2417 c
f337.2207 427.2417 m
334.7207 433.2417 329.2207 433.9917 v
323.7207 434.7417 320.7207 431.9917 320.4707 428.9917 c
320.2207 425.9917 322.2207 422.4917 327.7207 421.9917 c
333.2207 421.4917 336.9707 425.4917 337.2207 427.2417 c
f337.4707 406.7422 m
336.9707 412.4922 331.4707 414.7422 v
325.9707 416.9922 322.2207 413.7422 321.4707 411.4922 c
320.7207 409.2422 322.4707 404.7422 328.7207 403.7422 c
334.9707 402.7422 337.4707 405.7422 337.4707 406.7422 c
f352.7207 407.7422 m
353.2207 414.2422 357.9707 415.9922 v
362.7207 417.7422 365.9707 416.7422 367.2207 413.2422 c
368.4707 409.7422 365.7207 406.4922 361.9707 405.2422 c
358.2207 403.9922 353.9707 406.2422 352.7207 407.7422 c
f335.4707 390.9922 m
332.9707 396.4922 327.4707 397.9922 v
321.9707 399.4922 318.2207 395.7422 318.2207 392.7422 c
318.2207 389.7422 319.4707 386.9922 326.4707 386.2422 c
333.4707 385.4922 335.2207 388.9922 335.4707 390.9922 c
f367.7207 398.7422 m
366.7207 400.2422 364.7207 401.2422 360.7207 399.4922 c
356.7207 397.7422 355.7207 392.7422 y
357.4707 389.9922 361.2207 389.4922 v
364.9707 388.9922 367.4707 390.2422 367.7207 391.4922 c
367.7207 398.7422 l
f258.9707 420.9917 m
258.4707 426.9917 263.2207 429.2417 v
267.9707 431.4917 270.7207 429.9917 272.4707 426.7417 c
274.2207 423.4917 270.7207 420.4917 267.7207 419.4922 c
264.7207 418.4922 261.7207 418.9922 258.9707 420.9917 c
f249.4707 426.2417 m
244.2021 424.4858 239.2207 429.9917 v
234.4707 435.2417 236.2207 441.2417 239.9707 442.7417 c
243.7207 444.2417 248.2207 440.7417 249.7207 437.2417 c
251.2207 433.7417 251.2207 426.9917 249.4707 426.2417 c
f250.9707 414.4922 m
245.9707 417.4922 239.9707 414.7422 v
233.9707 411.9922 234.7207 406.2422 235.2207 404.9922 c
235.7207 403.7422 240.7207 400.9922 246.2207 405.2422 c
251.7207 409.4922 252.2207 412.7422 250.9707 414.4922 c
f248.4707 380.2422 m
242.7207 380.7422 239.9707 386.9922 v
237.2207 393.2422 242.2207 396.7422 243.7207 396.7422 c
245.2207 396.7422 249.9707 397.4922 251.9707 390.2422 c
253.9707 382.9922 250.2207 379.9922 248.4707 380.2422 c
f303.7207 396.9922 m
309.2207 399.4922 313.4707 396.9922 v
317.7207 394.4922 318.4707 389.7422 316.2207 387.4922 c
313.9707 385.2422 309.2207 385.2422 306.2207 387.9922 c
303.2207 390.7422 302.2207 395.9922 303.7207 396.9922 c
f264.7207 365.9922 m
259.2207 370.2422 260.7207 375.7422 v
262.2207 381.2422 267.2207 382.9922 271.2207 380.7422 c
275.2207 378.4922 274.9707 373.2422 272.2207 370.2422 c
269.4707 367.2422 266.4707 365.9922 264.7207 365.9922 c
f231.2207 367.7422 m
231.7207 368.9922 234.4707 370.9922 239.2207 369.2422 c
243.9707 367.4922 245.7207 361.4922 y
243.9707 358.4922 238.7207 358.4922 v
233.4707 358.4922 231.9707 360.4922 231.2207 361.4922 c
231.2207 367.7422 l
f288.9707 366.7422 m
291.4707 373.2422 288.2207 377.2422 v
284.9707 381.2422 280.2207 381.4922 277.2207 378.7422 c
274.2207 375.9922 275.9707 369.4922 280.9707 366.9922 c
285.9707 364.4922 288.9707 366.7422 y
f301.7207 365.2422 m
300.2207 371.9922 304.7207 375.9922 v
309.2207 379.9922 314.4707 378.9922 316.2207 375.9922 c
317.9707 372.9922 317.2207 368.4922 311.4707 365.9922 c
305.7207 363.4922 303.7207 364.4922 301.7207 365.2422 c
f337.9707 368.4922 m
336.2207 373.4922 330.4707 375.4922 v
326.2471 376.9609 319.4707 374.9922 319.7207 370.2422 c
319.9707 365.4922 323.4707 363.9922 329.7207 363.9922 c
335.9707 363.9922 337.7207 367.2422 337.9707 368.4922 c
f367.7207 375.4922 m
367.4707 376.9922 366.2207 379.7422 360.4707 379.9922 c
354.7207 380.2422 352.4707 375.4922 y
352.2207 371.9922 358.2207 368.9922 v
364.2207 365.9922 367.7207 369.9922 y
367.7207 375.4922 l
f269.2207 351.7422 m
264.4707 355.2422 265.9707 360.7422 v
267.4707 366.2422 270.9707 368.2422 274.7207 366.7422 c
278.4707 365.2422 278.2207 359.4922 276.7207 356.7422 c
275.2207 353.9922 271.7207 350.4922 269.2207 351.7422 c
f252.7207 345.2422 m
251.7207 350.9922 246.7207 352.7422 v
241.7207 354.4922 237.4707 350.4922 237.4707 347.7422 c
237.4707 344.9922 239.7207 341.7422 245.2207 341.7422 c
250.7207 341.7422 252.7207 345.2422 y
f289.4707 347.4922 m
289.9707 353.2422 286.4707 356.9922 v
282.9707 360.7422 279.7207 360.2422 276.4707 357.4922 c
273.2207 354.7422 276.2207 350.7422 278.7207 348.2422 c
281.2207 345.7422 288.4707 345.2422 289.4707 347.4922 c
f307.2207 351.7422 m
304.9707 357.7422 308.4707 362.2422 v
311.9707 366.7422 317.9707 367.7422 320.2207 365.4922 c
322.4707 363.2422 323.4707 357.7422 318.7207 354.2422 c
313.9707 350.7422 309.7207 350.7422 307.2207 351.7422 c
f335.7207 355.2422 m
334.4707 359.4922 329.2207 360.9922 v
323.9707 362.4922 320.4707 358.9922 319.9707 357.7422 c
319.4707 356.4922 319.7207 350.7422 327.2207 350.2422 c
334.7207 349.7422 335.4707 353.9922 335.7207 355.2422 c
f354.7207 346.7422 m
358.7207 350.7422 357.2207 356.9922 v
355.7207 363.2422 350.7207 364.2422 347.2207 362.4922 c
343.7207 360.7422 343.4707 354.9922 346.9707 350.9922 c
350.4707 346.9922 354.7207 346.7422 y
f344.2207 330.9922 m
335.7207 332.2422 334.9707 338.7422 v
334.2207 345.2422 336.9707 348.4922 341.2207 349.2422 c
345.4707 349.9922 348.4707 346.9922 348.4707 340.7422 c
348.4707 334.4922 345.9707 331.2422 344.2207 330.9922 c
f309.9707 329.9922 m
307.7207 336.2422 311.2207 340.7422 v
314.7207 345.2422 320.4707 344.9922 323.2207 340.9922 c
325.9707 336.9922 322.9707 332.9922 319.9707 330.9922 c
316.9707 328.9922 312.2207 328.4922 309.9707 329.9922 c
f292.2207 327.4922 m
294.4707 331.7422 291.7207 336.7422 v
288.9707 341.7422 283.2207 341.9922 280.7207 339.9922 c
278.2207 337.9922 277.4707 332.2422 281.9707 328.7422 c
286.4707 325.2422 290.7207 326.9922 292.2207 327.4922 c
f264.2207 325.4922 m
263.4707 330.4922 257.9707 333.9922 v
252.4707 337.4922 247.9707 332.4922 247.4707 330.7422 c
246.9707 328.9922 246.9707 323.7422 254.7207 322.9922 c
262.4707 322.2422 264.2207 325.4922 y
f248.7207 316.9922 m
249.4707 322.7422 245.4707 327.4922 v
241.4707 332.2422 236.2207 328.7422 234.7207 326.7422 c
233.2207 324.7422 233.2207 319.7422 239.2207 316.9922 c
245.2207 314.2422 248.7207 316.9922 y
f310.9707 311.2422 m
309.7207 316.2422 312.7207 320.7422 v
315.7207 325.2422 320.9707 325.7422 323.9707 322.7422 c
326.9707 319.7422 324.7207 311.9922 315.9707 311.2422 c
309.7207 311.7422 310.9707 311.2422 v
f332.7207 316.4922 m
324.7207 317.9922 323.9707 322.7422 v
323.2207 327.4922 324.7207 332.2422 328.9707 332.7422 c
333.2207 333.2422 336.9707 330.9922 337.4707 325.4922 c
337.9707 319.9922 333.7207 316.9922 332.7207 316.4922 c
f367.2207 317.7422 m
360.4707 322.9922 355.7207 316.7422 y
356.4707 312.7422 358.9707 311.2422 v
362.7207 312.2422 364.4707 313.7422 v
366.2207 315.2422 367.2207 317.7422 y
f367.9707 337.9922 m
362.2207 337.7422 360.9707 333.2422 y
362.4707 328.4922 367.7207 328.4922 V
367.9707 337.9922 L
f338.2197 311.7422 m
339.2217 310.7402 L
353.377 324.8965 368.4385 351.627 368.5889 351.8945 C
367.3525 352.5879 L
367.2031 352.3223 352.2363 325.7598 338.2197 311.7422 C
f353.0996 348.4004 m
353.1416 348.3242 357.3135 340.6973 358.0332 337.8203 C
359.4082 338.1641 L
358.6445 341.2168 354.5176 348.7637 354.3418 349.082 C
353.0996 348.4004 L
f343.0869 332.6738 m
343.127 332.5957 347.0859 324.6738 347.8193 322.9629 C
349.1221 323.5215 L
348.3721 325.2695 344.5186 332.9805 344.3545 333.3086 C
343.0869 332.6738 L
f331.5918 317.916 m
335.0918 311.166 L
336.3496 311.8184 L
332.8496 318.5684 L
331.5918 317.916 L
f342.9268 316.4492 m
343.0146 315.0352 L
343.0947 315.0391 351.0742 315.5332 357.9707 315.5332 C
357.9707 316.9512 L
351.0293 316.9512 343.0068 316.4531 342.9268 316.4492 C
f355.0781 332.6855 m
355.3633 331.2969 L
365.1133 333.2969 L
364.8281 334.6855 L
355.0781 332.6855 L
f293.5127 381.9707 m
293.5244 381.5547 294.8857 340.0234 305.3047 311.25 C
306.6367 311.7324 L
296.2969 340.291 294.9414 381.5996 294.9287 382.0137 C
293.5127 381.9707 L
f289.5078 328.9551 m
289.96 328.5645 300.6035 319.3828 303.1533 318.1074 C
303.7871 319.375 L
301.873 320.332 294.2158 326.7617 290.4346 330.0273 C
289.5078 328.9551 L
f302.4629 321.9863 m
303.4785 320.9961 L
304.4844 322.0293 313.335 331.1348 314.3545 333.1738 C
313.0869 333.8086 L
312.3896 332.4141 306.3516 325.9746 302.4629 321.9863 C
f286.0098 348.9531 m
286.1143 348.8633 296.5059 339.9551 297.9697 338.4902 C
298.9717 339.4922 L
297.4697 340.9941 287.3613 349.6621 286.9316 350.0293 C
286.0098 348.9531 L
f297.9346 341.9551 m
299.0068 341.0293 L
299.458 341.5508 310.0479 353.8301 311.0605 355.3477 C
309.8809 356.1348 L
309.1094 354.9766 301.7285 346.3535 297.9346 341.9551 C
f295.2637 360.5332 m
296.1777 359.4492 L
296.5049 359.7266 304.2148 366.2344 305.4717 367.4902 C
304.4697 368.4922 L
303.2549 367.2773 295.3428 360.6016 295.2637 360.5332 C
f285.7344 368.9766 m
294.7344 360.4766 L
295.707 361.5078 L
286.707 370.0078 L
285.7344 368.9766 L
f247.5244 383.1113 m
247.5596 382.9238 251.1367 364.0605 259.5723 344.9551 c
268.002 325.8672 278.2832 310.7422 278.3857 310.5918 C
279.5557 311.3906 L
279.4541 311.541 269.2432 326.5645 260.8691 345.5273 c
252.5029 364.4766 248.9521 383.1855 248.918 383.3711 C
247.5244 383.1113 L
f260.0332 326.0586 m
264.8555 324.7324 270.2002 323.1035 270.7969 322.6738 C
271.6465 323.8086 L
270.6182 324.5801 262.7852 326.7715 260.4092 327.4258 C
260.0332 326.0586 L
f249.6934 345.5898 m
254.1777 343.6816 261.5049 340.5176 262.0791 340.1504 C
262.8643 341.332 L
262.0977 341.8418 252.2207 346.0547 250.248 346.8945 C
249.6934 345.5898 L
f262.625 339.125 m
263.8174 338.3594 L
264.0967 338.793 270.6641 349.0566 271.1758 353.918 C
269.7666 354.0664 L
269.2891 349.5371 262.6914 339.2285 262.625 339.125 C
f257.915 351.1816 m
259.0273 350.3027 L
262.8359 355.127 265.79 368.7656 265.9141 369.3438 C
264.5283 369.6406 L
264.498 369.502 261.5195 355.7461 257.915 351.1816 C
f242.0264 362.3105 m
254.2764 358.8105 L
254.666 360.1738 L
242.416 363.6738 L
242.0264 362.3105 L
f246.1953 318.0156 m
246.2422 317.9648 250.9277 312.7793 252.3809 310.5977 C
253.5605 311.3848 L
252.0488 313.6523 247.4414 318.752 247.2461 318.9668 C
246.1953 318.0156 L
f344.7656 458.4243 m
344.8174 457.8774 349.9336 403.0684 343.5166 345.0703 C
344.9248 344.9141 L
351.3584 403.0645 346.2285 458.0112 346.1758 458.5591 C
344.7656 458.4243 L
f332.6738 354.2852 m
336.5527 354.0254 344.1953 353.4863 345.3545 353.293 C
345.5869 354.6914 L
344.0703 354.9434 333.2285 355.668 332.7676 355.6992 C
332.6738 354.2852 L
f335.9961 368.3203 m
336.3379 368.2051 337.4609 368.0332 339.582 367.7129 c
341.8516 367.3711 345.2822 366.8535 345.957 366.584 C
346.4844 367.9004 L
345.7148 368.207 343.2256 368.5977 339.793 369.1152 c
338.3457 369.334 336.7051 369.5801 336.4443 369.6641 C
335.9961 368.3203 L
f346.666 375.1992 m
346.7754 373.7852 L
347.042 373.8066 353.3232 374.291 354.8369 374.543 C
354.6045 375.9414 L
353.1523 375.6992 346.7314 375.2031 346.666 375.1992 C
f332.5488 390.8047 m
336.4414 389.8301 346.3301 385.3906 346.4297 385.3457 C
347.0117 386.6387 L
346.6006 386.8223 336.9082 391.1758 332.8926 392.1797 C
332.5488 390.8047 L
f346.873 388.8594 m
347.5684 387.625 L
357.8145 393.373 L
357.127 394.6113 L
346.873 388.8594 L
f333.8271 407.6523 m
334.5898 407.1445 345.6406 401.502 346.8984 400.8613 C
347.543 402.123 L
342.6338 404.627 335.1387 408.4805 334.6133 408.832 C
333.8271 407.6523 L
f347.1826 406.1387 m
347.7588 404.8438 L
348.127 405.0078 356.7852 408.8574 357.7871 409.3574 C
357.1533 410.625 L
356.1797 410.1387 347.2725 406.1797 347.1826 406.1387 C
f347.1104 423.1021 m
347.8311 421.8813 L
357.5811 427.6313 L
356.8604 428.8521 L
347.1104 423.1021 L
f333.9414 426.8403 m
335.7266 426.0752 346.834 423.4155 347.3057 423.3022 C
347.6357 424.6812 L
344.4531 425.4419 335.8896 427.5474 334.5 428.1431 C
333.9414 426.8403 L
f333.207 442.8335 m
346.4473 437.3379 L
346.9941 438.6455 L
333.7344 444.1499 L
333.207 442.8335 L
f346.3623 440.103 m
347.0791 438.8804 L
347.377 439.0552 354.4043 443.1802 356.1816 444.7036 C
355.2598 445.7798 L
353.5771 444.3379 346.4346 440.145 346.3623 440.103 C
f292.7646 394.9297 m
294.1768 395.0547 L
290.7246 434.0137 299.8281 492.5449 299.9209 493.1313 C
298.5205 493.3521 L
298.4277 492.7637 289.2979 434.063 292.7646 394.9297 C
f296.6689 476.7578 m
296.1328 476.9399 283.6992 481.1626 Y
283.2432 479.8208 L
296.7725 475.2256 L
297.0381 475.3579 L
300.6807 477.1792 306.7139 480.1333 307.3926 480.3042 C
307.0488 481.6792 L
306.0645 481.4331 298.6563 477.75 296.6689 476.7578 C
f283.5654 463.1606 m
294.6748 455.4097 L
295.0596 455.6196 L
295.1416 455.6646 303.3125 460.1128 307.2197 461.5781 C
306.7217 462.9053 L
303.1377 461.561 296.3877 457.9487 294.7676 457.0732 C
294.0977 457.5405 284.376 464.3228 Y
283.5654 463.1606 L
f280.6689 449.1006 m
293.4189 443.1006 L
293.8496 442.9482 302.3047 440.0527 304.5674 439.5498 C
304.874 440.9336 L
302.6885 441.4194 294.04 444.3813 293.9502 444.4121 C
293.9502 444.4165 281.2725 450.3828 Y
280.6689 449.1006 L
f281.6885 434.0337 m
292.0811 433.5615 292.4814 433.5435 V
293.3662 432.917 301.0205 427.498 304.2832 424.9341 C
305.1582 426.0488 L
301.6846 428.7788 293.2139 434.7607 293.1299 434.8208 C
292.96 434.9399 L
281.7529 435.4497 L
281.6885 434.0337 L
f292.417 420.4487 m
282.418 419.6992 L
282.5234 418.2852 L
291.5928 418.9648 292.2002 419.0117 V
293.917 417.2988 302.1748 409.0977 303.6533 408.3574 C
304.2871 409.625 L
303.2695 410.1348 296.8066 416.4082 292.9717 420.2427 C
292.7412 420.4722 L
292.417 420.4487 L
f283.0264 404.0605 m
284.7305 403.5742 291.8164 402.6738 292.7275 402.5586 C
298.6699 398.8691 305.085 394.6328 305.6182 393.8691 C
306.8281 394.6055 L
306.0508 395.9023 296.3105 402.0039 293.3447 403.8438 C
293.2119 403.9258 L
293.0586 403.9453 L
292.9795 403.9551 285.0938 404.9434 283.416 405.4238 C
283.0264 404.0605 L
f*u
1 D
253.2383 486.1611 m
247.3193 484.1021 243.2109 478.5083 242.5156 471.562 c
242.4795 471.1968 242.4609 470.8413 242.4609 470.4971 c
242.4609 468.5957 243.0166 467.019 244.1201 465.8003 c
245.958 463.769 248.7256 463.3823 249.7773 463.3066 C
248.2852 460.0161 247.6182 457.0249 247.6182 454.2349 c
247.6182 448.2686 250.4336 443.1343 253.5254 437.4966 C
256.832 431.186 L
260.5205 423.4722 261.3564 417.1445 261.3564 410.0293 c
261.3564 407.3242 261.2354 404.5059 261.1045 401.4551 C
261.0127 399.2715 L
260.9629 398.0527 260.9404 396.8633 260.9404 395.7109 c
260.9404 385.3242 262.7627 377.9023 262.7832 377.8203 C
264.1582 378.1641 L
264.1387 378.2441 262.3574 385.5098 262.3574 395.7031 c
262.3574 396.8398 262.3799 398.0117 262.4287 399.2129 C
262.5205 401.3945 L
262.6533 404.4883 262.7764 407.3457 262.7764 410.0898 c
262.7764 417.3594 261.917 423.8384 258.1104 431.7974 C
254.7686 438.1782 L
251.7861 443.6162 249.0713 448.5659 249.0713 454.2686 c
249.0713 457.1626 249.7861 460.2563 251.5049 463.7012 C
252.4521 463.7373 253.5156 463.9263 254.6953 464.3193 c
259.1895 465.8179 261.7939 468.3447 262.6357 471.9922 C
263.123 472.207 263.6133 472.4131 264.0703 472.7437 c
266.3877 474.4175 267.7939 477.2305 267.9287 480.4624 c
267.9326 480.5596 267.9346 480.6563 267.9346 480.752 c
267.9346 482.6431 267.1465 484.2261 265.6426 485.3428 c
262.4092 487.7446 256.9453 487.4507 253.2383 486.1611 c
f0 D
245.165 466.7578 m
244.3096 467.7065 243.8789 468.9644 243.8789 470.5063 c
243.8789 470.8013 243.8945 471.106 243.9258 471.4214 c
244.5654 477.812 248.3115 482.9468 253.7041 484.8223 c
257.7539 486.231 262.4189 485.9717 264.7979 484.2046 c
265.9395 483.3564 266.5176 482.1963 266.5176 480.7534 c
266.5176 480.6768 266.5166 480.5991 266.5127 480.521 c
266.3965 477.7261 265.2041 475.3105 263.2412 473.8931 c
263.1309 473.813 263.0107 473.7832 262.8975 473.7114 C
262.9043 473.7935 262.9238 473.8672 262.9287 473.9502 c
262.9414 474.1748 262.9482 474.3921 262.9482 474.6025 c
262.9482 476.4111 262.459 477.6846 261.4912 478.3921 c
260.3926 479.1953 258.7861 479.1987 256.7168 478.4033 c
255.2305 477.8315 254.4111 476.7861 254.4668 475.5342 c
254.541 473.856 256.2109 472.2222 258.5264 471.5601 c
259.3184 471.334 260.1602 471.3813 261.0029 471.5181 C
260.0869 468.7944 257.915 466.8867 254.2471 465.6641 c
253.8223 465.5225 253.4629 465.4468 253.0938 465.3599 C
254.0176 466.4487 254.9746 467.938 254.9746 469.4824 c
254.9746 469.6938 254.957 469.9063 254.918 470.1187 c
254.6484 471.6001 253.6992 471.9678 253.1572 472.0552 c
251.5537 472.3135 249.2842 470.7549 248.0986 468.5811 c
247.7158 467.8794 247.5244 467.1919 247.5244 466.5601 c
247.5244 466.0122 247.7021 465.5225 247.9893 465.0864 C
247.0371 465.3721 245.9707 465.8647 245.165 466.7578 C
f258.916 472.9233 m
256.998 473.4707 255.9219 474.7095 255.8818 475.5972 c
255.8477 476.3828 256.5938 476.8374 257.2256 477.0801 c
258.3193 477.501 259.8018 477.8716 260.6553 477.2476 c
261.3516 476.7383 261.5303 475.6162 261.5303 474.5996 c
261.5303 474.4053 261.5244 474.2148 261.5137 474.0332 c
261.4912 473.6528 261.3594 473.3481 261.3018 472.9922 C
260.4863 472.7686 259.667 472.7085 258.916 472.9233 C
f249.2236 465.7368 m
249.0381 465.9585 248.9453 466.2427 248.9453 466.5698 c
248.9453 466.9624 249.0791 467.418 249.3428 467.9023 c
250.2842 469.627 252.0449 470.7988 252.9326 470.6558 c
253.0586 470.6353 253.3936 470.5815 253.5234 469.8647 c
253.5469 469.7378 253.5576 469.6079 253.5576 469.4771 c
253.5576 467.8428 251.8936 466.0229 250.8955 465.1304 C
250.0811 465.189 249.4971 465.4097 249.2236 465.7368 C
f*U
243.5234 518.0239 m
242.6816 517.0171 242.4141 515.7905 242.8076 514.7427 C
243.6973 512.9331 L
244.4951 511.4873 245.249 510.1221 244.7871 508.4282 C
244.2539 506.811 L
243.46 504.5908 242.4727 501.8281 245.7168 500.5801 c
247.792 499.7822 250.1797 500.1948 251.6572 501.6074 c
252.752 502.6538 253.1113 504.0601 252.6436 505.4658 c
252.1709 506.8843 251.5039 507.7798 250.6611 508.1289 c
249.8633 508.4595 249.2236 508.1606 249.1543 508.1255 C
249.7627 506.8462 L
249.7793 506.8525 249.9336 506.9072 250.1504 506.8057 c
250.3955 506.6909 250.8691 506.3062 251.2988 505.0176 c
251.6934 503.8345 251.0791 503.0151 250.6777 502.6318 c
249.6055 501.6069 247.7744 501.3071 246.2256 501.9033 c
244.4492 502.5859 244.6533 503.7188 245.5889 506.334 C
246.1543 508.0552 L
246.7676 510.3037 245.7959 512.0645 244.9385 513.6182 C
244.1348 515.2407 L
243.9199 515.813 244.0928 516.4956 244.6104 517.1157 c
245.2021 517.8232 246.4033 518.5566 247.8438 518.2944 c
250.2617 517.855 252.7627 515.8447 252.7627 513.2417 c
252.7627 510.4644 254.4385 509.0317 256.5615 507.2188 C
257.9941 505.9673 L
260.0234 504.1221 259.1641 500.9927 258.2539 497.6782 C
257.7832 495.9136 L
257.1865 493.5254 257.3564 491.2793 257.5059 489.2974 c
257.6182 487.8169 257.7236 486.4189 257.5205 485.0996 c
257.0898 482.2993 251.4775 478.9502 249.4707 478.9502 c
247.5254 478.9502 246.4209 479.79 246.4092 479.7983 C
245.5283 478.6885 L
245.5869 478.6411 247.001 477.5332 249.4707 477.5332 c
252.0859 477.5332 258.3584 481.2231 258.9209 484.8838 c
259.1494 486.3643 259.0371 487.8408 258.9189 489.4038 c
258.7705 491.3706 258.6172 493.4038 259.1582 495.5698 C
259.6201 497.3032 L
260.6035 500.8833 261.6211 504.5859 258.9473 507.0161 C
257.4824 508.2964 L
255.4932 509.9951 254.1797 511.1177 254.1797 513.2417 c
254.1797 516.7109 251.0459 519.1528 248.0977 519.689 c
246.4189 519.9941 244.623 519.3408 243.5234 518.0239 c
f248.0371 427.5542 m
248.0723 427.4263 251.5918 414.6621 255.0713 406.707 c
256.459 403.5371 258.8105 399.7754 261.2998 395.793 c
265.1514 389.6309 269.1338 383.2598 270.0234 378.3652 C
271.418 378.6191 L
270.4795 383.7813 266.4238 390.2695 262.502 396.543 c
260.041 400.4805 257.7158 404.1992 256.3701 407.2754 c
252.9316 415.1367 249.4395 427.8022 249.4043 427.9292 C
248.0371 427.5542 L
f242.7646 406.9336 m
243.0166 403.9082 245.4316 394.4668 245.5342 394.0664 C
246.9072 394.418 L
246.8828 394.5156 244.4189 404.1445 244.1768 407.0508 C
242.7646 406.9336 L
f248.5293 410.8379 m
249.9658 404.373 246.5898 395.0801 246.5557 394.9863 C
247.8857 394.4961 L
248.0313 394.8926 251.4404 404.2715 249.9131 411.1445 C
248.5293 410.8379 L
f248.418 413.4336 m
249.5244 412.5488 L
251.4404 414.9453 261.0371 421.8462 261.1338 421.9165 C
260.3076 423.0669 L
259.9063 422.7788 250.4551 415.9805 248.418 413.4336 C
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
