%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (839.ai)
%%CreationDate: 3/25/2002 6:32 PM
%%BoundingBox: 219 302 373 541
%%HiResBoundingBox: 219.8828 302.4795 372.9531 540.5894
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 7558 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC6F2026F827F826F827
%F826F827F826F827F826F827F826F827F826F827F826F827F826F827F820
%F827F820F827F820F827F820F827F820F827F820F827F820F827F820208C
%FD06FC99FFFD05FC6827F8527DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA1
%7D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D
%7DA17D7D7DA17D7D7DA17D7D7DA17D7D524BF86FFD05FCC2FFFD04FC8CF8
%27FD44FF7DF84AFD04FCBBFFFD04FC2727FD46FF7DF8B4FCFCFCC2FFFD04
%FCF8A8FD47FF2744FCFCFCBBFFFCFCFC6827FD48FF514BFCFCFCC2FFFCFC
%FC6EF8FD48FF5226FCFCFCBCFFFCFCFC6827FD48FF274BFCFCFCC2FFFCFC
%FC6EF8FD48FF5220FCFCFC99FFFCFCFC6827FD48FF274BFCFCFCC2FFFCFC
%FC6FF8FD48FF5220FCFCFCBBFFFCFCFC6827FD48FF4B4BFCFCFCC2FFFCFC
%FC68F8527DFD46FF5220FCFCFCBBFFFCFCFC6827F8F852FD45FF514BFCFC
%FCC2FFFCFCFC6EF8C650F8FD45FF5226FCFCFCBCFFFCFCFC6827C6C6F8FD
%45FF274BFCFCFCC2FFFCFCFC6EF8C6C6F87DFF4BFD42FF5220FCFCFC99FF
%FCFCFC6827C6C6F8A85227A8FD41FF274BFCFCFCC2FFFCFCFC6FF8C6C6F8
%FFF8522752FD40FF5220FCFCFCBBFFFCFCFC4427C67BF87DF87DF8A87DFD
%3FFF4B4BFCFCFCC2FFFCFCFC6EF89E20F8F87DF8522727FD3FFF5220FCFC
%FCBBFFFCFCFC68FD04F8277D27A8F8A87DA8FD3DFF514BFCFCFCC2FFFCFC
%FC6EFD06F85227277DF8FD3EFF5226FCFCFCBCFFFCFCFC68FD06F87DF8A8
%F8527DFD3DFF274BFCFCFCC2FFFCFCFC6EFD07F8277DF87DF8A8FD3CFF52
%20FCFCFC99FFFCFCFC68FD07F82727524B27FFA8FD3BFF274BFCFCFCC2FF
%FCFCFC6FFD09F8A8F8A82752FD3BFF5220FCFCFCBBFFFCFCFC68FD08F827
%2727A827A8FD3BFF4B4BFCFCFCC2FFFCFCFC68FD0AF8A82727A852FD3AFF
%5220FCFCFCBBFFFCFCFC68FD0AF87DF8FF2752FD3AFF514BFCFCFCC2FFFC
%FCFC6EFD0BF8527DF8A8A8FD39FF5226FCFCFCBCFFFCFCFC68FD0BF8A8FD
%0427FD39FF274BFCFCFCC2FFFCFCFC6EFD0BF827F87DF87DA8FD38FF5220
%FCFCFC99FFFCFCFC68FD0CF852F8522752FD38FF274BFCFCFCC2FFFCFCFC
%6FFD0CF827205120A8A8FD37FF5220FCFCFCBBFFFCFCFC68FD0DF87DF87D
%5227FD37FF4B4BFCFCFCC2FFFCFCFC68FD0DF82727CFF87DFD37FF5220FC
%FCFCBBFFFCFCFC68FD0EF8FF272752A8FD36FF514BFCFCFCC2FFFCFCFC6E
%FD0EF876F852F8A8FD36FF5226FCFCFCBCFFFCFCFC68FD0EF8274B27277D
%A8FD35FF274BFCFCFCC2FFFCFCFC6EFD0FF876F8A7F8A8FD2DFFA8A8FD06
%FF5220FCFCFC99FFFCFCFC68FD10F87DF852FD2CFFA827F8F827FD05FF27
%4BFCFCFCC2FFFCFCFC6FFD0FF8277DF8A8A8A8FD2AFF2726C69EF8A8FD04
%FF5220FCFCFCBBFFFCFCFC68FD10F82752A8F8A8FD2AFFF8A5C6C6F87DFD
%04FF4B4BFCFCFCC2FFFCFCFC68FD11F8FFF827FD2BFFF8C6C6C64B27FD04
%FF5220FCFCFCBBFFFCFCFC68FD10F8525127A8277DFD27FF527DF8C6C6C6
%4A527DFFFFFF514BFCFCFCC2FFFCFCFC6EFD12F87D52F8FD27FF527DF8F8
%9EC6C62727F87DFFFF5226FCFCFCBCFFFCFCFC68FD11F852A8F8A8FD26FF
%7D2727A8F851C6C6F82727277DFF274BFCFCFCC2FFFCFCFC6EFD11F87DF8
%525127FD25FFF852F8A176F8C674F8F827F8FF7D5220FCFCFC99FFFCFCFC
%68FD12F827A8F87DFD23FF27A852F82727A1F87427F827F8A82727274BFC
%FCFCC2FFFCFCFC6FFD12F87D2727A8A7FD22FF52F8FF2727F827FD05F820
%2727A8F820FCFCFCBBFFFCFCFC68FD12F852F8FFF852FD20FF2727FF2727
%FFF820FD08F8A827F84BFCFCFCC2FFFCFCFC68FD13F8A72727FD21FFCFF8
%527DF87D27FD09F827F85220FCFCFCBBFFFCFCFC68FD12F8277627A8FD20
%FF7D27A8F87D2727FD0BF8CAF827FCFCFCC2FFFCFCFC6EFD14F852A852FD
%1EFF7D52F85276F8A7FD0EF820FCFCFCBCFFFCFCFC68FD13F827FFF852FD
%1EFF7D2752F8A852FD0EF8274BFCFCFCC2FFFCFCFC6EFD13F85252F87D76
%FD1CFFF852272727F8A1FD0EF82720FCFCFC99FFFCFCFC68FD13F827F852
%2751FD1BFF527DF8A7F87DF827FD0FF84BFCFCFCC2FFFCFCFC6FFD14F827
%27F8FD1CFF272752F852F852FD10F820FCFCFCBBFFFCFCFC68FD14F852F8
%FF27A8FD19FF52A8274B272727FD11F84BFCFCFCC2FFFCFCFC68FD15F8A8
%52F8A8FD19FFF8277DF852F827FD11F820FCFCFCBBFFFCFCFC68FD14F827
%A8F876FD04FF7D272752FD11FFF8A1F85252F85227FD11F84BFCFCFCC2FF
%FCFCFC6EFD15F851F87DF8FFFF27F85150F84BFD10FF52F8A7F87627FD13
%F820FCFCFCBCFFFCFCFC68FD16F8A8F87DFFFFF89FC6C67427FD10FFA827
%7C7DF8A7FD13F84BFCFCFCC2FFFCFCFC6EFD15F8272727A8CF7DF8FD04C6
%F8A8FD0EFF272752F8FF52FD14F820FCFCFC99FFFCFCFC68FD15F8272752
%27F8A126FD04C6277D5252FD0BFF7DA8F852F852FF27FD13F84BFCFCFCC2
%FFFCFCFC6FFD16F82727F8F852F8FD04C6F852F87DF8FD0AFF2727A7F852
%F8A8FD14F820FCFCFCBBFFFCFCFC68FD16F827F8F82727F8A5C6C6C627F8
%52F852F8FD09FFA827527CF82727FD14F827FCFCFCC2FFFCFCFC68FD1BF8
%274AC6C6C6F82727F827277D7DFD06FFF87D7CF8A827FD16F820FCFCFCBB
%FFFCFCFC68FD16F827F827F8272727C6C650F820F87D277D2752FD06FF7D
%F8A82727A827FD15F827FCFCFCC2FFFCFCFC6EFD16F827F8F820F8F8F84B
%9EFD04F8272751F8A7F8FD04FF7D2727F8FFF85227FD15F820FCFCFCBCFF
%FCFCFC68FD16F827F82727FD04F827FD05F87DF8A8F85227FFFFFFA8277C
%2727A8FD17F827FCFCFCC2FFFCFCFC6EFD17F8A8FD0DF852FD0427FFFFA8
%5252F8A8F84B51FD16F820FCFCFC99FFFCFCFC68FD17F827FD0CF8207DF8
%52F87D27A8FFF87D27277D2727FD16F84BFCFCFCC2FFFCFCFC6FFD26F827
%2727202727277DF87DF85252FD17F820FCFCFCBBFFFCFCFC68FD26F852F8
%27F87CF8275252F8A7F87DFD17F827FCFCFCC2FFFCFCFC68FD27F84BF8A8
%F85227F85227F852FD18F820FCFCFCBBFFFCFCFC68FD28F8A1FD04277DF8
%522727FD18F827FCFCFCC2FFFCFCFC6EFD27F8207DF852F8F82752F852FD
%19F820FCFCFCBCFFFCFCFC68FD28F8FD042752F85252F827FD18F827FCFC
%FCC2FFFCFCFC6EFD29F852F8F8F852F8A827FD19F820FCFCFC99FFFCFCFC
%68FD2AF87DF8F82727F8FFFD19F84BFCFCFCC2FFFCFCFC6FFD2BF82752F8
%522726FD19F820FCFCFCBBFFFCFCFC68FD2BF8272727FD1CF827FCFCFCC2
%FFFCFCFC68FD2AF827F8F8A8F820FD1AF820FCFCFCBBFFFCFCFC68FD2AF8
%27F827F852F827FD19F827FCFCFCC2FFFCFCFC6EFD2BF827F8F8FF27FD1A
%F820FCFCFCBCFFFCFCFC68FD2EF827FD1BF827FCFCFCC2FFFCFCFC6EFD2D
%F827F827FD1AF820FCFCFC99FFFCFCFC68FD2CF852F851FD1BF84BFCFCFC
%C2FFFCFCFC6FFD2DF827FD1CF820FCFCFCBBFFFCFCFC68FD2CF8277DFD1C
%F827FCFCFCC2FFFCFCFC68FD2EF827FD1BF820FCFCFCBBFFFCFCFC68FD2E
%F827FD1BF827FCFCFCC2FFFCFCFC6EFD2DF827FD1CF820FCFCFCBCFFFCFC
%FC68FD2EF827FD1BF827FCFCFCC2FFFCFCFC6EFD4AF820FCFCFC99FFFCFC
%FC68FD4AF84BFCFCFCC2FFFCFCFC6FFD4AF820FCFCFCBBFFFCFCFC68FD4A
%F827FCFCFCC2FFFCFCFC68FD4AF820FCFCFCBBFFFCFCFC68FD4AF827FCFC
%FCC2FFFCFCFC6EFD4AF820FCFCFCBCFFFCFCFC68FD4AF827FCFCFCC2FFFC
%FCFC6EFD4AF820FCFCFC99FFFCFCFC68FD4AF84BFCFCFCC2FFFCFCFC6FFD
%4AF820FCFCFCBBFFFCFCFC68FD4AF827FCFCFCC2FFFCFCFC68FD4AF820FC
%FCFCBBFFFCFCFC68FD4AF827FCFCFCC2FFFCFCFC6EFD4AF820FCFCFCBCFF
%FCFCFC68FD4AF827FCFCFCC2FFFCFCFC6EFD4AF820FCFCFC99FFFCFCFC68
%FD4AF84BFCFCFCC2FFFCFCFC6FFD4AF820FCFCFCBBFFFCFCFC68FD4AF827
%FCFCFCC2FFFCFCFC68FD4AF820FCFCFCBBFFFCFCFC8CFD4AF86FFCFCFCC2
%FFFD04FCFD4AF88CFCFCFCBCFFFD04FC92FD48F844FD04FCC2FFFD05FC8C
%FD46F844FD05FC99FFFD07FC4427F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F84B8CFD06FCC2FFFD52FCBB
%FFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
372.9531 302.4795 m
219.8828 302.4795 L
219.8828 540.5894 L
372.9531 540.5894 L
372.9531 302.4795 L
fu0 0 0 0 k
227.7881 509.7012 m
227.7881 524.8682 l
228.7876 533.0342 237.1211 533.7012 v
355.2881 533.5347 l
364.2891 533.0347 365.1221 523.5347 v
365.1221 425.7012 l
344.9551 400.3672 l
332.2881 353.8672 l
319.2881 345.5342 l
300.2881 349.0342 l
252.7881 374.8672 l
245.7881 444.0347 l
227.9546 494.8682 l
227.7881 509.7012 l
f0 0.2 1 0 k
231.2881 493.2012 m
227.9551 495.8677 227.7881 498.2012 v
227.6211 500.5347 227.7881 510.2012 y
230.1216 511.2017 232.2881 509.8682 v
234.4546 508.5347 235.1216 497.7012 231.2881 493.2012 c
f283.1211 420.3677 m
278.4551 421.0356 278.2881 414.2012 v
278.1211 407.3672 283.1211 398.7012 y
285.6211 399.7012 l
287.7881 406.2012 l
288.4551 413.3682 287.7881 416.2012 v
287.1211 419.0342 284.7876 420.3677 283.1211 420.3677 c
f349.6221 458.5347 m
345.9561 458.2017 345.1221 453.3682 v
344.2881 448.5347 349.1221 439.7012 y
350.1221 439.2012 l
352.1221 443.2012 l
354.1211 448.0352 353.7881 452.8682 v
353.4551 457.7012 350.7891 458.8682 349.6221 458.5347 c
f*u
1 D
0.65 0.53 0.51 1 k
237.7095 534.2432 m
231.8481 534.2432 227.0796 529.4746 227.0796 523.6133 C
227.0796 319.4551 L
227.0796 313.5938 231.8481 308.8252 237.7095 308.8252 C
355.2012 308.8252 L
361.0625 308.8252 365.8311 313.5938 365.8311 319.4551 C
365.8311 523.6133 L
365.8311 529.4746 361.0625 534.2432 355.2012 534.2432 C
237.7095 534.2432 L
f0 D
228.4966 319.4551 m
228.4966 523.6133 L
228.4966 528.6934 232.6294 532.8262 237.7095 532.8262 C
355.2012 532.8262 L
360.2813 532.8262 364.4131 528.6934 364.4131 523.6133 C
364.4131 319.4551 L
364.4131 314.375 360.2813 310.2432 355.2012 310.2432 C
237.7095 310.2432 L
232.6294 310.2432 228.4966 314.375 228.4966 319.4551 C
f*U
227.5898 510.6421 m
228.3169 509.4253 L
228.4014 509.4756 230.4102 510.6318 231.9878 509.2515 c
232.7363 508.5967 233.373 506.4985 233.373 503.6802 c
233.373 500.9233 232.7114 497.4756 230.9995 494.019 C
230.1343 494.9746 228.7163 496.7744 228.4038 498.6514 C
227.0054 498.418 L
227.5396 495.2144 230.5957 492.3813 230.7256 492.2622 C
231.3896 491.6533 L
231.8252 492.4424 L
235.8906 499.811 235.3018 508.2349 232.9214 510.3179 c
230.5601 512.3843 227.7104 510.7144 227.5898 510.6421 C
f*u
1 D
279.4927 419.6709 m
277.938 418.2031 277.2666 415.7021 277.4976 412.2373 c
278.0112 404.5342 282.3032 400.6641 282.4858 400.5029 C
282.6865 400.3252 L
282.9546 400.3252 L
284.7666 400.3252 288.6069 402.998 288.9126 411.2578 c
289.2236 419.6533 285.0723 420.8276 283.7925 420.9878 c
283.0215 421.0845 281.0586 421.1489 279.4927 419.6709 c
f0 D
278.9116 412.3311 m
278.8848 412.7354 278.8711 413.125 278.8711 413.5 c
278.8711 415.8838 279.4155 417.6484 280.4658 418.6396 c
281.5933 419.7041 283.0449 419.6523 283.6167 419.5811 c
284.5552 419.4639 287.5122 418.5771 287.5122 412.1455 c
287.5122 411.877 287.5073 411.5986 287.4966 411.3105 c
287.2422 404.4424 284.4565 402.0576 283.1938 401.7959 C
282.3447 402.6758 279.3198 406.2109 278.9116 412.3311 C
f*U
*u
1 D
346.3926 457.353 m
345.3418 456.1631 344.2041 453.8257 344.752 449.4468 c
345.5195 443.3022 349.0234 439.2378 349.1719 439.0679 C
349.5322 438.6558 L
350.0215 438.9009 L
351.376 439.5781 354.1621 444.731 354.4131 450.001 c
354.5938 453.8081 354.0068 456.4507 352.668 457.855 c
351.9482 458.6104 351.0352 458.9932 349.9551 458.9932 c
348.5918 458.9932 347.3262 458.4106 346.3926 457.353 c
f0 D
346.1582 449.6226 m
346.0732 450.3062 346.0303 450.959 346.0303 451.5762 c
346.0303 453.6729 346.5186 455.354 347.4551 456.415 c
348.125 457.1743 348.9902 457.5762 349.9551 457.5762 c
350.6416 457.5762 351.1934 457.3472 351.6426 456.877 c
352.2959 456.1914 353.0283 454.6733 353.0283 451.3145 c
353.0283 450.9243 353.0186 450.5098 352.9971 450.0684 c
352.7852 445.625 350.793 441.8125 349.7939 440.5771 C
348.8652 441.8369 346.7168 445.1572 346.1582 449.6226 C
f*U
228.4546 496.3682 m
230.2881 493.3682 231.2046 492.7847 v
232.9551 496.7012 233.2881 498.0347 v
245.2046 485.5347 253.9546 461.2847 v
262.7046 437.0347 270.4546 397.0342 y
275.2881 401.7012 279.4546 405.7012 v
281.2881 402.2012 282.9546 401.5342 v
284.6211 400.8672 287.2881 402.8672 287.9546 407.3672 c
303.2891 394.3682 313.1221 354.7012 v
320.6221 414.0342 347.2881 443.5347 v
349.1211 440.8677 349.7881 440.2012 v
350.4551 439.5347 352.7881 444.5347 y
361.7881 437.3677 364.9551 426.7012 v
365.1221 318.3672 l
364.1221 309.8682 355.6221 309.7012 v
237.1211 309.3672 l
228.1211 309.7012 227.6211 320.0342 v
227.6211 494.7012 l
228.4546 496.3682 l
f238.8232 503.856 m
234.1567 494.6895 L
233.979 494.3408 234.1182 493.9141 234.4668 493.7368 c
234.8154 493.5591 235.2422 493.6982 235.4194 494.0469 C
240.0859 503.2134 L
240.2637 503.562 240.1245 503.9888 239.7759 504.166 c
239.4272 504.3438 239.0005 504.2046 238.8232 503.856 C
f241.6631 501.3687 m
239.606 497.52 236.4531 491.6519 236.1978 491.2603 c
235.9849 490.9336 236.0747 490.4941 236.3999 490.2793 c
236.7251 490.0645 237.1611 490.1504 237.3774 490.4751 c
237.7202 490.9888 242.3828 499.708 242.9131 500.7007 c
243.0977 501.0459 242.9673 501.4761 242.6221 501.6597 c
242.2769 501.8442 241.8467 501.7139 241.6631 501.3687 c
f243.8164 498.0098 m
238.9829 488.0098 L
238.813 487.6572 238.96 487.2329 239.3125 487.063 c
239.665 486.8931 240.0894 487.0405 240.2593 487.3926 C
245.0928 497.3926 L
245.2627 497.7451 245.1157 498.1694 244.7632 498.3394 c
244.4106 498.5093 243.9863 498.3618 243.8164 498.0098 C
f246.6646 494.5376 m
240.9976 484.0376 L
240.8115 483.6934 240.9409 483.2632 241.2847 483.0776 c
241.6289 482.8916 242.0591 483.021 242.2446 483.3647 C
247.9116 493.8647 L
248.0977 494.209 247.9683 494.6392 247.6245 494.8247 c
247.2803 495.0107 246.8501 494.8813 246.6646 494.5376 C
f248.4907 490.5254 m
242.4907 478.8589 L
242.312 478.5107 242.4492 478.084 242.7969 477.9043 c
243.145 477.7256 243.5718 477.8628 243.7515 478.2104 C
249.7515 489.877 L
249.9302 490.2251 249.793 490.6519 249.4453 490.8315 c
249.0972 491.0103 248.6704 490.873 248.4907 490.5254 C
f250.9937 486.3638 m
245.6606 476.1973 L
245.4785 475.8506 245.6118 475.4224 245.959 475.2407 c
246.3057 475.0586 246.7339 475.1919 246.9155 475.5391 C
252.2485 485.7056 L
252.4307 486.0522 252.2974 486.4805 251.9502 486.6621 c
251.6035 486.8442 251.1753 486.7109 250.9937 486.3638 C
f253.333 481.7085 m
246.6665 469.5415 L
246.4785 469.1982 246.604 468.7676 246.9478 468.5796 c
247.291 468.3916 247.7217 468.5171 247.9097 468.8608 C
254.5762 481.0278 L
254.7642 481.3706 254.6387 481.8018 254.2949 481.9897 c
253.9517 482.1777 253.521 482.0522 253.333 481.7085 C
f255.0142 477.4009 m
248.6812 466.9009 L
248.479 466.5654 248.5874 466.1304 248.9219 465.9277 c
249.2573 465.7256 249.6924 465.834 249.895 466.1685 C
256.228 476.6685 L
256.4302 477.0039 256.3218 477.439 255.9873 477.6416 c
255.6519 477.8438 255.2168 477.7354 255.0142 477.4009 C
f256.6895 473.7476 m
250.356 463.7476 L
250.1465 463.4165 250.2451 462.9785 250.5752 462.7695 c
250.9063 462.5601 251.3442 462.6587 251.5532 462.9888 C
257.8867 472.9888 L
258.0962 473.3198 257.9976 473.7573 257.6675 473.9668 c
257.3364 474.1763 256.8984 474.0776 256.6895 473.7476 C
f259.0142 469.7339 m
250.6812 455.9004 L
250.479 455.5649 250.5874 455.1299 250.9224 454.9277 c
251.2578 454.7256 251.6929 454.834 251.895 455.1689 C
260.228 469.0024 L
260.4302 469.3379 260.3218 469.7729 259.9868 469.9751 c
259.6514 470.1772 259.2163 470.0688 259.0142 469.7339 C
f260.0127 465.0645 m
252.8462 453.0645 L
252.6455 452.7285 252.7559 452.293 253.0913 452.0928 c
253.4272 451.8921 253.8628 452.0024 254.063 452.3379 C
261.2295 464.3379 L
261.4302 464.6738 261.3198 465.1094 260.9844 465.3096 c
260.6484 465.5103 260.2129 465.3999 260.0127 465.0645 C
f261.8428 461.2256 m
254.3428 448.3921 L
254.1455 448.0542 254.2588 447.6201 254.5972 447.4229 c
254.9351 447.2256 255.3691 447.3389 255.5664 447.6772 C
263.0664 460.5107 L
263.2637 460.8486 263.1504 461.2827 262.812 461.48 c
262.4741 461.6772 262.04 461.564 261.8428 461.2256 C
f263.7085 455.2754 m
255.0415 442.9419 L
254.8164 442.6221 254.8936 442.1802 255.2139 441.9546 c
255.5337 441.73 255.9756 441.8071 256.2007 442.1274 C
264.8677 454.4604 L
265.0928 454.7808 265.0156 455.2227 264.6953 455.4478 c
264.3755 455.6729 263.9336 455.5957 263.7085 455.2754 C
f265.3594 450.7524 m
256.8594 437.5854 L
256.647 437.2568 256.7417 436.8179 257.0703 436.606 c
257.3989 436.3936 257.8379 436.4883 258.0498 436.8169 C
266.5498 449.9839 L
266.7622 450.3125 266.6675 450.7515 266.3389 450.9634 c
266.0103 451.1758 265.5713 451.0811 265.3594 450.7524 C
f266.3701 445.269 m
258.3701 433.6021 L
258.1489 433.2793 258.2314 432.8384 258.5537 432.6167 c
258.8765 432.3955 259.3174 432.478 259.5391 432.8003 C
267.5391 444.4673 L
267.7603 444.79 267.6777 445.231 267.3555 445.4526 c
267.0327 445.6738 266.5918 445.5913 266.3701 445.269 C
f267.8813 440.2852 m
258.5479 427.4517 L
258.3179 427.1348 258.3877 426.6914 258.7041 426.4614 c
259.021 426.2314 259.4644 426.3013 259.6943 426.6177 C
269.0278 439.4512 L
269.2578 439.7681 269.188 440.2114 268.8716 440.4414 c
268.5547 440.6714 268.1113 440.6011 267.8813 440.2852 C
f268.3599 433.4199 m
260.6934 421.5874 L
260.4805 421.2583 260.5747 420.8198 260.9028 420.6069 c
261.2314 420.394 261.6699 420.4878 261.8828 420.8159 C
269.5493 432.6494 L
269.7622 432.978 269.668 433.4165 269.3398 433.6294 c
269.0112 433.8423 268.5728 433.748 268.3599 433.4199 C
f270.0586 429.6318 m
261.8921 418.9648 L
261.6538 418.6543 261.7129 418.209 262.0239 417.9717 c
262.3345 417.7334 262.7793 417.793 263.0171 418.1035 C
271.1836 428.7705 L
271.4219 429.0811 271.3628 429.5259 271.0518 429.7637 c
270.7412 430.002 270.2964 429.9429 270.0586 429.6318 C
f271.0239 424.2495 m
262.1909 410.415 L
261.98 410.0859 262.0767 409.6475 262.4067 409.4365 c
262.7368 409.2266 263.1748 409.3223 263.3853 409.6523 C
272.2183 423.4868 L
272.4292 423.8169 272.3325 424.2549 272.0024 424.4653 c
271.6724 424.6763 271.2344 424.5796 271.0239 424.2495 C
f272.0288 419.0908 m
264.0288 406.9238 L
263.814 406.5967 263.9048 406.1572 264.2319 405.9424 c
264.5586 405.7266 264.9985 405.8184 265.2134 406.1445 C
273.2134 418.3115 L
273.4282 418.6387 273.3374 419.0781 273.0103 419.293 c
272.6836 419.5088 272.2437 419.417 272.0288 419.0908 C
f273.0464 413.2822 m
265.7134 403.1162 L
265.4844 402.7979 265.5562 402.3555 265.8735 402.126 c
266.1909 401.8975 266.6338 401.9688 266.8628 402.2861 C
274.1958 412.4521 L
274.4248 412.7705 274.353 413.2129 274.0356 413.4424 c
273.7183 413.6709 273.2754 413.5996 273.0464 413.2822 C
f275.2422 408.9863 m
265.5752 397.3193 L
265.3257 397.0176 265.3677 396.5713 265.6689 396.3213 c
265.9702 396.0723 266.417 396.1133 266.6665 396.415 C
276.3335 408.082 L
276.5835 408.3838 276.5415 408.8301 276.2402 409.0801 c
275.939 409.3291 275.4922 409.2881 275.2422 408.9863 C
f273.8755 414.1992 m
273.5083 414.0635 273.3208 413.6563 273.4565 413.2891 C
277.4565 402.4561 L
277.5918 402.0889 277.9995 401.9004 278.3667 402.0361 c
278.7339 402.1719 278.9214 402.5791 278.7856 402.9463 C
274.7856 413.7793 L
274.6504 414.1465 274.2427 414.335 273.8755 414.1992 c
f270.9956 413.0127 m
270.6392 412.8506 270.481 412.4307 270.6426 412.0742 C
276.3091 399.5742 L
276.4707 399.2178 276.8906 399.0605 277.2471 399.2217 c
277.6035 399.3838 277.7617 399.8037 277.6001 400.1602 C
271.9336 412.6602 L
271.772 413.0166 271.3521 413.1738 270.9956 413.0127 c
f269.3892 410.7041 m
269.019 410.5752 268.8232 410.1719 268.9517 409.8018 C
273.2852 397.3018 L
273.4131 396.9326 273.8169 396.7363 274.1865 396.8643 c
274.5566 396.9932 274.7524 397.3965 274.624 397.7666 C
270.2905 410.2666 L
270.1626 410.6357 269.7588 410.832 269.3892 410.7041 c
f292.0293 413.4238 m
287.1963 406.0908 L
286.981 405.7646 287.0713 405.3252 287.3979 405.1094 c
287.7251 404.8945 288.1646 404.9844 288.3799 405.3115 C
293.2129 412.6445 L
293.4282 412.9707 293.3379 413.4102 293.0112 413.626 c
292.6841 413.8408 292.2446 413.751 292.0293 413.4238 C
f294.7061 411.7715 m
289.0391 403.6055 L
288.8159 403.2832 288.8955 402.8418 289.2173 402.6191 c
289.5386 402.3955 289.98 402.4756 290.2031 402.7969 C
295.8701 410.9629 L
296.0933 411.2852 296.0137 411.7266 295.6919 411.9492 c
295.3706 412.1729 294.9292 412.0928 294.7061 411.7715 C
f296.6616 409.6992 m
290.6616 398.3662 L
290.4785 398.0195 290.6099 397.5908 290.9565 397.4082 c
291.3022 397.2246 291.731 397.3564 291.9146 397.7021 C
297.9146 409.0352 L
298.0977 409.3818 297.9663 409.8105 297.6196 409.9932 c
297.2739 410.1768 296.8452 410.0449 296.6616 409.6992 C
f299.5293 407.2559 m
292.1958 396.0898 L
291.981 395.7627 292.0718 395.3232 292.3989 395.1084 c
292.7261 394.8936 293.166 394.9854 293.3804 395.3125 C
300.7148 406.4785 L
300.9297 406.8057 300.8379 407.2451 300.5107 407.46 c
300.1836 407.6748 299.7441 407.583 299.5293 407.2559 C
f302.0313 404.2578 m
294.8638 393.4248 L
294.6475 393.0986 294.7373 392.6592 295.0635 392.4434 c
295.3901 392.2275 295.8291 392.3174 296.0454 392.6436 C
303.2129 403.4766 L
303.4287 403.8027 303.3398 404.2422 303.0127 404.458 c
302.6865 404.6738 302.2471 404.585 302.0313 404.2578 C
f303.8477 401.9004 m
296.5142 389.7334 L
296.312 389.3975 296.4199 388.9629 296.7554 388.7607 c
297.0903 388.5586 297.5254 388.666 297.728 389.001 C
305.0625 401.168 L
305.2637 401.5039 305.1563 401.9385 304.8213 402.1416 c
304.4854 402.3428 304.0508 402.2354 303.8477 401.9004 C
f306.2236 398.9629 m
297.2241 387.1299 L
296.9873 386.8184 297.0474 386.374 297.3589 386.1367 c
297.6704 385.9004 298.1152 385.9609 298.3521 386.2725 C
307.3525 398.1055 L
307.5889 398.417 307.5283 398.8613 307.2168 399.0986 c
306.9053 399.335 306.4609 399.2744 306.2236 398.9629 C
f308.1797 396.5635 m
299.3457 381.7295 L
299.1455 381.3936 299.2559 380.959 299.5928 380.7588 c
299.9287 380.5576 300.3633 380.668 300.5645 381.0049 C
309.3965 395.8389 L
309.5977 396.1748 309.4873 396.6094 309.1504 396.8096 c
308.8145 397.0107 308.3799 396.9004 308.1797 396.5635 C
f309.1797 392.2305 m
301.5137 379.3975 L
301.3125 379.0615 301.4229 378.626 301.7588 378.4258 c
302.0947 378.2256 302.5303 378.335 302.7305 378.6709 C
310.3965 391.5039 L
310.5977 391.8398 310.4873 392.2754 310.1514 392.4756 c
309.8154 392.6768 309.3799 392.5664 309.1797 392.2305 C
f311.3828 388.2861 m
301.3828 374.6201 L
301.1523 374.3037 301.2207 373.8604 301.5361 373.6289 c
301.8525 373.3984 302.2959 373.4668 302.5273 373.7822 C
312.5273 387.4482 L
312.7578 387.7646 312.6895 388.208 312.373 388.4395 c
312.0576 388.6699 311.6143 388.6016 311.3828 388.2861 C
f313.0371 384.2666 m
303.7031 370.6006 L
303.4824 370.2773 303.5645 369.8369 303.8887 369.6162 c
304.2119 369.3955 304.6523 369.4775 304.873 369.8018 C
314.207 383.4678 L
314.4277 383.791 314.3457 384.2314 314.0215 384.4521 c
313.6982 384.6729 313.2578 384.5908 313.0371 384.2666 C
f314.7031 380.2666 m
305.0371 366.1006 L
304.8164 365.7773 304.8994 365.3359 305.2227 365.1162 c
305.5459 364.8955 305.9873 364.9785 306.207 365.3018 C
315.873 379.4678 L
316.0938 379.791 316.0107 380.2324 315.6875 380.4521 c
315.3643 380.6729 314.9229 380.5898 314.7031 380.2666 C
f315.5684 374.1426 m
305.7344 361.8086 L
305.4902 361.5029 305.54 361.0576 305.8467 360.8135 c
306.1523 360.5693 306.5977 360.6191 306.8418 360.9258 C
316.6758 373.2598 L
316.9199 373.5654 316.8701 374.0107 316.5635 374.2549 c
316.2578 374.499 315.8125 374.4492 315.5684 374.1426 C
f308.7461 364.1582 m
308.4941 363.8594 308.5322 363.4121 308.8311 363.1592 C
314.165 358.6592 L
314.4639 358.4072 314.9111 358.4453 315.1641 358.7441 c
315.416 359.043 315.3779 359.4902 315.0791 359.7432 C
309.7451 364.2432 L
309.4463 364.4951 308.999 364.457 308.7461 364.1582 c
f305.3076 375.3877 m
305.0195 375.1221 305.002 374.6738 305.2676 374.3867 C
315.2676 363.5537 L
315.5332 363.2656 315.9814 363.248 316.2686 363.5137 c
316.5566 363.7793 316.5742 364.2275 316.3086 364.5146 C
306.3086 375.3477 L
306.043 375.6357 305.5947 375.6533 305.3076 375.3877 c
f305.6973 381.4346 m
305.5117 381.2949 305.4131 381.082 305.4131 380.8662 c
305.4131 380.7188 305.46 380.5693 305.5547 380.4424 C
314.6123 368.3662 315.2266 367.5469 V
314.6221 366.7871 309.7334 360.6426 Y
309.6299 360.5117 309.5791 360.3564 309.5791 360.2012 c
309.5791 359.9932 309.6709 359.7861 309.8467 359.6465 c
310.1533 359.4033 310.5996 359.4541 310.8428 359.7598 C
317.0176 367.5215 L
306.6895 381.292 L
306.4541 381.6055 306.0098 381.6689 305.6973 381.4346 c
f307.5176 387.0918 m
307.21 386.8496 307.1563 386.4043 307.3975 386.0967 C
319.5645 370.5967 L
319.8066 370.2891 320.252 370.2354 320.5596 370.4766 c
320.8672 370.7188 320.9209 371.1641 320.6797 371.4717 C
308.5127 386.9717 L
308.2705 387.2793 307.8252 387.333 307.5176 387.0918 c
f308.8701 391.9395 m
308.5547 391.709 308.4854 391.2656 308.7158 390.9492 C
319.0498 376.7832 L
319.2803 376.4678 319.7236 376.3984 320.04 376.6289 c
320.3555 376.8594 320.4248 377.3027 320.1943 377.6191 C
309.8604 391.7852 L
309.6299 392.1006 309.1865 392.1699 308.8701 391.9395 c
f309.1475 396.0605 m
308.8564 395.7988 308.834 395.3506 309.0957 395.0596 C
319.7617 383.2266 L
320.0234 382.9355 320.4717 382.9131 320.7627 383.1748 c
321.0537 383.4365 321.0762 383.8848 320.8145 384.1758 C
310.1484 396.0088 L
309.8867 396.2998 309.4385 396.3223 309.1475 396.0605 c
f311.0156 399.9229 m
310.708 399.6797 310.6563 399.2344 310.8994 398.9277 C
320.3994 386.9277 L
320.6426 386.6201 321.0879 386.5684 321.3945 386.8115 c
321.7021 387.0547 321.7539 387.5 321.5107 387.8066 C
312.0107 399.8066 L
311.7676 400.1143 311.3223 400.166 311.0156 399.9229 c
f312.5439 404.1113 m
312.2246 403.8838 312.1504 403.4414 312.3779 403.123 C
321.8779 389.79 L
322.1055 389.4717 322.5479 389.3965 322.8662 389.624 c
323.1846 389.8516 323.2598 390.2939 323.0322 390.6123 C
313.5322 403.9453 L
313.3047 404.2637 312.8623 404.3389 312.5439 404.1113 c
f313.3486 408.4238 m
313.042 408.1807 312.9893 407.7354 313.2314 407.4277 C
325.7314 391.5947 L
325.9746 391.2881 326.4199 391.2354 326.7275 391.4775 c
327.0342 391.7207 327.0869 392.166 326.8447 392.4736 C
314.3447 408.3066 L
314.1016 408.6133 313.6563 408.666 313.3486 408.4238 c
f315.5439 412.7783 m
315.2246 412.5508 315.1504 412.1084 315.3779 411.79 C
326.5449 396.123 L
326.7725 395.8037 327.2148 395.7295 327.5332 395.957 c
327.8525 396.1846 327.9268 396.627 327.6992 396.9453 C
316.5322 412.6123 L
316.3047 412.9316 315.8623 413.0059 315.5439 412.7783 c
f317.6865 415.9258 m
317.3779 415.6855 317.3223 415.2402 317.5635 414.9316 C
328.7295 400.5986 L
328.9697 400.29 329.415 400.2344 329.7236 400.4756 c
330.0322 400.7158 330.0879 401.1611 329.8467 401.4697 C
318.6807 415.8027 L
318.4404 416.1113 317.9951 416.167 317.6865 415.9258 c
f319.1084 421.3198 m
318.7666 421.1274 318.6455 420.6958 318.8369 420.355 C
328.6699 402.8545 L
328.8623 402.5127 329.2939 402.3916 329.6348 402.583 c
329.9766 402.7754 330.0977 403.207 329.9063 403.5479 C
320.0732 421.0483 L
319.8809 421.3901 319.4492 421.5112 319.1084 421.3198 c
f320.6611 424.0732 m
320.3643 423.8188 320.3291 423.3716 320.583 423.0737 C
330.416 411.5732 L
330.6709 411.2764 331.1182 411.2412 331.416 411.4951 c
331.7129 411.75 331.748 412.1973 331.4941 412.4951 C
321.6602 423.9951 L
321.4063 424.2925 320.959 424.3276 320.6611 424.0732 c
f322.8564 427.7627 m
322.5459 427.5244 322.4873 427.0791 322.7266 426.769 C
332.7266 413.7695 L
332.9648 413.459 333.4102 413.4004 333.7197 413.6396 c
334.0303 413.8779 334.0879 414.3232 333.8496 414.6328 C
323.8496 427.6333 L
323.6113 427.9434 323.166 428.0015 322.8564 427.7627 c
f324.7002 430.771 m
324.3857 430.5381 324.3193 430.0942 324.5527 429.7798 C
333.5527 417.6123 L
333.7852 417.2979 334.2285 417.2314 334.5439 417.4648 c
334.8584 417.6973 334.9248 418.1406 334.6914 418.4561 C
325.6914 430.6226 L
325.459 430.937 325.0156 431.0034 324.7002 430.771 c
f327.4248 433.6431 m
327.0889 433.4424 326.9785 433.0073 327.1797 432.6714 C
334.8467 419.8379 L
335.0479 419.502 335.4824 419.3916 335.8184 419.5928 c
336.1543 419.7939 336.2637 420.229 336.0635 420.5649 C
328.3965 433.3979 L
328.1953 433.7339 327.7607 433.8438 327.4248 433.6431 c
f329.2061 435.9419 m
328.8896 435.7124 328.8184 435.269 329.0479 434.9521 C
337.3809 423.4526 L
337.6113 423.1353 338.0537 423.0649 338.3711 423.2944 c
338.6875 423.5239 338.7588 423.9673 338.5293 424.2842 C
330.1963 435.7842 L
329.9658 436.1011 329.5234 436.1719 329.2061 435.9419 c
f331.0137 439.7554 m
330.707 439.5112 330.6572 439.0659 330.9004 438.7593 C
339.4004 428.0933 L
339.6445 427.7871 340.0908 427.7363 340.3965 427.9805 c
340.7031 428.2241 340.7529 428.6704 340.5098 428.9761 C
332.0098 439.6431 L
331.7656 439.9487 331.3193 439.9995 331.0137 439.7554 c
f334.2314 442.959 m
333.9043 442.7432 333.8154 442.3037 334.0313 441.9771 C
341.1973 431.1436 L
341.4131 430.8174 341.8525 430.7275 342.1787 430.9438 c
342.5059 431.1597 342.5947 431.5991 342.3789 431.9258 C
335.2129 442.7593 L
334.9971 443.0854 334.5576 443.1753 334.2314 442.959 c
f337.3848 445.9512 m
337.0635 445.7285 336.9824 445.2871 337.2051 444.9653 C
343.5391 435.7983 L
343.7617 435.4761 344.2031 435.3955 344.5254 435.6182 c
344.8467 435.8408 344.9277 436.2822 344.7051 436.604 C
338.3711 445.771 L
338.1484 446.0928 337.707 446.1738 337.3848 445.9512 c
f339.9473 448.1558 m
339.6045 447.9678 339.4785 447.5371 339.667 447.1938 C
345.334 436.8604 L
345.5215 436.5171 345.9531 436.3916 346.2959 436.5796 c
346.6387 436.7681 346.7646 437.1987 346.5762 437.542 C
340.9092 447.8755 L
340.7217 448.2188 340.29 448.3442 339.9473 448.1558 c
f341.7021 449.9341 m
341.4824 449.6104 341.5654 449.1694 341.8887 448.9492 C
345.5557 446.4492 L
345.8789 446.2285 346.3203 446.312 346.541 446.6353 c
346.7607 446.959 346.6777 447.3999 346.3545 447.6201 C
342.6875 450.1201 L
342.3643 450.3408 341.9229 450.2573 341.7021 449.9341 c
f356.5303 449.5908 m
352.0303 442.7578 L
351.8154 442.4312 351.9053 441.9922 352.2324 441.7764 c
352.5596 441.561 352.998 441.6514 353.2139 441.9785 C
357.7139 448.8115 L
357.9287 449.1382 357.8389 449.5771 357.5117 449.793 c
357.1846 450.0083 356.7461 449.918 356.5303 449.5908 C
f358.5146 447.5659 m
354.0146 440.0659 L
353.8135 439.73 353.9219 439.2949 354.2578 439.0933 c
354.5928 438.8921 355.0283 439.001 355.2295 439.3364 C
359.7295 446.8364 L
359.9307 447.1724 359.8223 447.6074 359.4863 447.8091 c
359.1514 448.0103 358.7158 447.9014 358.5146 447.5659 C
f361.2559 444.0029 m
355.0898 437.0029 L
354.832 436.7095 354.8594 436.2612 355.1533 436.0029 c
355.4473 435.7441 355.8955 435.7725 356.1543 436.0664 C
362.3203 443.0664 L
362.5781 443.3599 362.5508 443.8081 362.2568 444.0664 c
361.9629 444.3252 361.5146 444.2969 361.2559 444.0029 C
f364.0742 441.6509 m
356.4072 432.3179 L
356.1592 432.0156 356.2031 431.5693 356.5049 431.3208 c
356.8076 431.0723 357.2539 431.1157 357.5029 431.4185 C
365.1699 440.7515 L
365.418 441.0537 365.374 441.5 365.0723 441.7485 c
364.7695 441.9971 364.3232 441.9536 364.0742 441.6509 C
f364.6299 435.8779 m
359.7959 431.2109 L
359.5146 430.939 359.5068 430.4907 359.7783 430.209 c
360.0498 429.9272 360.499 429.9194 360.7803 430.1914 C
365.6143 434.8584 L
365.8955 435.1304 365.9033 435.5786 365.6318 435.8604 c
365.3604 436.1421 364.9111 436.1499 364.6299 435.8779 C
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
