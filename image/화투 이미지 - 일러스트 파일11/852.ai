%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (852.ai)
%%CreationDate: 3/25/2002 6:34 PM
%%BoundingBox: 221 304 375 544
%%HiResBoundingBox: 221.1514 304.9795 374.2217 543.0894
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13724 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD08FC444B204B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B204A68FD07
%FC99FFFD05FC8C4BF8272752515227525152275251522752515227525152
%275251522752515227525152275251522752515227525152275251522752
%515227525152275251522752515227272093FD05FCC2FFFD05FC20F8A8FD
%42FFA827F88CFD04FCBBFFFD04FC4BF8FD46FF2720FD04FCC2FFFD04FCF8
%7DFD46FFA8F868FCFCFCBBFFFCFCFC8C27FD28FF7D27F852FD1CFF274BFC
%FCFCC2FFFCFCFC6EF8FD27FF52FD04F827FD1BFF5226FCFCFCBCFFFCFCFC
%6827FD26FFA8FD06F8A8FD1AFF274BFCFCFCC2FFFCFCFC6EF8FD26FF7DFD
%06F827FD1AFF5220FCFCFC99FFFCFCFC6827FD26FF51FD06F852FD1AFF27
%4BFCFCFCC2FFFCFCFC6FF8FD26FF52FD06F827FD1AFF5220FCFCFCBBFFFC
%FCFC6827FD26FF52FD06F87CFD1AFF4B4BFCFCFCC2FFFCFCFC68F8FD26FF
%CFFD06F8A8FD1AFF5220FCFCFCBBFFFCFCFC6827FD20FF7D7DA8FD04FF4B
%FD04F827FD1BFF514BFCFCFCC2FFFCFCFC6EF8FD1EFF7DFD04F827FFFFFF
%A8FD04F8A8FFFFFFA827FD04F87DFD11FF5226FCFCFCBCFFFCFCFC6827FD
%1EFFFD07F8FFFFFFA82727FD04FFA8FD07F8A8FD10FF274BFCFCFCC2FFFC
%FCFC6EF8FD1EFFFD07F827FFFFFFF87DFD04FFFD08F87DFD10FF5220FCFC
%FC99FFFCFCFC6827FD1EFFFD07F827A8FFFF277DFFFFFFA8FD08F8A8FD10
%FF274BFCFCFCC2FFFCFCFC6FF8FD1EFF52FD08F827A8F87DFFA72727FD07
%F851FD11FF5220FCFCFCBBFFFCFCFC6827FD1FFF52F8F8F8274BFFA827F8
%F82027F8275252FD05F87DFD12FF4B4BFCFCFCC2FFFCFCFC68F8FD21FF7D
%A7FD05FFA8F8277DFD05FF7D7DA8FD14FF5220FCFCFCBBFFFCFCFC6827FD
%29FF277DFD1DFF514BFCFCFCC2FFFCFCFC6EF8FD29FFF87DFD1DFF5226FC
%FCFCBCFFFCFCFC6827FD29FF277DFD1DFF274BFCFCFCC2FFFCFCFC6EF8FD
%28FFA7F827FD1DFF5220FCFCFC99FFFCFCFC6827FD20FF7DA1A8FFFFFFA8
%52F827F827A8FD1BFF274BFCFCFCC2FFFCFCFC6FF8FD1EFF52FD04F827FF
%52F8F8A8F87D27F851FD1AFF5220FCFCFCBBFFFCFCFC6827FD1DFF7CFD07
%F82752FFFF277DFF7D27F8A8FFFFA8A8FD14FF4B4BFCFCFCC2FFFCFCFC68
%F8FD1DFFFD08F8A8FFFFFFF87DFFFFA827F827FD04F827A8FD08FFA852F8
%27A1FD04FF5220FCFCFCBBFFFCFCFC6827FD1DFF27FD06F852FD04FF277D
%FD04FFA8FD07F87DFD06FFA827F8F8F8277DFFFFFF514BFCFCFCC2FFFCFC
%FC6EF8FD1DFF27FD05F827FD05FFF87DFD05FF27FD07F8A8FD05FF27FD05
%F827FFFFFF5226FCFCFCBCFFFCFCFC6827FD1EFF27F8F8277DFD06FF277D
%FD05FF7DFD07F827FD05FFFD07F8FFFFFF274BFCFCFCC2FFFCFCFC6EF8FD
%29FFF87DFD06FF52FD06F852FD04FFA8FD07F87CFFFF5220FCFCFC99FFFC
%FCFC6827FD28FFA82727FD07FFA852F8F8F852FD05FFA1FD07F8A8FFFF27
%4BFCFCFCC2FFFCFCFC6FF8FD27FF7DF8F827F87DFD0BFFA77DA8FFFF7DFD
%07F8FFFFFF5220FCFCFCBBFFFCFCFC6827FD26FF52F852277D7DF8277DFD
%08FF27F8F8F8277DFFFD06F827FFFFFF4B4BFCFCFCC2FFFCFCFC68F8FD1F
%FF7D7D7DFFFFFF27F87DFFF87DFFFF27F8277D7DFD04FF52FD06F8A827FD
%05F852FFFFFF5220FCFCFCBBFFFCFCFC6827FD1CFFA852FD05F827F827A8
%FFFF277DFFFFFFA827F8F8F82752FF27FD06F827A827F8F8F827A8FFFFFF
%514BFCFCFCC2FFFCFCFC6EF8FD1CFF27FD08F8FD04FFF87DFD04FF27FD05
%F82727FD07F8FF7D27F8F852FFFFFF512026FCFCFCBCFFFCFCFC6827FD1B
%FF7CFD08F827FD04FF277DFD04FF52FD06F826FD07F87DFFFF2752FFFF7D
%F8F8F84BFCFCFCC2FFFCFCFC6EF8FD0BFF7D27F82752FD0BFF27FD08F87D
%FD04FFF87DFD04FF7DFD0EF87DFFFFF87DFF7DFD04F820FCFCFC99FFFCFC
%FC6827FD0AFF7DFD05F827FD0AFF52FD07F827FD05FF277DFD05FFFD07F8
%A8FD06F87DFFFF277DFFFD05F84BFCFCFCC2FFFCFCFC6FF8FD0AFF27FD06
%F8A7FD09FFA820FD05F852FD06FFF87DFD05FFA7FD05F827FFA7FD05F852
%FFFFF87D7DFD05F820FCFCFCBBFFFCFCFC6827FD0AFFFD07F87DFD0AFFA8
%52272752A8FD07FF2752FD07FF52272727A8FFFFFF7D524B7DF827FF277D
%27FD05F84BFCFCFCC2FFFCFCFC68F8FD09FF7DFD07F87DFD15FF7C27F8F8
%4BFD0AFFCF52527DFD04FFCFF827F84BFD06F820FCFCFCBBFFFCFCFC6827
%FD09FF7DFD07F8A8FD09FFA85127F82752FD05FF27275127522727FD08FF
%7DFD05F8FD05FFF8F8F8A87D52F827274BFCFCFCC2FFFCFCFC6EF8FD0AFF
%FD06F827FD09FF52FD07F8A7FF52F827A7FFF87DA827F87DFD05FFA8FD07
%F8FD04FFA8F87DFD04FF512726FCFCFCBCFFFCFCFC6827FD0AFF27FD05F8
%A8FD09FFFD0BF87DFFFFFF277DFFFF52F8F8F82727A87DFD08F8FD04FFF8
%FFFFFFA8F8F8F84BFCFCFCC2FFFCFCFC6EF8FD0BFFFD04F87DFD09FF7CFD
%09F820FD05FFF87DFFFFFFFD06F852FD08F87CFFFFFFF8FFFFCFFD04F820
%FCFCFC99FFFCFCFC6827FD0CFFF827A8FD0AFFA1FD09F8A8FD05FFF8FD04
%FFFD07F827FD07F84BFFFFFFF8FFFF27FD04F84BFCFCFCC2FFFCFCFC6FF8
%FD0CFF277DFD0BFFA8FD08F87DFD05FFA8F8FD04FFFD08F827FD07F8FFFF
%7DF8FFFF27FD04F820FCFCFCBBFFFCFCFC6827FFFF2727277CFD06FF277D
%FD0CFF7D27F8F8F82727FD05FFA827F8F827FFFFFF27FD07F8A852FD05F8
%27F8FF7D27A852FD05F84BFCFCFCC2FFFCFCFC68F8FFFD06F8A8FD04FF27
%52FD0EFF7D7DA7FD06FF27F8277DF8F8F8FFFFCFFD07F8FFFFFF7D527CFF
%A827F87DF8F8F8A8FD04F820FCFCFCBBFFFCFCFC682752FD06F827FD04FF
%2752FD10FF524BF8F8F827F827A8FF7D27FF4BF8A8FFFF27FD04F87DFD09
%FF27F82776FD05FF514BFCFCFCC2FFFCFCFC6EF852FD07F87DFFFFFF5227
%FD05FFA87D52A7FD05FF76FD07F827FFFFFF7DF8FFFF51F8A7FFFFFF7D7D
%FFFF52F8F827A7FD04FFA8F827FD06FF5226FCFCFCBCFFFCFCFC682752FD
%07F827FFFFFF2752FD04FF52FD04F827A8FFFF7CFD08F827FFFFFF5227FF
%FFFF7DF827F8277DFFFF7DFD05F87CFD04FF2752FD06FF274BFCFCFCC2FF
%FCFCFC6EF8FFFD08F8FFFFFF5227FFFFFF52FD06F852FFFFFD09F8A7FFFF
%FF5227FD04FF27FD05F8A7FD07F8A8FFFFFF277CFD06FF5220FCFCFC99FF
%FCFCFC6827FFFF27FD06F827A8FF2752FFFFA827FD06F852FF7DFD08F852
%FD04FF2752FD04FF27FD06F827FD06F827FFFFFFF8A1FD06FF274BFCFCFC
%C2FFFCFCFC6FF8FFFFFFA852275252FF27F8525227FFFF7DFD07F8A8FF7D
%FD07F827FD05FF2752FD04FF76FD0EF8FFFFFFF8A8FD06FF5220FCFCFCBB
%FFFCFCFC6827FD0AFF7D27F827FFFF4BFD06F852FFFFFF27FD05F827FD06
%FF277DFD05FF27FD06F827FD06F8FFFFFFF8FD07FF4B4BFCFCFCC2FFFCFC
%FC68F8FF5227F82751A8FD04FFA827F8FFFF52FD05F87DFD04FFA84BF827
%2052A8FD06FF277DFD05FF7DFD06F8FF7D4BFD04F827FF7C27FD07FF5220
%FCFCFCBBFFFCFCFC68277DFD06F87DFD04FF7D27FFFF2727F84B52FD08FF
%A8FD05F8A8FD04FFF8FD07FFA827F8F8F87DFD06FFA827277D27FD07FF51
%4BFCFCFCC2FFFCFCFC6EF827FD07F87DFFFFFFA8F8FF52F8A8FD0BFFFD07
%F8A8FFFFFFF8FD08FF7D7D7DFD09FF7DF8F852FD04FFA852F82726FCFCFC
%BCFFFCFCFC6827FD09F8FD04FFF87DF852FD0CFFFD08F8FFFFA8F8FD06FF
%52FD05F852FD08FF7CF827FFFFFF7D27F8F8F84BFCFCFCC2FFFCFCFC6EF8
%27FD08F852FFFFFFF8F827FD06FFA8275252FFFFFFFD08F87DFF7D27FD05
%FF52FD07F87DFD08FFF87DFFFFA8FD05F820FCFCFC99FFFCFCFC6827A827
%FD07F827FFFFFF2727FD06FFA1FD05F8A8FF27FD07F8A1FF7DF8FD04FFA8
%FD08F827FD08FFF8A8FFFF52FD05F84BFCFCFCC2FFFCFCFC6FF8FF7D20FD
%07F851A8FFF876FD06FFFD07F8A852FD08F8A82727FFFF7D52FD09F827FD
%07FFA8F8FFFFFFFD06F820FCFCFCBBFFFCFCFC6827FFFFA85227F8F8277D
%A8F8277D5227FD05FF7DFD07F827FF7D27F8F8F8275252F8272727F82727
%52FD08F852FD07FF7D27FFFFFFFD06F84BFCFCFCC2FFFCFCFC68F8FD0BFF
%4BF8F827FD05FF7DFD07F827FD09FF7DF82051A7FFFFFF7DFD05F8277DFD
%08FF5227FFFFFFFD06F820FCFCFCBBFFFCFCFC6827FD0CFFA827F8FD05FF
%A8FD07F827FD0AFF277DFD15FF2752FFFFFF27FD05F84BFCFCFCC2FFFCFC
%FC6EF8FD0DFFA8F8FD06FFFD07F827FD0AFFF87DFD15FFF87DFFFFFF27FD
%05F826FCFCFCBCFFFCFCFC6827FD0EFFF8A8FD05FF7DFD06F852FD0AFFF8
%FD16FFF8FD04FFA8FD05F84BFCFCFCC2FFFCFCFC6EF8FD0EFF2752FD06FF
%76FD05F8FD04FFA7275252FFFFFFF8FD15FF4BF852FD04FF52F8F8275220
%FCFCFC99FFFCFCFC6827FD0CFF2727F8F8F87DFD05FFA82727F8A8FFFFA8
%27FD04F827FF7D27FD14FF27F8F8F827FFFFFF7627FFFF274BFCFCFCC2FF
%FCFCFC6FF8FD0BFF27FD06F8277DFD05FF2752FFFFFF27FD06F8A77DF8FD
%13FF7DFD05F87DFFFF2727FFFF5220FCFCFCBBFFFCFCFC6827FD0BFF27FD
%07F827FD05FF7CF8FFFF7DFD07F87D2727FD04FF7C5227527CFD0AFF52FD
%05F852FFFFF87DFFFF4B4BFCFCFCC2FFFCFCFC68F8FD0BFFFD09F876FD04
%FF7DF8FFFF27FD07F87D52F827274BFD07F852FD08FF27FD05F827FFA1F8
%FFFFFF5220FCFCFCBBFFFCFCFC6827FD0BFF52FD08F827FD05FFF8A8FF27
%FD07F8FF27527D5227FD08F84BFD07FF52FD05F852FF5227FFFFA1F84BFC
%FCFCC2FFFCFCFC6EF8FD0BFFA827FD08F827FD04FF2752FFFD07F87DFF27
%7DFFFF7DFD09F8A8FD06FFA7FD05F852FFF876FF52F8F826FCFCFCBCFFFC
%FCFC6827FD0CFFA852FD05F8527D27F852A8FF4B52FF27FD05F87CFFFFF8
%7DFFFFFF27FD08F827FD04FF7D7D7D27FD04F8A8A8F8A8FFF8F8F84BFCFC
%FCC2FFFCFCFC6EF8FD0FFF7D7D7CA8FFFFFF7DF8F8277CF8FFFD05F8A8FF
%FFFFF8FD04FF7DFD08F87DFFFFA8FD05F827F8F827FF76F8FF7CF8F8F820
%FCFCFC99FFFCFCFC6827FD18FF7D27F8F852277D7DA8FD05FFF8FD05FF7D
%27FD05F827FFFFFF52FD05F852A8F8FFFF2752A827F8F8F84BFCFCFCC2FF
%FCFCFC6FF8FD1AFF7DF8F87DFD07FF7D27FD07FFA85252277DFD04FFFD07
%F8FFF87DFFF827F820F8F8F820FCFCFCBBFFFCFCFC6827FD07FF7D27F8F8
%52A8FD05FF27272752A8FD04FF2726FD08FF7DF8FD10FF27FD06F8FF2752
%52F8277DFFA827F84BFCFCFCC2FFFCFCFC68F8FD06FFA8FD05F827FD04FF
%FD06F852FFFFFF4B27FD04FF5227F8522727FD10FF27FD06F8FF27522727
%FD05FF5220FCFCFCBBFFFCFCFC6827FD06FF27FD06F87DFFFF52FD06F827
%A8FFFFA8F8FFFFFF51FD04F82727FD10FF7DFD06F8FF7D26F8A8FD05FF51
%4BFCFCFCC2FFFCFCFC6EF8FD06FF27FD06F827FFFF52FD07F876FFFFFFF8
%7DFFA8FD06F827FD11FF27FD04F827FF7DF8F8FFFFFF5220F8F826FCFCFC
%BCFFFCFCFC6827FD06FF27FD06F827FFFF7DFD07F827FFFFFF2752FF7DFD
%07F8FD0EFFA8527DA827F8F8F8A8FFFFF876FFFF52FD04F84BFCFCFCC2FF
%FCFCFC6EF8FD06FF52FD07F8FFFFFF27FD07F852FFFF52F8FF7DFD06F827
%FD0DFF7DFD04F8527DF852FFFF7DF8FFFF7DFD05F820FCFCFC99FFFCFCFC
%6827FD06FFA8FD06F852FD04FF51FD05F85227F87DA8F8FF7DFD06F852FD
%0DFFFD06F87D277DFFFF2727FFFF52FD05F84BFCFCFCC2FFFCFCFC6FF8FD
%07FF52FD05F852FFFFFF5252527D2776A8FFFF52F827F87DA8FD06F8FD0D
%FF7DFD06F8272752FFA8F8A8FFFFFD06F820FCFCFCBBFFFCFCFC6827FD08
%FF7C27F8F827FFFFFFFD05F8FD06FFA827F827FF4BFD04F87DFD0DFF52FD
%07F8524BFF2727FFFF5220FD05F84BFCFCFCC2FFFCFCFC68F8FD0AFFCFF8
%4BFFFF27FD05F827FD07FF27F8FFFFF8F8F876FF7D27527DFD09FF27FD07
%F82752A8F87D76F8F82727FD04F820FCFCFCBBFFFCFCFC6827FD0BFFA1F8
%FFFFFD06F827FD08FFF8A8A8F852A8FF52FD04F827FD08FFA1FD07F85227
%52F827277DFFFFFFA87DA1514BFCFCFCC2FFFCFCFC6EF8FD0CFFF87DA7FD
%07F8FD08FF275152F8FFFF7DFD06F87DFD07FFA7FD06F8207D27F8277DFD
%05FFA87DA85226FCFCFCBCFFFCFCFC6827FFFFFFA82727277DFD04FF2752
%7DFD06F852FD08FF7C27F8A8FFFF27FD06F852FD08FFFD06F8277DF827FD
%05FF7DFD05F84BFCFCFCC2FFFCFCFC6EF8FFFF76FD05F827A8FFFF52F8FF
%FD06F8A1FD09FFF827FFFFFF27FD06F852FD08FFA7FD05F87D52F8A1FD04
%FF7DFD06F820FCFCFC99FFFCFCFC6827FFFFFD07F827FFFFA8F8A827FD04
%F852FD0AFF2727FFFFFFFD07F8A8FD09FFA827F8F84BFF2727FD05FFFD07
%F84BFCFCFCC2FFFCFCFC6FF8FFFFFD08F8A8FFFFF8767DF8F8F827FD04FF
%A7275252FFFFFF52F8FFFFFF52FD05F827FD05FF7DF8F8F827A8FFA8F8A7
%A8F8A8FD04FF27FD07F820FCFCFCBBFFFCFCFC6827FFFFFD08F827FFFF7C
%27FFF852A8FD04FF27FD05F87CFFFFF87DFFFFA8FD05F8A8FD04FFA8FD05
%F827FFFF277D2727FFFFFF7D27FD08F84BFCFCFCC2FFFCFCFC68F8FFFF52
%FD07F827FFFFA8F852F8FD05FF7DFD07F87DFF52F8FFFFFF51F8F8F87DFD
%05FF27FD06F8A8FF4B27F8A8FF52F8F8527D27FD05F82720FCFCFCBBFFFC
%FCFC6827FFFFFF4BFD07F8FFFFFF272751FD05FF27FD08F8FFA8F8A8FFFF
%FFF852FD07FF52FD06F852FF5127277DF82752FD05FF7D7D7DFF514BFCFC
%FCC2FFFCFCFC6EF8FD04FF51FD06F827A8FF52F8A8FD05FF52FD08F87DFF
%2727FFFF7DF8FD08FF27FD06F852FF52F8F8F876FD0BFF5226FCFCFCBCFF
%FCFCFC6827FD05FFA8525227A8A827F82752F8A8FD05FFA8FD08F87DFFA8
%F8FFFF5227FD08FF7CFD06F84BFFF8F852FD0DFF274BFCFCFCC2FFFCFCFC
%6EF8FD0CFFCF4B27F827FD06FF52FD08F8A7FF2727FFF87DFD08FFA8FD06
%F85252F8A8FD0EFF2720FCFCFC99FFFCFCFC6827FD0FFF7DF8FD07FF7D4B
%F8F8F8272752F84B7DF87DF8A8FD05FF7DA8FFFF52FD05F87D2776FD05FF
%7D27F827277DFFFFA827F84BFCFCFCC2FFFCFCFC6FF8FD07FFA87D7DFD06
%FFF852FD0EFFA8F8F8F827F8FD04FF76F8F8F820A8FF5227F8F82752F8FD
%05FFFD07F87DA8F8F8F820FCFCFCBBFFFCFCFC6827FD06FF27FD04F852A8
%FFFFFF5227FD08FF7D2727277DFFFFFF7D27F852FD04FFFD05F827FD04FF
%277DF87DFD04FFFD08F82727F8F8F827FCFCFCC2FFFCFCFC68F8FD05FF27
%FD06F827A8FFFFFFF87DFD06FF52FD05F87DFD04FF2727FFFFFF7DFD06F8
%FD04FF4BF827FD04FF4BFD08F827FD04F820FCFCFCBBFFFCFCFC6827FD05
%FFFD08F852FFFFFF52F8FD05FFA8FD06F827FD04FFA8F8A8FFFF7DFD06F8
%FD04FF52F8A8FFFFFFA827FD07F82727FD04F827FCFCFCC2FFFCFCFC6EF8
%FD05FFFD09F8FFFFFFA8F87DFD04FF52FD07F8FD05FF2727FFFF7DFD06F8
%FD04FF2727FFA75227FD08F8277DFD05F826FCFCFCBCFFFCFCFC6827FD05
%FF52FD08F87CFFFFFF4B27FD04FF27FD06F827FD06FFF87DFFA8FD06F8FF
%FFFF7DF852F8F8277DA8FF7D524B5252A8FF76FD05F84BFCFCFCC2FFFCFC
%FC6EF8FD06FF27FD07F8277DFFFFFFF87DFFFFFF52FD06F852FD06FF76F8
%CFFF27FD05F8FFFFFFF8F8277DFD0CFFF8F8F827272720FCFCFC99FFFCFC
%FC6827FD07FF7DFD05F82727F8F87DFF52F8FFFFFFA8FD05F827FD08FF27
%27FFA827F8F8F87DFFFF5127FD0EFFF827FD04FF274BFCFCFCC2FFFCFCFC
%6FF8FD09FFA77D7DFFFFFFA852F82052F852FFFFFFFD04F852FD04FF7D27
%7DFFFF7DF87DFFFF51F87DFFFFA7F87DFD0DFF2727A8FD04FF5220FCFCFC
%BBFFFCFCFC6827FD12FF5227F8F8FFFFFF27277DA8FFFFFF7D27F8F8F827
%FFFF4B27FFFF7D27FFFFFF2727FD0DFF27F87CFFFFFF7D52274BFCFCFCC2
%FFFCFCFC8CF8FD14FF7DF852FFA8F8CFFD04FFA8FD06F852FFFFF852FF7D
%F8FFFF52F8CFFD0CFF7CF8F827FD06F844FCFCFCBBFFFD04FC277DFD14FF
%7DF8FF2727FD05FF52FD06F827FFFF7DF8A87DF8FFA8F87DFD0CFFA82752
%FFFFFF7D27F8F8F893FCFCFCC2FFFD04FC2027A8FD14FF2727F87DFD05FF
%FD07F852FFFFFF27F8FFF8FFF851FD0CFFA82027FD05FF52F8F820FD04FC
%BCFFFD05FCF827A8FD13FF7DF8F8FD06FFFD06F827A8FD04FF2727F85227
%A8FD0CFF2727FD07FFF8F88CFD04FCC2FFFD06FC20F8F852275227522752
%275227522752275227522752F8F8275227522752FD06F827522752275227
%F8F8F82752275227522752275227522727F852275227522727F8278CFD05
%FC99FFFD07FC8C6F204B444B204B444B204B444B204B444B204B444B204B
%444B204B444B204B444B204B444B204B444B204B204B204B444B204B444B
%204B444B204B444B204B444B4493FD07FCC2FFFD52FCBBFFFD52FCC2FFFD
%52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
374.2217 304.9795 m
221.1514 304.9795 L
221.1514 543.0894 L
374.2217 543.0894 L
374.2217 304.9795 L
fu0 0 0 0 k
229.1865 525.7012 m
229.1865 323.3672 l
228.6865 312.7012 240.5195 312.7012 v
252.3525 312.7012 356.8535 312.5342 y
366.1875 312.5332 366.3535 323.3672 v
366.5195 334.2012 366.3535 525.7012 y
366.8535 534.3682 356.6865 535.5347 v
346.5195 536.7012 238.6865 535.7012 y
230.0195 535.2012 229.1865 525.7012 v
f*u
1 D
0.65 0.53 0.51 1 k
239.1074 536.2432 m
233.2461 536.2432 228.4775 531.4746 228.4775 525.6133 C
228.4775 322.4551 L
228.4775 316.5938 233.2461 311.8252 239.1074 311.8252 C
356.2656 311.8252 L
362.127 311.8252 366.8955 316.5938 366.8955 322.4551 C
366.8955 525.6133 L
366.8955 531.4746 362.127 536.2432 356.2656 536.2432 C
239.1074 536.2432 L
f0 D
229.8945 322.4551 m
229.8945 525.6133 L
229.8945 530.6934 234.0273 534.8262 239.1074 534.8262 C
356.2656 534.8262 L
361.3457 534.8262 365.4775 530.6934 365.4775 525.6133 C
365.4775 322.4551 L
365.4775 317.375 361.3457 313.2432 356.2656 313.2432 C
239.1074 313.2432 L
234.0273 313.2432 229.8945 317.375 229.8945 322.4551 C
f*U
307.6865 508.5347 m
302.4365 511.2847 302.4365 518.7847 v
302.4365 526.2847 307.1865 527.5347 309.1865 527.5347 c
311.1865 527.5347 316.1865 525.2847 314.6865 516.7847 c
313.1865 508.2847 307.6865 508.5347 y
f300.9365 503.7847 m
299.9365 509.0347 295.4365 511.0347 v
290.9365 513.0347 286.9365 510.5347 286.4365 508.2847 c
285.9365 506.0347 286.9365 501.0347 292.4365 500.2847 c
297.9365 499.5347 300.9365 503.7847 y
f317.6865 502.2847 m
317.1865 509.0347 323.4365 510.7847 v
329.6865 512.5347 332.1865 509.7847 332.9365 508.0347 c
333.6865 506.2847 332.9365 502.5347 327.4365 500.7847 c
321.9365 499.0347 318.9365 501.2847 317.6865 502.2847 c
f298.9365 485.7847 m
295.4365 490.7847 290.1865 489.2847 v
284.9365 487.7847 284.4365 483.7847 285.4365 481.2847 c
286.4365 478.7847 289.9365 477.0347 294.4365 479.5347 c
298.9365 482.0347 298.9365 485.7847 y
f319.9365 484.0347 m
324.9365 487.0347 330.1865 484.2847 v
335.4365 481.5347 335.6865 478.7847 334.9365 477.0347 c
334.1865 475.2847 330.4365 473.0347 324.6865 476.2847 c
318.9365 479.5347 319.9365 484.0347 y
f298.1865 467.0347 m
292.9365 470.0347 287.1865 468.2847 v
281.4365 466.5347 281.1865 461.5347 282.4365 459.2847 c
283.6865 457.0347 288.6865 454.7847 294.1865 458.5347 c
299.6865 462.2847 298.9365 467.2847 298.1865 467.0347 c
f319.4365 468.5347 m
324.6865 469.7847 329.4365 466.2847 v
334.1865 462.7847 332.6865 458.2847 330.1865 456.7847 c
327.6865 455.2847 323.1865 456.7847 320.6865 459.7847 c
318.1865 462.7847 319.4365 468.5347 y
f296.1865 448.0347 m
292.9365 454.0347 285.4365 453.0347 v
277.9365 452.0347 278.1865 446.5347 278.6865 444.7847 c
279.1865 443.0347 281.6865 438.7847 289.1865 441.2847 c
296.6865 443.7847 296.1865 448.0347 y
f298.6865 437.7847 m
294.9365 440.0347 286.9365 437.2847 v
278.9365 434.5347 280.1865 428.2847 281.1865 426.7847 c
282.1865 425.2847 287.6865 422.2847 293.6865 427.7847 c
299.6865 433.2847 298.6865 437.7847 y
f316.6865 449.0347 m
314.4365 443.2847 319.1865 439.2847 v
323.9365 435.2847 328.9365 437.2847 329.9365 438.5347 c
330.9365 439.7847 331.4365 443.7847 327.4365 447.2847 c
323.4365 450.7847 317.6865 450.2847 316.6865 449.0347 c
f316.9365 433.7847 m
315.9365 428.5347 320.1865 424.7847 v
324.4365 421.0347 328.4365 422.0347 329.6865 423.7847 c
330.9365 425.5347 331.4365 429.2847 326.6865 432.2847 c
321.9365 435.2847 318.1865 435.0347 316.9365 433.7847 c
f299.6865 413.7842 m
300.4365 419.7842 295.4365 422.7847 v
290.4365 425.7847 285.4365 423.0347 284.6865 420.7847 c
283.9365 418.5342 284.4365 412.5342 290.1865 411.5342 c
295.9365 410.5342 299.6865 412.7842 299.6865 413.7842 c
f315.4365 413.2842 m
316.1865 419.0342 322.1865 420.2847 v
328.1865 421.5347 331.6865 418.2842 331.9365 415.5342 c
332.1865 412.7842 331.4365 410.2842 324.9365 409.5342 c
318.4365 408.7842 316.1865 411.0342 315.4365 413.2842 c
f254.4365 445.0347 m
248.1865 448.5347 248.9365 454.7847 v
249.6865 461.0347 253.4365 463.0347 257.1865 462.2847 c
260.9365 461.5347 263.4365 458.0347 262.1865 453.2847 c
260.9365 448.5347 255.4365 445.2847 254.4365 445.0347 c
f246.6865 431.0347 m
246.4365 438.5347 241.4365 440.7847 v
236.4365 443.0347 233.4365 441.2847 232.1865 438.7847 c
230.9365 436.2847 231.6865 431.7847 236.9365 429.7847 c
242.1865 427.7847 246.1865 429.5347 246.6865 431.0347 c
f247.9365 414.7842 m
247.6865 421.7847 241.6865 424.2847 v
235.6865 426.7847 232.1865 424.5347 231.4365 421.7847 c
230.6865 419.0342 231.1865 414.7842 237.1865 412.2842 c
243.1865 409.7842 247.6865 413.2842 247.9365 414.7842 c
f261.9365 423.7847 m
259.9365 429.5347 264.6865 433.5347 v
269.4365 437.5347 274.1865 435.0347 275.1865 433.2847 c
276.1865 431.5347 275.9365 427.5347 271.4365 425.0347 c
266.9365 422.5347 263.4365 422.5347 261.9365 423.7847 c
f268.4365 392.0342 m
269.4365 397.2842 262.9365 400.2842 v
256.4365 403.2842 252.9365 400.2842 251.9365 398.7842 c
250.9365 397.2842 250.9365 390.7842 258.1865 388.7842 c
265.4365 386.7842 268.4365 391.2842 268.4365 392.0342 c
f278.4365 400.0342 m
271.6865 401.5342 269.9365 406.7842 v
268.1865 412.0342 270.4365 416.5342 274.4365 417.2842 c
278.4365 418.0342 282.9365 415.0342 283.6865 410.2842 c
284.4365 405.5342 280.6865 399.7842 278.4365 400.0342 c
f352.1865 464.7847 m
345.1865 467.0347 345.6865 475.0347 v
346.1865 483.0347 349.6865 484.7847 352.9365 484.5347 c
356.1865 484.2847 359.6865 481.0347 358.6865 474.2847 c
357.6865 467.5347 354.4365 464.0347 352.1865 464.7847 c
f345.4365 458.5347 m
347.1865 463.2847 344.4365 468.2847 v
341.6865 473.2847 335.9365 473.7847 333.4365 471.2847 c
330.9365 468.7847 330.4492 462.5811 336.6865 458.7847 c
342.4365 455.2847 345.4365 457.5347 345.4365 458.5347 c
f366.1865 466.0347 m
363.4365 466.0347 360.9365 464.2847 y
356.4365 461.2847 356.1865 454.7847 y
359.9365 451.5347 366.1865 453.2847 v
366.1865 466.0347 l
f366.1865 451.2847 m
357.1865 449.7847 357.4365 442.0347 y
359.4365 437.7847 366.1865 439.2847 v
366.1865 451.2847 l
f344.9365 442.5347 m
345.9365 447.2847 340.4365 452.0347 v
334.9365 456.7847 330.6865 452.7847 329.6865 452.0347 c
328.6865 451.2847 326.9473 445.1279 334.6865 441.5347 c
341.6865 438.2847 344.9365 442.5347 y
f342.6865 424.7847 m
337.9365 423.5347 333.4365 426.0347 v
328.9365 428.5347 328.9365 433.0347 331.4365 435.2847 c
333.9365 437.5347 338.1865 437.0347 341.4365 433.0347 c
344.6865 429.0347 343.9365 424.5347 342.6865 424.7847 c
f365.9365 420.7847 m
362.9365 422.2847 357.9365 420.7847 355.6865 414.0342 c
353.4365 407.2842 359.4365 401.5342 y
364.4365 402.0342 366.1865 406.2842 v
365.9365 420.7847 l
f347.6865 386.7842 m
343.4365 387.2842 341.6865 393.0342 v
339.9365 398.7842 343.4365 401.5342 345.6865 402.2842 c
347.9365 403.0342 351.9365 401.5342 352.1865 395.0342 c
352.4365 388.5342 348.9365 386.2842 347.6865 386.7842 c
f366.1865 393.5342 m
359.9365 392.7842 360.1865 385.0342 y
362.1865 382.0342 365.9365 381.5342 v
366.1865 393.5342 l
f341.4365 372.7842 m
335.1865 374.2842 333.9365 379.7842 v
332.6865 385.2842 334.1865 388.5342 338.4365 389.0342 c
342.6865 389.5342 344.9365 387.0342 345.6865 381.7842 c
346.4365 376.5342 342.4365 372.5342 341.4365 372.7842 c
f365.9365 376.7842 m
362.9365 378.5342 358.9365 375.2842 v
354.9365 372.0342 355.9365 366.7842 y
359.6865 362.0342 366.1865 365.2842 v
365.9365 376.7842 l
f310.1865 393.7842 m
309.1865 387.7842 316.6865 385.0342 v
324.1865 382.2842 327.1865 386.2842 327.6865 388.7842 c
328.1865 391.2842 325.9365 395.0342 320.1865 396.5342 c
314.4365 398.0342 310.1865 395.5342 310.1865 393.7842 c
f285.6865 387.2842 m
283.4365 392.7842 286.6865 398.0342 v
289.9365 403.2842 295.9365 403.2842 297.9365 401.0342 c
299.9365 398.7842 300.6865 394.2842 296.4365 390.2842 c
292.1865 386.2842 287.1865 386.0342 285.6865 387.2842 c
f275.6865 372.2842 m
276.9365 378.5342 271.9365 381.2842 v
266.9365 384.0342 262.4365 381.2842 261.6865 379.0342 c
260.9365 376.7842 261.4365 372.0342 267.6865 370.0342 c
273.9365 368.0342 275.6865 372.2842 y
f293.9365 364.5342 m
288.6865 368.0342 289.6865 374.5342 v
290.6865 381.0342 295.9365 380.7842 298.1865 380.0342 c
300.4365 379.2842 303.6865 375.7842 301.4365 370.7842 c
299.1865 365.7842 296.1865 363.5342 293.9365 364.5342 c
f252.1865 366.2842 m
245.4365 365.7842 243.1865 372.2842 v
240.9365 378.7842 244.1865 382.0342 246.6865 382.5342 c
249.1865 383.0342 255.1865 382.7842 255.6865 375.0342 c
256.1719 367.5117 252.1865 366.2842 y
f261.6865 353.0342 m
257.1865 356.0342 258.4365 362.5342 v
259.6865 369.0342 264.4365 369.5342 266.9365 368.5342 c
269.4365 367.5342 272.1865 364.2842 269.9365 359.2842 c
267.6865 354.2842 263.9365 352.2842 261.6865 353.0342 c
f249.9365 347.5342 m
251.1865 354.7842 245.9365 358.2842 v
240.6865 361.7842 235.6865 359.0342 234.6865 356.5342 c
233.6865 354.0342 234.6865 349.2842 240.1865 346.2842 c
245.6865 343.2842 249.1865 346.2842 249.9365 347.5342 c
f257.1865 327.5342 m
256.9365 334.2842 252.1865 337.0342 v
247.4365 339.7842 242.6865 338.7842 240.6865 335.2842 c
238.6865 331.7842 241.6865 327.5342 246.9365 325.7842 c
252.1865 324.0342 255.9365 326.2842 257.1865 327.5342 c
f278.6865 323.2842 m
274.9365 328.0342 276.6865 332.7842 v
278.4365 337.5342 283.9365 339.0342 286.9365 336.7842 c
289.9365 334.5342 290.9365 330.2842 287.1865 326.7842 c
283.4365 323.2842 280.6865 322.2842 278.6865 323.2842 c
f288.4365 343.5342 m
289.1865 350.2842 283.4365 353.0342 v
277.6865 355.7842 273.6865 352.7842 272.6865 349.7842 c
271.6865 346.7842 273.4365 342.0342 279.6865 340.7842 c
285.9365 339.5342 288.1865 342.0342 288.4365 343.5342 c
f302.1865 349.0342 m
297.6865 352.5342 298.1865 358.0342 v
298.6865 363.5342 302.6865 366.0342 305.9365 365.2842 c
309.1865 364.5342 312.1865 361.7842 310.4365 356.5342 c
308.6865 351.2842 304.4365 348.7842 302.1865 349.0342 c
f335.1865 355.0342 m
328.1865 355.5342 326.9365 363.0342 v
325.6865 370.5342 328.9365 374.2842 332.1865 374.2842 c
335.4365 374.2842 339.9365 371.7842 339.9365 365.2842 c
339.9365 358.7842 337.4365 355.0342 335.1865 355.0342 c
f327.9365 338.7842 m
321.4365 337.7842 319.4365 344.7842 v
317.4365 351.7842 320.9365 354.7842 323.9365 355.0342 c
326.9365 355.2842 330.0068 354.8623 331.4365 348.2842 c
332.6865 342.5342 330.1865 338.7842 327.9365 338.7842 c
f366.1865 359.5342 m
362.9365 362.0342 358.1865 360.2842 v
353.4365 358.5342 351.9365 352.2842 y
354.1865 349.7842 359.1865 349.2842 v
364.1865 348.7842 365.6865 352.0342 365.9365 352.7842 c
366.1865 359.5342 l
f314.4365 324.5342 m
308.6865 326.0342 308.1865 332.5342 v
307.6865 339.0342 311.1865 340.5342 313.4365 340.5342 c
315.6865 340.5342 319.6865 340.0342 319.6865 333.0342 c
319.6865 326.0342 316.4365 324.0342 314.4365 324.5342 c
f340.6865 332.7842 m
341.1865 338.5342 347.4365 340.7842 v
353.6865 343.0342 357.6865 340.2842 357.9365 337.7842 c
358.1865 335.2842 356.4365 331.7842 351.1865 330.7842 c
345.9365 329.7842 341.4365 330.5342 340.6865 332.7842 c
f288.4365 312.5342 m
287.9365 318.0342 290.6865 321.2842 v
293.4365 324.5342 298.1865 325.2842 300.6865 322.2842 c
303.1865 319.2842 301.6865 313.7842 296.6865 312.7842 c
288.4365 312.5342 l
f366.4365 342.5342 m
357.4365 340.2842 356.4365 328.2842 y
359.1865 326.0342 366.1865 329.7842 v
366.4365 342.5342 l
f361.6865 314.7842 m
359.1865 317.7842 359.4365 320.5342 y
362.1865 323.126 366.1865 322.4551 v
366.9365 317.7842 362.9365 315.1592 v
361.6865 314.7842 l
f343.3789 313.2217 m
344.4941 312.3467 L
349.9229 319.2568 357.8984 328.7324 357.9785 328.8281 C
356.8945 329.7402 L
356.8145 329.6455 348.8232 320.1514 343.3789 313.2217 C
f350.6865 320.8252 m
353.8184 320.8252 360.2129 319.3584 360.2773 319.3438 C
360.5957 320.7246 L
360.3271 320.7871 353.9795 322.2432 350.6865 322.2432 C
350.6865 320.8252 L
f350.0303 374.3018 m
345.0801 362.1738 333.3271 341.3389 327.6787 331.3262 C
327.5693 331.1318 L
322.1553 321.5342 315.9277 313.0391 315.8652 312.9541 C
317.0078 312.1143 L
317.0703 312.2002 323.3457 320.7607 328.8037 330.4355 C
328.9131 330.6299 L
334.5752 340.668 346.3584 361.5557 351.3428 373.7666 c
356.3047 385.9238 360.582 403.1914 360.625 403.3643 C
359.248 403.7041 L
359.2061 403.5313 354.9531 386.3623 350.0303 374.3018 c
f327.2646 341.0596 m
327.6592 339.877 328.4609 334.9678 328.7363 333.1768 C
330.1367 333.3916 L
330.0957 333.6602 329.1221 339.9688 328.6084 341.5078 C
327.2646 341.0596 L
f326.7451 328.9668 m
327.1279 327.6016 L
327.6387 327.7451 339.709 331.1299 344.4316 332.8691 C
343.9414 334.1992 L
339.2725 332.4785 326.8701 329.002 326.7451 328.9668 C
f334.248 357.6162 m
334.8633 355.0859 336.376 348.0967 335.9912 346.1729 C
337.3818 345.8955 L
337.8975 348.4746 335.8594 356.9893 335.625 357.9521 C
334.248 357.6162 L
f335.3281 344.8955 m
336.0449 343.6729 L
336.1885 343.7568 350.4727 352.0977 355.998 352.5781 C
355.875 353.9902 L
350.0332 353.4824 335.9258 345.2461 335.3281 344.8955 C
f340.7295 375.4854 m
341.9795 357.4834 L
343.3936 357.585 L
342.1436 375.583 L
340.7295 375.4854 L
f344.626 362.1709 m
345.2471 360.8975 L
345.3545 360.9502 356.0225 366.1543 360.4434 367.874 C
359.9297 369.1943 L
355.4531 367.4541 345.0654 362.3857 344.626 362.1709 C
f347.2363 389.9268 m
347.3184 389.3945 349.25 376.8594 349.999 373.8623 C
351.374 374.2061 L
350.6406 377.1406 348.6572 390.0127 348.6367 390.1416 C
347.2363 389.9268 L
f353.0479 381.627 m
353.8252 380.4414 L
356.3096 382.0693 361.4121 385.2998 362.9355 385.8711 C
362.4375 387.1973 L
360.3877 386.4287 353.3467 381.8223 353.0479 381.627 C
f351.9785 468.248 m
351.9941 467.959 353.3779 438.8916 345.2441 401.1836 C
346.6289 400.8848 L
354.8047 438.7886 353.4092 468.0303 353.3945 468.3213 C
351.9785 468.248 L
f343.0303 458.9541 m
343.1035 458.9028 350.3945 453.7695 352.0439 450.2349 C
353.3291 450.8345 L
351.5195 454.7119 344.1553 459.8965 343.8428 460.1152 C
343.0303 458.9541 L
f351.8604 451.9468 m
353.0127 451.1226 L
354.1885 452.7686 358.5771 456.1909 358.6221 456.2251 C
357.751 457.3442 L
357.5645 457.1987 353.1553 453.7598 351.8604 451.9468 C
f342.2783 443.4551 m
342.3447 443.4087 348.8945 438.7695 350.5439 435.2349 C
351.8291 435.8345 L
350.0195 439.7109 343.376 444.416 343.0947 444.6143 C
342.2783 443.4551 L
f351.3193 438.6406 m
352.0537 437.4287 L
360.3037 442.4287 L
359.5693 443.6406 L
351.3193 438.6406 L
f341.1855 426.5337 m
341.2402 426.479 346.6406 421.064 348.3242 418.1768 C
349.5488 418.8916 L
347.7725 421.936 342.415 427.3086 342.1875 427.5356 C
341.1855 426.5337 L
f307.4775 511.2813 m
307.4805 510.7861 307.7217 461.6357 307.2285 447.8101 c
306.7246 433.7124 300.6621 379.6797 299.7363 373.8965 C
301.1367 373.6719 L
302.0635 379.4678 308.1396 433.6265 308.6445 447.7593 c
309.1396 461.6138 308.8975 510.793 308.8955 511.2881 C
307.4775 511.2813 L
f303.1113 394.3291 m
303.1807 394.3223 310.1084 393.5732 314.0146 392.5967 C
314.3584 393.9717 L
310.3564 394.9717 303.5498 395.708 303.2617 395.7393 C
303.1113 394.3291 L
f297.8047 413.6875 m
304.3193 409.5176 L
318.3809 413.3525 L
317.9922 414.7158 L
305.1318 411.208 304.5537 411.0508 V
304.0674 411.3613 298.5684 414.8809 Y
297.8047 413.6875 L
f307.1572 443.186 m
305.3984 442.4321 296.4785 437.6128 296.0996 437.4082 C
296.7734 436.1611 L
296.8604 436.2085 305.0107 440.6099 307.3164 441.6938 C
309.1934 440.0332 318.2012 432.0698 320.251 430.4751 C
321.1221 431.5942 L
318.915 433.3101 308.0166 442.9678 307.9063 443.0649 C
307.5703 443.3628 L
307.1572 443.186 L
f307.793 456.1245 m
307.2148 455.7383 298.0791 450.4106 293.3301 447.647 C
294.043 446.4224 L
294.5605 446.7236 305.8037 453.2656 308.1611 454.6875 C
309.8096 453.5313 316.4346 448.8579 319.2285 446.4937 C
320.1445 447.5757 L
316.9063 450.3154 308.9297 455.8804 308.5918 456.1162 C
308.1953 456.3921 L
307.793 456.1245 L
f307.4893 475.3345 m
296.7393 466.5845 L
297.6338 465.4849 L
307.3145 473.3647 308.0107 473.9312 V
310.1885 472.7114 320.7852 466.7544 322.751 465.2251 C
323.6221 466.3442 L
321.3545 468.1069 308.8145 475.1064 308.2813 475.4038 C
307.8623 475.6377 L
307.4893 475.3345 L
f307.8223 492.1421 m
296.5713 485.3921 L
297.3008 484.1772 L
307.4082 490.2412 308.1514 490.6875 V
310.1865 489.23 320.001 482.2842 323.5039 481.3501 C
323.8691 482.7192 L
320.2881 483.6743 308.7188 492.0244 308.6016 492.1089 C
308.2227 492.3828 L
307.8223 492.1421 L
f298.126 504.1475 m
308.1211 499.2783 L
321.3828 503.104 L
320.9902 504.4653 L
308.7549 500.936 308.252 500.791 V
307.7861 501.0181 298.7471 505.4219 Y
298.126 504.1475 L
f257.999 399.3623 m
259.374 399.7061 L
259.3242 399.9053 254.4063 419.9683 255.1445 449.2666 C
253.7275 449.3027 L
252.9844 419.7969 257.9482 399.5635 257.999 399.3623 C
f243.293 432.1948 m
254.543 424.6948 L
255.3291 425.8745 L
244.0791 433.3745 L
243.293 432.1948 L
f244.7803 415.4541 m
245.1895 415.167 254.8271 408.4238 256.585 407.4189 C
257.2881 408.6494 L
255.5859 409.6221 245.6924 416.5449 245.5928 416.6143 C
244.7803 415.4541 L
f255.6738 416.0244 m
256.6982 415.0439 L
256.9277 415.2832 262.3213 420.9546 263.8545 425.2988 C
262.5176 425.7705 L
261.0869 421.7148 255.7285 416.0801 255.6738 416.0244 C
f277.2373 403.6689 m
277.29 403.3486 282.6006 371.3467 291.2822 350.5117 c
299.9678 329.667 313.2412 312.2754 313.374 312.1025 C
314.499 312.9658 L
314.3662 313.1377 301.2021 330.3887 292.5908 351.0566 c
283.9736 371.7383 278.6875 403.5801 278.6357 403.8994 C
277.2373 403.6689 L
f313.7285 327.749 m
314.4785 312.499 L
315.8945 312.5693 L
315.1445 327.8193 L
313.7285 327.749 L
f264.8691 392.4004 m
265.0137 392.3281 279.3555 385.1533 281.543 383.6943 C
282.3291 384.874 L
280.0684 386.3809 266.0967 393.3711 265.5029 393.668 C
264.8691 392.4004 L
f281.4775 381.5342 m
282.8916 381.4854 L
283.0264 382.1563 285.5176 385.7021 287.748 388.6025 C
286.625 389.4658 L
284.2764 386.4141 281.4775 382.5596 281.4775 381.5342 C
f273.085 373.4189 m
273.1895 373.3594 283.6016 367.4072 286.3057 365.6865 C
287.0664 366.8818 L
284.334 368.6211 274.2168 374.4043 273.7881 374.6494 C
273.085 373.4189 L
f288.8027 357.3506 m
290.0703 356.7168 L
290.5576 357.6934 295.7539 367.0967 295.8066 367.1914 C
294.5664 367.877 L
294.3516 367.4883 289.3037 358.3525 288.8027 357.3506 C
f298.2979 337.833 m
296.9678 338.6104 285.7939 345.1455 Y
285.0781 343.9229 L
299.0664 335.7412 L
299.3535 336.5459 L
300.5967 340.0264 303.7344 350.877 303.8672 351.3379 C
302.5059 351.7305 L
302.4756 351.626 299.6738 341.9365 298.2979 337.833 C
f251.002 369.3506 m
251.0391 369.2109 254.8086 355.1875 259.0215 343.7881 c
262.085 335.499 268.6982 323.4795 272.251 317.0215 c
273.5342 314.6885 274.6426 312.6738 274.7637 312.3096 C
276.1084 312.7578 L
275.9531 313.2246 275.1943 314.6123 273.4932 317.7041 c
269.958 324.1299 263.3779 336.0898 260.3506 344.2803 c
256.1611 355.6162 252.4082 369.5781 252.3711 369.7178 C
251.002 369.3506 L
f258.2637 346.0078 m
259.6084 345.5596 L
260.0967 347.0254 263.3135 355.1924 263.3457 355.2744 C
262.0273 355.7939 L
261.8936 355.4561 258.7646 347.5088 258.2637 346.0078 C
f246.0967 347.9121 m
246.4375 347.7266 254.5029 343.3486 260.2861 342.0918 C
260.5869 343.4766 L
255.0039 344.6904 246.8574 349.1113 246.7754 349.1563 C
246.0967 347.9121 L
f253.4043 328.3838 m
253.5361 328.3271 266.6768 322.6221 270.1191 320.9004 C
270.7529 322.168 L
267.2764 323.9063 254.5098 329.4492 253.9688 329.6846 C
253.4043 328.3838 L
f274.3164 314.3779 m
275.5557 313.6904 L
276.8174 315.9619 280.208 325.1494 280.3516 325.5391 C
279.0215 326.0293 L
278.9863 325.9346 275.5264 316.5547 274.3164 314.3779 C
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
