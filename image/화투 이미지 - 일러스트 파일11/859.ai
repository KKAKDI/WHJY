%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (859.ai)
%%CreationDate: 3/25/2002 6:35 PM
%%BoundingBox: 217 312 372 551
%%HiResBoundingBox: 217.9531 312.2559 371.0244 550.3662
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 12582 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC8C4427204B204B204B
%204B204B204B204B204B204B204B204B204A204B204A204B204A204B204A
%204B204A204B204A204B204A204B204A204B204A204B204A204B204A68FD
%07FC99FFFD05FC8C27F827F8F8F852275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%5251522752515227525152275251522727F893FD05FCC2FFFD04FC8C20F8
%FFFF52F8F8F8A7FD3DFF52F88CFD04FCBBFFFD04FC2727FFFFFF7DFD04F8
%27527DFD3BFF52F8FD04FCC2FFFCFCFC8CF8A8FFFFFF7DFD09F852FD39FF
%2744FCFCFCBBFFFCFCFC6827FD04FFA8FD0AF82751FD1AFF7D517DA8FD19
%FF514BFCFCFCC2FFFCFCFC6EF8FD05FFFD0DF87DFD0FFF7DF8F8F827517D
%27F8F827F8F8F851277DFD15FF7DF8FCFCFCBCFFFCFCFC6827FD05FF27FD
%0DF852FD0BFF7D2752F84B8C6F4427F82768FCFCFC8C6F204BF8F827FD09
%FFFD047DA8FD05FF7D27FCFCFCC2FFFCFCFC6EF8FD05FF27FD0FF8A8FD07
%FFA827F820F8F88CFD0FFC68F8F84B52CFFFFF5227FD07F852FFFFFF7DF8
%FCFCFC99FFFCFCFC6827FD05FFA8FD0FF827FD06FFA82720B4FC932027FD
%10FC8C272027F827FD0BF8277DFF7D27FCFCFCC2FFFCFCFC6FF8FD06FF27
%FD0FF852FFFFFFA8F8F844FD04FC92F8FD11FC4427FC8CFD0EF87D7DF8FC
%FCFCBBFFFCFCFC6827FD06FF7DFD10F8A8FFA8F82768FD06FC2768FD10FC
%6FF8FCFCFC20FD0CF8277D27FCFCFCC2FFFCFCFC68F8FFFFFF7D7D2727FD
%10F827FF2026FD08FC204BFD0CFC68688CFC2020FD04FCFD0DF852F8FCFC
%FCBBFFFCFCFC68272727FD15F827FFF868FD08FC4BF84B44B5FCB4684B44
%27F827FD04F844F88CFD04FC27FD07F8527DFFA87D2727FCFCFCC2FFFCFC
%FC6EFD19F851F8FD07FC8C20F8272020F827F820F84B446E68FCFCFC44F8
%20FD05FC20FD06F8A8FD05FF7DF8FCFCFCBCFFFCFCFC68FD1AF893FD06FC
%8C2020B4FCFC8CF820B4FD0AFC4427FD05FC4BFD05F8FD07FF7D27FCFCFC
%C2FFFCFCFC6EFD18F844FD08FC20F8FD04FC2720FD0CFC4AF86E8CFCFCFC
%20FD04F87DFD07FF7DF8FCFCFC99FFFCFCFC6827FD15F82744FD09FCF84B
%444B68B5F893FD0BFC6FF827F8F820FC8C27FD04F827FD07FF7D27FCFCFC
%C2FFFCFCFC6FF8A7FD15F84B8CFD07FC68F8F8272626F8F8FD0AFC6827F8
%4AFCFC68202020F86E8CFC4420F8FD06FF7DF8FCFCFCBBFFFCFCFC6827FF
%7DFD11F827206F20F820B4FD04FC8C2726FD04C6C7F8FD08FCB420F820B4
%FD04FC68F820FD05FC8C2727FD05FF7D27FCFCFCC2FFFCFCFC68F8FFFFA7
%FD0FF820FD04FC8C27F88CFCFCFC6EF8FD06C6F8FD07FC8CF8278CFD06FC
%6EF8FD07FC8CF8FD05FF7DF8FCFCFCBBFFFCFCFC6827FD04FFFD0EF88CFD
%06FC27F8B5FCFC444BFD06C6F8FD06FC93F84BFD08FC4427FD08FCF8FD05
%FF7D27FCFCFCC2FFFCFCFC6EF8FFFFFF27FD0EF8FD08FC26F8FCFC8CF84B
%F8F8F82726F8FD06FCF84AFD08FC8CF868FD07FC68F8FD05FF7DF8FCFCFC
%BCFFFCFCFC6827FF7D27FD0FF88CFD07FC8C2720FCFC27F86F8CB44427F8
%FD05FC4427FD09FC2720FD08FC4B27FD05FF7D27FCFCFCC2FFFCFCFC6EF8
%27FD11F86FFD08FC8CF844FCF8FD05FC6826FD05FC2020FD08FC6EF8FD09
%FCF87DFD05FF7DF8FCFCFC99FFFCFCFC6827FD13F8FD09FC68F82027FD05
%FC6F20FD04FC93F893FD08FC204BFD09FCF8A8FD05FF7D27FCFCFCC2FFFC
%FCFC6FF8FF7D27FD10F844FD09FC44F8F8FD05FC204BFD04FC44F844FD08
%FCF868FD08FC6EF8FD06FF7DF8FCFCFCBBFFFCFCFC6827FD04FF5227FD09
%F82727FF5227FD0AFC8C27F827204B20F8F8FCFCFC8C272020FD07FC92F8
%FD09FC6827FD06FF2727FCFCFCC2FFFCFCFC68F8FD07FF7D7D2752275227
%7DFD04FFF892FD09FC8C2020F8F8206E44F88CFC8C20F8FCF84AFD06FC44
%20FD09FC4B27FFFFFF7D27F827F8FCFCFCBBFFFCFCFC6827FD13FF2768FD
%07FC6827F84B68FD05FC20F8F8F820B5FC93F86FFD05FC2744FD09FC2052
%FF7D27F8F84B7D27FCFCFCC2FFFCFCFC6EF8FD13FFF84BFD06FC20F820FD
%08FC6EF86F2020FCFCFC8CF8278CFC8C27F826FD09FC2052FD05F8FF7DF8
%FCFCFCBCFFFCFCFC6827FD13FF2768FD04FC93F8278CFD09FC6827FCB4F8
%FCFCFC4427FD07F86FFD07FC6FFD06F827FF7D27FCFCFCC2FFFCFCFC6EF8
%FD13FFF8FD04FC8CF84BFD0BFC4B20FCFCF8F86844F86826FD07F84AFD05
%FC4BFD07F8A8FF7DF8FCFCFC99FFFCFCFC6827FD13FFF8FCFCFCB4F84BFD
%0CFCF84BFCB5F827F82768FC20FD08F82744B48C27FD07F827FFFF7D27FC
%FCFCC2FFFCFCFC6FF8FD13FFF88CFCFCF826FD0CFC68F868FC4427FD05FC
%FD09F85227FD0AF851FFFF7DF8FCFCFCBBFFFCFCFC6827FD13FF51FD04F8
%8CFD0CFC27F86F68F8F8FD05FCFD08F84BFFA827FD09F827A8FF7D27FCFC
%FCC2FFFCFCFC68F8FD14FF7627F844FD0CFC6EFD06F8FD04FC68FD08F8FF
%FFFD0DF87D7DF8FCFCFCBBFFFCFCFC6827FD15FFA8F8FD0CFCB5FD07F893
%FCFCFC27FD06F827FFFF52FD0DF8275227FCFCFCC2FFFCFCFC6EF8FD15FF
%7D20FD0CFC20FD08F86F6820FD06F827FFFF7DFD11F8FCFCFCBCFFFCFCFC
%6827FD15FF7D20FD0BFC44FD06F8277D272027274BFD04F827FFFFFFFD11
%F827FCFCFCC2FFFCFCFC6EF8FD0FFF7DFD05FF7C26FD0AFC68FD06F827FF
%76F8FFFFFF7DFD04F8FFFFFF52FD0AF827527D7C7D7D52F8FCFCFC99FFFC
%FCFC6827FD0FFFF876FD04FFA8F8FD09FC44FD07F87DFF5152FD04FF27F8
%F87DFFFFFF27FD09F8A8FD06FF7D27FCFCFCC2FFFCFCFC6FF8FD0FFFF8F8
%52FD04FF2044FD07FC20FD07F827FFFF2752FD05FFF8207D52FD0BF8FD08
%FF52F8FCFCFCBBFFFCFCFC6827FD0FFF27F8F852FFFFFF522768FCFCFC8C
%4BF827A827FD05F87DFFFFF8A8FD05FF27FD0DF827277CA8FD04FF7DF827
%FCFCFCC2FFFCFCFC68F8FD0FFF4BF8F8F827FFFFFF27F8F820F8F8F87DFF
%FF52FD05F8A8FFA8F8FD04FFA127FD13F827F8F8F827F8FCFCFCBBFFFCFC
%FC6827FD0FFFA1FD05F87DFFFFA85252A1A8FD05FFFD05F8FFFF7DF8FFFF
%FF7D27FD18F85227FCFCFCC2FFFCFCFC6EF8FD0FFFA8FD07F827A8FD09FF
%52F8F8F827FFFF2752FFFF7DFD1AF87DF8FCFCFCBCFFFCFCFC6827FD10FF
%FD09F827277CA8FD05FFA8F8F8F827FFFF277DFFA827FD19F8527D27FCFC
%FCC2FFFCFCFC6EF8FD10FF27FD0CF827A8FD04FF27F8F84BFFA8F8FFFF27
%FD1AF87D7DF8FCFCFC99FFFCFCFC6827FD0CFFA87D2727FD0FF827A8FFFF
%FFF8F852FF5227FF7DFD1BF8FF7D27FCFCFCC2FFFCFCFC6FF8FD0AFF76FD
%16F827FFFFA8F87DFF2052FFFD1BF827FF7DF8FCFCFCBBFFFCFCFC6827FD
%08FF5227FD19F8A8FFFFFFA8F8FF27FD1BF87DFF7D27FCFCFCC2FFFCFCFC
%68F8FD06FFCFFD1DF8A8FFFF272752FD1CF8FFFF7DF8FCFCFCBBFFFCFCFC
%6827FD06FF5227FD1DF8A8FF2727FD1CF8A8FFFF7D27FCFCFCC2FFFCFCFC
%6EF8FD09FF7D27FD1BF852FD1DF852FFFFFF7DF8FCFCFCBCFFFCFCFC6827
%FD0CFF5227FD19F826FD1BF827FD04FF7D27FCFCFCC2FFFCFCFC6EF8FD0E
%FF52FD16F820FD04FC6EFD19F852A8FFFF7DF8FCFCFC99FFFCFCFC68277D
%A15252277D7DFD08FFA8FD15F8B5FD06FC6827FD17F8277DFF7D27FCFCFC
%C2FFFCFCFC6FFD09F82752FD07FFFD14F8FD09FC4BFD18F8A87DF8FCFCFC
%BBFFFCFCFC68FD0CF87DFD05FFA8FD13F8FD0AFCB420FD16F8277D27FCFC
%FCC2FFFCFCFC68FD0DF852FD05FF7DFD12F8FD0CFC8CFD18F8FCFCFCBBFF
%FCFCFC682752FD0CF852FD05FF52FD0BF827444BF8F8F8B4FD0DFC27F8F8
%2027FD10F82727FCFCFCC2FFFCFCFC6EF8FF27FD0CF852FD05FF27FD09F8
%4AFCFCFC4AF8F8F820206F8CFD09FCF8F8F8FC8C20FD0FF87DF8FCFCFCBC
%FFFCFCFC6827FFFF27FD0CF8A8FD04FF7DFD08F8B4FD04FC4420686F684B
%F8F8F86F8CFD06FCF8F827FCFC8C27FD0DF8527D27FCFCFCC2FFFCFCFC6E
%FD11F8FFA87D7D7D27FD05F844FD06FC2644FD05FC8C6FF8F820FCFC6EF8
%4BF8F8F8FCFCFC8CFD0CF827FF7DF8FCFCFC99FFFCFCFC6820FD13F827FD
%05F82744FD07FC204BFD08FC6827F827F86F4427F8F8FD04FC6820FD09F8
%27A8FF7D27FCFCFCC2FFFCFCFC6FFD12F868FD04FC4BF8F8F8FCFCFC8C4B
%20FD04F8FD0AFC6FF86EFCFC8CF8F8FD05FC8C20FD08F87DFFFF7DF8FCFC
%FCBBFFFCFCFC6827FD10F88CFD06FC27F84BFC6F20F8206F8CFC8C2068FD
%0AFC2768FCFCFC68F88CFD06FC4BFD06F852FFFFFF7D27FCFCFCC2FFFCFC
%FC68FD10F820FD07FC8CF8F820F84B8CFD05FC20F82068FD08FCF84BFD04
%FC204AFD07FCFD05F827FD04FF7DF8FCFCFCBBFFFCFCFC6827FD0FF893FD
%08FCF8F844FD07FC20274427F827206F8CFC8C4B202744FD04FC6FF8B544
%4B68FCFCFCF8F8F86FF84BFD04FF7D27FCFCFCC2FFFCFCFC6EFD0FF826FD
%09FCF8F8F82092FC6E686F20208CFCFCFC8C4BFD05F820F84BFD05FCF820
%2720F820FC44F8F827FC6EF8FD04FF7DF8FCFCFCBCFFFCFCFC68FD0FF88C
%FD08FC6FF8FC8C4BF8F8F827F8F8F86FFD06FC68F820B4FC6FF8B4FD04FC
%44F868FC68F820F8F8F844FC6827FD04FF7D27FCFCFCC2FFFCFCFC6EFD0E
%F820FD09FCF86EFCFC20F844FCFCFC8C4BF826FD05FC2720FD04FC2044FD
%05FCF8FCFCFCFD05F8FCFCFCF8CFFFFFFF7DF8FCFCFC99FFFCFCFC6820FD
%0DF893FD08FC4427FCFC8CF88CFD06FC93F84BFD04FCF893FD04FC4427FD
%05FCF8FCFCFC27F8F8F8B4FCFCFC2776FFFFFF7D27FCFCFCC2FFFCFCFC6F
%FD0DF826FD08FC68F8446E8C4B20FD08FC8CF892444B2020FD06FCF892FD
%04FCF8FCFCFC44F844FD05FC2027FFFFFF7DF8FCFCFCBBFFFCFCFC6827FD
%0CF88CFD06FC4BF8F8F827F8F8F827FD09FC27F8274A27F86FFD05FC2720
%FCFCFC6820FCFCFC93F8FD06FC93F8A8FFFF7D27FCFCFCC2FFFCFCFC68FD
%0CF844FD06FC4AF86EFD05FC2020FD08FC6EF87BC6C6C69EF8FD05FC68F8
%FCFCFC4AF8FD04FCF868FD06FCF8F852FF7DF8FCFCFCBBFFFCFCFC68FD0C
%F8FD07FC206FFD06FC204BFD08FC2051FD05C62768FD05FCF86FFCFCF84B
%FD04FC206FFD06FCF8F8F8277D27FCFCFCC2FFFCFCFC6EFD0BF86EFD07FC
%2068FD06FC6EF8FD08FCF89EFD05C6F86FFD05FC4AF8FC44F88CFD04FC4B
%20FD05FC44FD06F8FCFCFCBCFFFCFCFC68FD0BF8FD08FC206FFD06FC8CF8
%8CFD06FCB4F8FD06C6F868FD06FC20202068FD05FC204BFD05FC27FD05F8
%27FCFCFCC2FFFCFCFC6EFD0BF8FD08FC2644FD07FC2020FD06FC44F8FD05
%C675F8FD07FC20F868FD06FC4A20FD04FC92FD07F8FCFCFC99FFFCFCFC68
%FD0AF84BFD08FC4427FD07FCB4F84BFD05FC274AFD04C6C7F86FFD07FC4B
%20FD07FC204BFD04FCFD07F827FCFCFCC2FFFCFCFC6FFD0AF820FD09FCF8
%4AFD07FC8CF84BFCFCFC92F8C6C6C67427FD04F844FD05FC204AFD07FC4A
%20FCFCFC44FD08F8FCFCFCBBFFFCFCFC6827A852FD07F827FD09FC93F84B
%FD07FC92F8278CFC20274A27F8272092FCFC44F820FD04FC2068FD07FCF8
%F868FCFCFD08F827FCFCFCC2FFFCFCFC68F8FFFFFFA1522727F8F8F8FD0A
%FC92F8FD09FCFD05F827448CFD06FC68F868FCFC4AF8FD07FC68F8F8F88C
%27FD09F8FCFCFCBBFFFCFCFC6827FD08FF52F820FD0AFC2744FD08FC93F8
%2768FD0BFC4427FC93F893FD07FC27F8F8F827FD09F827FCFCFCC2FFFCFC
%FC6EF8FD07FF7DF820F868FD09FC4420FD08FCF827FD0EFCF84BF84AFD06
%FC8C26F86EFD0DF8FCFCFCBCFFFCFCFC6827FD07FF2720FC44F868FD08FC
%27F8FD07FC68208CFD0EFCF8F86FFD06FC442720B4FC93FD0BF827FCFCFC
%C2FFFCFCFC6EF8FD06FF7DF8FCFCFC20F868FD06FC4AF8F88CFD06FC4B20
%FD0EFC4BF8F8F827204A2027F8F844FD04FC20FD0BF8FCFCFC99FFFCFCFC
%6827FD06FF274BFD04FC4427206F68934427F893206FFD06FC444BFD0CFC
%8C27F8B48C93444B204B4493FD05FCB5FD0BF827FCFCFCC2FFFCFCFC6FF8
%FD06FF2768FD05FC8C4BF820F82744FCFC6FF8FD06FC6FF8FD0BFC8C20F8
%FD0FFC20FD0CF8FCFCFCBBFFFCFCFC6827FD05FF7DF86FFD0EFC8C27F86F
%FCFC686FF8F868FD0AFC4B20FD10FCFD0CF827FCFCFCC2FFFCFCFC68F8FF
%FFFFA84BF8F8F8FD0DFC68F8F84BFD05F826F8F8204A686EFD06FCF88CFD
%0FFC92FD0DF8FCFCFCBBFFFCFCFC6827FFFF7D27FD05F82768FD09FC68F8
%20FD06FC6FF84B8C4B2027F8F82093FCB4202744FD0FFC44FD0CF827FCFC
%FCC2FFFCFCFC6EF8FF7DFD0AF86FFD06FC68F844FD07FCF86EFD06FC8C26
%F827F82044F88CFD0EFC20FD0DF8FCFCFCBCFFFCFCFC68275227FD0BF827
%68FCFCFC44F844FD07FC4427FD09FCB46893FCFC2027FD0EFCFD0DF827FC
%FCFCC2FFFCFCFC6EFD10F820FC20F844FD08FC4A20FD0EFC68F8FD0DFC68
%FD0EF8FCFCFC99FFFCFCFC6820FD11F82768FD09FC204BFD0EFC6827FD0D
%FC4BFD0CF82727FCFCFCC2FFFCFCFC6FFD11F826FD0BFC4AF8FD0EFC6EF8
%FD0DFCFD0BF8207D7DF8FCFCFCBBFFFCFCFC6827FD11F820F8F8F82744B4
%FCFC8C4BF8F820FD06FC92FD06FC204BFD0CFC8CFD0AF87CFFFF7D27FCFC
%FCC2FFFCFCFC68FD1DF86E68F8F84B2020FD05F8262026F8F868FD0BFC8C
%FD08F8277CFD04FF7DF8FCFCFCBBFFFCFCFC682752FD19F8FD05FC6F444B
%4493FCFC8C93444BFD04F844B5FD08FC68FD07F87DFD07FF7D27FCFCFCC2
%FFFCFCFC6EFD1BF8FD10FC20FD05F827206E686F2020FD09F827A8FD06FF
%7DF8FCFCFCBCFFFCFCFC68FD1BF88CFD0FFC20FD16F827FD06FF7D27FCFC
%FCC2FFFCFCFC6EFD1BF86FFD0FFCFD18F87DFD05FF7DF8FCFCFC99FFFCFC
%FC68FD1CF8B4FD0CFC8C4BFD19F8FD05FF7D27FCFCFCC2FFFCFCFC6FFD1D
%F8FD09FC684BFD1CF827FD04FF7DF8FCFCFCBBFFFCFCFC68FD1EF86FFD04
%FC8C4BFD20F8A8FFFFFF7D27FCFCFCC2FFFCFCFC68FD20F8204BFD23F827
%FFFFFF7DF8FCFCFCBBFFFCFCFC68FD1DF8277D76524B767CFD22F827FFFF
%7D27FCFCFCC2FFFCFCFC6EFD1AF82752A8FD07FFFD23F8207D7DF8FCFCFC
%BCFFFCFCFC68FD16F827277DA8FD0AFFFD26F827FCFCFCC2FFFCFCFC6EFD
%13F8277DFD0FFFFD25F852F8FCFCFC99FFFCFCFC68F8F827517D7DA17D7D
%A8FFFF7DFD04F827FD12FF27FD21F82752FF7D27FCFCFCC2FFFCFCFC6FF8
%7DFD0AFF7DF8F8F827FD13FF52FD1CF827F85152A8FFFFFF7DF8FCFCFCBB
%FFFCFCFC6827FD0BFF7DF8F852FD15FFFD1BF8FD09FF7C27FCFCFCC2FFFC
%FCFC68F8FD0BFFA1F852FD16FF27FD05F8CF27FD12F827FD09FF5220FCFC
%FCBBFFFCFCFC8CF8A8FD0BFF7DFD17FFA8FD04F87DFFFF27FD11F852FD09
%FFF86FFCFCFCC2FFFD04FC2027FD24FF27F8F8F8FD04FF7D27FD0FF87DFD
%08FF5120FD04FCBCFFFD04FCB4F827A8FD23FFF8F8F8FD07FF52522727FD
%0AF87DFD07FF52F868FD04FCC2FFFD06FCF8F8F852275227522752275227
%52275227522752275227522752275227522752275227522752F8F8275227
%522752275227522752FD0427F820F8F8F820275227522727F8F868FD05FC
%99FFFD07FC8C6F264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B
%4B264B4B4B264B4B4B264B4B4B204B4B4B264B4B4B264B4B4B264B4B4B26
%4B4B4B264B4B4B264B4B4B4A93FD07FCC2FFFD52FCBBFFFD52FCC2FFFD52
%FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
371.0244 312.2559 m
217.9531 312.2559 L
217.9531 550.3662 L
371.0244 550.3662 L
371.0244 312.2559 L
fu0 0 0 0 k
225.8218 533.8115 m
225.5732 328.4785 l
226.4883 320.1455 236.3218 319.6455 v
354.1543 319.6455 l
363.1543 320.6455 363.3213 329.6455 v
363.3213 533.4785 l
363.1543 541.6455 353.8213 542.8115 v
235.9883 542.9785 l
226.8218 542.9785 225.8218 533.8115 v
f0 1 1 0 k
270.1968 478.6035 m
268.3218 477.9785 266.3218 477.9785 v
264.3218 477.9785 262.8218 481.3535 263.1968 483.1035 c
263.5718 484.8535 264.3218 488.2285 264.0718 490.6035 c
263.8218 492.9785 261.6968 496.2285 260.0718 498.2285 c
258.4468 500.2285 258.6968 504.7285 260.4468 507.6035 c
262.1968 510.4785 269.4468 516.1035 y
272.4468 515.9785 273.4468 516.7285 v
274.4468 517.4785 274.9468 519.3535 275.0718 520.7285 c
275.1968 522.1035 277.4468 524.4785 279.6968 525.2285 c
281.9468 525.9785 283.8218 527.4785 284.6968 528.6035 c
285.5718 529.7285 287.8218 530.2285 290.3218 529.3535 c
291.6968 531.9785 294.5718 532.4785 v
297.4463 532.9785 298.9463 531.9785 300.3213 531.6035 c
301.6963 531.2285 304.8213 531.4785 306.8213 532.4785 c
308.8213 533.4785 311.4463 533.6035 313.8213 532.7285 c
316.1963 531.8535 316.1963 531.9785 317.4463 531.9785 c
318.6963 531.9785 323.4463 532.2285 327.0713 527.9785 c
332.1963 529.1035 335.9463 525.2285 v
339.6963 521.3535 345.9463 511.7285 y
348.9463 510.8535 350.1963 508.6035 v
351.4463 506.3535 351.0713 503.7285 350.5713 502.3535 c
350.0713 500.9785 348.6963 497.6035 348.6963 495.6035 c
348.6963 493.6035 348.1963 487.1035 346.6963 483.9785 c
345.1963 480.8535 343.0713 477.9785 y
339.9463 480.1035 l
334.0713 481.8535 331.6963 483.1035 v
329.3213 484.3535 324.4463 483.8535 y
317.8213 477.7285 l
315.9463 473.9785 l
313.5713 471.4785 311.5713 471.2285 v
309.5713 470.9785 307.3213 473.3535 306.5713 474.6035 c
305.8213 475.8535 303.1963 474.9785 y
288.6968 466.7285 l
282.6968 461.8535 277.5718 461.3535 v
272.4468 460.8535 269.5718 463.4785 268.6968 468.7285 c
267.8218 473.9785 270.1968 478.6035 y
f0 0.2 1 0 k
298.9463 509.6035 m
297.1963 511.8535 291.4468 511.1035 v
285.6968 510.3535 282.9468 505.9785 287.0718 501.2285 c
292.1968 504.6035 298.5713 500.7285 v
299.1963 506.6035 298.9463 509.6035 v
f0 1 1 0 k
239.8218 373.6455 m
238.9888 382.1455 245.6553 385.6455 v
244.4883 388.3115 l
241.6553 395.1455 241.6553 395.6455 v
241.6553 396.1455 242.4883 403.1455 242.9883 403.9785 c
243.4883 404.8115 249.3213 414.4785 249.4883 414.9785 c
249.6553 415.4785 257.1553 422.1455 y
263.4883 425.4785 271.4883 421.4785 v
274.6553 429.1455 l
282.8218 433.9785 l
296.4883 441.4785 l
302.8203 443.1455 308.1543 441.8115 v
313.4883 440.4785 319.9883 439.3115 y
340.4883 434.6445 l
345.3213 427.1455 l
349.9883 418.6455 l
352.1543 416.6445 352.3213 413.3115 v
352.4883 409.9785 355.3203 402.3115 356.6543 399.8115 c
357.9883 397.3115 355.1543 383.4785 y
347.9883 372.9785 l
339.4883 355.3115 l
332.9883 346.1455 331.8213 346.1455 v
330.6543 346.1455 317.1543 343.8115 316.3213 343.9785 c
315.4883 344.1455 292.4883 343.3115 y
288.8223 340.3115 282.1553 342.9785 v
275.4883 345.6455 268.9883 346.1455 y
245.9883 352.9795 245.4883 354.1455 v
244.9883 355.3115 239.9883 367.9785 y
239.8218 373.6455 l
f0 0.2 1 0 k
291.3218 387.2285 m
294.8218 393.6035 295.1968 396.6035 v
295.5718 399.6035 295.4468 402.6035 299.4463 404.6035 c
303.4463 406.6035 306.9463 404.7285 308.3213 402.6035 c
309.6963 400.4785 308.8213 395.1035 305.6963 391.4785 c
300.6963 389.9785 299.8213 389.7285 v
298.9463 389.4785 291.3218 387.2285 y
f*u
1 D
0.65 0.53 0.51 1 k
235.5767 543.5205 m
229.7153 543.5205 224.9468 538.752 224.9468 532.8906 C
224.9468 329.7324 L
224.9468 323.8711 229.7153 319.1025 235.5767 319.1025 C
353.4004 319.1025 L
359.2617 319.1025 364.0303 323.8711 364.0303 329.7324 C
364.0303 532.8906 L
364.0303 538.752 359.2617 543.5205 353.4004 543.5205 C
235.5767 543.5205 L
f0 D
226.3638 329.7324 m
226.3638 532.8906 L
226.3638 537.9707 230.4966 542.1035 235.5767 542.1035 C
353.4004 542.1035 L
358.4805 542.1035 362.6123 537.9707 362.6123 532.8906 C
362.6123 329.7324 L
362.6123 324.6523 358.4805 320.5205 353.4004 320.5205 C
235.5767 320.5205 L
230.4966 320.5205 226.3638 324.6523 226.3638 329.7324 C
f*U
*u
1 D
303.2539 391.3623 m
302.4258 390.9482 300.1621 390.3848 297.7656 389.7881 c
294.6157 389.0039 291.0454 388.1152 288.7876 387.1279 c
287.0903 386.3848 285.7817 384.9023 285.0029 382.8379 c
283.9849 380.1416 284.0542 376.8408 285.1797 374.4287 c
286.9556 370.623 291.6113 370.7119 294.1128 370.7607 C
294.8218 370.7695 L
295.9375 370.7695 296.873 370.249 298.0586 369.5889 c
298.9766 369.0781 300.0176 368.499 301.3467 368.0566 c
304.7461 366.9229 307.4805 369.876 307.5957 370.002 C
307.6475 370.0586 L
308.4072 371.3809 L
308.9795 372.3262 309.5713 373.3047 309.7588 374.0566 c
309.958 374.8525 311.0869 376.2031 313.6602 377.6064 c
315.2285 378.4619 316.2051 379.6143 316.5635 381.0313 c
317.0361 382.9014 316.3975 385.2002 314.665 387.8643 c
311.376 392.9248 305.9209 392.6953 303.2539 391.3623 c
f0 D
286.4639 375.0283 m
285.5068 377.0791 285.4526 380.0166 286.3286 382.3379 c
286.7759 383.5215 287.6636 385.0889 289.356 385.8291 c
291.5039 386.7686 295.0127 387.6426 298.1074 388.4131 c
300.6895 389.0557 302.9199 389.6104 303.8877 390.0947 c
305.3838 390.8428 310.3545 391.8955 313.4775 387.0918 c
314.6885 385.2285 315.2988 383.6211 315.2988 382.2979 c
315.2988 381.9746 315.2617 381.668 315.1895 381.3789 c
314.9277 380.3447 314.2061 379.5186 312.9814 378.8506 c
310.417 377.4512 308.7412 375.8291 308.3838 374.4004 c
308.248 373.8555 307.6641 372.8896 307.1943 372.1133 C
306.624 371.1201 306.5078 370.918 V
306.3643 370.7666 304.2383 368.5869 301.7949 369.4004 c
300.5908 369.8027 299.6543 370.3232 298.748 370.8281 c
297.4912 371.5273 296.3052 372.1875 294.8218 372.1875 C
294.0854 372.1777 L
291.7534 372.1328 287.8501 372.0576 286.4639 375.0283 c
f*U
280.7163 366.7803 m
279.9795 363.5225 280.9404 360.0713 283.1079 358.1934 c
286.3701 355.3652 290.5068 356.1924 293.8306 356.8574 C
296.1655 357.2764 L
298.0059 357.5215 299.7266 357.1201 301.5488 356.6953 c
303.2373 356.3027 304.9824 355.8955 306.8682 356.0215 c
311.4756 356.3281 312.0566 359.9424 312.2793 363.9395 c
312.5488 368.7939 308.1436 371.7021 307.9561 371.8232 C
307.1855 370.6338 L
307.2246 370.6084 311.0869 368.041 310.8633 364.0176 c
310.5908 359.1055 309.6738 357.6289 306.7744 357.4355 c
305.0986 357.3242 303.5303 357.6895 301.8701 358.0762 c
300.0049 358.5107 298.0752 358.9609 295.978 358.6807 C
293.5527 358.2471 L
290.375 357.6113 286.7734 356.8916 284.0356 359.2637 c
282.2803 360.7861 281.4834 363.748 282.0986 366.4678 c
282.4668 368.0947 283.6592 370.9834 287.5103 372.0449 C
287.1333 373.4121 L
283.8003 372.4922 281.4614 370.0752 280.7163 366.7803 c
f261.6323 400.8926 m
260.2358 395.0273 262.6626 390.8994 265.1655 389.1484 c
266.8794 387.9482 267.7695 383.6953 268.3584 380.8809 C
268.8882 378.542 L
270.1416 373.9463 273.0737 371.8125 277.8525 372.0205 c
283.7603 372.2773 286.1577 374.0918 286.2568 374.1689 C
285.3906 375.291 L
285.3691 375.2744 283.186 373.6709 277.791 373.4365 c
272.4395 373.2041 270.9272 376.4521 270.2554 378.915 C
269.7456 381.1709 L
269.0356 384.5645 268.1519 388.7871 265.978 390.3086 c
263.8394 391.8057 261.7793 395.3906 263.0112 400.5645 c
264.0679 405.002 271.5527 404.3467 277.9551 403.2793 C
278.1885 404.6777 L
273.3008 405.4922 263.1309 407.1875 261.6323 400.8926 c
f278.3682 409.4863 m
276.1909 406.5117 275.9194 401.8145 277.6592 397.2275 c
280.4785 389.7939 288.4336 385.9951 288.771 385.8369 C
289.373 387.1201 L
289.2954 387.1563 281.5967 390.8428 278.9844 397.7295 c
277.4126 401.873 277.6147 406.0576 279.5122 408.6484 c
281.0195 410.708 283.5337 411.7012 286.7827 411.5205 c
295.1489 411.0566 297.3018 403.8418 297.3896 403.5352 C
298.7539 403.9199 L
298.7295 404.0049 296.2583 412.4141 286.8608 412.9365 c
282.1216 413.1992 279.627 411.2051 278.3682 409.4863 c
f301.6768 405.9219 m
295.0708 404.5459 294.5947 399.3096 294.3662 396.793 c
294.1318 394.2188 290.7319 387.8779 290.6978 387.8145 C
291.9458 387.1426 L
292.0913 387.4131 295.5176 393.8027 295.7773 396.6641 c
296.0054 399.1729 296.3872 403.3721 301.9658 404.5352 c
304.1904 404.998 306.2324 404.1807 307.293 402.4023 c
308.5576 400.2813 308.5615 396.418 304.7793 391.9355 C
305.8633 391.0215 L
310.125 396.0732 310.0254 400.5869 308.5098 403.1279 c
307.1299 405.4424 304.5117 406.5127 301.6768 405.9219 c
f308.0303 412.6865 m
305.1455 409.2773 305.1123 404.9131 305.1123 404.7285 C
306.5303 404.7275 L
306.5303 404.7676 306.5713 408.7676 309.1123 411.7705 c
310.4189 413.3145 312.2305 414.0674 313.8408 413.7354 c
315.4551 413.4023 316.7168 411.9951 317.3936 409.7725 c
319.1982 403.8408 321.4941 399.3086 322.7021 397.1348 c
323.3105 396.0391 323.708 392.917 322.6309 389.6953 c
321.8643 387.4043 320.0547 384.2744 315.7832 382.376 C
316.3594 381.0811 L
321.1016 383.1885 323.1182 386.6846 323.9746 389.2451 c
325.2012 392.9121 324.6934 396.4688 323.9404 397.8223 c
322.7607 399.9473 320.5166 404.3789 318.749 410.1846 c
317.915 412.9268 316.2734 414.6807 314.127 415.123 c
312.0088 415.5605 309.6719 414.626 308.0303 412.6865 c
f330.9551 414.4336 m
329.5508 412.8145 329.4492 409.8232 329.6201 408.6279 c
329.9238 406.5 329.835 398.1465 323.8467 396.1504 C
324.2949 394.8066 L
331.0986 397.0742 331.4395 405.9111 331.0225 408.8291 c
330.8467 410.0635 331.1025 412.4395 332.0264 413.5049 c
332.3311 413.8564 332.6631 414.0195 333.0713 414.0195 c
335.3418 414.0195 337.3623 412.459 337.3623 411.2285 c
337.3623 410.6318 337.6299 409.5811 338.0342 407.9893 c
338.9424 404.4189 340.4619 398.4434 340.1143 392.5205 c
339.6475 384.584 332.9336 380.1826 326.5439 379.9365 c
320.2744 379.6953 316.0977 381.1328 316.0566 381.1465 C
315.585 379.8105 L
315.7646 379.7471 320.0381 378.2676 326.5986 378.5205 c
333.627 378.791 341.0127 383.6582 341.5283 392.4365 c
341.8896 398.5801 340.3369 404.6885 339.4082 408.3389 c
339.0713 409.6641 338.7803 410.8096 338.7803 411.2285 c
338.7803 413.3916 336.0059 415.4375 333.0713 415.4375 c
332.2568 415.4375 331.5254 415.0898 330.9551 414.4336 c
f318.5967 424.9004 m
316.9834 424.3633 315.7998 423.3545 315.2646 422.0605 c
314.7822 420.8955 314.8428 419.5996 315.4375 418.4111 c
316.1504 416.9854 315.6475 414.5166 315.3936 413.6865 C
316.749 413.2705 L
316.793 413.4141 317.8193 416.8174 316.7051 419.0449 c
316.2979 419.8604 316.251 420.7393 316.5742 421.5186 c
316.9551 422.4395 317.8105 423.1445 319.0449 423.5566 c
320.1436 423.9219 321.4707 423.752 322.7852 423.0752 c
324.3887 422.25 325.6758 420.792 326.1436 419.2705 c
327.1582 415.9756 329.1719 411.4248 329.7314 410.585 C
330.9111 411.3711 L
330.4766 412.0234 328.4951 416.4463 327.499 419.6865 c
326.9131 421.5889 325.3936 423.3271 323.4336 424.3359 c
321.7773 425.1875 320.0605 425.3887 318.5967 424.9004 c
f292.749 428.1016 m
291.917 427.5176 291.4512 426.6533 291.3652 425.5332 c
291.103 422.125 292.4297 416.6514 297.1592 415.5391 c
301.3281 414.5576 308.0303 412.3281 308.0977 412.3066 C
308.5449 413.6504 L
308.4775 413.6738 301.7158 415.9229 297.4834 416.918 c
293.6216 417.8271 292.5537 422.5029 292.7783 425.4238 c
292.832 426.1211 293.0815 426.6035 293.5635 426.9424 c
294.9624 427.9248 298.2656 427.707 303.3828 426.2949 c
310.4189 424.3545 315.3662 420.9316 315.415 420.8975 C
316.2275 422.0586 L
316.0195 422.2051 311.0439 425.6523 303.7598 427.6621 c
298.0586 429.2344 294.5601 429.374 292.749 428.1016 c
f288.9497 412.3174 m
290.1938 411.6387 L
291.5771 414.1748 295.3813 416.3398 295.4194 416.3613 C
294.7241 417.5957 L
294.5537 417.5 290.5288 415.2129 288.9497 412.3174 C
f286.668 421.4199 m
284.4253 420.9219 276.7944 418.1602 274.3867 416.2881 c
273.6377 415.7051 272.8145 414.9297 273.1001 414.0967 c
273.3091 413.4873 273.9976 413.2695 274.5718 413.2695 c
275.332 413.2695 278.9575 411.8418 281.2891 410.8281 C
281.8545 412.1279 L
280.894 412.5459 276.1514 414.5762 274.6924 414.6699 C
274.8125 414.7959 274.9771 414.9512 275.2568 415.1689 c
277.394 416.8311 284.8345 419.5605 286.9756 420.0371 c
289.1475 420.5195 292.5879 420.7695 292.6221 420.7715 C
292.5215 422.1855 L
292.3765 422.1748 288.9429 421.9258 286.668 421.4199 c
f287.2549 432.3623 m
286.8237 432.1494 L
284.771 431.1455 279.3184 428.4775 275.3208 424.4795 c
270.6724 419.8311 274.2354 415.3262 274.272 415.2813 C
275.3735 416.1729 L
275.2583 416.3174 272.5938 419.748 276.3228 423.4775 c
280.1538 427.3086 285.4521 429.9014 287.4468 430.877 C
287.8887 431.0947 L
288.3687 431.335 289.3872 431.2754 290.3306 430.6924 c
290.9961 430.2813 292.1133 429.2832 292.1133 427.2285 C
293.5303 427.2285 L
293.5303 429.9717 291.9922 431.3311 291.0757 431.8975 c
289.8052 432.6826 288.2695 432.8691 287.2549 432.3623 C
f259.8071 423.6885 m
257.8291 423.1592 256.4878 422.2373 255.9282 421.0254 C
255.3638 419.7939 L
253.6558 416.0586 250.1011 408.2852 247.2275 403.8643 c
243.9873 398.8799 240.3867 391.2988 246.5024 383.0566 c
252.7788 374.5977 259.3179 375.9053 262.4609 376.5332 c
266.4756 377.3369 269.0737 381.6846 269.1826 381.8691 C
267.9614 382.5889 L
267.938 382.5488 265.5703 378.6006 262.1826 377.9238 c
259.1069 377.3086 253.3818 376.1631 247.6411 383.9004 c
242.0513 391.4346 245.4063 398.4619 248.416 403.0918 c
251.3467 407.6006 254.7983 415.1494 256.6528 419.2041 C
257.2153 420.4316 L
257.5874 421.2373 258.6382 421.9082 260.1738 422.3203 c
263.2915 423.1553 267.5225 422.7334 269.4131 421.3994 c
273.79 418.3105 271.9785 412.6904 271.8994 412.4521 c
271.5083 411.2793 268.9229 406.7373 267.9595 405.0859 C
269.1841 404.3711 L
269.3281 404.6191 272.7271 410.4531 273.2441 412.0039 c
273.3369 412.2832 275.4575 418.8682 270.2305 422.5576 c
268.0078 424.126 263.332 424.6338 259.8071 423.6885 c
f296.2764 441.2461 m
294.7427 440.2451 293.8633 438.8721 293.8633 437.4785 c
293.8633 434.207 294.8315 428.3594 294.8726 428.1123 C
296.271 428.3447 L
296.2607 428.4043 295.2803 434.3252 295.2803 437.4785 c
295.2803 438.3838 295.9258 439.3252 297.0508 440.0586 c
298.9268 441.2832 302.5371 442.0889 306.5361 440.3301 c
311.2188 438.2695 317.5244 434.4141 320.9121 432.3438 C
322.626 431.3203 322.8662 431.1768 V
322.9307 431.0352 322.9639 430.7822 322.9639 430.4141 c
322.9639 429.0986 322.5957 426.5596 322.1279 424.377 C
323.5146 424.0801 L
325.1289 431.6162 324.0459 432.1582 323.6377 432.3623 C
321.6514 433.5527 L
318.2354 435.6406 311.876 439.5283 307.1064 441.627 c
302.5898 443.6143 298.4492 442.6641 296.2764 441.2461 c
f325.8652 427.793 m
325.6123 425.0107 326.0947 419.6416 326.1152 419.4141 C
327.5273 419.543 L
327.5225 419.5967 327.0361 425.0107 327.2773 427.6641 c
327.502 430.1406 328.7881 431.0195 329.8213 431.0195 C
330.3369 430.9785 331.8037 429.1631 332.874 427.8379 c
334.1475 426.2627 335.5898 424.4766 337.1133 423.1875 C
339.6123 421.3115 L
341.7725 419.7998 343.2002 418.8008 343.3643 416.1846 c
343.5791 412.7383 338.1035 410.4053 338.0479 410.3828 C
338.5938 409.0742 L
338.8574 409.1846 345.0566 411.8203 344.7783 416.2725 c
344.5723 419.5703 342.6504 420.915 340.4248 422.4727 C
338.0293 424.2695 L
336.6084 425.4717 335.21 427.2021 333.9766 428.7285 c
332.0078 431.166 330.9287 432.4365 329.8213 432.4365 c
328.1914 432.4365 326.1768 431.2207 325.8652 427.793 c
f347.9277 417.5684 m
346.8203 416.8291 346.6563 416.1807 346.4082 415.1982 c
346.2432 414.5449 346.0166 413.6504 345.4199 412.2578 c
344.0537 409.0693 338.8545 406.9053 338.8027 406.8848 C
339.3398 405.5723 L
339.5752 405.6689 345.127 407.9756 346.7227 411.6992 c
347.3633 413.1953 347.6055 414.1523 347.7822 414.8516 c
348.0127 415.7627 348.0605 415.9531 348.7139 416.3887 c
349.2607 416.7529 349.8818 416.8252 350.376 416.583 c
351.0771 416.2402 351.5166 415.2969 351.6143 413.9277 c
351.8594 410.5039 352.8516 406.1025 353.9238 403.6904 c
354.1084 403.2744 354.1914 402.7598 354.1914 402.1816 c
354.1914 400.1318 353.1514 397.2715 351.9492 395.0674 C
347.0361 386.4219 346.2002 384.9492 V
344.2412 387.2109 341.7236 390.1533 341.4111 390.6211 C
340.2314 389.835 L
340.7422 389.0703 345.2715 383.8555 345.7861 383.2637 C
346.4434 382.5088 L
353.1934 394.3887 L
354.8242 397.3789 356.333 401.7598 355.2188 404.2666 c
354.2041 406.5488 353.2627 410.7461 353.0283 414.0293 c
352.8457 416.583 351.6787 417.5234 351 417.8555 c
350.0469 418.3232 348.8994 418.2148 347.9277 417.5684 c
f338.8369 386.2119 m
338.876 386.1748 342.7881 382.5 343.7314 381.085 c
344.1973 380.3867 343.6953 379.4951 342.833 378.1006 C
341.9375 376.5449 L
341.1533 374.9775 340.1523 371.3242 338.8779 365.377 C
338.7949 364.9814 L
338.0576 361.4961 336.9443 356.2275 330.1387 354.4131 c
322.8223 352.4619 315.5752 353.667 309.7305 357.8066 C
308.9121 356.6504 L
315.1055 352.2627 322.7734 350.9824 330.5039 353.0439 c
338.1504 355.083 339.4219 361.0957 340.1807 364.6885 C
340.2646 365.0801 L
341.4961 370.8281 342.4854 374.4717 343.2051 375.9111 C
344.0391 377.3564 L
344.9561 378.8438 345.9043 380.3809 344.9111 381.8711 c
343.8779 383.4219 339.9717 387.0898 339.8057 387.2451 C
338.8369 386.2119 L
f240.1797 380.5283 m
238.9009 377.7881 238.6592 374.8008 239.5488 372.7324 c
240.0669 371.5283 240.9482 370.6895 242.0977 370.3066 c
245.0806 369.3115 253.9473 365.3301 255.5386 363.5117 c
257.4399 361.3389 259.9531 363.2168 261.4541 364.3389 C
262.2148 364.8887 L
262.8022 365.2803 263.98 366.4082 265.4712 367.8359 c
267.5913 369.8672 271.1401 373.2656 272.2437 373.541 C
271.8999 374.916 L
270.5366 374.5752 267.9692 372.1914 264.4912 368.8604 c
263.165 367.5898 261.9121 366.3906 261.4287 366.0684 C
260.6055 365.4736 L
258.5981 363.9736 257.4873 363.4375 256.605 364.4453 c
254.6309 366.7012 245.1851 370.7715 242.5459 371.6504 c
241.7798 371.9063 241.2095 372.458 240.8511 373.292 c
240.1274 374.9746 240.3677 377.5801 241.4639 379.9287 c
243.1128 383.4619 245.9688 385.6406 245.9976 385.6621 C
245.1465 386.7949 L
245.0181 386.6992 241.9839 384.3945 240.1797 380.5283 c
f257.0708 358.7275 m
257.7646 358.0332 258.8555 358.2715 260.2363 358.5732 c
261.8403 358.9238 263.8364 359.3594 265.8086 358.5703 c
269.647 357.0352 278.0439 355.4121 282.3516 360.2578 C
281.292 361.1992 L
277.7822 357.251 270.4243 358.251 266.335 359.8867 c
263.959 360.8369 261.6323 360.3291 259.9341 359.958 c
259.2734 359.8135 258.2764 359.5957 258.0718 359.7314 C
257.8555 359.9502 257.7603 360.5371 257.7603 361.2578 c
257.7603 361.9766 257.854 362.8281 258.0146 363.5801 C
256.6289 363.877 L
256.4902 363.2295 255.8594 359.9385 257.0708 358.7275 c
f275.4673 348.3594 m
278.311 343.7051 283.458 341.2695 287.0718 341.2695 c
289.1069 341.2695 292.0293 342.3809 295.123 343.5586 c
297.1621 344.334 299.2705 345.1357 300.9834 345.5391 c
305.2607 346.5449 307.1953 347.377 307.7715 351.1211 c
308.3154 354.6563 306.4346 356.8535 306.3545 356.9453 C
305.2852 356.0146 L
305.3477 355.9414 306.8105 354.1953 306.3711 351.3359 c
305.9375 348.5225 304.8301 347.8994 300.6592 346.918 c
298.8545 346.4941 296.7012 345.6748 294.6191 344.8828 c
291.7813 343.8037 288.8462 342.6875 287.0718 342.6875 c
283.9316 342.6875 279.2212 344.9336 276.6763 349.0977 c
274.147 353.2373 275.4771 357.2051 275.4907 357.2441 C
274.1533 357.7148 L
274.0879 357.5273 272.5747 353.0918 275.4673 348.3594 c
f292.3218 343.3115 m
291.1548 330.1455 300.8213 319.9785 v
302.9883 319.4785 l
302.3223 322.4775 303.4883 325.3115 v
304.6543 328.1455 306.6543 330.4785 y
308.9873 323.9785 321.1543 322.4785 v
333.3213 320.9785 341.6543 319.8115 y
344.1543 319.8115 l
342.3203 321.4795 342.6543 324.1455 v
342.9883 326.8115 344.4883 330.1455 344.3213 331.4785 c
355.8213 330.6445 363.3213 337.3115 v
360.1543 337.9795 356.8213 340.6455 v
353.4883 343.3115 350.9873 351.4795 345.1543 356.6455 c
357.6543 358.3115 363.1543 365.3115 v
363.1543 398.4785 l
354.4883 404.6455 l
354.8223 402.3125 354.4883 399.6455 v
354.1543 396.9785 346.1543 384.3115 y
341.9883 388.8115 l
340.8213 390.3125 340.3213 389.1455 v
339.8213 387.9785 338.9883 386.3115 y
343.8213 382.4785 344.3213 381.4785 v
344.8213 380.4785 343.9883 378.1455 343.3213 377.1455 c
342.6543 376.1455 340.3223 368.9785 339.9883 367.4785 c
339.6543 365.9785 338.4463 359.6035 336.1963 357.1035 c
333.9463 354.6035 326.6963 351.9785 319.8213 352.9785 c
312.9463 353.9785 310.6963 356.2285 y
308.9463 357.4785 l
306.8213 356.7285 l
306.1963 355.6035 306.6963 354.4785 v
307.1963 353.3535 307.9463 349.8535 305.5713 347.8535 c
303.1963 345.8535 298.0713 345.2285 y
292.3218 343.3115 l
f239.6553 374.9785 m
239.3218 372.8115 241.8218 371.3115 v
244.3218 369.8115 253.3218 367.3125 257.3218 363.1455 c
256.9468 361.6035 257.0718 360.3535 v
257.1968 359.1035 258.4468 358.8535 259.9468 359.2285 c
261.4468 359.6035 264.3218 360.1035 266.0718 359.2285 c
267.8218 358.3535 271.5718 357.3535 274.3218 357.4785 c
273.6968 353.1035 274.9468 350.2285 v
276.1968 347.3535 280.6968 343.2285 284.5718 342.7285 c
274.1968 338.1035 263.0718 336.2285 v
260.1968 336.2285 258.6968 334.4785 v
257.1968 332.7285 250.1968 326.4785 249.6968 326.3535 c
249.1968 326.2285 249.1968 335.2285 y
242.9468 334.3535 237.8218 334.4785 v
232.6968 334.6035 227.8218 333.4785 225.8218 330.7285 c
225.6968 351.3535 l
227.5718 355.6035 230.3218 357.3535 v
228.3218 357.4785 225.8218 356.8535 v
226.0718 363.9785 l
232.2388 371.1035 239.6553 374.9785 v
f257.9468 422.3535 m
256.4468 423.4785 255.8218 424.9785 v
255.1968 426.4785 247.5718 441.3535 225.8218 436.4785 c
225.8218 432.4785 l
230.5718 430.2285 232.4468 424.9785 v
227.1968 425.3535 225.9468 425.6035 v
225.8218 392.1035 l
232.1968 387.3535 244.9468 386.7285 v
243.1968 389.9785 244.3218 395.1035 v
245.4468 400.2285 248.6968 405.4785 249.1968 406.2285 c
249.6968 406.9785 255.0718 417.4785 255.4468 418.7285 c
255.8218 419.9785 257.1968 421.9785 257.9468 422.3535 c
f269.1968 422.1035 m
264.8218 430.1035 259.0718 436.3535 v
253.3218 442.6035 241.9468 445.3535 239.0718 445.4785 c
245.0718 451.6035 258.0718 453.3535 v
255.1968 468.6035 255.1968 468.9785 v
255.1968 469.3535 255.4468 469.2285 256.0718 468.6035 c
256.6968 467.9785 259.9468 464.2285 264.9468 460.8535 c
269.9468 457.4785 276.5718 456.8535 281.1968 454.8535 c
285.8218 452.8535 294.3218 449.1035 298.5713 441.7285 c
294.9468 441.4785 294.5718 437.4785 v
295.3218 429.4785 l
295.5718 428.2285 295.0718 428.1035 v
294.5718 427.9785 293.1968 427.3535 y
292.5718 430.4785 290.3218 431.6035 v
288.0718 432.7285 282.0718 428.7285 y
272.1968 424.7285 273.8218 417.9785 v
273.1968 417.4785 272.5718 418.4785 v
271.9468 419.4785 270.8218 421.4785 269.1968 422.1035 c
f299.9463 442.1035 m
304.0713 445.3535 306.5713 448.7285 v
309.0713 452.1035 312.6963 464.2285 329.9463 466.4785 c
333.1963 476.3535 342.1963 482.9785 v
351.1963 489.6035 363.1963 493.4785 y
360.3213 491.1035 359.4463 489.3535 v
358.5713 487.6035 356.4463 480.9785 355.5713 479.2285 c
359.8213 476.9785 363.5713 472.1035 v
363.4463 469.9785 l
360.0713 470.1035 357.0713 470.2285 v
354.0713 470.3535 348.4463 470.4785 345.0713 464.4785 c
349.5713 462.9785 353.5713 462.3535 v
357.5713 461.7285 361.8213 462.9785 363.1963 465.8535 c
363.0713 463.7285 l
360.4463 459.8535 360.0713 457.3535 v
359.6963 454.8535 358.3213 447.4785 351.8213 440.6035 c
356.0713 439.3535 359.0713 435.8535 v
362.0713 432.3535 363.0713 432.2285 y
358.3213 422.8535 351.6963 416.9785 v
350.4463 417.7285 349.1963 417.4785 v
347.9463 417.2285 347.3213 416.3535 346.9463 414.9785 c
346.5713 413.6035 345.8213 409.2285 340.1963 406.7285 c
338.9463 406.3535 338.8213 407.4785 v
338.6963 408.7285 l
337.9463 409.6035 339.4463 410.2285 v
340.9463 410.8535 343.9463 412.2285 344.0713 416.2285 c
344.1963 420.2285 340.5713 421.4785 339.4463 422.2285 c
338.3213 422.9785 331.9463 429.7285 331.4463 430.4785 c
330.9463 431.2285 329.5713 431.8535 328.1963 431.3535 c
326.8213 430.8535 325.8213 426.1035 326.6963 420.3535 c
325.1963 422.7285 323.3213 423.4785 v
322.4463 424.1035 322.9463 425.3535 v
323.4463 426.6035 324.0713 430.2285 323.6963 430.9785 c
323.3213 431.7285 321.6963 432.8535 y
313.4463 437.2285 310.8213 438.9785 v
308.1963 440.7285 302.4463 442.3535 299.9463 442.1035 c
f*u
1 D
317.9824 520.499 m
316.8643 520.2197 315.0566 520.0264 312.9648 519.8037 c
310.1768 519.5059 307.0166 519.168 304.1602 518.502 c
297.7734 517.0117 297.9189 510.1465 298.1162 508.0781 c
298.3857 505.2393 297.8662 500.459 297.4873 496.9688 C
297.2832 495.0488 L
297.0684 492.8955 297.6816 491.0117 298.9658 489.8809 c
299.8223 489.1279 301.3867 488.3555 303.9805 488.9541 c
308.5313 490.0049 309.709 494.4248 309.8262 494.915 C
310.2959 495.8711 310.709 497 311.1836 498.3105 C
312.4766 501.708 L
313.4727 504.127 317.8467 507.208 320.6211 508.5029 C
321.0273 508.6904 L
323.3047 509.7402 326.9736 511.4316 326.9736 515.083 c
326.9736 515.4619 326.9336 515.8613 326.8496 516.2842 c
326.5381 517.8369 325.7529 519.0205 324.5156 519.8037 c
322.5713 521.0342 319.8662 520.9697 317.9824 520.499 c
f0 D
299.9023 490.9453 m
298.9648 491.7705 298.5244 493.2148 298.6934 494.9082 C
298.8955 496.8154 L
299.2822 500.3662 299.8105 505.2305 299.5264 508.2119 c
299.3574 509.9912 299.2148 515.8926 304.4824 517.1221 c
307.2539 517.7686 310.3682 518.1006 313.1152 518.3945 c
315.2598 518.623 317.1123 518.8213 318.3262 519.124 c
319.9248 519.5234 322.1914 519.5977 323.7578 518.6064 c
324.6553 518.0381 325.2275 517.1631 325.459 516.0059 c
326.0889 512.8633 323.5557 511.417 320.4336 509.9775 C
320.0215 509.7871 L
317.6992 508.7031 312.4785 505.4346 311.166 502.248 C
309.8516 498.793 L
309.3779 497.4873 308.9697 496.3604 308.5205 495.4619 C
308.4824 495.3857 L
308.4629 495.2998 L
308.4248 495.1338 307.4932 491.2197 303.6621 490.335 c
302.0723 489.9688 300.7725 490.1797 299.9023 490.9453 c
f*U
281.1655 489.4424 m
273.2842 485.4141 267.7798 478.0957 267.7798 471.6445 c
267.7798 464.335 271.0342 461.7158 273.7642 460.8057 c
277.0806 459.7002 288.0698 461.8115 295.5859 473.5977 c
303.0449 485.2959 300.8887 490.0879 300.793 490.2861 C
299.5107 489.6816 L
299.5303 489.6377 301.333 485.248 294.3906 474.3594 c
287.395 463.3887 277.1216 461.1807 274.2124 462.1504 c
270.8843 463.2598 269.1968 466.4541 269.1968 471.6445 c
269.1968 477.585 274.3838 484.3848 281.811 488.1807 c
289.0967 491.9053 297.9648 492.7646 298.0537 492.7725 C
297.9229 494.1836 L
297.5498 494.1494 288.7007 493.2939 281.1655 489.4424 c
f260.6084 507.5957 m
258.2393 504.7188 258.3877 500.6973 261.0371 495.9658 c
263.1553 492.1816 264.1172 489.4189 263.1362 485.6572 c
262.4204 482.9131 262.5693 479.4648 264.5151 477.9434 c
266.0386 476.7539 268.2749 476.9482 271.1611 478.5225 C
270.4824 479.7666 L
268.8706 478.8877 266.6787 478.0518 265.3882 479.0605 c
264.0205 480.1289 263.9097 483.0078 264.5073 485.2998 c
265.6099 489.5254 264.5728 492.5518 262.2734 496.6582 c
259.9004 500.8965 259.708 504.2734 261.7021 506.6943 c
264.02 509.5078 267.4888 509.8047 271.4702 507.5293 c
274.4917 505.8027 276.2627 503.5127 278.314 500.8623 c
279.3208 499.5596 280.3628 498.2139 281.6338 496.832 c
285.5938 492.5283 291.6353 491.6455 291.8906 491.6104 C
292.0864 493.0137 L
292.0288 493.0215 286.2856 493.8691 282.6768 497.792 c
281.4468 499.1289 280.4238 500.4512 279.4346 501.7295 c
277.3804 504.3848 275.4399 506.8936 272.1733 508.7598 c
267.5908 511.3789 263.3755 510.9541 260.6084 507.5957 c
f303.5645 488.9844 m
303.6553 488.9482 305.7793 488.0449 305.7793 484.1445 c
305.7793 481.2383 304.1094 478.5557 302.5381 477.5078 c
301.9648 477.126 301.4385 476.9893 301.0938 477.1328 c
300.0586 477.5635 299.8457 480.8389 300.0273 482.916 C
298.6152 483.041 L
298.5244 482.0078 298.1895 476.8086 300.5488 475.8242 c
301.3496 475.4902 302.335 475.6699 303.3242 476.3291 c
305.249 477.6123 307.1973 480.709 307.1973 484.1445 c
307.1973 489.0791 304.1982 490.2607 304.0703 490.3086 C
303.5645 488.9844 L
f311.251 483.5166 m
308.4326 483.2354 307.3018 484.9482 307.2549 485.0215 C
306.0508 484.2734 L
306.1152 484.1689 307.6602 481.7334 311.3916 482.1064 c
315.1807 482.4854 316.6172 488.2334 316.6768 488.4775 C
315.2998 488.8125 L
314.959 487.418 313.5674 483.748 311.251 483.5166 c
f325.7969 512.2705 m
329.5186 512.1436 331.959 511.0635 332.8535 509.1445 c
333.877 506.9512 332.7266 504.2383 331.4307 502.5811 c
328.6885 499.0781 327.96 495.082 327.4785 492.4385 C
327.293 491.4512 L
327.0439 490.2012 325.7549 488.0186 323.6709 487.0771 c
321.875 486.2656 319.8574 486.4951 317.6768 487.7578 c
311.75 491.1895 311.0322 497.1602 311.0264 497.2207 C
309.6162 497.0703 L
309.6455 496.7969 310.3965 490.335 316.9658 486.5313 c
320.2041 484.6572 322.7168 485.0908 324.2549 485.7861 c
326.957 487.0068 328.3838 489.6768 328.6836 491.1729 C
328.873 492.1846 L
329.3301 494.6914 330.0205 498.4805 332.5459 501.708 c
334.0898 503.6807 335.4326 506.9688 334.1377 509.7441 c
333.3467 511.4414 331.2656 513.5029 325.8457 513.6865 C
325.7969 512.2705 L
f333.5352 507.9893 m
334.7725 507.2988 L
334.8682 507.4678 337.165 511.4365 342.4883 511.4365 c
347.8086 511.4365 350.2979 507.5225 350.4473 505.4277 c
350.5234 504.3701 349.9033 502.5537 349.3037 500.7969 c
348.6787 498.9658 348.0322 497.0713 347.9463 495.5176 c
347.7861 492.6074 346.9736 487.1924 345.6738 484.2656 c
344.5332 481.6992 343.1719 479.8779 337.0186 481.6592 c
331.0332 483.3916 328.0303 487.499 328.0303 489.3115 C
326.6123 489.3115 L
326.6123 486.748 330.0918 482.1885 336.624 480.2979 c
343.1445 478.4102 345.415 480.1963 346.9688 483.6904 c
348.3418 486.7813 349.1943 492.4209 349.3623 495.4395 c
349.4375 496.7979 350.0518 498.5986 350.6455 500.3398 c
351.3203 502.3174 351.957 504.1846 351.8613 505.5293 c
351.6494 508.4824 348.5244 512.8535 342.4883 512.8535 c
336.3096 512.8535 333.6455 508.1875 333.5352 507.9893 C
f291.6782 503.5186 m
288.7334 503.415 286.6079 502.3926 285.6934 500.6396 c
283.4785 496.3945 285.564 494.2334 285.6543 494.1436 C
286.6641 495.1377 L
286.6055 495.2012 285.2432 496.7129 286.9502 499.9844 c
287.6089 501.2461 289.3501 502.0186 291.728 502.1025 c
294.5107 502.2012 297.1855 501.3057 297.7178 500.4404 C
298.9248 501.1826 L
297.9482 502.7705 294.4736 503.6182 291.6782 503.5186 c
f288.5317 511.1758 m
286.6191 510.458 285.334 509.2568 284.8159 507.7021 c
283.3442 503.2881 286.2505 500.8633 286.375 500.7617 C
287.272 501.8594 L
287.1787 501.9365 285.0073 503.7949 286.1606 507.2539 c
286.6382 508.6875 287.9849 509.457 289.0303 509.8496 c
291.874 510.918 295.8218 510.5137 298.6299 508.8672 C
299.3467 510.0898 L
296.145 511.9668 291.7988 512.4033 288.5317 511.1758 c
f291.8228 518.1045 m
286.0332 515.0283 287.4653 510.3096 287.4805 510.2627 C
288.8315 510.6895 L
288.7861 510.8379 287.7769 514.3496 292.4878 516.8525 c
297.335 519.4277 301.0693 516.6973 301.2275 516.5791 C
302.083 517.709 L
301.8984 517.8496 297.4912 521.1152 291.8228 518.1045 c
f287.877 530.542 m
285.9648 530.5234 284.2422 529.7373 283.688 528.6289 c
282.9688 527.1904 281.3501 526.3066 280.6831 526.1729 c
280.6479 526.166 277.147 525.4434 275.415 523.0615 c
274.6577 522.0205 274.3862 520.7861 274.147 519.6973 c
273.9448 518.7793 273.7544 517.9131 273.3208 517.4795 c
272.9961 517.1543 272.416 516.9814 271.7451 516.7813 c
270.4961 516.4082 268.9414 515.9443 267.8804 514.1768 c
266.2515 511.4619 266.7612 509.8984 266.8247 509.7295 C
268.1587 510.208 L
268.1553 510.2188 267.8306 511.3389 269.0962 513.4473 c
269.874 514.7441 271.0313 515.0889 272.1504 515.4229 c
272.9702 515.668 273.7446 515.8994 274.3228 516.4775 c
275.0493 517.2041 275.2832 518.2666 275.5308 519.3926 c
275.751 520.3926 275.9785 521.4268 276.5615 522.2275 c
277.7256 523.8291 280.1895 524.6289 280.9604 524.7832 c
282.0313 524.9971 284.041 526.166 284.9556 527.9951 c
285.2231 528.5293 286.4658 529.1104 287.8906 529.124 c
288.8579 529.1338 290.6162 528.8887 291.5273 527.1494 c
293.2832 523.7979 294.1128 518.4258 294.1211 518.3721 C
295.5225 518.584 L
295.4878 518.8135 294.6499 524.2432 292.7832 527.8076 c
291.8618 529.5654 290.0737 530.5625 287.877 530.542 c
f305.8428 532.9473 m
304.7549 532.4453 303.7266 531.9717 302.7334 531.8477 c
301.7041 531.7197 300.6318 532.1445 299.4961 532.5938 c
298.0146 533.1816 296.3345 533.8467 294.4653 533.3271 c
291.2354 532.4297 289.7788 530.1143 289.7183 530.0166 C
290.9238 529.2705 L
290.936 529.29 292.1714 531.2188 294.8452 531.9619 c
296.2554 532.3535 297.5762 531.8311 298.9746 531.2764 c
300.2256 530.7803 301.5205 530.2676 302.9092 530.4414 c
304.1201 530.5928 305.2969 531.1357 306.4355 531.6602 c
307.9707 532.3672 309.4209 533.0352 310.8652 532.7803 c
312.1738 532.5498 313.2148 532.1328 314.1338 531.7656 c
315.1592 531.3545 316.0449 531.001 316.9092 531.1084 c
318.0889 531.2559 324.4063 530.6387 326.7207 526.9365 c
328.4385 524.1865 327.2461 521.9063 326.0938 519.6992 C
325.1582 517.7275 L
326.4844 517.2295 L
327.3496 519.043 L
328.5625 521.3623 330.0713 524.249 327.9219 527.6875 c
325.2549 531.9541 318.2764 532.708 316.7334 532.5146 c
316.2314 532.4521 315.5381 532.7295 314.6602 533.0811 c
313.7266 533.4551 312.5645 533.9199 311.1113 534.1758 c
309.2305 534.5078 307.5088 533.7148 305.8428 532.9473 c
f327.2568 528.6836 m
327.3838 527.2725 L
327.4355 527.2773 332.5898 527.6719 336.292 523.5078 c
339.9785 519.3604 337.8311 511.9209 337.8086 511.8467 C
339.167 511.4424 L
339.2676 511.7773 341.5645 519.709 337.3506 524.4492 c
333.1611 529.1621 327.4961 528.7061 327.2568 528.6836 C
f317.6143 486.6035 m
317.6172 486.5479 317.9199 481.0166 316.4824 476.7021 c
315.585 474.0117 313.1807 472.4521 311.3271 472.1426 c
310.5889 472.0195 309.2256 471.9766 308.3838 473.0752 c
306.3838 475.6904 306.1982 479.6338 306.1963 479.6738 C
304.7803 479.6162 L
304.7871 479.4375 304.9814 475.1914 307.2588 472.2139 c
308.2012 470.9814 309.7695 470.4453 311.5605 470.7451 c
314.3223 471.2061 316.8994 473.4717 317.8262 476.2539 c
319.3525 480.8311 319.043 486.4492 319.0283 486.6865 C
317.6143 486.6035 L
f298.9375 442.2949 m
300.2051 441.6611 L
306.5215 454.2939 308.6299 472.2178 308.6504 472.3975 C
307.2422 472.5586 L
307.2217 472.3818 305.1396 454.7002 298.9375 442.2949 C
f307.0713 473.9785 m
304.0713 472.2285 301.5713 467.4785 v
299.0713 462.7285 299.3213 459.3535 299.1963 457.6035 c
299.0713 455.8535 298.4463 451.6035 298.0713 450.1035 c
297.6963 448.6035 291.5718 455.4785 288.6968 466.8535 c
296.3218 472.2285 298.9463 481.3535 v
298.1963 477.9785 300.8213 476.4785 v
303.4463 474.9785 305.0713 479.4785 y
306.1963 475.4785 307.0713 473.9785 v
f315.4463 473.3535 m
318.4463 477.8535 318.4463 486.1035 v
324.9463 484.2285 326.9463 488.8535 v
328.3213 484.3535 333.5713 482.2285 v
332.8213 478.7285 329.6963 476.1035 v
326.5713 473.4785 320.9463 468.6035 321.3213 463.3535 c
321.6963 458.1035 320.5713 459.6035 y
319.9463 462.3535 319.8213 463.9785 v
319.6963 465.6035 315.5713 468.8535 315.4463 473.3535 c
f346.5713 511.6035 m
347.0713 513.4785 346.5713 514.4785 v
346.0713 515.4785 353.8213 523.9785 362.1963 519.3535 c
361.3213 525.3535 354.1963 528.7285 v
347.0713 532.1035 337.6963 529.3535 334.8213 526.2285 c
340.6963 523.7285 338.3213 511.2285 v
340.9463 513.2285 346.5713 511.6035 v
f271.9468 516.1035 m
272.3218 524.3535 262.9468 530.9785 v
253.5718 537.6035 248.0718 537.2285 244.9468 538.3535 c
241.8218 539.4785 239.6968 541.6035 238.9468 542.4785 c
234.8218 542.9785 l
236.1968 540.9785 236.1968 538.7285 v
236.1968 536.4785 237.0718 526.7285 241.4468 521.6035 c
237.4468 521.4785 233.1968 520.4785 v
228.9468 519.4785 226.8218 519.6035 226.0718 520.7285 c
226.0718 515.1035 l
228.1968 509.2285 236.0718 504.9785 v
234.3218 502.8535 232.3218 501.4785 v
230.3218 500.1035 227.1968 498.8535 225.8218 498.3535 c
225.8218 497.6035 l
228.9468 496.9785 230.4468 496.2285 v
231.9468 495.4785 250.9888 486.7705 261.6553 496.3115 c
258.9468 499.8535 259.8218 504.2285 v
258.5718 508.8535 267.1968 509.6035 v
266.6968 513.9785 271.9468 516.1035 v
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
