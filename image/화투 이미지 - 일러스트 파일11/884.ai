%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (884.ai)
%%CreationDate: 3/25/2002 6:39 PM
%%BoundingBox: 220 303 374 542
%%HiResBoundingBox: 220.7949 303.8477 373.8652 541.958
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 12058 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC8C4BF820F826F820F8
%26F820F826F820F826F820F826F820F826F820F820F8F8F826F820F826F8
%F8F826F8F8F826F820F826FD05F820F826F820F820F820F8F8F820206EFD
%06FC99FFFD05FC4427F827204B2027204B2027204B444B444B444B446F68
%6F6893684BF8F8F827446F686F68934420F86F686FF827446F68934427F8
%4B20F8206F686F689320276893F86F684BF84BFD05FCC2FFFD04FC68F820
%6F444A204B204A204B2020F827F820F827F820FD07F84A8CFC68F820FCFC
%6EFD05F827F820FD05F827208CFCFC8C4AF8278CFCFCFCF86EFCF8F820F8
%27F826FD04FCBBFFFD04FC27F820FD0DF8272027F8272027F827F82768FC
%FCB420F844B44427F84B6827F8F8F827446F4427F82744FD06FCB4202020
%92FC4B20FCF84B686F686FF892FCFCFCC2FFFCFCFC68F84B204A204B204A
%204B204A204B204A202720202027F8F8F88CFCFCFC6EF8202027F8F8448C
%20F8F827F84AF8F8F84AFC8C20F8F82720688CFCFCFC8C4BF82020F8FCFD
%07F820FCFCFCBBFFFCFCFC6827444B204B444B204B444B204B444B204B44
%4B2027F8278CFCFCFC6827F827F8272093684BF82720F8204BF82744F8F8
%27F893FC93444BF827F8F8F827F8F8F827F893F84B68B46893204BFCFCFC
%C2FFFCFCFC6EF8FD0EFC6E68FC68F8F892FCFCFC6FF8F82027F8F82027F8
%F82027F8262020F826FD05F827F8F8206F8CFCFCFC8C4AF827FCFCFC2768
%F8F820FD05F8FCFCFCBCFFFCFCFC6827FD0BFC922020F820F82044FCFCFC
%6827F827F82744B444F8F827F8F8F827F827F827FD04F820B4FCFC684BF8
%F8F827446F8C92F86FFCFC204BF892FD04FC204BFCFCFCC2FFFCFCFC6EF8
%FD09FC8C27F820686EF8F88CFCFC4AF8F820FCFCFC44F8F8274468F8F8F8
%20444BF8F82026F84A2020F8202092FCFC8C6E2020FD05F84BFC4A20FD07
%F820FCFCFC99FFFCFCFC6827FD08FC20272093FC4BF827FC9320F8F86FFD
%04FC686FFC934427F82720B44427206F6827F86FFCFCFC934427F8F8F84B
%446F68FCFCFC684BF893204BF86F6893686F204BFCFCFCC2FFFCFCFC6FF8
%FD06FC92F82068FCFC4AF8274420F82768FD06FC6FF84AFC6FF8208C92F8
%F844FC20F84427F8F8206F8CFCFCFC8C6E2027FD09F84A20F8F820F827F8
%F8F8FCFCFCBBFFFCFCFC6827FD05FC4BF84BFCFCFC6FF8F8F82744B4FD08
%FC68F8F827F86FFC6FF84B8CB4F82744FCFCFC684BF8F8F827206F8CFD08
%FC6F8C27F820F84B444B204B204BFCFCFCC2FFFCFCFC68F8FCFCFC8C26F8
%8CFCFCFC8CF8F8F826FD0BFC68FD04F84427F868FCFCF82020F8F82044FD
%04FC6E4420FD05F827204A446E686844F8F84A204B204AF8F8F8FCFCFCBB
%FFFCFCFC6827FCFC682720B4FCFCFC93FD04F820FD0BFC68FD06F893FCB5
%F827FCFCFC934427F827206F8CFD04FCB46893444B20272027F827F8F820
%4B444B204B204BFCFCFCC2FFFCFCFC6EF8FC44F844FD04FC92FD05F84AFD
%0BFC6EFD07F84AF827FD08FC4426F8F8F820206F8CFD0BFC20F8204B204A
%202720FCFCFCBCFFFCFCFC6827202068FD04FC6FFD06F844FD0BFC68FD09
%F82093FD0BFC6F444BF820F827F84B444B446F686F686FF820F84B444BF8
%27FCFCFCC2FFFCFCFC6EF8F868FD04FC6FFD07F84BFD0BFC6EFD0BF82768
%FD0FFC6868204B2020F826F820F820F84A204B202020FCFCFC99FFFCFCFC
%44F88CFD04FC4BFD08F844FD0BFC68FD0EF84B68FD18FC27F8F8F827F84B
%FCFCFCC2FFFCFCFC6FF8FCFCFC8C20FD09F84BFD0BFC6FFD11F82644FD15
%FC8CF8204B442020FCFCFCBBFFFCFCFC6827FCFC4420FD0AF820FD0BFC20
%FD14F827204B68B4FD10FC44F8F827F827FCFCFCC2FFFCFCFC68F88CFD0D
%F84AFD0AFC44FD1CF820204B686868FD08FC8CF82020F820FCFCFCBBFFFC
%FCFC6827FD0EF820FD09FC44F844FD2EF827FCFCFCC2FFFCFCFC6EFD0FF8
%4AFD08FC68F8446EFD2EF820FCFCFCBCFFFCFCFC68FD0FF844FD07FC68F8
%44FCFD2FF827FCFCFCC2FFFCFCFC6EFD0FF84BFD06FC8C2020FC20FD2FF8
%20FCFCFC99FFFCFCFC68FD0FF844FD05FC8C2720FC202720FD2EF84BFCFC
%FCC2FFFCFCFC6FFD0FF84BFD05FC20F8FC44F86827FD2EF820FCFCFCBBFF
%FCFCFC68FD0FF820FD04FC27F8B468F86892FD2FF827FCFCFCC2FFFCFCFC
%68FD0FF84AFCFCFC4AF8FC68F844FCFD30F820FCFCFCBBFFFCFCFC68FD0F
%F820FCFC6FF8938C2720B5F82720FD2EF827FCFCFCC2FFFCFCFC6EFD0FF8
%4AFC92F86E8C2720FCF827FC4AFD2EF820FCFCFCBCFFFCFCFC68FD0FF844
%92F86FFC27F8FC20278CFC44FD2EF827FCFCFCC2FFFCFCFC6EFD0FF84BF8
%4AFC27F8FC20208CFCFC20FD2EF820FCFCFC99FFFCFCFC68FD10F827FC4B
%F8B420278CFCFC6FFD2FF84BFCFCFCC2FFFCFCFC6FFD10F8FC4AF89244F8
%68FCFC4AF827FD2EF820FCFCFCBBFFFCFCFC68FD0FF82093F86F442068FC
%FC93F89220FD2EF827FCFCFCC2FFFCFCFC68FD0FF826F86F44F868FCFC8C
%F86FFC4AFD2EF820FCFCFCBBFFFCFCFC68FD10F84B68F844FCFCB4F86FFC
%FC20FD2EF827FCFCFCC2FFFCFCFC6EFD0FF82068F844FCFCFCF826FCFCFC
%FD2FF820FCFCFCBCFFFCFCFC68FD0FF820F844FCFCFCF827FCFCFC27FD2F
%F827FCFCFCC2FFFCFCFC6EFD10F820FCFCFC20F8FCFC8C20F84BFD2EF820
%FCFCFC99FFFCFCFC68FD10F8932027F8F8F8272027F8B544FD2EF84BFCFC
%FCC2FFFCFCFC6FFD0FF820F82668FCFCFC6820F8FCFC4BFD2EF820FCFCFC
%BBFFFCFCFC68FD10F8B4FD07FC2744FC20FD2EF827FCFCFCC2FFFCFCFC68
%FD0FF84AFD08FC204BFC4AFD2EF820FCFCFCBBFFFCFCFC68FD0FF820FD08
%FC6F20FC20FD2EF827FCFCFCC2FFFCFCFC6EFD0FF820F82720FD05FC6827
%FC4AFD2EF820FCFCFCBCFFFCFCFC68FD10F86F442768FD04FC4B20FC44FD
%2EF827FCFCFCC2FFFCFCFC6EFD0FF84BFCFC444BFD04FC204AFC4BFD2EF8
%20FCFCFC99FFFCFCFC68FD0FF844FCFC9320FD04FC2768FC44FD2EF84BFC
%FCFCC2FFFCFCFC6FFD0FF84BFCFC2027FCFCFC92F8FCFC4BFD2EF820FCFC
%FCBBFFFCFCFC68FD0FF820FCFC2744FCFCFC202020B420FD2EF827FCFCFC
%C2FFFCFCFC68FD0FF84AFC8CF84AFCFCFC264427F84AFD2EF820FCFCFCBB
%FFFCFCFC68FD0FF820FCFC6FF8FD05FC8C2720FD2EF827FCFCFCC2FFFCFC
%FC6EFD0FF84AFCFCFC2068FD05FC2020FD2EF820FCFCFCBCFFFCFCFC68FD
%0FF844FCFCFC204BFD05FC4BFD2FF827FCFCFCC2FFFCFCFC6EFD0FF84BFC
%FCFC2644FD05FCFD30F820FCFCFC99FFFCFCFC68FD0FF844FCFCFCF893FC
%FCFCB4F82720FD2EF84BFCFCFCC2FFFCFCFC6FFD0FF84BFCFC4420FD04FC
%F8268C27FD2EF820FCFCFCBBFFFCFCFC68FD0FF820FCFC2744FCFCB4F827
%FCFCFD2FF827FCFCFCC2FFFCFCFC68FD0FF84AFC6FF8FCFCFCF820FCFCFC
%20FD2EF820FCFCFCBBFFFCFCFC68FD0FF820B5F86FFCFC202768FCFCFCFD
%2FF827FCFCFCC2FFFCFCFC6EFD0FF84AF827FCFCFD04F88CFCFC20FD2EF8
%20FCFCFCBCFFFCFCFC68FD10F8278CFC2027FCFC4427FCFC20FD2EF827FC
%FCFCC2FFFCFCFC6EFD10F88CFC20208CFCFC6EF8FCFC26FD2EF820FCFCFC
%99FFFCFCFC68FD0FF844FC682768FCFCFC2027FCFC20FD2EF84BFCFCFCC2
%FFFCFCFC6FFD0FF84BFCF844FCFCFC8CF8F8268C27FD2EF820FCFCFCBBFF
%FCFCFC68FD0FF8204BF8FCFCFC8C27F86F204BFD2FF827FCFCFCC2FFFCFC
%FC68FD0FF826F86EFCFCFC2620FCFC6EFD30F820FCFCFCBBFFFCFCFC68FD
%10F84BFCFCFC4BF8B4FCFC44FD30F827FCFCFCC2FFFCFCFC6EFD10F88CFC
%FC6EF892FCFC44F86820FD2EF820FCFCFCBCFFFCFCFC68FD0FF820FCFCB4
%F84BFCFC68F868FC20FD2EF827FCFCFCC2FFFCFCFC6EFD0FF84BFCFCF827
%FCFC8CF844FCFC26FD2EF820FCFCFC99FFFCFCFC68FD0FF844FC68278CFC
%FC2720FCFCFC20FD2EF84BFCFCFCC2FFFCFCFC6FFD0FF84B8CF844FCFC4A
%F8FD04FC27FD2EF820FCFCFCBBFFFCFCFC68FD0FF8202720FCFC93F892FD
%04FCFD2FF827FCFCFCC2FFFCFCFC68FD0FF820F8FCFCFCF84BFD05FC20FD
%2EF820FCFCFCBBFFFCFCFC68FD10F82744FC2027FD06FCFD2FF827FCFCFC
%C2FFFCFCFC6EFD0FF84A682020F868FD06FC20FD2EF820FCFCFCBCFFFCFC
%FC68FD0FF844FC8CF8206F8CFD05FC20FD2EF827FCFCFCC2FFFCFCFC6EFD
%0FF84BFC68F820F8F844FCFCFC68FD2FF820FCFCFC99FFFCFCFC68FD0FF8
%44FCF86FFCFC682744FC8C27FD2FF84BFCFCFCC2FFFCFCFC6FFD0FF84B44
%F8FD04FC68F88C20F827FD2EF820FCFCFCBBFFFCFCFC68FD0FF8442744FD
%05FCF84BF8B4FD2FF827FCFCFCC2FFFCFCFC68FD0FF84AF8FD06FC4AF84B
%FC20FD2EF820FCFCFCBBFFFCFCFC68FD10F86FFD06FC2027FCFC20FD2EF8
%27FCFCFCC2FFFCFCFC6EFD10F8FCFCFC6E2027FD34F820FCFCFCBCFFFCFC
%FC68FD0FF8206F2020F827446F68FD04FC924427FD2BF827FCFCFCC2FFFC
%FCFC6EFD11F84A68FD0BFC8C4BFD2AF820FCFCFC99FFFCFCFC68FD0FF820
%FD10FC6FFD29F84BFCFCFCC2FFFCFCFC6FFD0FF86FFD10FC8CFD29F820FC
%FCFCBBFFFCFCFC68FD0FF868FD05FC8C6F686F68FD06FC27F86FF827FD25
%F827FCFCFCC2FFFCFCFC68FD0FF8688C6FFD0BF827444AF8F84426F827FD
%24F820FCFCFCBBFFFCFCFC68FD0FF820F8F827F86F20F8204BFCFC8C9344
%27F82768F88C27202720FD22F827FCFCFCC2FFFCFCFC6EFD0FF826F84BF8
%2044F8F82620FD05FC44F8F827202068F820FC6820FD20F820FCFCFCBCFF
%FCFCFC68FD0EF827682744F8204BF8272027FD04FC8CF8F892F86FF86F20
%4BFCFCFC4BFD1FF827FCFCFCC2FFFCFCFC6EFD0DF820204B2026F827F820
%2026F8FD04FC4AF8202068F84BF82620FD05FC20FD1DF820FCFCFC99FFFC
%FCFC6827FD0BF86FF86FF86FF8272027204BF8F88CFCFCB4F82744F8444B
%F84BF84BFD06FC2027FD1BF84BFCFCFCC2FFFCFCFC6FF84AFD09F82720F8
%44F868F8204BF84AF8F844FCFCFC20F844F844F86827F8F8F8FD06FC4A20
%6FFD1AF820FCFCFCBBFFFCFCFC6827FCB44427FD05F8204427204BF86FF8
%4BF827F8F844FCFCFC8C20F827442044F88C27F827FD06FC444BFCFC4420
%FD17F827FCFCFCC2FFFCFCFC68F8FD06FC20F86EF868F84BF826202644FD
%04F8FD04FC4AF88CF84A2026F820F86EF8FD06FC4B20FCFCFC8C4AFD16F8
%20FCFCFCBBFFFCFCFC6827FD05FC6FF84B20274427442768272027F84BF8
%6FFD04FCF827F893F86FF84BF86FFCF868FD05FC206FFD05FC93FD15F827
%FCFCFCC2FFFCFCFC6EF8FD05FCF8F844272026204BF88CF827F84A4420FD
%04FC44F88C27204AF86FF820FCFC204AFD05FCF868FD04FC4AF84B8C26FD
%12F820FCFCFCBCFFFCFCFC6827FD04FC2027206FF86FF84B202768F8F86F
%FC2744FD04FC27F8278C204427F8208CFCFC6FF8B4FCFCFC6FF8FCFCFC68
%27F8928C27F84B4427FD0FF827FCFCFCC2FFFCFCFC6EF8FCFCFC68F8F84B
%20F868F86820F827F868FC8CF8FD04FC8CF827F82068F844F820FD04FC27
%F84A204BF86EFCFC20F820FC44F8F8FCFCFC6820FD0EF820FCFCFC99FFFC
%FCFC6827FCFCFC2720276827204BF86FF84BF893FCFC2027FD04FC2027F8
%4BF84B4420F8FD06FC6FF827206FFC6FF8278CB520F868FCFCB420F844FC
%8C27FD0BF84BFCFCFCC2FFFCFCFC6FF8FCFC6FF88CF86EF84AF82744F8F8
%6FFCFCFC2068FCFCFC8CF8206FF86EF86FF84AFD0AFC8C20F86FFC4AF827
%8CFCFC6FF8208CFC44F8F8FC8C4AFD08F820FCFCFCBBFFFCFCFC6827FCB4
%F8274427442744272027F84BFCFCFC6FF8FD04FC6FF8F8444BF84BF827FD
%0AFC442020B48C27F86FFCFC8C4BF84BFCB4202068FCFCFC68F8444BFD05
%F827FCFCFCC2FFFCFCFC68F8FC20F820274420204BF84AF86FFD04FC2026
%FD04FCF82744F84426F8F844FD08FC92F8F868FC44F820FCFCFC68F8F88C
%FC6EF8208CFD04FC2020FCFCFC4420F8F820FCFCFCBBFFFCFCFC68278CF8
%F84BF86FF84B2027F84BFD05FCF868FCFCFC6827F86F442768F8F8B5FD07
%FC4BF84B8C93F82768FCFCB4202744FC8C27F86FFD05FC4BF8FD04FCB420
%27F827FCFCFCC2FFFCFCFC6EF827F82620F868F86827F820FD05FC92F8FD
%04FC26F892F86E44F8F826FD06FC6820F892FC4AF84BFCFCFC6FF8208CFC
%44F8F8FD07FCF86FFCFC8C4BF82020F820FCFCFCBCFFFCFCFC6827F82720
%27F86FF86FF8208CFD05FC204BFD04FCF827206FF89220F88CFD04FCB420
%2044FC6827F892FCFC8C27F86FFCB4202068FD07FC4427FCFC44F8F86FF8
%27F84BFCFCFCC2FFFCFCFC6EF8F82027F826202644F868FD06FCF844FCFC
%FC44F88CF8206FF84AF8FD04FC6EF8208CFC20F820FCFCFC44F8F8FCFC6E
%F8208CFD07FC8CF88C68F8F8684AF84BF8F820FCFCFC99FFFCFCFC44F8F8
%4B20272027202720FD06FC93F8FD04FC27F8278C274427F84BFCFC8C4BF8
%4BFC93F8278CFCFC93F82768FC8C27F86FFD09FC4B2027F84B6827F86FF8
%27204BFCFCFCC2FFFCFCFC6FF82044F82026F827F8FD07FC4420FD04FCF8
%4BF84A68F844F88CFC44F8F8928C20F84BFCFCFC4BF8268CFC44F8F8FD0B
%FCF8F820FC44F8204AF84BFC4A20FCFCFCBBFFFCFCFC6827444BF84B20F8
%F86FFD07FC2744FCFCFC4427F86FF86F6827F8B4202068FC442020B4FCFC
%8C27F86FFCB4202068FD0AFC93F8F868B420F8684BF86FFCFC204BFCFCFC
%C2FFFCFCFC68F86EF82020F8F820FD08FCF892FCFCFC20204AF84BF88CF8
%26F8208C8CF8F844FCFCFC20F820FCFC6EF8208CFD09FC8C4AF8F8448CF8
%268C20F88CFCFC20F820FCFCFCBBFFFCFCFC68278CF8204BF8F88CFD07FC
%6827FCFCFC93F8F868272027F827F86FFC4BF84B8CFCFC93F82768FC8C27
%F86FFD0AFC6827F86FF86FF84B8C2720B5FCB42027204BFCFCFCC2FFFD04
%FCF84BF84AF8F8F8FD08FC4AF8FCFCFC202720F88C20F8F820FC6820F86F
%FCFCFC4BF84AFCFC44F820FD0BFC20F844FC2020F84A44F8F84A2020F820
%68F88CFCFCFCBCFFFD04FC6FF82744F8F893FD08FC204BFCFCFC26F86F20
%27F82768FC20F844B4FCFC6827F893FC92F82768FD0AFC93F8278CFC8CF8
%F827F8F8F8272027F84B68F820FD04FCC2FFFD05FC4AF820F8F8686E6868
%686E686868F84468686EF84AF827F820684BF8F8446E686820F820686827
%F820446E6868686E6868686E6820F827686844F8F86E44F82068684BF84A
%20F820FD05FC99FFFD06FC932027F8272027F8272027F827F827F8272027
%F827F827F827F827F8272027F827F827F827F827F8272027F8272027F827
%2027F8272027F827F827F827F827F827F827F84B68FD06FCC2FFFD52FCBB
%FFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
373.8652 303.8477 m
220.7949 303.8477 L
220.7949 541.958 L
373.8652 541.958 L
373.8652 303.8477 L
fu228.4175 526.791 m
228.6675 495.166 l
228.4175 355.666 l
228.5425 319.416 l
228.9175 311.166 238.5425 310.791 v
356.418 310.541 l
366.543 312.166 366.043 321.791 v
366.293 525.916 l
365.293 534.666 356.293 535.291 v
237.6675 535.166 l
229.5425 535.166 228.4175 526.791 v
f*u
1 D
0.65 0.53 0.51 1 k
238.4639 535.8745 m
232.6025 535.8745 227.834 531.106 227.834 525.2446 C
227.834 320.5869 L
227.834 314.7256 232.6025 309.957 238.4639 309.957 C
356.1211 309.957 L
361.9824 309.957 366.752 314.7256 366.752 320.5869 C
366.752 525.2446 L
366.752 531.106 361.9824 535.8745 356.1211 535.8745 C
238.4639 535.8745 L
f0 D
229.251 320.5869 m
229.251 525.2446 L
229.251 530.3247 233.3838 534.4575 238.4639 534.4575 C
356.1211 534.4575 L
361.2012 534.4575 365.334 530.3247 365.334 525.2446 C
365.334 320.5869 L
365.334 315.5068 361.2012 311.375 356.1211 311.375 C
238.4639 311.375 L
233.3838 311.375 229.251 315.5068 229.251 320.5869 C
f*U
366.043 332.916 m
346.293 339.666 333.543 345.166 v
320.793 350.666 286.0425 371.166 279.0425 377.916 c
280.0425 519.166 l
294.4956 503.6045 326.793 498.916 v
357.793 494.416 366.043 499.166 y
F228.5425 355.916 m
231.5425 350.666 244.0425 350.166 v
249.7925 356.166 256.5425 361.916 v
257.0425 520.416 l
240.5425 500.166 228.2925 495.916 Y
228.5425 355.916 L
f353.7012 311.3262 m
354.7188 310.3398 L
354.7695 310.3926 359.8984 315.6504 366.2363 319.3887 C
365.5156 320.6094 L
359.0078 316.7705 353.9141 311.5469 353.7012 311.3262 C
f344.2129 311.0039 m
345.207 309.9941 L
345.3105 310.0967 355.7891 320.3711 366.6094 327.7471 C
365.8105 328.9189 L
354.8848 321.4688 344.3184 311.1074 344.2129 311.0039 C
f337.5781 311.5342 m
338.5059 310.4639 L
338.6309 310.5713 351.1426 321.3721 366.248 330.7305 C
365.502 331.9355 L
350.2969 322.5146 337.7031 311.6436 337.5781 311.5342 C
f339.8711 313.3945 m
341.2129 312.9375 L
341.2656 313.0928 346.5957 328.6006 353.9316 337.8936 C
352.8184 338.7725 L
345.3301 329.2861 339.9258 313.5518 339.8711 313.3945 C
f326.959 311.2402 m
327.791 310.0918 L
327.9902 310.2373 347.9512 324.6553 366.0117 333.1924 C
365.4063 334.4736 L
347.2246 325.8789 327.1602 311.3848 326.959 311.2402 C
f342.6094 315.2041 m
342.4766 313.7939 L
342.8418 313.7588 351.5449 312.9766 360.4023 315.4844 C
360.0156 316.8477 L
351.4219 314.415 342.6953 315.1963 342.6094 315.2041 C
f301.1504 311.2568 m
301.9336 310.0752 L
346.9355 339.9092 L
346.1484 341.0889 L
301.1504 311.2568 L
f291.9878 311.5918 m
292.7642 310.4063 L
293.2324 310.7129 339.6055 341.0771 341.5664 342.2207 C
340.8535 343.4453 L
338.8594 342.2832 293.9009 312.8447 291.9878 311.5918 C
f279.3262 311.2627 m
280.0918 310.0693 L
282.2021 311.4248 331.8047 343.2695 334.2949 345.0947 C
333.457 346.2373 L
331.002 344.4385 279.8428 311.5938 279.3262 311.2627 C
f299.1797 348.3652 m
299.9258 344.4688 301.4492 341.832 303.707 340.5283 c
305.5 339.4941 307.6563 339.3682 309.9414 340.1641 c
315.4766 342.0889 314.541 354.9355 314.416 356.3936 C
313.0039 356.2725 L
313.5645 349.7373 312.5313 342.5645 309.4766 341.502 c
308.1621 341.0449 306.2148 340.7178 304.416 341.7559 c
302.5313 342.8447 301.2363 345.1582 300.5723 348.6318 c
299.1094 356.2637 300.0703 364.832 300.0801 364.918 C
298.6714 365.0801 L
298.6304 364.7217 297.6763 356.2148 299.1797 348.3652 c
f280.6851 317.1553 m
282.0669 316.8428 L
282.1187 317.0693 287.3418 339.6484 299.7266 352.8477 C
298.6929 353.8184 L
286.041 340.333 280.7368 317.3857 280.6851 317.1553 C
f265.1992 311.0439 m
266.5527 310.6221 L
266.6772 311.0234 279.1733 350.8887 292.4482 369.0811 C
291.3037 369.917 L
277.8901 351.5342 265.3247 311.4463 265.1992 311.0439 C
f291.6255 368.5967 m
298.292 358.9307 L
299.459 359.7354 L
292.7925 369.4014 L
291.6255 368.5967 L
f288.9526 365.9395 m
290.917 362.9941 297.3652 353.3418 297.8745 352.832 C
298.8882 353.8223 L
298.4365 354.3311 293.4043 361.8184 290.1323 366.7266 C
288.9526 365.9395 L
f287.1587 362.2197 m
287.23 362.1309 294.3413 353.3633 296.6387 350.2461 C
297.7793 351.0859 L
295.4629 354.2305 288.3311 363.0244 288.2593 363.1123 C
287.1587 362.2197 L
f285.0117 358.6963 m
287.6362 355.7295 292.834 349.5488 293.7207 347.3965 C
295.0313 347.9355 L
293.833 350.8457 286.3896 359.2783 286.0732 359.6357 C
285.0117 358.6963 L
f283.5293 355.6777 m
283.5952 355.6084 290.1279 348.7217 291.8896 344.5566 C
293.1953 345.1094 L
291.3325 349.5117 284.8315 356.3652 284.5557 356.6543 C
283.5293 355.6777 L
f281.9902 352.7217 m
284.063 350.1426 289.6162 343.1006 290.4087 341.5156 C
291.6763 342.1504 L
290.6543 344.1943 283.4028 353.2266 283.0947 353.6104 C
281.9902 352.7217 L
f280.1807 348.8613 m
280.25 348.7832 287.1401 341.0586 288.5825 338.334 C
289.8354 338.998 L
288.3125 341.874 281.5254 349.4824 281.2373 349.8047 C
280.1807 348.8613 L
f278.5063 345.0361 m
278.5693 344.9629 284.8281 337.709 286.6138 334.9482 C
287.8042 335.7178 L
285.9648 338.5605 279.8389 345.6611 279.5786 345.9619 C
278.5063 345.0361 L
f277.1587 342.2197 m
277.23 342.1318 284.2837 333.4258 285.4004 331.0332 C
286.6846 331.6328 L
285.4951 334.1826 278.5542 342.749 278.2593 343.1123 C
277.1587 342.2197 L
f275.0664 337.8086 m
275.1372 337.7441 282.1558 331.3555 283.9087 327.8486 C
285.1763 328.4824 L
283.3052 332.2256 276.3149 338.5889 276.0186 338.8574 C
275.0664 337.8086 L
f273.8584 333.8486 m
273.9316 333.7705 281.1646 326.0352 282.6128 323.7832 C
283.8052 324.5488 L
282.2876 326.9092 275.1943 334.4951 274.8931 334.8174 C
273.8584 333.8486 L
f272.3701 330.1699 m
275.688 326.7852 280.834 321.3311 281.4087 320.1816 C
282.6763 320.8164 L
281.8179 322.5322 274.2427 330.2842 273.3818 331.1621 C
272.3701 330.1699 L
f270.6577 326.7207 m
270.7275 326.6338 277.667 318.041 279.1421 316.0742 C
280.2759 316.9238 L
278.7856 318.9111 272.0464 327.2568 271.7603 327.6113 C
270.6577 326.7207 L
f269.8188 322.8955 m
276.6558 314.2236 L
277.7622 315.1084 L
270.9331 323.7705 L
269.8188 322.8955 L
f268.1812 318.5264 m
273.8481 312.1934 L
274.9038 313.1387 L
269.2368 319.4717 L
268.1812 318.5264 L
f271.7949 311.7344 m
271.1235 312.3809 267.7007 315.6768 Y
266.7173 314.6553 L
271.623 309.9316 L
272.0952 310.2393 L
272.623 310.582 324.959 344.5859 329.875 347.208 C
329.209 348.458 L
324.4277 345.9092 277.2881 315.3027 271.7949 311.7344 C
f271.0063 365.374 m
263.6094 364.9951 254.064 363.3359 245.8394 353.7959 c
238.0908 344.8076 227.8457 324.5215 227.7432 324.3174 C
229.0088 323.6807 L
229.1108 323.8828 239.2778 344.0137 246.9126 352.8701 c
254.7866 362.0039 263.9639 363.5938 271.0786 363.958 c
277.4233 364.2832 286.7793 362.001 286.873 361.9775 C
287.2119 363.3545 L
286.8208 363.4502 277.561 365.709 271.0063 365.374 c
f271.5122 364.7041 m
273.1133 355.9697 273.2632 355.1523 V
269.9292 352.7979 245.4185 334.8809 236.7109 311.2441 C
238.041 310.7539 L
247.1855 335.5762 274.1685 354.0615 274.4399 354.2451 C
274.8228 354.5049 L
272.9058 364.96 L
271.5122 364.7041 L
f268.8525 364.3369 m
271.3525 353.6709 L
272.7324 353.9951 L
270.2324 364.6611 L
268.8525 364.3369 L
f266.5752 363.8486 m
267.3506 362.2979 268.4727 354.3447 268.8394 351.4111 C
270.2456 351.5869 L
270.1074 352.6914 268.8677 362.4336 267.8428 364.4824 C
266.5752 363.8486 L
f263.52 363.501 m
264.5044 359.3984 266.3281 349.7979 266.3462 349.7012 C
267.7388 349.9648 L
267.7202 350.0615 265.8906 359.6953 264.8979 363.8311 C
263.52 363.501 L
f260.8872 362.8965 m
262.0054 360.1807 263.6567 347.6992 263.6733 347.5732 C
265.0786 347.7588 L
265.0103 348.2793 263.3857 360.5508 262.1978 363.4355 C
260.8872 362.8965 L
f258.0205 362.3311 m
258.0391 362.2559 259.8623 354.7539 261.1743 345.5654 C
262.5776 345.7666 L
261.2549 355.0264 259.4155 362.5918 259.3975 362.667 C
258.0205 362.3311 L
f254.3677 360.1162 m
254.396 360.0283 257.2036 351.2266 258.6772 342.5469 C
260.0747 342.7852 L
258.5835 351.5654 255.7456 360.4609 255.7173 360.5498 C
254.3677 360.1162 L
f251.5366 358.6094 m
251.5566 358.5498 253.5439 352.498 255.5088 339.8896 C
256.9092 340.1084 L
254.9229 352.8535 252.9639 358.8096 252.8813 359.0566 C
251.5366 358.6094 L
f248.7065 356.4336 m
248.7344 356.3525 251.5337 348.1934 253.0063 336.7422 C
254.4116 336.9238 L
252.9199 348.5293 250.0742 356.8164 250.0454 356.8984 C
248.7065 356.4336 L
f246.0327 353.7881 m
246.0576 353.708 248.5391 345.6934 250.3418 333.8916 C
251.7432 334.1064 L
249.9224 346.0215 247.4106 354.1299 247.3853 354.21 C
246.0327 353.7881 L
f243.5337 350.4521 m
243.5552 350.3838 245.709 343.5059 247.6753 330.5596 C
249.0767 330.7725 L
247.0913 343.8428 244.9063 350.8115 244.8843 350.8799 C
243.5337 350.4521 L
f241.3535 347.001 m
241.3813 346.8828 244.1929 335.1064 245.3413 327.3945 C
246.7432 327.6035 L
245.5859 335.377 242.7603 347.2129 242.7314 347.3311 C
241.3535 347.001 L
f238.5322 343.2881 m
238.564 343.1875 241.6821 333.0811 242.3354 323.1191 C
243.7495 323.2119 L
243.0854 333.3457 239.9175 343.6074 239.8857 343.71 C
238.5322 343.2881 L
f235.7036 338.7754 m
235.73 338.6953 238.3701 330.6934 240.0073 319.2324 C
241.4106 319.4336 L
239.7534 331.0293 237.0752 339.1426 237.0483 339.2227 C
235.7036 338.7754 L
f233.7007 334.9512 m
233.7354 334.8418 237.1909 323.9121 238.1719 315.0879 C
239.5801 315.2441 L
238.584 324.21 235.0864 335.2705 235.0513 335.3809 C
233.7007 334.9512 L
f232.021 331.6631 m
232.0527 331.5352 235.1899 318.7783 236.1729 311.0762 C
237.5791 311.2559 L
236.5854 319.0391 233.4287 331.874 233.397 332.0029 C
232.021 331.6631 L
f230.0103 328.2148 m
230.0269 328.1162 231.7012 318.2773 233.356 311.8232 C
234.729 312.1748 L
233.0889 318.5713 231.4243 328.3535 231.4077 328.4512 C
230.0103 328.2148 L
f256.3477 310.8047 m
257.7373 310.5273 L
257.7871 310.7764 262.8218 335.623 271.6689 352.334 C
270.416 352.998 L
261.4712 336.1016 256.3979 311.0557 256.3477 310.8047 C
f255.8516 371.4453 m
256.5659 370.2207 L
256.6729 370.2832 267.4106 376.4023 283.6177 374.2959 C
283.8003 375.7021 L
267.0859 377.874 256.3022 371.708 255.8516 371.4453 C
f271.8784 375.4131 m
273.2065 374.9189 L
273.2329 374.9893 275.8755 381.9971 280.21 386.332 C
279.208 387.334 L
274.6509 382.7773 271.9893 375.7119 271.8784 375.4131 C
f255.3823 374.0908 m
256.7026 373.5752 L
256.7886 373.7949 265.4976 395.7568 281.1851 409.9736 C
280.2329 411.0244 L
264.2939 396.5781 255.4697 374.3145 255.3823 374.0908 C
f262.416 387.4785 m
262.061 387.3164 261.9043 386.8994 262.064 386.5439 c
262.2236 386.1875 262.6421 386.0283 262.999 386.1865 c
263.1328 386.2451 266.3101 387.6006 269.5659 384.6416 c
272.8804 381.6289 272.0229 377.0166 272.0137 376.9707 c
271.939 376.5869 272.188 376.2148 272.5718 376.1387 c
272.9551 376.0625 273.3271 376.3105 273.4038 376.6943 c
273.4478 376.9141 274.438 382.1289 270.519 385.6904 c
266.5532 389.2959 262.583 387.5547 262.416 387.4785 c
f255.1675 392.499 m
255.1675 392.1074 255.4844 391.79 255.876 391.79 c
260.5171 391.79 262.4897 387.8574 262.5713 387.6904 c
262.7427 387.3389 263.166 387.1914 263.5176 387.3623 c
263.8691 387.5322 264.0171 387.9541 263.8477 388.3066 c
263.751 388.5068 261.4243 393.208 255.876 393.208 c
255.4844 393.208 255.1675 392.8906 255.1675 392.499 c
f269.875 411 m
267.1895 408.3145 257.21 393.3613 256.7861 392.7266 c
256.5693 392.4004 256.6577 391.9609 256.9829 391.7432 c
257.3086 391.5264 257.7485 391.6143 257.9653 391.9395 c
258.0684 392.0947 268.2905 407.4102 270.877 409.998 c
272.9844 412.1055 274.356 411.4834 275.4585 410.9834 C
275.7632 410.8477 L
276.0576 410.7217 276.3633 410.2705 276.5425 409.6973 c
276.7915 408.9023 276.751 408.0361 276.4414 407.542 c
276.2339 407.21 276.3345 406.7734 276.667 406.5654 c
276.9985 406.3574 277.4351 406.458 277.6431 406.79 c
278.2793 407.8076 278.1909 409.1777 277.895 410.1211 c
277.5835 411.1152 277.0103 411.8555 276.3218 412.1504 C
276.0435 412.2744 L
274.8667 412.8076 272.6758 413.8018 269.875 411 c
f266.9976 420.7656 m
263.5957 418.6172 256.6797 406.8438 254.2275 401.2852 c
254.0698 400.9268 254.2319 400.5078 254.5898 400.3506 c
254.9482 400.1924 255.3667 400.3555 255.5244 400.7129 c
258.0884 406.5254 264.8657 417.7422 267.7544 419.5664 c
269.0752 420.4014 270.2983 420.6201 271.1987 420.1836 c
272.0142 419.7881 272.5366 418.8682 272.6714 417.5918 c
272.9722 414.7324 270.8169 411.6035 270.7949 411.5723 c
270.5713 411.251 270.6499 410.8086 270.9702 410.585 c
271.291 410.3613 271.7319 410.4395 271.9565 410.7598 c
272.0581 410.9043 274.438 414.3486 274.0806 417.7402 c
273.8931 419.5215 273.0894 420.8418 271.8169 421.459 c
270.4595 422.1172 268.748 421.8711 266.9976 420.7656 c
f280.0591 432.4663 m
273.9736 429.4238 268.3706 421.7402 268.1348 421.4141 c
267.9053 421.0977 267.9766 420.6543 268.2935 420.4248 c
268.6108 420.1953 269.0537 420.2666 269.2832 420.584 c
269.3389 420.6602 274.9209 428.3125 280.6929 431.1987 c
281.043 431.3735 281.1851 431.7993 281.0098 432.1494 c
280.835 432.4995 280.4092 432.6416 280.0591 432.4663 c
f255.4893 455.7754 m
255.2446 455.4697 255.2944 455.0239 255.5996 454.7793 c
255.9053 454.5347 256.3511 454.5845 256.5957 454.8896 c
258.5776 457.3667 265.0073 459.4082 269.6865 458.2588 c
272.1484 457.6543 273.6045 456.2876 274.0137 454.1963 c
275.4463 446.873 272.1118 440.2217 272.0781 440.1553 C
271.1924 438.4194 L
272.9888 439.1816 L
273.0024 439.187 274.3486 439.7466 275.5308 439.1968 c
276.2891 438.8442 276.8501 438.0908 277.1987 436.9575 c
278.4175 432.9971 277.4165 430.8325 277.4063 430.811 c
277.2378 430.4604 277.3823 430.0371 277.7319 429.8657 c
278.0815 429.6948 278.5024 429.834 278.6763 430.1826 c
278.729 430.2881 279.9541 432.8218 278.5532 437.3745 c
278.0796 438.9146 277.2583 439.9619 276.1133 440.4888 c
275.3394 440.8447 274.564 440.8818 273.9146 440.8218 C
274.6416 442.6304 275.7949 446.1431 275.7949 450.354 c
275.7949 451.6719 275.6812 453.0542 275.4043 454.4688 c
274.8872 457.1113 273.0269 458.8984 270.0244 459.6353 c
265.1963 460.8213 257.9966 458.9092 255.4893 455.7754 c
f255.6494 449.0894 m
255.3242 448.8726 255.2363 448.4336 255.4526 448.1084 c
255.6685 447.7827 256.1079 447.6938 256.4341 447.9092 c
256.5786 448.0044 259.9932 450.2134 262.375 447.8315 c
264.4014 445.8052 262.7227 440.9932 261.9053 439.3096 C
261.6084 438.6987 L
262.2158 438.3706 L
262.2358 438.3599 264.2056 437.2485 264.502 432.9507 c
264.8105 428.481 259.6582 419.8105 255.7993 417.0771 c
255.48 416.8516 255.4043 416.4092 255.6309 416.0898 c
255.8569 415.7705 256.2993 415.6943 256.6187 415.9209 c
260.7554 418.8506 265.9321 427.4097 265.9321 432.5615 c
265.9321 432.7275 265.9268 432.8896 265.916 433.0483 c
265.6567 436.8052 264.2305 438.5327 263.4209 439.2275 C
263.8633 440.2617 264.7588 442.6362 264.7588 444.9497 c
264.7588 446.3916 264.4082 447.8027 263.377 448.8335 c
260.811 451.3994 257.2002 450.1226 255.6494 449.0894 c
f279.9414 465.5415 m
278.3574 463.0068 272.4907 458.2656 272.4312 458.2178 c
272.1265 457.9722 272.0786 457.5264 272.3242 457.2217 c
272.5698 456.9165 273.0156 456.8687 273.3208 457.1143 c
273.5693 457.3145 279.4331 462.0542 281.1436 464.7905 c
281.3511 465.1221 281.2505 465.5596 280.918 465.7671 c
280.5864 465.9746 280.1489 465.874 279.9414 465.5415 c
f280.4414 476.875 m
279.8545 475.9365 271.0952 466.1543 265.3506 459.8081 c
265.0879 459.5181 265.1104 459.0698 265.4004 458.8071 c
265.6904 458.5444 266.1387 458.5669 266.4014 458.8569 c
267.8726 460.4824 280.8008 474.7764 281.6431 476.124 c
281.8511 476.4556 281.7505 476.8926 281.418 477.1006 c
281.0864 477.3076 280.6499 477.2075 280.4414 476.875 c
f280.2891 486.897 m
279.6899 486.0527 265.249 470.3374 255.6885 459.98 c
255.4229 459.6924 255.4409 459.2441 255.7285 458.979 c
256.0161 458.7134 256.4644 458.7314 256.7295 459.019 c
259.1899 461.6841 280.7876 485.0894 281.4658 486.1064 c
281.6807 486.4287 281.5928 486.8574 281.2729 487.0771 c
280.9541 487.2964 280.5137 487.2129 280.2891 486.897 c
f280.5181 493.9761 m
278.8652 492.1582 256.4604 466.3936 255.5078 465.2974 c
255.251 465.002 255.2822 464.5547 255.5776 464.2979 c
255.8726 464.041 256.3203 464.0723 256.5771 464.3677 c
256.8105 464.6357 279.9243 491.2163 281.5669 493.0229 c
281.8301 493.3125 281.8091 493.7607 281.519 494.0239 c
281.2295 494.2871 280.7813 494.2661 280.5181 493.9761 c
f281.0635 501.355 m
279.0571 499.5156 256.3091 473.4087 255.3418 472.2979 c
255.0845 472.0029 255.1152 471.5552 255.4106 471.2983 c
255.7056 471.041 256.1533 471.0718 256.4102 471.3672 c
256.6465 471.6382 280.0732 498.5244 282.0215 500.3101 c
282.3101 500.5747 282.3296 501.0229 282.0649 501.3115 c
281.8003 501.6001 281.3521 501.6191 281.0635 501.355 c
f290.0591 535.6924 m
289.8726 535.6519 271.2046 531.5005 255.7466 518.2031 C
255.5498 518.0337 L
254.8296 513.4731 L
255.9253 513.8247 L
256.1499 513.897 278.5337 521.1494 292.3042 531.6016 c
292.6162 531.8379 292.6772 532.2827 292.4404 532.5947 c
292.2036 532.9063 291.7593 532.9673 291.4478 532.7305 c
279.6021 523.7397 261.2314 517.1299 256.5913 515.543 C
256.7188 516.3511 256.8242 517.0186 256.8667 517.2881 C
272.0044 530.2114 290.1763 534.2676 290.3589 534.3066 c
290.6909 534.3789 290.9175 534.6724 290.9175 534.999 c
290.9175 535.0483 290.9126 535.0986 290.9014 535.1494 c
290.8188 535.5317 290.4419 535.7749 290.0591 535.6924 c
f319.9238 526.1484 m
302.1133 518.3247 294.9238 508.165 294.6265 507.7363 c
294.4038 507.415 294.4834 506.9741 294.8047 506.751 c
295.126 506.5273 295.5674 506.6074 295.791 506.9282 c
295.8618 507.0303 303.0801 517.2012 320.4941 524.8506 c
320.8535 525.0078 321.0156 525.4263 320.8574 525.7847 c
320.7012 526.1426 320.2832 526.3057 319.9238 526.1484 c
f339.2109 526.3364 m
338.9336 526.0615 338.9297 525.6128 339.2051 525.3345 c
353.4375 510.9395 359.9961 496.1953 360.0605 496.0479 c
360.2168 495.6895 360.6348 495.5264 360.9941 495.6836 c
361.3516 495.8408 361.5156 496.2583 361.3594 496.6172 c
361.293 496.7666 354.6387 511.7393 340.2129 526.3306 c
339.9375 526.6089 339.4902 526.6118 339.2109 526.3364 c
f301.7188 514.9307 m
301.5723 514.5674 301.748 514.1548 302.1113 514.0088 c
302.3516 513.9116 326.5859 504.2988 355.4043 505.458 c
355.7949 505.4736 356.0996 505.8032 356.084 506.1943 c
356.0684 506.5854 355.7383 506.8896 355.3477 506.874 c
326.8438 505.7275 302.8789 515.2275 302.6406 515.3232 c
302.2773 515.4697 301.8652 515.2939 301.7188 514.9307 c
f307.0625 518.623 m
306.9023 518.2666 307.0605 517.8472 307.418 517.6865 c
307.5723 517.6172 323.0547 510.792 351.5469 510.9575 c
351.9375 510.9595 352.2539 511.2788 352.252 511.6699 c
352.248 512.0615 351.9297 512.377 351.5391 512.3745 c
323.3887 512.2109 308.1504 518.9111 308 518.9785 c
307.6426 519.1392 307.2227 518.981 307.0625 518.623 c
f312.7324 522.6304 m
312.5684 522.2749 312.7227 521.8535 313.0781 521.6895 c
313.2148 521.6255 327.1367 515.2935 347.8984 515.9575 c
348.2891 515.9702 348.5957 516.2974 348.584 516.6885 c
348.5703 517.0801 348.2441 517.3867 347.8535 517.374 c
327.4473 516.7217 313.8086 522.9131 313.6738 522.9756 c
313.3184 523.1396 312.8984 522.9863 312.7324 522.6304 c
f316.7949 524.7036 m
300.7402 522.8643 288.8335 511.4561 288.7153 511.3408 c
288.4346 511.0684 288.4282 510.6196 288.7007 510.3389 c
288.9731 510.0581 289.4219 510.0518 289.7026 510.3242 c
289.8179 510.4355 301.3926 521.5127 316.957 523.2954 c
317.3457 523.3398 317.625 523.6914 317.5801 524.0801 c
317.5352 524.4688 317.1836 524.748 316.7949 524.7036 c
f284.7295 514.3545 m
284.4414 514.0894 284.4224 513.6416 284.687 513.3535 c
284.9517 513.0649 285.3999 513.0459 285.6885 513.3105 c
285.8091 513.4214 297.9478 524.3882 311.7695 522.2988 c
312.1563 522.2402 312.5176 522.5068 312.5762 522.8936 c
312.6348 523.2803 312.3691 523.6416 311.9805 523.7002 c
297.4785 525.8926 285.2432 514.8262 284.7295 514.3545 c
f281.3647 525.7104 m
281.3398 525.3384 281.6377 525.0083 282.0073 524.959 c
282.7974 524.854 288.9854 522.0811 294.4067 519.5249 c
294.7607 519.3584 295.1826 519.5103 295.3501 519.8638 c
295.5171 520.2178 295.3647 520.6396 295.0112 520.8071 c
291.4604 522.481 283.0884 526.3745 282.0425 526.3745 c
281.6694 526.3745 281.3892 526.083 281.3647 525.7104 c
f276.5391 523.3975 m
276.4116 523.0273 276.603 522.6255 276.9731 522.498 C
290.979 517.6621 L
290.6089 517.79 290.4116 518.1938 290.5391 518.564 c
290.667 518.9336 291.0693 519.1304 291.439 519.0029 C
277.4448 523.834 L
277.0747 523.9619 276.667 523.7671 276.5391 523.3975 c
f302.4063 532.8096 m
302.2344 532.458 302.3809 532.0342 302.7324 531.8623 c
302.8594 531.8003 315.5762 525.6338 326.0156 522.6514 c
336.4824 519.6606 344.9434 519.459 345.0293 519.4575 c
345.4199 519.4497 345.7422 519.7607 345.75 520.1519 c
345.7598 520.543 345.4473 520.8667 345.0566 520.8745 c
344.9746 520.876 336.6836 521.0767 326.4043 524.0137 c
316.0859 526.9619 303.4785 533.0752 303.3535 533.1367 c
303 533.3081 302.5762 533.1611 302.4063 532.8096 c
f306.4746 535.7495 m
296.5386 528.9097 284.0044 525.8853 283.8789 525.8555 c
283.4985 525.7651 283.2627 525.3833 283.353 525.0024 c
283.4434 524.6221 283.8252 524.3862 284.2056 524.4766 c
284.3335 524.5068 297.1187 527.5879 307.2773 534.5825 c
307.5996 534.8042 307.6816 535.2456 307.459 535.5679 c
307.2363 535.8901 306.7969 535.9717 306.4746 535.7495 c
f328.6953 535.3203 m
328.6699 535.2939 326.1211 532.6841 321 532.3735 C
306.1309 531.5283 L
305.9629 531.4082 L
297.3828 525.2573 288.5269 523.8799 288.4385 523.8672 c
288.0513 523.8091 287.7842 523.4487 287.8418 523.062 c
287.8994 522.6748 288.2593 522.4077 288.6465 522.4648 c
289.0181 522.52 297.7935 523.8892 306.6035 530.1357 C
306.9707 530.1567 321.0859 530.9585 Y
326.8008 531.3052 329.6094 534.2227 329.7246 534.3467 c
329.8535 534.4834 329.918 534.6572 329.918 534.8311 c
329.918 535.0186 329.8438 535.2061 329.6953 535.3457 c
329.4121 535.6143 328.9648 535.6025 328.6953 535.3203 c
f308.5977 530.2178 m
302.7637 525.5176 292.5742 521.8701 292.4722 521.834 c
292.103 521.7031 291.9102 521.2979 292.041 520.9292 c
292.1719 520.5601 292.5771 520.3672 292.9458 520.498 c
293.3726 520.6494 303.4629 524.2607 309.4863 529.1143 c
309.791 529.3599 309.8398 529.8057 309.5938 530.1104 c
309.3496 530.4155 308.9023 530.4634 308.5977 530.2178 c
f311.8926 528.6855 m
309.6582 526.6104 303.9434 523.6592 303.8848 523.6299 c
303.5371 523.4507 303.4004 523.0234 303.5801 522.6753 c
303.7578 522.3271 304.1855 522.1904 304.5332 522.3691 c
304.7754 522.4937 310.4805 525.4395 312.8574 527.6465 c
313.1445 527.9131 313.1602 528.3613 312.8945 528.6479 c
312.6289 528.9351 312.1797 528.9517 311.8926 528.6855 c
f314.9355 527.3643 m
314.668 526.9209 312.3105 524.958 310.2773 523.394 c
309.9668 523.1553 309.9102 522.7104 310.1484 522.4004 c
310.3867 522.0903 310.832 522.0322 311.1426 522.271 c
312.1836 523.0723 315.6211 525.7549 316.1504 526.6348 c
316.3516 526.9702 316.2422 527.4063 315.9063 527.6069 c
315.5723 527.8086 315.1367 527.6997 314.9355 527.3643 c
f353.6387 535.5376 m
353.25 535.4985 352.9648 535.1514 353.0039 534.7617 c
354.7656 517.1611 350.8984 512.6934 350.8574 512.6504 c
350.5977 512.3638 350.6113 511.9175 350.8945 511.6523 c
351.1777 511.3872 351.6172 511.3955 351.8867 511.6748 c
352.0664 511.8613 356.2598 516.4561 354.4141 534.9033 c
354.375 535.2925 354.0293 535.5767 353.6387 535.5376 c
f346.7051 535.7891 m
346.3613 535.6035 346.2324 535.1733 346.4199 534.8291 c
346.4727 534.7295 351.7832 524.7236 350.0098 513.4424 c
349.9492 513.0557 350.2129 512.6934 350.5996 512.6323 c
350.9863 512.5718 351.3496 512.8359 351.4102 513.2227 c
353.2598 524.9902 347.8945 535.0796 347.666 535.5034 c
347.4805 535.8472 347.0508 535.9756 346.7051 535.7891 c
f311.0273 535.4844 m
310.7578 535.1997 310.7715 534.752 311.0566 534.4839 c
311.3223 534.2329 317.7285 528.3145 331.0859 525.9678 c
343.4824 523.7905 349.8848 526.4014 350.1504 526.5127 c
350.5098 526.6646 350.6797 527.0791 350.5293 527.4395 c
350.377 527.7998 349.9629 527.9697 349.6016 527.8198 c
349.5391 527.7939 343.2695 525.2666 331.332 527.3638 c
318.4238 529.6313 312.0898 535.457 312.0273 535.5156 c
311.7422 535.7832 311.2949 535.7695 311.0273 535.4844 c
f330.0762 535.3164 m
329.9004 534.9663 330.043 534.541 330.3926 534.3657 C
347.0586 526.0322 L
347.4082 525.8574 347.834 525.9985 348.0098 526.3491 c
348.1836 526.6992 348.043 527.1245 347.6934 527.2998 C
331.0273 535.6333 L
330.6758 535.8086 330.252 535.667 330.0762 535.3164 c
f358.002 500.8647 m
357.9844 500.4736 358.2871 500.1426 358.6777 500.1245 C
366.0098 499.7915 L
366.4004 499.7739 366.7324 500.0762 366.75 500.4673 c
366.7676 500.8584 366.4648 501.1895 366.0742 501.2075 C
358.7422 501.5405 L
358.3516 501.5581 358.0195 501.2559 358.002 500.8647 c
f356.002 503.8726 m
355.9805 503.4819 356.2793 503.147 356.6699 503.125 C
365.502 502.625 L
365.8926 502.603 366.2285 502.9019 366.25 503.2925 c
366.2715 503.6831 365.9727 504.0181 365.582 504.04 C
356.75 504.54 L
356.3594 504.562 356.0234 504.2632 356.002 503.8726 c
f354.334 507.0313 m
354.3164 506.6401 354.6191 506.3091 355.0117 506.2915 C
366.1777 505.7915 L
366.5684 505.7739 366.9004 506.0767 366.918 506.4678 c
366.9355 506.8589 366.6328 507.1899 366.2402 507.2075 C
355.0742 507.7075 L
354.6836 507.7251 354.3516 507.4224 354.334 507.0313 c
f351.834 510.5171 m
351.8242 510.126 352.1328 509.8008 352.5254 509.791 C
365.8574 509.4575 L
366.25 509.4478 366.5742 509.7568 366.584 510.1484 c
366.5938 510.5396 366.2852 510.8647 365.8926 510.8745 C
352.5605 511.208 L
352.1699 511.2178 351.8438 510.9087 351.834 510.5171 c
f352.168 514.3682 m
352.1484 513.9771 352.4492 513.6445 352.8398 513.625 C
366.1738 512.958 L
366.5645 512.9385 366.8984 513.2397 366.918 513.6309 c
366.9375 514.0215 366.6367 514.3545 366.2441 514.374 C
352.9102 515.04 L
352.5195 515.0596 352.1875 514.7588 352.168 514.3682 c
f353.168 517.5288 m
353.1504 517.1377 353.4551 516.8076 353.8457 516.7915 C
365.8457 516.2915 L
366.2363 516.2754 366.5664 516.5791 366.584 516.9697 c
366.5996 517.3608 366.2969 517.6914 365.9043 517.7075 C
353.9043 518.2075 L
353.5137 518.2236 353.1836 517.9199 353.168 517.5288 c
f353.5 520.6763 m
353.4961 520.2852 353.8086 519.9629 354.1992 519.9575 C
365.6992 519.791 L
366.0898 519.7852 366.4121 520.0977 366.418 520.4893 c
366.4238 520.8809 366.1113 521.2021 365.7207 521.208 C
354.2207 521.3745 L
353.8281 521.3804 353.5059 521.0674 353.5 520.6763 c
f353.834 524.6963 m
353.8184 524.3052 354.1211 523.9746 354.5117 523.958 C
366.1797 523.458 L
366.5703 523.4414 366.9004 523.7446 366.918 524.1357 c
366.9336 524.5269 366.6309 524.8574 366.2402 524.874 C
354.5723 525.374 L
354.1816 525.3906 353.8516 525.0874 353.834 524.6963 c
f353.7715 528.6235 m
353.6191 528.3052 353.6895 527.938 353.9824 527.7427 c
354.1641 527.6221 354.6465 527.3008 365.5098 526.7915 c
365.9004 526.7734 366.2324 527.0752 366.25 527.4663 c
366.2695 527.8574 365.9668 528.189 365.5762 528.2075 c
360.752 528.4336 355.2852 528.7808 354.6602 528.9785 c
354.3223 529.0845 353.9238 528.9419 353.7715 528.6235 c
f354.375 532.041 m
353.9844 532.041 353.666 531.7236 353.666 531.3325 c
353.666 530.9414 353.9844 530.624 354.375 530.624 C
363.709 530.624 L
364.1016 530.624 364.418 530.9414 364.418 531.3325 c
364.418 531.7236 364.1016 532.041 363.709 532.041 C
354.375 532.041 L
f247.8599 519.4492 m
237.8994 513.8052 227.9868 504.4404 227.8882 504.3467 c
227.604 504.0771 227.5928 503.6284 227.8618 503.3447 c
228.1313 503.061 228.5801 503.0488 228.8638 503.3184 c
228.9614 503.4111 238.752 512.6592 248.5581 518.2158 c
257.1602 523.0898 258.9512 522.356 259.2231 522.1597 c
259.4365 522.0049 259.4087 521.6094 259.3477 521.3052 c
259.271 520.9214 259.5195 520.5479 259.9033 520.4712 c
260.2871 520.3945 260.6606 520.6431 260.7373 521.0269 c
260.9951 522.3169 260.5078 522.979 260.0537 523.3076 c
259.0386 524.0425 256.6704 524.4409 247.8599 519.4492 c
f228.1675 527.1719 m
228.1641 526.7803 228.4785 526.4604 228.8701 526.4575 C
268.8701 526.124 L
269.2612 526.1206 269.5815 526.4351 269.5845 526.8267 c
269.5879 527.2178 269.2734 527.5381 268.8818 527.541 C
228.8818 527.8745 L
228.4907 527.8779 228.1704 527.5635 228.1675 527.1719 c
f229.5005 530.1797 m
229.4932 529.7881 229.8042 529.4648 230.1953 529.4575 C
274.0288 528.624 L
274.4204 528.6167 274.7437 528.9277 274.751 529.3188 c
274.7583 529.7104 274.4473 530.0337 274.0562 530.041 C
230.2227 530.8745 L
229.8311 530.8818 229.5078 530.5708 229.5005 530.1797 c
f232.1675 533.0195 m
232.1567 532.6284 232.4648 532.3022 232.856 532.291 C
279.856 530.9575 L
280.2471 530.9463 280.5732 531.2549 280.5845 531.646 c
280.5952 532.0371 280.2871 532.3633 279.896 532.3745 C
232.896 533.708 L
232.5049 533.7188 232.1787 533.4106 232.1675 533.0195 c
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
