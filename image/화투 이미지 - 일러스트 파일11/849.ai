%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (849.ai)
%%CreationDate: 3/25/2002 6:33 PM
%%BoundingBox: 217 307 371 546
%%HiResBoundingBox: 217.083 307.3057 370.1543 545.416
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 14482 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC92204A204BF820204B
%204A204B204A204B204A204B204A204B204A204B204A204B204B204B204B
%204B204B2027204B204B204B2027204B204B204B204B204B204B204A44FD
%07FC99FFFD05FC6827F827275227F8F85251522752515227525152275251
%522752515227525152275251522752515227525127F82726512627F8274A
%51F8272752515227525152275227F82727F86FFD05FCC2FFFD04FC68F827
%FD04FF5120F8A8FD1FFF2720F851C6C626F8269F9E51F8F8F852FD06FF7D
%27F8F827FFFF7DF84BFD04FCBBFFFD04FC274BFD05FFF86F2076FD1DFF52
%F82774C69E51F8279E7520F8F85150274BFFFFFFA87CF8272752F8FFFFFF
%A8F8F8B4FCFCFCC2FFFCFCFC8CF8FD06FF26686FF8FD1BFF52F8F87BC6C6
%50F8F87526F8F84B5027F8F8F852A8A727F8F852FFFFF852FFFFFF52F827
%44FCFCFCBBFFFCFCFC444BFD06FFF893FCF87DFD18FFA8272750C6C6C726
%275151F827749FFD09F852A8FFFFFF5227FFFFFFA8F87C5227FCFCFCC2FF
%FCFCFC4A27FD06FFF88CFC2027FD17FF52F84B9EC6C675F82726F8F87B74
%27FD09F8FD04FFA7F8F8F8FFFF76F8F8277DF8FCFCFCBCFFFCFCFC4452FD
%06FFF8FCFCB4F87DFD14FFA827F87BC6C69E27F875202674C726F8267BFD
%07F87DFD04FFFD04F8A87DFD04F85227FCFCFCC2FFFCFCFC4B27FD06FFF8
%FCFCFC6FF8FD13FF7DF8F8C6C6C67426F875F8279E7BF8279E9EFD07F827
%FD04FF27FD04F87DFD05F852F8FCFCFC99FFFCFCFC4452FD06FFF8FD04FC
%2727FD11FF7DF826C6C6C674272675F875C651F851A44BF8514BFD04F852
%FD04FFA8FD05F852FD05F85227FCFCFCC2FFFCFCFC4B27FD06FFF88CFCFC
%FC68F87DFD0FFF7DF826C6C6C64AF84A75F87B9E27F89E9E27F89E50F8F8
%7D7DFD06FF7DFD05F87DFD05F87CF8FCFCFCBBFFFCFCFC2052FD06FFF86F
%FD04FC4427FD0EFFA82726C6C6C626277A75F89F7A2626C77AF826C626F8
%52FD09FFA8FD04F8277DFD04F8527D27FCFCFCC2FFFCFCFC4A27FD06FF26
%68FD05FCF827FD0DFF2726C6C6C626F89E75F89E74F84AC674F850C6F826
%A8FD0BFF20F8F8F8A8FF27F8F827A87DF8FCFCFCBBFFFCFCFC2052FD06FF
%F86FFD05FC93F87DFD0BFF52F8C7C6C626279E7BF89F50F851C69E274BC6
%2627A8FD0BFF52F87427F8FFFFFFA8FFFFFF7D27FCFCFCC2FFFCFCFC4A27
%FD06FF4B20FD06FC6EF8A8FD09FF7DF89FC6C64AF89E9EF87574F84AC6C6
%27F8C62620A8FD0BFF7DF85027F827FD07FF7DF8FCFCFCBCFFFCFCFC4452
%FD06FF5227FD07FC6FF8A8FD08FFF851C6C67AF87AC6F8F87A2750C6C67B
%F89FF827A8FD0BFF7DF85051F875F8FD07FF7D27FCFCFCC2FFFCFCFC4B27
%FD06FF7DF8FD08FC4AF8A8FD06FF52F8C6C6C62726C62026F8F826C6C6C6
%F827F8F8A8FD0BFFA8F82651F87BF8F8FD07FF7DF8FCFCFC99FFFCFCFC44
%52FD07FFF88CFD08FC6FF8A8FD05FF2751C6C69FF8C750274B27F8512627
%F8F8F852A8FD0BFFA827267BF89F2627F8FD07FF7D27FCFCFCC2FFFCFCFC
%4B27FD07FFF86EFD09FC6FF87CFFFFFFA8F8C6C6C6265150F826F8F8F826
%7574F8F8FD0DFFA820269FF8514A2050F87D7D7DFD04FF7DF8FCFCFCBBFF
%FCFCFC2052FD07FF5220FD0AFC6FF852FFFF5227C6C6C626202626F8F851
%C6C65027F852FD0CFFA827269FF87550F87427F827FD07F827FCFCFCC2FF
%FCFCFC4A27FD07FFA1F8FD0BFC92F827A84B26C69E4BF8F8F827F8F87475
%F8F84AF851FD0BFFA8F8209FF85174F85027F8C674F84A27F8C64AF8F8FC
%FCFCBBFFFCFCFC2052FD08FFF86FFD0BFCB42027F85126F8207B507B2627
%F827F8757427F827FD0AFFA82726A5F8277A275151F8C7A4F84A75F8A550
%F82727FCFCFCC2FFFCFCFC4A27FD08FF76F8FD0DFC44F8F8519EC6C69EF8
%279EF84AC626F82627F8FD09FFA82726C6F8279EF82675F89E9E272651F8
%9F26F87D7DF8FCFCFCBCFFFCFCFC4452FD09FF2744FD0DFC2075FD04C69E
%519E27F84BF82774272027FD08FF7D2726C7F8279E272675F89F9E272675
%F87B26277DFF2727FCFCFCC2FFFCFCFC4B27FD09FF52F8FD0DFC4A26FD05
%C69EFD04F87B4AF8269EF8FD07FF7DF8269EF8279EF8209FF8519E262651
%F851F8F8A8A8F8F8F8FCFCFC99FFFCFCFC4452FD0AFFF84BFD0CFC4427FD
%05C6272651F8C72627749FF8277DFD05FF7627519FF84B9E27269FF8757A
%272675F851F8277D4BF84B2027FCFCFCC2FFFCFCFC4B27FD0AFF7DF88CFD
%0BFC8CF8FD05C67A27F8F8F8279E51F827F8A8FD04FF52F84A9FF84B74F8
%2651F8757AF82651F84BF827F8F8209268F8F8FCFCFCBBFFFCFCFC2052FD
%0BFF5120FD0CFC2750FD04C6272651F8759E27F84BF827F8FFFFFF27277A
%75F8757AF82675F87550275027F827F8F8F86F8CFC8C272727FCFCFCC2FF
%FCFCFC4A27FD0BFFA82720FD0BFC4426FD05C69EFD04F82626F89F9EFD05
%F89E75F8514AF85027F89F26F84A27F8F8F84B8CFD04FCF8207DF8FCFCFC
%BBFFFCFCFC2052FD0CFF7DF868FD0AFCB4F89FC6C6C6C7F82726274BF826
%C7A427F875F8279E4BF89F26277427F89F26275027F8F844FD06FC27F8FF
%7D27FCFCFCC2FFFCFCFC4A27FD0DFF52F868FD0AFC4AF8C6C6C69E517AF8
%4A2774C67427F875F84B9E26F89FF8205020207BF8274AF8F82768FD06FC
%27F8FFFF7DF8FCFCFCBCFFFCFCFC4452FD0EFF52F868FD0AFC2050C6C6C6
%4AF82627C6C64AF82651F87574272675F8274AF84A51F8512027F84BFD07
%FC27F8FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD0FFF27F868FD09FC44F8C6
%C69EF8749FF87BF8202626FD04F82627F851F8F87426F851F8F8F892FD07
%FC27F827F827F852F8FCFCFC99FFFCFCFC4452FD10FF272768FD08FCB4F8
%75C6C6C675F84BF87574274A9FA427F827F851F8514BF82627F8F820FD07
%FC8C27FD07F827FCFCFCC2FFFCFCFC4B27FD11FF52F844FD05FC4427F8F8
%26C650F8F851FD06C64A20F851F8F8F875F82026F8F827F88CFD06FC8C20
%FD09F8FCFCFCBBFFFCFCFC2052FD12FF522744FCFC6FF8204AA54A51C675
%F82674C6C6C67427F82750C650F8F827F827F820F8752627FD06FC442727
%FFFD07F827FCFCFCC2FFFCFCFC4A27FD13FF7D27F8F8F875C6C6C627509E
%F827F826C6C6C69E509EC675F8F8749EFD04F826C69EF88CFD05FC20F852
%FFFF52FD04F8277DF8FCFCFCBBFFFCFCFC2052FD14FF27F826FD04C69FF8
%C74A27F8519EFD06C627F851A4A5F827F8279EC6C62726FD04FC6FF827A8
%FD05FFA87DA8FF7D27FCFCFCC2FFFCFCFC4A27FD13FFF8279EFD08C65150
%75F826C6C67A279EFD04C651F827202726C6C651F8FCFCFC8C20F876FD0B
%FF7DF8FCFCFCBCFFFCFCFC4452FD11FFA8F827C6C69E752027FD05C6F8F8
%7550C74AF84A7B26C6C6C65075F827F8279E9FF86FFC9220F84BFD0DFF27
%27FCFCFCC2FFFCFCFC4B27FD10FFCFF827C6C6C69FF84B262626C6C6C650
%26F8279E755027F8272675C6C6F84BF8F84A26F84A4426F851A1FF27FD04
%F87DFD06FFA8F8F8FCFCFC99FFFCFCFC4452FD10FFF84BC6A54A27267526
%27262726C6C6274A754B7BC6A55151F8275175C6C6C6A52627F827F82752
%FFFFFFFD07F8A1FD05FF27F827FCFCFCC2FFFCFCFC4B27FD0FFF2726C6C6
%F8F8F85174C69E2726F850C67AF8F8277AC6C6C69EC6F827F8F84A9F9E9E
%F8274BA8FD04FF7DFD08F852F827F8F8F87CF8FCFCFCBBFFFCFCFC2052FD
%0EFF52279EC6C6F8F851FD04C6F8274A4BC6C75027F8FD07C69E4B26F8F8
%4BF827A8FD06FFA8FD07F827277D7DA8F8527D27FCFCFCC2FFFCFCFC4A27
%FD0BFFA852F8F84AC6C6C69E759EFD05C674F8207BC627269EFD09C69EC6
%9EF827A8FD08FF27FD05F827A8FFFFFF7DF8A87DF8FCFCFCBBFFFCFCFC20
%52FD0AFF7D27207B9E9FFD06C6749F9EC6C6C6F8F82051A451F89FFD09C6
%7BF852FD0BFF7D2727F852A8FD04FF2752FF7D27FCFCFCC2FFFCFCFC4A27
%FD09FFA8F82651F8F826FD06C626F875C6C6C69F50262627207574FD07C6
%9E27F87CFD15FF76F8FFFF7DF8FCFCFCBCFFFCFCFC4452FD09FF27F8F8F8
%7BC6C750C7FD04C64A26F84BFD04C650277427F84B7AFD04C6C726F8F8FD
%0DFFA87DA8FD07FFF87DFFFF7D27FCFCFCC2FFFCFCFC4B27FD08FF52FD09
%F8FD05C674F8F875FD06C65027F8F8C6C69E27F827F827FD0BFF7DFD04F8
%A8FD05FF2727FFFFFF7DF8FCFCFC99FFFCFCFC4452FD08FFF827A8FF7DA1
%A8FFFF4BF875FD04C67427F84BFD05C6C751A59E75F8F82651F82752FFFF
%FFA8A1A8FF5227F8F8F851A427F8FD05FFA8F87DFFFFFF5227FCFCFCC2FF
%FCFCFC4B27FD08FF27A8FD08FF7DF8204AC6C6F8F826F875FD04C67451F8
%F8F85126F8F87B2027FFA827FD04F8274AF8F8C6C627F8FD06FF2727FFFF
%FF27F8F8FCFCFCBBFFFCFCFC2052FD08FFA8FD0BFF5227F8274A7B4A5174
%512627F8F820262627F827747BF827A87CF8279E27F87B74F8F8515027F8
%FD06FFA8F8A8FFFFA8F8F827FCFCFCC2FFFCFCFC4A27FD16FFA74B27F8F8
%F827264B509F26F8F8264AC64A27F8F8F827F87B74F826C620FD06F852FF
%FFA87D5252F8F87CFFFF7DF8F8F8FCFCFCBBFFFCFCFC2052FD1AFF274BC6
%9F4A27F82726279E4BF8272727F827F8C74AF851C67427FD07F827F8F8F8
%2727F82752FFFFA8F8F827FCFCFCC2FFFCFCFC4A27FD1AFF274AC620274A
%7B26F8F8F8267526F8F8F826C626F874C626FD09F852FD04FF27275227FF
%FFFF27F8F8FCFCFCBCFFFCFCFC4452FD18FFA827F8C7C69F5027F8272027
%7A27F827F827509FF8279E9FF8277AC7FD05F852A8FD04FF7DF8FF7D27FD
%04FFF827FCFCFCC2FFFCFCFC4B27FD17FFA8F8F8C6C6C6F827509EFD07F8
%51C651F84B9E4BF84BC6C64AF8277D7DFD07FFF852FFFFF8FD04FF7DF8FC
%FCFC99FFFCFCFC4452FD17FF2726C6C6C69E9F4B27F8519EF8F82774C69E
%27F87B262720A5C6C726277DFD09FF7DF8A8FFFF277DFFFFFF7D27FCFCFC
%C2FFFCFCFC4B27FD16FF76F8FD05C6F82750C67426F87BC69F26F8F820F8
%2774C6C675F827A8FD0AFF2727FFFFFF2752FFFFFF7DF8FCFCFCBBFFFCFC
%FC2052FD16FF2651FD07C67B26F82627F827F8F8F82750C7C6C69E27F87D
%FD0BFF7DF8FD04FF4BF87DFFFF7D27FCFCFCC2FFFCFCFC4A27FD16FF2774
%FD04C69E26F8F84B9E4BF85150F8F8FD05C626F827FD0DFFF852FFFFFF52
%F8F8F852FF7DF8FCFCFCBBFFFCFCFC2052FD16FFF851FD05C6517A9F2627
%F87526F826C7C6C6C675F8277DFD0DFF7DF8A8FFFFFFFD05F8A87D27FCFC
%FCC2FFFCFCFC4A27FD16FF27F8FD06C69EF827F8F8F84B9EC6C6C626F8F8
%7DFD0FFF2727FFFFFF52FD05F8277DF8FCFCFCBCFFFCFCFC4452FD16FFA8
%F826C7FD06C67A517AC6C6C67A27F8277DFD10FFA8F8A8FFFFFF52FD05F8
%277D27FCFCFCC2FFFCFCFC4B27FD0BFF27F8F8277DFD07FFA827F827507B
%FD05C69E5027F8F827A8FD0FFFCF27F8F827FD04FF27FD06F87DF8FCFCFC
%99FFFCFCFC4452FD0AFF52FD05F87DFD08FFA85227FD07F82727A8FD11FF
%7DFD05F8FD04FF52FD05F8527D27FCFCFCC2FFFCFCFC4B27FD0AFF27FD06
%F8FD05FF7DF8F8F851FD1BFF76FD06F8FD04FFA7FD05F8A87DF8FCFCFCBB
%FFFCFCFC2052FD0AFF27FD06F8A8FFFFFFA8FD05F852FD19FF7DFD07F8FD
%05FF5227F8F852FF7D27FCFCFCC2FFFCFCFC4A27FD0AFF52FD06F87DFFFF
%FF27FD06F8FD19FFFD07F827FD06FFA87DA8FFFF7DF8FCFCFCBBFFFCFCFC
%2052FD0BFF27FD05F8A8FFFFFF27FD06F8FD0CFF7D7D7DA1FD09FFFD07F8
%52FD0BFF7D27FCFCFCC2FFFCFCFC4A27FD0BFF7DFD05F8FFFFFFA8FD07F8
%FD0AFFA7FD05F8207DFD07FFFD07F8FD0CFF7DF8FCFCFCBCFFFCFCFC4452
%FD0CFFA8522727F8FFFFFF7DFD06F827FD08FF5227FD07F827A8FD05FFA8
%FD05F827FD0DFF7D27FCFCFCC2FFFCFCFC4B27FD10FFF84BFFFF7DFD07F8
%27277DFFFF5227F8274BFD08F827A8FD04FF52F87627527CFD0EFF7DF8FC
%FCFC99FFFCFCFC4452FD10FF7D27A8FFA8FD04F827527D7D52F8F8F82727
%7D5252FD0AF8277DFFFF2752FD12FF7D27FCFCFCC2FFFCFCFC4B27FD11FF
%F827FFFFF8F8F827A8FFFF7D27F8F827F827F8272752FD06F827FFA852F8
%F827F87DFD12FF7DF8FCFCFCBBFFFCFCFC2052FD12FFF87D52F8A87DFD05
%F852A8FD09FF7D52277DA8FD05FF7D27F8FD13FF7D27FCFCFCC2FFFCFCFC
%4A27FD12FF7DF8F827FD04FFA7A8FD17FF4B27FD04FFA87D275227A7FD09
%FF7DF8FCFCFCBBFFFCFCFC2052FD11FFA82727F8FD10FFA827FD04F84BA8
%FD06FF2752FFFFFF51FD06F827A8FD07FF7D27FCFCFCC2FFFCFCFC4A27FD
%0BFF525227522727F8F8522727FD0FFFFD08F852FD05FFF8A8FFFF27FD08
%F827FD07FF7DF8FCFCFCBCFFFCFCFC4452FD09FF7DFD06F852A8F8FF7DF8
%A8FD0EFFFD08F827A8FFFFFFA8F8FFFFA8FD0AF8FD07FF7D27FCFCFCC2FF
%FCFCFC4B27FD08FF7DFD07F8A77C27FFFFF8F8F852FD0CFFFD0BF8272727
%F827FD0BF852FD07FF7DF8FCFCFC99FFFCFCFC4452FD08FFFD08F8FF5227
%FFFF27F8F8F827A8FD0AFF7DFD07F827527D7D5227277DFFFFA8FD07F827
%FD08FF7D27FCFCFCC2FFFCFCFC4B27FD08FFFD08F8FFF8A8FFA8FD05F827
%A8FD0AFF7DFD05F827A8FD04FF2752FD05FF7D52275227A8FD09FF7DF8FC
%FCFCBBFFFCFCFC2052FD08FFFD07F8522727FFFF7DFD06F852FD0DFF7D7D
%FD07FFF87DFD14FF7D27FCFCFCC2FFFCFCFC4A27FD08FF76FD05F827F827
%A8FFFFA8FD07F8FD16FFF8A8FD14FF7DF8FCFCFCBBFFFCFCFC2052FD09FF
%A852527DFF27277DFD04FFFD06F827FD08FF7D27F827277DFD07FFA8F8FD
%06FFA85227272752FD09FF7D27FCFCFCC2FFFCFCFC4A27FD0DFF52F8F8FD
%05FF27FD06F8FD07FF27FD07F87DFD05FF7D27FD05FF51FD06F827FD08FF
%7DF8FCFCFCBCFFFCFCFC4452FD0CFF7D275227FD05FFA8FD05F87DFD07FF
%FD09F8A8FD04FF7D27FD04FF52FD08F8FD08FF7D27FCFCFCC2FFFCFCFC4B
%27FD0CFFF8277DF8FD06FFA82727F87DFD08FFFD09F852FD04FF2752FD04
%FFFD09F8FD08FF7DF8FCFCFC99FFFCFCFC4452FD0BFF7DF8FF7D27FD13FF
%A8FD09F84B7DFFFF4B51FF764BFD09F87DFD08FF7D27FCFCFCC2FFFCFCFC
%4B27FD0BFFF852FF52F8FD14FFA827FD04F82752A72720F827F827F82051
%A8A827FD05F87DFD09FF7DF8FCFCFCBBFFFCFCFC2052FD06FFA8527DFFFF
%277DFF2752FD17FFA87DFD06FFA827F827A8FD14FF7D27FCFCFCC2FFFCFC
%FC4A27FD05FF7DF8F87DFFCFF8FFFF2752FD21FFF8CFFD15FF7DF8FCFCFC
%BBFFFCFCFC2052FD05FF2727FFFFFF7627FFFFF8FD22FFF8FD16FF7D27FC
%FCFCC2FFFCFCFC4A27FD05FFF87DFFFFFF2051FF5220FD22FFF8FD16FF7D
%F8FCFCFCBCFFFCFCFC4452FD05FF27F87D5227F8FFFF2752FD14FFA85252
%4B7DA8FD07FF7D27FD06FF7D27F8F8F852FD0AFF7D27FCFCFCC2FFFCFCFC
%4B27FD05FFA827F8F827FFFFA8F8FD14FF76FD06F827FD06FF7DF8FD05FF
%FD07F84BFD09FF7DF8FCFCFC99FFFCFCFC4452FD0CFF5227FD13FFA8FD09
%F8FD05FF7D27FD04FF27FD08F8FD09FF7D27FCFCFCC2FFFCFCFC4B27FD0C
%FFF852FD13FF7DFD09F827A7FFFFFF7DF8FFFFFF7DFD08F827FD09FF7DF8
%FCFCFCBBFFFCFCFC2052FD0BFF7DF8FD14FFA8FD09F827F8F8277D272752
%27FD0AF852FD09FF7D27FCFCFCC2FFFCFCFC4A27FD0BFF2752FFFFFF7DF8
%2727FD0EFF27FD07F87DFFFF7D52F8F8F8274B7DA852FD06F827FD0AFF7D
%F8FCFCFCBBFFFCFCFC2052FD0AFFA8F8A8FFFF7DF8527627F8FD0EFF7D27
%27F84B52FD07FF5152FD06FF525227527DFD0BFF7D27FCFCFCC2FFFCFCFC
%4A27FD0AFF52F8FFFFA8F8A8FFFFFF2052FD1AFF5227FD16FF7DF8FCFCFC
%BCFFFCFCFC4452FD0AFFF87CFFFF5227FD04FF2752FD1AFF2752FD16FF7D
%27FCFCFCC2FFFCFCFC4B27FD09FFA8F8A8FFFF5227FD04FF5227FD1AFF52
%27FD06FF7D27522752A1FD0AFF7DF8FCFCFC99FFFCFCFC4452FD09FFA127
%FFFFFF5127FD04FF277DFD0FFFA15127F8527DFD05FF2752FD04FF52FD07
%F852FD09FF7D27FCFCFCC2FFFCFCFC4B27FD09FF7D27FFFFFFA852FFFFFF
%A8F8A7FD0EFF27FD07F8FD04FF2727FFFFFF52FD09F8FD09FF7DF8FCFCFC
%BBFFFCFCFC2052FD09FF7DF8FD08FF27F8FD0EFFA8FD09F8522727F8F8F8
%2727FD0AF8A8FD08FF7D27FCFCFCC2FFFCFCFC4A27FD09FFA8F8A1FD07FF
%A82727FD0DFF7CFD09F827527C27277D7C7620FD09F8FD09FF7DF8FCFCFC
%BBFFFCFCFC2052FD0AFF2727FD08FFA8F8A8FD0DFFFD07F827A8FFFFFF27
%52FD04FF7627FD06F87DFD09FF7D27FCFCFCC2FFFCFCFC4A27FD0BFFF827
%FD08FFF87DFD0DFFA827FD04F852A8FD04FF5127FD06FF7D27272752A8FD
%0AFF7DF8FCFCFCBCFFFCFCFC4452FD0AFF27277DFD08FF277CFD19FF2027
%A8FD15FF7D27FCFCFCC2FFFCFCFC4B27FD09FF52F8A8FD08FFA8F8FD19FF
%FD04F852FD14FF7DF8FCFCFC99FFFCFCFC4452FD09FF2752FD08FFA8F852
%FD18FF52FD05F8A8FD13FF7D27FCFCFCC2FFFCFCFC4B27FD09FFF87DFD06
%FF5127F852FD19FF27FD05F827FD13FF7DF8FCFCFCBBFFFCFCFC2052FD09
%FF2727FD06FF2727FD1BFFFD06F827FD13FF7D27FCFCFCC2FFFCFCFC4A27
%FD09FF52F87CFD04FFA8F8CFFD1BFF27FD05F827FD13FF76F8FCFCFCBBFF
%FCFCFC6827FD0AFF522727527652F852FD1CFF52FD05F827FD13FF274BFC
%FCFCC2FFFD04FCF852FD0AFFA8522727277DFD1EFFFD05F8A8FD12FF7DF8
%8CFCFCFCBCFFFD04FC92F87DFD2EFF522727A8FD12FF7DF844FD04FCC2FF
%FD05FC68F827277D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D
%7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D
%7C7D7D7D7C7D7D7D7C7D7D52F8F844FD05FC99FFFD06FCB5444BF8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F8272027F827
%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027
%204B8CFD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
370.1543 307.3057 m
217.083 307.3057 L
217.083 545.416 L
370.1543 545.416 L
370.1543 307.3057 L
fu0 0 0 0 k
362.5898 324.4727 m
362.5898 529.1396 l
362.0898 537.6396 351.4238 538.1396 v
233.2573 537.8057 l
224.5903 536.9717 224.5903 527.3057 v
224.5903 324.8057 l
224.7573 315.1396 234.2573 314.4727 v
353.7559 314.4727 l
362.0898 314.8057 362.5898 324.4727 v
f0 1 1 0 k
362.4648 495.2227 m
352.4648 489.7227 345.2148 487.8477 v
324.8398 478.3477 l
321.0898 465.2227 l
320.5898 461.4727 l
344.7148 467.2227 362.4648 491.7227 v
362.4648 495.2227 l
f0 0.2 1 0 k
328.4648 537.9727 m
311.4648 537.9727 l
272.9653 522.3477 272.5903 498.3477 v
273.2153 489.8477 276.3403 484.0977 v
279.4653 478.3477 280.0903 476.8477 280.0903 476.3477 c
262.2153 471.9727 254.3403 457.3477 v
245.0903 455.8477 243.0903 447.9727 v
245.9653 449.9727 l
248.5903 447.8477 257.5903 450.2227 v
263.8403 443.2227 275.0903 442.4727 v
275.8403 441.3477 276.7153 440.5977 v
277.5903 439.8477 276.4653 438.0977 275.3403 436.9727 c
274.2153 435.8477 269.5903 433.3477 268.7153 428.9727 c
267.8403 424.5977 269.2153 421.0977 275.8403 419.0977 c
282.4653 417.0977 288.3403 417.3477 296.0903 419.4727 c
303.8398 421.5977 319.2148 430.2227 326.2148 436.0977 c
333.2148 441.9727 338.0898 447.3477 y
338.9648 447.9727 339.0898 448.8477 v
339.2148 449.7227 337.8398 450.0977 336.4648 449.8477 c
335.0898 449.5977 329.9648 447.2227 y
325.0898 447.7227 321.0898 445.0977 v
320.2148 446.5977 318.2148 446.3477 v
316.2148 446.0977 312.0898 443.0977 311.0898 442.4727 c
310.0898 441.8477 305.5898 438.2227 y
305.2148 440.0977 l
306.2148 441.0977 306.8398 442.2227 v
307.4648 443.3477 306.4648 443.7227 305.9648 443.5977 c
308.2148 445.5977 308.5898 446.7227 v
308.9648 447.8477 307.3398 448.3477 306.8398 448.2227 c
309.4648 450.3477 308.4648 451.7227 v
324.5898 461.4727 330.5898 477.8477 v
353.4648 492.5977 362.3398 502.4727 v
362.4648 503.7227 l
347.5898 503.9727 l
345.5898 503.5977 345.7148 505.5977 v
345.8398 507.5977 346.0898 516.9727 y
342.0898 516.7227 l
328.4648 499.3477 311.9648 486.8477 v
305.5898 486.4727 l
305.0898 489.3477 303.5898 490.2227 v
304.9648 492.4727 303.5898 493.4727 v
304.7148 496.4727 302.8398 497.5977 v
303.5898 499.9727 302.0898 501.2227 v
302.8398 502.9727 302.2148 504.4727 v
303.9648 506.8477 l
306.3398 507.5977 307.7148 508.3477 v
309.0898 509.0977 311.0898 511.2227 311.7148 512.2227 c
312.3398 513.2227 320.3398 520.4727 323.3398 521.9727 c
326.3398 523.4727 327.2148 526.9727 y
328.3398 531.8477 l
329.8398 532.8477 330.7148 533.5977 v
331.5898 534.3477 330.3398 535.8477 329.7148 535.9727 c
329.0898 536.0977 328.4648 537.9727 y
f0 1 1 0 k
272.5903 498.3477 m
250.0903 509.7227 241.2153 537.9727 v
239.8403 538.2227 l
236.5903 525.5977 240.2153 507.7227 v
243.8403 489.8477 259.8403 475.2227 266.9653 470.7227 c
275.4653 474.9727 280.0903 476.3477 v
279.4653 479.3477 278.8403 480.2227 v
278.2153 481.0977 273.2153 487.3477 272.5903 498.3477 c
f*u
1 D
0.65 0.53 0.51 1 k
352.668 313.7646 m
358.5293 313.7646 363.2988 318.5322 363.2988 324.3936 C
363.2988 528.0518 L
363.2988 533.9131 358.5293 538.6816 352.668 538.6816 C
234.5112 538.6816 L
228.6499 538.6816 223.8813 533.9131 223.8813 528.0518 C
223.8813 324.3936 L
223.8813 318.5322 228.6499 313.7646 234.5112 313.7646 C
352.668 313.7646 L
f0 D
361.8809 528.0518 m
361.8809 324.3936 L
361.8809 319.3135 357.748 315.1807 352.668 315.1807 C
234.5112 315.1807 L
229.4312 315.1807 225.2993 319.3135 225.2993 324.3936 C
225.2993 528.0518 L
225.2993 533.1318 229.4312 537.2637 234.5112 537.2637 C
352.668 537.2637 L
357.748 537.2637 361.8809 533.1318 361.8809 528.0518 C
f*U
333.8398 529.2227 m
332.8398 523.2227 327.5898 521.4727 v
322.3398 519.7227 319.7559 522.4736 319.2559 525.1396 c
318.7559 527.8057 320.4238 530.9736 325.4238 531.6396 c
330.4238 532.3057 333.9238 529.9727 333.8398 529.2227 c
f347.5898 528.3057 m
350.5898 525.8057 349.0898 520.4727 v
347.5898 515.1396 343.2559 514.9736 341.7559 516.1396 c
340.2559 517.3057 338.4229 520.3066 341.2559 524.6396 c
344.0898 528.9727 346.5898 528.6387 347.5898 528.3057 c
f358.2559 528.9727 m
362.0898 525.3057 360.2559 520.4727 v
358.4238 515.6396 354.4238 514.9736 352.5898 516.1396 c
350.7559 517.3057 349.4238 520.6396 352.0898 524.9727 c
354.7559 529.3057 357.2559 529.3057 358.2559 528.9727 c
f362.2559 475.4727 m
360.4238 471.1396 356.0898 470.9727 v
351.7559 470.8057 349.5898 471.9727 349.4238 474.9727 c
349.2559 477.9727 352.0898 479.1396 356.4238 479.6396 c
360.7559 480.1396 361.9229 477.9727 362.2559 477.4727 c
362.5898 476.9727 362.2559 475.4727 y
f348.7559 459.9727 m
347.0898 454.8057 340.7559 454.9727 v
334.4238 455.1396 333.9238 459.1396 334.0898 460.6396 c
334.2559 462.1396 335.5898 465.3066 341.5898 465.1396 c
347.5898 464.9727 348.4229 460.6396 348.7559 459.9727 c
f336.4238 439.6396 m
333.7568 435.4727 328.4238 435.4727 v
323.0898 435.4727 321.9229 438.4717 321.7559 440.3057 c
321.5898 442.1396 323.5898 444.1396 328.7559 443.9727 c
333.9238 443.8057 336.0898 441.3066 336.4238 439.6396 c
f338.4238 419.9727 m
341.5898 414.8057 337.2559 408.9727 v
332.9238 403.1396 327.4238 405.1396 326.4238 406.3057 c
325.4238 407.4727 323.4238 411.6396 328.4238 416.1396 c
333.4238 420.6392 336.5898 420.9727 338.4238 419.9727 c
f353.5898 429.1392 m
358.5898 428.1396 359.4238 422.3062 v
360.2559 416.4727 356.7559 413.1396 354.2559 413.1396 c
351.7559 413.1396 347.7568 415.1396 348.4238 421.4727 c
349.0898 427.8062 352.2559 429.1392 353.5898 429.1392 c
f362.4238 435.1396 m
359.2568 437.8057 358.4238 440.8057 v
357.5898 443.8057 359.7559 447.1396 362.5898 446.9727 c
362.4238 435.1396 l
f312.9238 403.6396 m
309.9238 399.1396 304.0898 399.6396 v
298.2568 400.1396 297.0908 404.8057 297.4238 406.3057 c
297.7568 407.8057 300.0898 410.6396 306.0898 409.9727 c
312.0898 409.3057 312.9238 404.6396 312.9238 403.6396 c
f312.5898 389.4727 m
309.4238 384.4727 302.5898 385.4727 v
295.7568 386.4727 294.9238 390.9727 295.4238 392.9727 c
295.9238 394.9727 299.2568 397.3057 304.5898 396.3057 c
309.9238 395.3057 312.9238 391.4727 312.5898 389.4727 c
f328.7559 390.4727 m
330.4238 386.3057 338.4238 386.4727 v
346.4238 386.6396 346.5898 391.9727 346.5898 392.4727 c
346.5898 392.9727 345.7559 397.9717 337.2559 397.1396 c
328.7559 396.3057 328.7559 391.3057 328.7559 390.4727 c
f328.7559 373.6396 m
331.0898 369.9717 338.0898 370.6396 v
345.0898 371.3057 345.4238 376.8057 344.9238 377.9727 c
344.4238 379.1396 342.0898 382.4717 335.7559 380.6396 c
329.4238 378.8057 328.5898 374.9717 328.7559 373.6396 c
f309.0898 373.4727 m
305.4238 369.8057 299.5898 370.6396 v
293.7568 371.4727 291.9238 374.9727 291.9238 376.9727 c
291.9238 378.9727 294.5898 381.8057 301.2568 380.8057 c
307.9238 379.8057 309.2559 374.8057 309.0898 373.4727 c
f326.4238 354.4727 m
329.4238 350.8057 335.5898 351.1396 v
341.7559 351.4727 343.7559 356.8057 343.0898 359.1396 c
342.4238 361.4727 338.7559 364.3057 333.0898 362.1396 c
327.4238 359.9727 326.2568 356.3057 326.4238 354.4727 c
f307.0898 355.3057 m
303.2568 350.6396 296.9238 350.8057 v
290.5903 350.9727 288.9233 354.1396 289.2568 356.9727 c
289.5903 359.8057 292.4238 362.4736 298.5903 361.8057 c
304.7559 361.1396 307.5898 356.8057 307.0898 355.3057 c
f325.4238 339.1396 m
328.2559 334.8057 335.0898 334.3057 v
341.9238 333.8057 343.7559 338.4717 343.5898 340.1396 c
343.4238 341.8057 342.4238 345.6396 334.9238 345.3057 c
327.4238 344.9727 325.7568 340.6396 325.4238 339.1396 c
f317.7559 332.3057 m
322.7559 331.4717 324.0898 326.1396 v
325.4238 320.8057 321.7559 317.6396 319.5898 317.3057 c
317.4238 316.9727 313.2559 318.9727 312.7559 323.9727 c
312.2559 328.9727 315.7559 332.3057 317.7559 332.3057 c
f309.7559 338.9727 m
307.2559 333.6396 301.0898 333.4727 v
294.9238 333.3057 293.0903 336.3057 293.0903 338.8057 c
293.0903 341.3057 295.2568 343.4717 300.5898 343.6396 c
305.9238 343.8057 309.0898 341.1396 309.7559 338.9727 c
f267.9233 390.4727 m
274.7573 390.1396 277.0903 384.4727 v
279.4233 378.8057 275.9233 375.3057 273.4233 374.9727 c
270.9233 374.6396 267.5894 375.1396 265.9233 380.3057 c
264.2573 385.4727 266.2563 389.9727 267.9233 390.4727 c
f256.0903 392.1396 m
257.0894 386.1396 252.4233 382.9727 v
247.7573 379.8057 242.7573 380.9727 241.7573 384.4727 c
240.7573 387.9727 243.0894 390.9717 246.4233 392.6396 c
249.7573 394.3057 255.2573 393.4717 256.0903 392.1396 c
f256.9233 406.8057 m
259.5913 411.8057 257.2573 416.3057 v
254.9233 420.8062 250.0894 420.8062 247.9233 419.8066 c
245.7573 418.8066 244.7563 413.8057 247.9233 409.8057 c
251.0903 405.8057 255.5894 406.6396 256.9233 406.8057 c
f266.9233 400.4727 m
271.4233 400.6396 275.4233 403.9727 v
279.4233 407.3057 279.0894 414.3057 274.9233 416.3057 c
270.7573 418.3057 267.2573 416.3057 265.7573 409.8057 c
264.2573 403.3057 266.2563 400.9727 266.9233 400.4727 c
f280.6011 477.8457 m
280.1704 479.2627 279.3989 480.4551 278.5063 481.8359 c
276.854 484.3936 274.7974 487.5762 273.6206 494.0986 c
271.9556 503.3271 275.7476 511.8184 285.9155 521.6299 c
295.1978 530.5869 312.8281 537.2432 313.0039 537.3086 C
312.5078 538.6367 L
311.7744 538.3623 294.4282 531.8135 284.9312 522.6494 c
274.3862 512.4746 270.4683 503.5918 272.2261 493.8467 c
273.4526 487.0449 275.686 483.5898 277.3169 481.0674 c
278.1509 479.7754 278.8716 478.6602 279.2456 477.4336 c
280.3257 473.8848 279.5806 471.9219 278.0288 469.9043 C
279.1519 469.041 L
280.9282 471.3496 281.854 473.7305 280.6011 477.8457 c
f284.8608 502.915 m
288.2324 505.5645 291.1357 509.5967 292.8701 512.0059 c
293.437 512.793 294.0225 513.6064 294.2002 513.7529 C
295.3359 514.9209 L
297.6997 517.4639 303.2344 523.4199 309.7656 527.0186 c
317.5371 531.3008 326.8691 534.1436 328.7617 534.6182 c
329.4629 534.7939 329.917 535.334 329.9756 536.0635 c
330.0625 537.1631 329.2344 538.5146 328.2031 538.957 C
327.6445 537.6543 L
328.1602 537.4336 328.5996 536.6348 328.5625 536.1768 c
328.5508 536.0322 328.5117 536.0166 328.418 535.9932 c
326.4883 535.5098 316.9844 532.6152 309.082 528.2607 c
302.3506 524.5518 296.7075 518.4785 294.2979 515.8857 C
293.314 514.8594 L
293.0059 514.6123 292.6025 514.0596 291.7202 512.834 c
290.0293 510.4854 287.1992 506.5547 283.9858 504.0303 c
279.5005 500.5059 272.4995 498.8457 272.4302 498.8301 C
272.7505 497.4492 L
273.0493 497.5186 280.1245 499.1943 284.8608 502.915 c
f300.0215 524.0771 m
309.1846 531.1143 322.5898 537.4355 322.7246 537.498 C
322.123 538.7813 L
321.9863 538.7178 308.4453 532.333 299.1582 525.2021 c
289.9351 518.1191 280.8999 510.4414 280.5493 501.333 C
281.9653 501.2783 L
282.2925 509.7744 291.0649 517.2002 300.0215 524.0771 c
f318.3691 527.1543 m
321.9727 528.5547 L
327.3105 530.5537 330.8516 531.9697 331.4141 533.377 c
331.6641 534.002 331.6621 534.623 331.4072 535.1729 c
330.9346 536.1914 329.7773 536.6016 329.6475 536.6445 C
329.1953 535.3018 L
329.3926 535.2334 329.9414 534.9707 330.123 534.5723 c
330.1787 534.4512 330.2363 534.249 330.0977 533.9023 c
329.7188 532.9688 324.3564 530.9609 321.4766 529.8818 C
317.8105 528.457 L
314.6875 527.1182 297.1235 515.9697 292.7852 506.9463 C
294.0625 506.333 L
298.248 515.0381 315.3281 525.8516 318.3691 527.1543 C
f291.1055 504.9863 m
294.2358 508.2998 292.6343 511.7959 292.5645 511.9434 C
291.2817 511.3398 L
291.3335 511.2275 292.5239 508.5518 290.0752 505.959 c
287.3789 503.1045 282.856 501.1436 282.811 501.124 C
283.3696 499.8213 L
283.5659 499.9053 288.2046 501.9141 291.1055 504.9863 c
f292.2876 506.0996 m
290.8931 505.8457 L
291.3184 503.5078 286.5991 499.3174 283.5249 497.2256 C
284.3218 496.0537 L
285.2134 496.6602 293.0156 502.0947 292.2876 506.0996 C
f290.3237 496.0479 m
293.3311 500.0586 291.0483 502.6719 290.9497 502.7803 C
289.8926 501.8369 L
289.958 501.7607 291.4707 499.9395 289.1899 496.8975 c
287.2896 494.3643 284.3931 492.4141 284.3638 492.3955 C
285.1509 491.2158 L
285.2769 491.3008 288.2744 493.3145 290.3237 496.0479 c
f290.8745 492.292 m
292.604 495.3672 290.8589 497.3633 290.7837 497.4473 C
289.7246 496.5049 L
289.7715 496.4502 290.8535 495.1455 289.6392 492.9873 c
288.2861 490.5811 284.5454 489.1504 284.5083 489.1357 C
285.0063 487.8096 L
285.1792 487.874 289.2661 489.4326 290.8745 492.292 c
f290.7417 488.3604 m
291.917 491.1045 290.3271 492.7393 290.2578 492.8066 C
289.2495 491.8105 L
289.2896 491.7686 290.2241 490.751 289.439 488.9189 c
288.5142 486.7598 285.6479 484.1953 285.6196 484.1689 C
286.561 483.1104 L
286.688 483.2227 289.6914 485.9092 290.7417 488.3604 c
f292.4639 485.0889 m
292.6343 487.4844 291.0278 488.2666 290.1543 488.3457 C
290.0161 486.9346 L
290.2856 486.9023 291.1563 486.6787 291.0498 485.1904 c
290.9473 483.751 287.7202 481.1836 285.7095 479.9033 C
286.4712 478.708 L
287.4395 479.3242 292.2813 482.5293 292.4639 485.0889 c
f292.9487 479.1523 m
293.2173 480.3604 293.0918 481.3809 292.5762 482.1836 c
291.9097 483.2217 290.8569 483.4736 290.7388 483.499 C
290.4341 482.1143 L
290.707 482.0488 292.0439 481.6143 291.5649 479.459 c
291.1025 477.377 286.8794 476.1377 285.2915 475.8359 C
285.5552 474.4434 L
286.2329 474.5713 292.2026 475.793 292.9487 479.1523 c
f290.4072 474.3389 m
289.7734 475.6064 L
283.7739 472.6064 L
284.4077 471.3389 L
290.4072 474.3389 L
f290.8486 471.3125 m
290.332 472.6328 L
282.6655 469.6328 L
283.1812 468.3125 L
290.8486 471.3125 L
f291.0171 467.8135 m
290.4966 469.1318 L
284.1636 466.6318 L
284.6831 465.3135 L
291.0171 467.8135 L
f291.8286 464.8057 m
291.3521 466.1396 L
284.3521 463.6396 L
284.8286 462.3057 L
291.8286 464.8057 L
f292.1089 461.2891 m
291.7388 462.6563 L
285.5728 460.9902 L
285.9419 459.6211 L
292.1089 461.2891 L
f291.4878 458.3027 m
291.0259 459.6426 L
286.1919 457.9756 L
286.6548 456.6357 L
291.4878 458.3027 L
f291.8149 454.6006 m
291.7568 456.0146 L
291.5947 456.0146 291.1011 456.0146 286.6265 453.9492 C
287.2202 452.6621 L
289.1255 453.541 291.4238 454.5332 291.8149 454.6006 C
f292.7744 451.4551 m
292.4063 452.8242 L
288.0728 451.6572 L
288.4409 450.2881 L
292.7744 451.4551 L
f294.9546 449.459 m
294.5591 450.8203 L
289.3926 449.3203 L
289.7881 447.959 L
294.9546 449.459 L
f274.2065 465.6064 m
273.9741 467.0049 L
273.2739 466.8877 269.729 466.2598 268.6372 465.3506 C
269.5435 464.2607 L
270.1313 464.75 272.6245 465.3428 274.2065 465.6064 C
f277.4673 463.7959 m
277.0474 465.1494 L
271.9731 463.5752 271.6294 463.0596 271.5005 462.8652 C
272.6089 461.9961 L
272.9741 462.29 275.4155 463.1592 277.4673 463.7959 C
f279.4819 461.9678 m
279.0327 463.3115 L
277.8032 462.9014 274.8872 461.9102 274.3647 461.5625 C
275.147 460.3809 L
275.4585 460.5732 277.5952 461.3389 279.4819 461.9678 C
f280.8013 459.9629 m
280.3794 461.3164 L
275.0454 459.6494 L
275.4692 458.2959 L
280.8013 459.9629 L
f282.0483 457.6592 m
281.4663 458.9521 L
278.1323 457.4521 L
278.7144 456.1592 L
282.0483 457.6592 L
f283.3306 455.4727 m
282.8501 456.8066 L
278.6831 455.3066 L
279.1636 453.9727 L
283.3306 455.4727 L
f285.1011 454.3535 m
284.4136 455.5918 L
281.4136 453.9248 L
282.1011 452.6865 L
285.1011 454.3535 L
f286.8149 451.9678 m
286.3667 453.3115 L
283.3667 452.3115 L
283.8149 450.9678 L
286.8149 451.9678 L
f271.9497 454.3477 m
267.4497 454.5137 L
267.397 453.0977 L
271.897 452.9316 L
271.9497 454.3477 L
f273.9233 451.6816 m
268.4702 452.0127 L
268.3765 450.5986 L
273.9233 450.2637 L
273.9233 451.6816 L
f275.6167 449.6807 m
271.1167 449.8477 L
271.064 448.4316 L
275.564 448.2646 L
275.6167 449.6807 L
f277.7817 447.8477 m
272.9478 448.0137 L
272.8989 446.5977 L
277.7329 446.4316 L
277.7817 447.8477 L
f278.978 446.0117 m
276.394 446.2109 272.2573 446.5908 271.4517 446.8213 C
271.063 445.458 L
272.2642 445.1152 278.1968 444.6514 278.8687 444.5996 C
278.978 446.0117 L
f243.1489 446.5371 m
243.1938 446.5947 247.7437 452.3096 255.4956 453.1006 C
255.3511 454.5107 L
250.4146 454.0068 246.7759 451.7256 244.5493 449.8779 C
245.0356 450.7012 245.686 451.6367 246.6157 452.6641 c
249.5728 455.9316 254.3267 456.7656 254.3745 456.7734 C
254.7173 456.832 L
254.8823 457.1387 L
262.4702 471.3447 280.2437 475.7402 280.4224 475.7832 C
280.0933 477.1621 L
279.9097 477.1182 261.7964 472.6357 253.813 458.1074 C
252.6206 457.8555 248.4272 456.7793 245.5649 453.6152 c
242.2856 449.9912 241.9019 447.1787 241.8872 447.0605 C
241.5698 444.5156 L
243.1489 446.5371 L
f307.4268 450.6826 m
322.0859 458.6064 328.9648 471.9814 331.2422 477.3633 C
329.9375 477.916 L
327.7188 472.6709 321.0176 459.6396 306.7529 451.9287 c
293.9829 445.0264 278.02 441.6826 269.6235 444.1523 c
261.4702 446.5508 258.0073 450.7109 257.9731 450.752 C
257.6587 451.1377 L
257.188 450.9746 L
251.3491 448.9229 246.3755 450.623 246.3267 450.6406 C
245.853 449.3047 L
246.0679 449.2285 251.0737 447.5527 257.1812 449.5166 C
258.189 448.4346 261.8579 444.959 269.2231 442.793 c
278.0825 440.1875 294.1499 443.5049 307.4268 450.6826 c
f298.9238 505.9307 m
302.6279 505.9307 303.7266 507.4072 304.6953 508.709 C
304.8232 508.8809 L
305.4395 509.8789 L
306.9766 512.5273 310.5742 518.7305 320.3994 523.502 C
319.7803 524.7773 L
309.5654 519.8164 305.6777 513.1133 304.2139 510.5898 C
303.6895 509.7305 L
303.5586 509.5557 L
302.6406 508.3223 301.916 507.3486 298.9238 507.3486 c
295.312 507.3486 291.6191 505.6885 291.4634 505.6182 C
292.0498 504.3271 L
292.085 504.3438 295.6245 505.9307 298.9238 505.9307 c
f308.3252 508.2217 m
309.8477 509.2686 311.2422 510.8564 312.5898 512.3926 c
313.7129 513.6709 314.7734 514.8789 315.8662 515.752 c
318.5859 517.9277 322.1826 520.5508 323.2031 520.9883 C
322.6445 522.291 L
321.3457 521.7344 317.3809 518.7793 314.9805 516.8594 c
313.791 515.9072 312.6387 514.5957 311.5254 513.3271 c
310.2344 511.8574 308.8984 510.3369 307.5215 509.3896 c
305.0605 507.6973 301.9189 507.5146 301.8877 507.5137 C
301.959 506.0977 L
302.1035 506.1055 305.5254 506.2959 308.3252 508.2217 c
f299.6211 502.1982 m
303.8545 504.7383 304.8066 506.6387 304.9014 506.8467 C
303.6152 507.4414 L
303.6074 507.4248 302.7461 505.7266 298.8921 503.4131 c
294.8428 500.9834 291.0615 499.6553 291.0239 499.6416 C
291.4897 498.3037 L
291.6489 498.3584 295.4404 499.6895 299.6211 502.1982 c
f300.502 498.8965 m
303.625 501.127 303.5566 504.0146 303.084 505.2295 C
301.7607 504.7217 L
301.7988 504.6182 302.6582 502.1777 299.6777 500.0488 c
296.2651 497.6113 290.9927 494.9658 290.9399 494.9395 C
291.5737 493.6719 L
291.7935 493.7813 296.9976 496.3926 300.502 498.8965 c
f303.5215 497.9248 m
303.9697 498.6299 304.1172 499.3457 303.9609 500.0518 c
303.707 501.1943 302.7461 501.834 302.6367 501.9033 C
301.8721 500.7109 L
302.1602 500.5215 303.0439 499.8145 302.3262 498.6865 c
301.5 497.3896 295.0615 492.8105 291.1968 490.2285 C
291.9839 489.0508 L
292.4023 489.3301 302.2422 495.916 303.5215 497.9248 c
f304.4199 494.0566 m
304.8379 495.1699 304.8545 496.1426 304.4707 496.9473 c
303.9932 497.9492 303.083 498.2773 302.9805 498.3115 C
302.5225 496.9707 L
302.541 496.9639 302.9805 496.7979 303.1992 496.3203 c
303.4023 495.8779 303.3662 495.2832 303.0928 494.5547 c
302.2363 492.2715 293.4458 487.0117 292.4937 486.6309 C
293.02 485.3145 L
293.8564 485.6494 303.2813 491.0234 304.4199 494.0566 c
f303.9902 490.0479 m
304.874 491.2266 305.168 492.2471 304.8633 493.0811 c
304.5078 494.0527 303.5264 494.3047 303.416 494.3301 C
303.0869 492.9512 L
303.0908 492.9502 303.4414 492.8555 303.5342 492.5889 c
303.5898 492.4268 303.6377 491.9385 302.8564 490.8975 c
300.9648 488.375 293.4736 483.9609 293.3979 483.917 C
294.1157 482.6943 L
294.4336 482.8809 301.9287 487.2979 303.9902 490.0479 c
f306.127 486.3848 m
306.5137 489.4854 303.8867 491.0244 303.7754 491.0879 C
303.0684 489.8594 L
303.1475 489.8135 304.9883 488.71 304.7207 486.5605 c
304.541 485.1318 300.0664 481.7969 293.5845 478.2617 C
294.2632 477.0176 L
298.5488 479.3545 305.7881 483.6797 306.127 486.3848 c
f309.75 478.5449 m
309.7354 478.8691 309.5498 479.9336 307.7891 480.0137 c
304.0527 480.1826 298.6328 478.7188 298.4038 478.6563 C
298.7769 477.2891 L
298.8306 477.3037 304.2129 478.7568 307.7246 478.5977 c
308.1875 478.5771 308.3135 478.4775 308.332 478.4619 C
308.3281 478.3975 308.2793 478.2148 308.0566 477.918 c
307.0762 476.6143 303.6758 474.4092 298.3276 473.6748 C
298.52 472.2705 L
304.9648 473.1553 309.8496 476.3701 309.75 478.5449 c
f313.3701 475.7949 m
313.5586 476.4961 313.2041 476.8828 313.043 477.0176 c
311.873 477.9922 308.9277 477.7383 308.3496 477.6777 C
308.4971 476.2676 L
309.5488 476.3779 311.2344 476.3594 311.9316 476.0293 C
311.5117 474.9189 307.4707 471.3604 303.4697 470.6709 C
303.71 469.2744 L
307.9883 470.0117 312.8574 473.8799 313.3701 475.7949 c
f316.4219 472.3457 m
316.4717 472.8789 316.2324 473.334 315.7676 473.5918 c
314.1465 474.4922 311.416 474.6729 311.3008 474.6797 C
311.2119 473.2656 L
311.2363 473.2637 313.6191 473.0967 314.9775 472.3926 C
314.7979 471.5166 311.6855 468.8076 308.6992 467.8115 C
309.1475 466.4678 L
312.1797 467.4785 316.252 470.5107 316.4219 472.3457 c
f317.748 470.3027 m
317.6445 471.4717 316.584 472.1172 315.9746 472.3145 C
315.5342 470.9668 L
315.541 470.9639 316.2949 470.6943 316.3379 470.1729 c
316.3711 469.7598 316.0313 468.1719 310.2568 465.0986 C
310.9229 463.8467 L
315.6768 466.3779 317.9102 468.4893 317.748 470.3027 c
f319.6348 467.3516 m
318.5449 468.2598 L
318.5215 468.2305 316.1094 465.3506 314.417 464.4277 C
315.0957 463.1836 L
317.0254 464.2363 319.5283 467.2256 319.6348 467.3516 C
f320.9902 464.2148 m
319.8574 465.0664 L
319.8438 465.0479 318.4766 463.2637 316.5977 462.8301 C
316.916 461.4492 L
319.3066 462.001 320.9229 464.124 320.9902 464.2148 C
f298.978 467.3799 m
298.2026 468.5654 L
293.8691 465.7324 L
294.6445 464.5469 L
298.978 467.3799 L
f302.3906 465.1641 m
301.7891 466.4473 L
296.4561 463.9473 L
297.0576 462.6641 L
302.3906 465.1641 L
f305.334 463.3076 m
304.8457 464.6377 L
299.8457 462.8047 L
300.334 461.4746 L
305.334 463.3076 L
f307.7441 461.1143 m
307.4355 462.4971 L
302.9355 461.4971 L
303.2441 460.1143 L
307.7441 461.1143 L
f310.6387 460.1309 m
310.207 461.4805 L
306.041 460.1475 L
306.4727 458.7979 L
310.6387 460.1309 L
f314.8652 458.7725 m
314.6465 460.1729 L
309.3145 459.3398 L
309.5332 457.9395 L
314.8652 458.7725 L
f270.2573 462.3057 m
267.5913 462.9727 264.7573 462.4727 v
261.9233 461.9727 261.7563 459.6396 261.9233 458.4727 c
262.0903 457.3057 264.0913 456.4717 265.7573 457.3057 c
267.4233 458.1396 266.2573 460.9727 y
268.5903 461.3066 269.5903 460.9727 v
270.5903 460.6387 270.2573 462.3057 y
f342.8135 516.3672 m
341.6992 517.2441 L
326.6016 498.0439 302.4082 479.8887 302.166 479.707 C
303.0137 478.5723 L
303.2578 478.7539 327.5977 497.0176 342.8135 516.3672 C
f312.5957 486.4521 m
312.252 487.8271 L
312.2129 487.8174 308.3369 486.8623 305.502 487.1768 C
305.3457 485.7686 L
308.4355 485.4248 312.4268 486.4102 312.5957 486.4521 C
f362.0898 504.1816 m
353.9414 504.4541 L
347.2559 504.6816 L
346.8242 504.6816 346.6074 504.7529 346.4746 504.8193 C
346.4922 505.5088 346.7988 517.2871 Y
345.3809 517.3242 L
345.042 504.2666 L
345.166 504.0801 L
345.2578 503.9434 345.7852 503.2637 347.2559 503.2637 C
353.8887 503.0381 L
362.0898 502.7637 L
362.0898 504.1816 L
f346.4766 515.0293 m
345.3711 515.916 L
345.1895 515.6895 327.043 493.167 308.3428 479.7148 C
309.1699 478.5645 L
328.0313 492.1309 346.2939 514.8018 346.4766 515.0293 C
f346.334 509.5615 m
345.1797 510.3838 L
345.0352 510.1816 330.5234 490.0205 310.5527 477.7432 C
311.2949 476.5361 L
331.5166 488.9678 346.1875 509.3564 346.334 509.5615 C
f346.3438 504.0762 m
345.1699 504.8701 L
345.0518 504.6963 333.1611 487.3564 311.4082 475.0898 C
312.1045 473.8555 L
334.1611 486.2939 346.2246 503.8994 346.3438 504.0762 C
f352.4922 503.2178 m
351.3545 504.0625 L
351.2402 503.9082 339.6309 488.4883 315.0557 473.5781 C
315.791 472.3672 L
340.623 487.4316 352.377 503.0615 352.4922 503.2178 C
f357.002 503.0635 m
355.8447 503.8818 L
355.7207 503.707 343.1094 486.1748 316.4229 471.9307 C
317.0898 470.6807 L
344.0918 485.0928 356.876 502.8857 357.002 503.0635 C
f362.7656 502.1465 m
361.748 503.1328 L
361.5898 502.9707 345.6377 486.6826 316.748 470.7607 C
317.4316 469.5195 L
346.5215 485.5518 362.6055 501.9824 362.7656 502.1465 C
f267.6177 471.25 m
267.4731 471.335 253.0259 480.0293 244.561 497.4492 c
240.3804 506.0527 239.3179 515.9609 239.3179 523.8105 c
239.3179 530.5859 240.103 535.7822 240.3647 537.3271 C
240.5278 537.3457 240.5493 537.3477 240.7231 537.3672 C
241.6929 533.6836 248.0581 512.9951 272.0337 497.2139 C
272.813 498.3975 L
247.0532 515.3535 241.9985 538.0586 241.9507 538.2861 C
241.8179 538.915 L
239.1616 538.6191 L
239.062 538.1084 L
239.0161 537.876 234.6167 514.6699 243.2856 496.8301 c
251.9448 479.0107 266.7485 470.1172 266.897 470.0293 C
267.6177 471.25 L
f352.8691 537.6172 m
351.6426 538.3281 L
351.0742 537.3438 346.0684 528.6563 345.7246 526.5889 C
347.123 526.3564 L
347.3516 527.7305 350.6855 533.8438 352.8691 537.6172 C
f351.6836 535.6465 m
351.1631 536.9648 L
350.3867 536.6582 332.1191 529.4463 330.7734 528.7734 C
331.4063 527.5059 L
332.4395 528.0225 345.1221 533.0566 351.6836 535.6465 C
f360.6289 534.5693 m
359.2188 534.71 L
359.0918 533.4385 357.4131 529.5059 356.7773 528.0977 C
358.0693 527.5137 L
358.3125 528.0537 360.4551 532.8379 360.6289 534.5693 C
f362.7295 494.9453 m
361.7842 496.001 L
361.7363 495.959 356.8652 491.7158 343.8945 487.9863 C
344.2852 486.625 L
357.6221 490.458 362.5273 494.7637 362.7295 494.9453 C
f363.3555 492.2617 m
362.1563 493.0176 L
362.0078 492.7813 346.9775 469.3291 320.4053 462.1572 C
320.7744 460.7881 L
347.8945 468.1094 363.2051 492.0215 363.3555 492.2617 C
f293.4395 443.7344 m
293.9448 444.7891 293.5991 445.54 293.5576 445.6221 C
292.2749 445.0215 L
292.2793 445.0098 292.3765 444.7295 292.1099 444.248 c
291.5352 443.2051 289.2979 441.1807 280.7729 439.332 C
281.0737 437.9473 L
288.1772 439.4873 292.3374 441.4346 293.4395 443.7344 c
f293.311 440.9033 m
293.833 442.5781 292.8286 443.7295 292.7856 443.7773 C
291.7217 442.8408 L
291.7432 442.8154 292.2461 442.2031 291.9487 441.2959 c
291.5483 440.0742 289.5181 437.6963 280.4233 435.4941 C
280.7573 434.1167 L
288.2485 435.9307 292.4727 438.2139 293.311 440.9033 c
f291.8843 435.9209 m
293.1699 437.9766 292.6235 439.7773 292.5996 439.8525 C
291.2461 439.4326 L
291.2612 439.3799 291.6138 438.1279 290.6567 436.6318 c
289.6597 435.0732 287.0571 433.0054 280.3198 432.0073 C
280.5269 430.605 L
286.4009 431.4756 290.2222 433.2642 291.8843 435.9209 c
f293.3887 433.0205 m
293.7368 435.1592 291.7324 436.5078 291.647 436.5645 C
290.8643 435.3828 L
290.8774 435.374 292.1948 434.4722 291.9883 433.2402 c
291.7837 432.0195 289.9858 429.584 280.2407 426.9912 C
280.606 425.6211 L
288.7495 427.7881 292.9312 430.2085 293.3887 433.0205 c
f294.0962 428.582 m
294.3872 429.4551 294.1616 430.0894 293.9219 430.4668 c
293.2061 431.5938 291.5283 431.8208 291.3394 431.8428 C
291.1724 430.4355 L
291.48 430.3975 292.4258 430.1821 292.7266 429.7056 c
292.7969 429.5942 292.876 429.4028 292.7515 429.0303 c
292.2759 427.604 289.3633 425.5972 283.9292 424.3291 C
284.2515 422.9492 L
289.6602 424.2109 293.3408 426.3169 294.0962 428.582 c
f300.043 427.6675 m
300.1582 428.189 299.9697 428.6865 299.5254 429.0322 c
297.8188 430.3594 293.7437 429.5928 293.2847 429.501 C
293.5625 428.1113 L
295.0415 428.4058 297.707 428.6094 298.6289 427.9233 C
298.3838 427.1318 294.7744 424.9346 287.0977 423.1631 C
287.416 421.7822 L
293.3579 423.1533 299.5664 425.5049 300.043 427.6675 c
f309.5254 450.8945 m
309.5977 451.7158 309.0898 452.2393 308.7773 452.4199 C
308.043 451.208 L
308.1328 451.1426 308.1162 451.0322 308.1113 450.9951 c
308.0449 450.5352 306.9912 447.9766 292.6831 442.8057 C
293.1646 441.4736 L
303.958 445.374 309.3105 448.4551 309.5254 450.8945 c
f309.3086 446.8223 m
309.3643 448.0801 308.3232 448.8623 307.6992 449.126 C
307.1426 447.8223 L
307.1504 447.8184 307.9238 447.4717 307.8926 446.8789 c
307.8535 446.1426 306.5859 443.373 291.8735 438.6475 C
292.3071 437.2979 L
303.624 440.9336 309.1855 444.0488 309.3086 446.8223 c
f302.6094 438.1914 m
306.0654 440.1787 307.6484 441.7432 307.5898 443.1152 c
307.5576 443.8623 307.0293 444.3047 306.7227 444.4482 C
306.0996 443.1758 L
306.1738 443.1318 306.1738 443.0674 306.1738 443.043 c
306.1719 442.8477 305.9609 441.7529 301.9033 439.4199 c
295.479 435.7266 292.6587 435.1748 292.6309 435.1699 C
292.8799 433.7749 L
293.0005 433.7959 295.9126 434.3408 302.6094 438.1914 c
f306.2939 440.2178 m
304.8848 440.0684 L
304.8887 440.0205 304.9785 438.9004 303.957 438.0059 C
304.8906 436.9395 L
306.4844 438.334 306.3027 440.1416 306.2939 440.2178 C
f309.7012 440.5889 m
316.9707 446.4648 319.2861 445.79 320.4053 445.2568 C
320.5039 445.0605 320.623 444.8223 Y
321.8906 445.457 L
321.4512 446.334 L
321.2402 446.4395 L
319.1357 447.4912 316.1738 447.6436 308.8105 441.6904 c
301.1904 435.5303 292.3228 433.0137 292.2339 432.9888 C
292.6138 431.6235 L
292.9868 431.7271 301.8447 434.2363 309.7012 440.5889 c
f*u
1 D
338.5352 447.2412 m
338.9834 447.4678 339.9141 448.0342 339.9277 448.9121 c
339.9287 448.9189 339.9287 448.9248 339.9287 448.9316 c
339.9287 449.3154 339.748 449.8525 338.9072 450.2734 c
336.7383 451.3584 333.2412 449.8633 330.6074 448.3643 C
329.5703 448.4502 324.667 448.6357 319.6758 445.0479 C
314.6445 441.1563 L
309.6602 437.1914 303.459 432.2559 297.4712 429.6211 C
297.7725 428.2642 L
298.0933 428.271 305.7324 428.499 314.9551 434.0322 c
320.7344 437.5 324.4316 441.0459 327.1318 443.6357 c
328.7295 445.168 329.9922 446.3779 331.1113 447.0264 c
334.3867 448.9229 336.998 449.6445 338.2725 449.0059 C
338.3535 448.9512 338.4297 448.9004 V
338.3066 448.7617 338.0527 448.5703 337.791 448.4482 C
337.6494 448.3818 L
337.5469 448.2607 L
324.4482 432.6431 299.3682 418.1865 285.9409 418.5146 c
278.2261 418.7021 273.1392 420.0449 270.8218 422.5039 c
269.7368 423.6543 269.2388 425.0537 269.2983 426.7817 c
269.4595 431.4248 272.9692 434.1265 274.856 435.5781 c
277.1479 437.3428 277.9565 439.6563 277.3911 440.7891 c
277.0269 441.5195 275.7632 442.9502 275.6196 443.1104 C
274.561 442.1689 L
275.0522 441.6152 275.9116 440.5801 276.1235 440.1563 C
276.2388 439.8789 275.9897 438.2393 273.9907 436.7012 c
272.0679 435.2207 268.0659 432.1406 267.8823 426.8306 c
267.8101 424.7344 268.4517 422.9517 269.7905 421.5317 c
272.4136 418.748 277.6851 417.2979 285.9058 417.0977 c
299.6523 416.7627 325.1855 431.3965 338.5352 447.2412 C
f0 D
326.1504 444.6582 m
323.5 442.1162 319.8682 438.6328 314.2246 435.2471 c
309.2988 432.2915 304.8428 430.9302 301.79 430.2793 C
306.6934 433.0713 311.5029 436.8457 315.5264 440.0479 C
320.5039 443.8975 L
323.5879 446.1143 326.6328 446.7354 328.5859 446.8994 C
327.8418 446.2627 327.0518 445.5225 326.1504 444.6582 C
f*U
363.1992 465.9443 m
361.9805 466.667 L
361.7988 466.3594 343.707 435.7578 336.9316 418.9033 C
338.248 418.375 L
344.9824 435.1289 363.0176 465.6387 363.1992 465.9443 C
f354.2813 427.4634 m
352.9482 433.3271 350.9648 442.5186 350.9648 443.8057 C
349.5479 443.8057 L
349.5479 441.9463 352.5557 428.6582 352.8984 427.1489 C
354.2813 427.4634 L
f348.6875 440.7705 m
348.4922 442.1748 L
348.373 442.1582 336.4863 440.5107 333.3867 440.3477 C
333.4609 438.9316 L
336.6211 439.0986 348.1963 440.7021 348.6875 440.7705 C
f359.8613 460.4385 m
359.6523 461.8408 L
359.541 461.8242 348.5391 460.1895 345.498 460.5107 C
345.3496 459.1006 L
348.5684 458.7617 359.4014 460.3701 359.8613 460.4385 C
f318.1309 330.1699 m
318.1113 330.6318 316.2666 376.751 327.4268 409.2432 C
326.0859 409.7021 L
314.8398 376.9551 316.6953 330.5732 316.7148 330.1084 C
318.1309 330.1699 L
f317.4414 339.0928 m
317.5996 339.0791 326.6934 338.2666 Y
326.8193 339.6787 L
317.4053 340.5186 L
317.3242 340.5078 L
313.7373 340.0049 307.875 339.1982 307.4141 339.1807 C
307.4238 337.7646 L
307.9277 337.7646 315.127 338.7686 317.4414 339.0928 C
f317.9063 352.1729 m
319.0566 352.7471 325.0918 353.8428 328.8672 354.4385 C
328.6465 355.8389 L
327.7002 355.6904 319.7051 354.4072 317.5625 353.5459 C
317.1699 353.6475 304.2793 356.9893 Y
303.9004 355.624 L
317.6729 352.0527 L
317.9063 352.1729 L
f318.8652 369.3193 m
322.123 370.6914 329.9902 373.1768 330.6426 373.2666 C
330.5898 374.6807 L
329.8418 374.6807 321.5605 371.9492 318.5664 370.7256 C
317.3672 371.1113 309.2979 373.7197 307.0195 374.6309 C
306.4932 373.3145 L
308.9873 372.3174 317.9902 369.4209 318.373 369.2979 C
318.623 369.2178 L
318.8652 369.3193 L
f321.9063 388.5049 m
322.4688 388.7861 326.8984 389.5391 330.8564 390.1045 C
330.6563 391.5078 L
329.3398 391.3193 323.0293 390.3975 321.5195 389.8555 C
320.1289 389.9678 311.168 390.6768 309.6777 390.5107 C
309.835 389.1025 L
310.8857 389.2188 317.4063 388.7656 321.5332 388.4326 C
321.7305 388.417 L
321.9063 388.5049 L
f324.0059 400.4697 m
323.5898 400.626 313.7529 404.3291 310.5693 404.999 C
310.2773 403.6123 L
313.3555 402.9648 323.4053 399.1807 323.5059 399.1436 C
324.0059 400.4697 L
f300.0713 402.1133 m
299.7764 403.499 L
299.6992 403.4834 292.0229 401.8682 288.0356 402.5059 c
286.7778 402.707 285.6392 403.1787 284.4341 403.6768 c
281.7905 404.7705 278.7944 406.0107 273.6001 404.8301 C
273.9146 403.4482 L
278.6694 404.5283 281.3257 403.4287 283.8921 402.3672 c
285.1763 401.8359 286.3892 401.334 287.812 401.1064 c
292.0601 400.4268 299.7461 402.0439 300.0713 402.1133 C
f285.7017 401.4805 m
290.0083 403.3096 L
295.0088 405.207 297.7603 406.083 299.873 405.9326 C
299.9736 407.3467 L
297.5962 407.5156 294.7036 406.6064 289.5054 404.6357 C
285.1235 402.7744 L
281.7817 401.2803 278.3267 399.7373 275.7876 399.8467 c
272.2163 400.0029 269.0278 402.1982 268.9966 402.2197 C
268.1841 401.0586 L
268.3267 400.958 271.7329 398.6045 275.7271 398.4307 c
278.5991 398.3066 282.0493 399.8486 285.7017 401.4805 C
f269.0259 389.0117 m
268.8823 389.2451 265.478 394.748 263.3071 397.4189 c
261.2056 400.0068 256.0493 408.8057 254.564 411.9424 C
253.2827 411.3359 L
254.8032 408.126 259.9829 399.2637 262.2075 396.5264 c
264.3208 393.9258 267.7856 388.3232 267.8208 388.2666 C
269.0259 389.0117 L
f259.6138 393.4287 m
261.186 393.9893 262.6704 394.5186 263.5933 395.0146 c
265.8989 396.2568 268.7466 402.166 269.064 402.8359 C
267.7827 403.4424 L
266.9761 401.7393 264.5298 397.1289 262.9214 396.2627 c
262.0933 395.8174 260.6577 395.3057 259.1382 394.7627 c
256.6655 393.8809 254.3296 393.0479 253.4224 392.1396 C
254.4243 391.1377 L
255.106 391.8193 257.606 392.7119 259.6138 393.4287 c
f255.7495 319.6162 m
259.1519 320.4014 260.0151 323.29 260.0151 325.2441 c
260.0151 325.2822 260.0083 325.3096 260.0073 325.3467 C
261.4517 325.5654 264.7661 326.417 266.8579 329.7637 c
267.5493 330.8691 267.8228 331.9805 267.8228 333.0479 c
267.8228 336.2158 265.4302 338.9717 264.3589 340.0498 C
264.9995 341.001 266.1821 343.1523 266.1821 346.0576 c
266.1821 346.7568 266.1128 347.501 265.9517 348.2822 c
265.437 350.7686 263.7153 352.5771 261.4585 353.002 c
258.9282 353.4785 256.3882 352.1787 254.6636 349.5254 c
252.311 345.9072 254.1978 341.6885 254.2788 341.5107 C
255.5679 342.1006 L
255.5513 342.1367 253.9302 345.7979 255.8511 348.7529 c
257.2524 350.9072 259.2505 351.9756 261.1958 351.6084 c
262.9028 351.2881 264.1616 349.9365 264.563 347.9951 c
265.4771 343.5801 262.9087 340.4609 262.8823 340.4307 C
262.4409 339.9053 L
262.9487 339.4463 L
263.4917 338.957 268.1802 334.5537 265.6567 330.5146 c
263.395 326.8975 259.271 326.6826 259.229 326.6807 C
258.4517 326.6475 L
258.5552 325.874 L
258.5776 325.71 259.0649 321.835 255.4312 320.9971 c
252.687 320.3633 249.3423 320.9824 247.3003 322.5029 c
245.9614 323.5 245.231 324.7939 245.1304 326.3525 c
244.8325 330.9658 249.0532 333.0811 249.2329 333.1689 C
250.3423 333.71 L
249.3169 334.3955 L
248.5649 334.8975 245.0151 338.6084 246.2808 344.1484 c
246.8403 346.5967 248.3364 350.3652 249.9194 354.3555 c
252.0405 359.7021 254.4448 365.7607 255.1235 370.0283 c
256.2974 377.4131 254.3628 385.7822 254.2798 386.1348 C
252.9009 385.8105 L
252.9155 385.7451 254.0776 380.7139 254.0776 375.1494 c
254.0776 373.5244 253.979 371.8555 253.7231 370.251 c
253.0698 366.1377 250.6958 360.1563 248.6021 354.8779 c
246.9976 350.8359 245.4829 347.0176 244.8999 344.4639 c
244.6841 343.5234 244.5913 342.6289 244.5913 341.7842 c
244.5913 337.9619 246.4976 335.208 247.7388 333.9258 C
246.3228 332.9766 243.6978 330.6973 243.6978 326.8271 c
243.6978 326.6416 243.7036 326.4531 243.7163 326.2607 c
243.8433 324.2969 244.7896 322.6045 246.4536 321.3662 c
248.8442 319.5879 252.5796 318.8838 255.7495 319.6162 c
f244.0952 360.6826 m
247.5435 362.5518 248.061 365.4873 248.6089 368.5967 C
249.1128 371.1406 L
249.8745 374.3174 252.896 377.6143 255.8179 380.8037 C
257.9565 383.1729 L
261.5903 387.3252 261.6323 394.3428 261.6323 394.6396 C
260.2144 394.6396 L
260.2144 394.5723 260.1694 387.8545 256.8901 384.1064 C
254.7729 381.7607 L
251.729 378.4385 248.5825 375.0049 247.7339 371.4717 C
247.2134 368.8428 L
246.6841 365.8418 246.2661 363.4717 243.4194 361.9287 c
241.7603 361.0303 240.3188 360.834 239.2515 361.3613 c
238.3159 361.8232 237.6782 362.8496 237.4575 364.249 c
237.0659 366.7295 241.9146 368.2803 241.9634 368.2939 C
241.5522 369.6514 L
241.3032 369.5752 235.4683 367.7627 236.0571 364.0283 c
236.3521 362.1611 237.2642 360.7627 238.6245 360.0908 c
239.6685 359.5752 241.4653 359.2588 244.0952 360.6826 c
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
