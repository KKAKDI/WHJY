%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (838.ai)
%%CreationDate: 3/25/2002 6:32 PM
%%BoundingBox: 219 304 373 543
%%HiResBoundingBox: 219.2764 304.4795 372.3467 542.5894
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 10690 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC8C4BF826F827F826F8
%27F826F827F826F827F826F827F826F827F826F827F826F827F826F827F8
%20F827F820F827F820F827F820F827F820F827F820F827F820F827F82020
%92FD06FC99FFFD05FC4427277D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7D
%A17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D
%7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7652F827FD05FCC2FFFD04FC44
%F87DFD45FFF827FD04FCBBFFFCFCFC8C277DFD47FFF86FFCFCFCC2FFFCFC
%FC4AF8FD48FF52F8FCFCFCBBFFFCFCFC2052FD48FF7D27FCFCFCC2FFFCFC
%FC4A27FD48FF7DF8FCFCFCBCFFFCFCFC4452FD48FF7DF8FCFCFCC2FFFCFC
%FC4B27FD48FF7DF8FCFCFC99FFFCFCFC4B52FD48FF7DF8FCFCFCC2FFFCFC
%FC4B27FD48FF7DF8FCFCFCBBFFFCFCFC2652FD10FFFD0B7D524B52FD2AFF
%7DF8FCFCFCC2FFFCFCFC4B27FD05FFFD0DF820F827F820F826F820F84BF8
%FD2AFF7DF8FCFCFCBBFFFCFCFC2652FD05FFF88CFD15FC6827FD2AFF7DF8
%FCFCFCC2FFFCFCFC4B27FD05FFF8FD16FC6FF8FD0FFF7D5152FD18FF7DF8
%FCFCFCBCFFFCFCFC4B52FD05FFF8FD16FC6827FD0EFF5227262627FD17FF
%7DF8FCFCFCC2FFFCFCFC4B27FD05FFF8FD16FC68F8FD0EFFF874C69EF8A8
%FD16FF7DF8FCFCFC99FFFCFCFC4B52FD05FFF8FD16FC6827FD0BFF27A87D
%F8C6C6C6F8A1FD16FF7DF8FCFCFCC2FFFCFCFC4B27FD05FFF8FD16FC6EF8
%FD09FFA87DF87D2727C6C6C6207D7DA8FD14FF7DF8FCFCFCBBFFFCFCFC26
%52FD05FFF8FD08FC8CFD0DFC6827FD08FFA8A8F85227514AC6C6C7F87DF8
%A8FD14FF7DF8FCFCFCC2FFFCFCFC4B27FD05FFF8FD08FC4AF86FFD0BFC6E
%F8FD07FF7DF8FFF852F8F851C6C64A27F852A8A8FD13FF7DF8FCFCFCBBFF
%FCFCFC2652FD05FFF88CFD07FC8CF8F84BFD0AFC6827FD04FFA8A8277DF8
%A82752F82751C6C6272727A82751FD13FF7DF8FCFCFCC2FFFCFCFC4B27FD
%05FFF86EFD08FCF8F8F8FD0AFC6FF8FD04FF7DF8522727517DF8F8F827C6
%27F8F87D20277627FD12FF7DF8FCFCFCBCFFFCFCFC4B52FD05FF2768FD08
%FC4BF827FD0AFC6827FFFFFF527DF87C27522752FD04F827F8F8F8272752
%F8A87DFD11FF7DF8FCFCFCC2FFFCFCFC4B27FD05FFF86EFD08FC20F8F8FD
%0AFC68F8FFFFCFFD0427F87CFD0BF827F87DF827FD11FF7DF8FCFCFC99FF
%FCFCFC4B52FD05FF2768FD08FC6FF8F84427206F8CFD05FC6827FFFFF8A8
%F8A1F852FD0BF827F8A8F827A8FD11FF7DF8FCFCFCC2FFFCFCFC4B27FD05
%FFF86FFD08FC20FD06F827FD05FC6EF8A8522727275220FD0DF852F827A8
%2727FD10FF7DF8FCFCFCBBFFFCFCFC2652FD05FF2744FCFCFC44274427FD
%07F82768FD05FC68F8A8F87DF8522720FD0EF827A827F8A77DFD0FFF7DF8
%FCFCFCC2FFFCFCFC4B27FD05FF274AFCFCFC8CFD08F844FD09FCF8CFF852
%F852FD10F852F8277DF87DFD0FFF7DF8FCFCFCBBFFFCFCFC2652FD05FF52
%20FD05FC8C6F8C6FF8F8F86FFD09FCF8277DF87DFD11F827277DF87D7DA8
%FD0EFF7DF8FCFCFCC2FFFCFCFC4B27FD05FF2726FD07FC8CF8202020F827
%8CFD07FCF8F8A8F87CFD12F851F8A752F87DFD0EFF7DF8FCFCFCBCFFFCFC
%FC4B52FD05FF7D20FD07FC2027FCFCFC27F84BFD07FC27F8522727FD13F8
%A827F87DFD0FFF7DF8FCFCFCC2FFFCFCFC4B27FD05FF7C27FD06FC8CF844
%FCFCFC20F8F8FD07FCF852F827FD13F82727277DCFF87DFD0DFF7DF8FCFC
%FC99FFFCFCFC4B52FD05FFA8F8FD06FC4BF86FFCFCFC4BF827FD07FC2752
%27FD15F827A8A8F827A8FD0DFF7DF8FCFCFCC2FFFCFCFC4B27FD06FFF8FD
%06FC20F820FCFC92F8F844FD07FCFD18F87DA8F8272776FD0DFF7DF8FCFC
%FCBBFFFCFCFC2652FD06FFF893FD05FC92F8F8F827F8F8F8FD08FC4BFD17
%F827F8762727A8FD0DFF7DF8FCFCFCC2FFFCFCFC4B27FD06FF2768FD06FC
%20FD05F88CFD08FC44FD18F87DF827A8A7A8FD0CFF7DF8FCFCFCBBFFFCFC
%FC2652FD06FFF86FFD07FC6F20F8F893FD09FC6FFD19F84BFF52F8A8FD0C
%FF7DF8FCFCFCC2FFFCFCFC4B27FD06FF4B20FD08FC27F88CFD0AFC68FD18
%F827FF27F8A7FD0DFF7DF8FCFCFCBCFFFCFCFC4B52FD06FF5227FD07FC6F
%F86FFD05FCB4FD06FCFD18F85227F8FFA852FD0CFF7DF8FCFCFCC2FFFCFC
%FC4B27FD06FF7DF8FD07FCF84AFCFC44F8F820F820FD05FCFD1AF8CF7DF8
%27FD0CFF7DF8FCFCFC99FFFCFCFC4B52FD06FFA8F8FD06FC4427684BFD06
%F844FD05FCFD19F8FF7D2751FFA8FD0BFF7DF8FCFCFCC2FFFCFCFC4B27FD
%07FFF8FD06FC20FD08F844FD06FC27FD18F852F852A8F852FD0BFF7DF8FC
%FCFCBBFFFCFCFC26527DA8FD05FF2768FD05FC4420F8F8F820F8F868FD07
%FC20FD18F8207DA8F8527DFD0BFF7DF8FCFCFCC2FFFCFCFC27F827F852FD
%04FF204BFD06FC8C6E684AF8F868FD08FC68FD18F85276F852F84BFD0BFF
%7DF8FCFCFCBBFFFCFCFC2651C69FF8FD04FF5220FD08FCB4F8F8204B206F
%8CFD05FC8CFD18F827F87CF84BFD0CFF7DF8FCFCFCC2FFFCFCFC4B26C6C6
%207DFFFFFF7D27FD08FC20F8F82720F8F8F868FD05FCFD19F852F8527D52
%FD0BFF7DF8FCFCFCBCFFFCFCFC4B51C6C62652FF7DFFFFF8FD08FC20F892
%FCFC8C20F820FD05FC20FD17F827F87D7DF827FD0BFF7DF8FCFCFCC2FFFC
%FCFC4B26C6C64B2752F8A8FFF868FD06FC68F8F8FD04FC20F8F86EFD04FC
%20FD18F8A752F852FD0CFF7DF8FCFCFC99FFFCFCFC4B51C6C64B52F87CF8
%A8264BFD06FC68F8F86FFCFCFC27F8F868FD04FC6FFD17F82727277DA8F8
%FD0BFF7DF8FCFCFCC2FFFCFCFC2720C6C65127F85227FF2720FD06FC8CF8
%F8F86E684BF8F8F8FD05FC8CFD18F820A8A8F852FD0BFF7DF8FCFCFCBBFF
%FCFCFC2027C6C6F8272727527DF820FD07FC27FD07F827FD06FCFD18F8A8
%7CF87DFD0CFF7DF8FCFCFCC2FFFCFCFC4AF89FC6F8F852F8CFF876F88CFD
%06FC68FD07F88CFD06FCFD18F876F85252F87DFD0AFF7DF8FCFCFCBBFFFC
%FCFC20F8F87BF8F8F8272727FF2744FD07FC8C4B2027F8F868FD07FC20FD
%18F8A127277DFD0BFF7DF8FCFCFCC2FFFCFCFC26FD08F85252F826FD0AFC
%68F8F8FD08FC6FFD17F87DF827A7FFA8FD0AFF7DF8FCFCFCBCFFFCFCFC20
%FD0AF87CF8FD0AFC27F86F8CFD08FCFD18F852FFA8F852FD0AFF7DF8FCFC
%FCC2FFFCFCFC27FD0AF827F88CFD08FC8CFD05F84BFD06FCFD17F852FF76
%F852FD0BFF7DF8FCFCFC99FFFCFCFC20FD0CF86FFD08FCF84B8C27F8F8F8
%93FD05FC4BFD16F87D52F87DFD0CFF7DF8FCFCFCC2FFFCFCFC27FD0DF8FD
%07FC4420FCFC68F8F8F844FD05FC68FD16F827F8A87DF851FD0AFF7DF8FC
%FCFCBBFFFCFCFC20FD0DF8FD06FC8C278CFCFCFCF8F8F84BFD06FCFD17F8
%FF522752FD0BFF7DF8FCFCFCC2FFFCFCFC20FD0DF86EFD05FC2020FD04FC
%4BF8F8F8FD06FC20FD15F87D27F87C7D7DFD0AFF7DF8FCFCFCBBFFFCFCFC
%20FD0DF820FD04FC4BF86F444B8CFC68F8F8F8FD06FC4427FD14F826277D
%52F8A8FD0AFF7DF8FCFCFCC2FFFCFCFC26FD0EF8FD04FCFD05F820FCFCF8
%F8F86FFD06FCFD15F827A827F8A8FD0BFF7DF8FCFCFCBCFFFCFCFC20FD0E
%F893FCFCFC6FF8F8F82068FCFC27F8F844FD06FC20FD14F8522727FF527D
%FD0AFF7DF8FCFCFCC2FFFCFCFC27FD0EF820FD04FC27F8F88CFCFCFC44F8
%F820FD06FC44FD15F827FF27F87DFD0AFF7DF8FCFCFC99FFFCFCFC20FD0E
%F827FCFCFC93F827FD05FCB5F8F8F84BF8F820FCFC93FD14F827FF27277D
%FD0BFF7DF8FCFCFCC2FFFCFCFC27FD0FF892FCFC2027FD06FC8C27FD05F8
%26FCFCFCFD14F87D2727A85252FD0AFF7DF8FCFCFCBBFFFCFCFC20FD0FF8
%20FCFC2768FD06FC4BFD06F88CFCFCFC44FD13F82727A827F8A8FD0AFF7D
%F8FCFCFCC2FFFCFCFC20FD10F8FCFCF8F844FD06FC4AFD04F820FD04FC8C
%FD13F8277DF8F8FD0CFF7DF8FCFCFCBBFFFCFCFC20FD10F86FFCB420F8F8
%FD04FC274427F8F8F893FD05FC27FD12F87DF827FF527DFD0AFF7DF8FCFC
%FCC2FFFCFCFC26FD11F8FCFCFCF8F868FCFC6FF86E20F8F820FD06FC44FD
%13F852FF27F87DFD0AFF7DF8FCFCFCBCFFFCFCFC20FD11F88CFCFC27F84B
%FCFCF8F88C6FF8F868FD06FCB4FD12F87DFFF827A8FD0BFF7DF8FCFCFCC2
%FFFCFCFC27FD11F84AFCFC20F8F8FC44F8F8FCFCF8F84BFD07FC27FD11F8
%A7F827A8FD0CFF7DF8FCFCFC99FFFCFCFC20FD12F8FCFC6FF8F820F8F827
%FCFCF8F820FD07FC68FD12F852FFFF27A8FD0AFF7DF8FCFCFCC2FFFCFCFC
%27FD12F844FC8CFD05F844FC44F8F8F8FD08FCFD11F852FFFFF827FD0BFF
%7DF8FCFCFCBBFFFCFCFC20FD12F827FCFC20F8F8F820FCFC2744F8F893FD
%07FC6FFD0FF827FFFFF827FD0CFF7DF8FCFCFCC2FFFCFCFC20FD13F868FC
%FCF8F8F8FCFC8CF88C20F820FC68FD05FC8CFD10F8FFF827FF27F8FD0AFF
%7DF8FCFCFCBBFFFCFCFC20FD14F8FCFCFC68FCFCFC68F8FC6FF827F8F8F8
%2768FCFCFC20FD0EF827F827A827F8A8FD0AFF7DF8FCFCFCC2FFFCFCFC26
%FD14F88CFD06FC6EF84B20FD06F8FD04FC92FD0FF827A820F8FD0CFF7DF8
%FCFCFCBCFFFCFCFC20FD14F827FD07FC27FD05F82744B4FD05FC27FD0DF8
%277D2727A827FD0BFF7DF8FCFCFCC2FFFCFCFC27FD15F88CFD07FC6E2027
%F820FD08FC68FD0DF827F8277DF827FD0BFF7DF8FCFCFC99FFFCFCFC20FD
%15F820FD0AFCF8F8FD09FCFD0EF8527DF87DFD0CFF7DF8FCFCFCC2FFFCFC
%FC27FD16F88CFD09FC20F868FD08FC6FFD0CF82727F8A852A8FD0BFF7DF8
%FCFCFCBBFFFCFCFC20FD16F827FD09FC6FF84BFD09FC27FD0BF827F8FF27
%27A8FD0BFF7DF8FCFCFCC2FFFCFCFC20FD17F868FD09FCF8F8FD09FC68FD
%0CF8FF27F8A8FD0CFF7DF8FCFCFCBBFFFCFCFC20FD18F8FD09FC20F868FD
%09FC20FD0AF87D2727A8FD0DFF7DF8FCFCFCC2FFFCFCFC26FD18F844FD08
%FC6FF820FD09FC92FD0BF827A852F8FD0CFF7DF8FCFCFCBCFFFCFCFC20FD
%19F88CFD08FC27F892FD09FC27FD09F827A87DF8A8FD0CFF7DF8FCFCFCC2
%FFFCFCFC27FD19F84AFD08FC20F820FD09FC8CFD09F8FF52F8A8527DFD0B
%FF7DF8FCFCFC99FFFCFCFC20FD1AF893FD07FCB5F8F88CFD09FC44FD08F8
%52F8A827F87DFD0BFF7DF8FCFCFCC2FFFCFCFC27FD1BF8FD08FC4BF8208C
%FD09FCFD09F8A727F87DFD0CFF7DF8FCFCFCBBFFFCFCFC20FD1BF844FD08
%FC27F82068FD08FC6FFD07F8A82727A87DFD0CFF7DF8FCFCFCC2FFFCFCFC
%20FD1CF88CFD07FC8C26F8F8F84B44FD06FC26FD05F827F8275227F8A8FD
%0BFF7DF8FCFCFCBBFFFCFCFC20FD1CF827FD09FC6F2027F82768FD05FC8C
%FD06F827A8F8F82727FFFFFF7C5252A8FD04FF7DF8FCFCFCC2FFFCFCFC26
%FD1DF84BFD14FC44FD04F820F827F852F8F85252F8202627F8FD04FF7DF8
%FCFCFCBCFFFCFCFC20FD1EF893FD14FCFD04F827F8F87DF8F8F827F827C6
%C6C6F8FD04FF7DF8FCFCFCC2FFFCFCFC27FD1FF8FD14FC8CFD04F827F827
%F852F8F827C6C6C69EF8FD04FF7DF8FCFCFC99FFFCFCFC20FD1EF82720FD
%0AFC93686F6893684B204B2027F8F8F827F827F8F8F827FD04C62651FD04
%FF7DF8FCFCFCC2FFFCFCFC27FD23F820FD13F8A8FD06F826C6C6C626204B
%A8FFFFFF7DF8FCFCFCBBFFFCFCFC20FD3EF89FC6C726F8F827A8FFFFFF7D
%F8FCFCFCC2FFFCFCFC20FD3EF826FD04F827A1A8FFFFFF7DF8FCFCFCBBFF
%FCFCFC20FD42F87D7D277DFFFFFF7DF8FCFCFCC2FFFCFCFC26FD42F852F8
%52A8FFFFFF7DF8FCFCFCBCFFFCFCFC20FD42F8277D27F8FFFFFF7DF8FCFC
%FCC2FFFCFCFC27FD42F85227F8CFFFFFFF7DF8FCFCFC99FFFCFCFC20FD42
%F82727FD05FF7DF8FCFCFCC2FFFCFCFC27FD42F827FF52F8A8FFFF7DF8FC
%FCFCBBFFFCFCFC20FD42F87D27277DFFFFFF7DF8FCFCFCC2FFFCFCFC20FD
%44F8A8FD04FF7DF8FCFCFCBBFFFCFCFC20FD42F827FF4BF8FFFFFF7DF8FC
%FCFCC2FFFCFCFC26FD42F87627F8A8FFFFFF7DF8FCFCFCBCFFFCFCFC20FD
%42F827F8FD05FF7DF8FCFCFCC2FFFCFCFC27FD43F8FF51F8FFFFFF7DF8FC
%FCFC99FFFCFCFC20FD42F8FF27277DFFFFFF7DF8FCFCFCC2FFFCFCFC27FD
%43F827A8A7FFFFFF7DF8FCFCFCBBFFFCFCFCFD43F852A82727FFFFFF7DF8
%FCFCFCC2FFFCFCFC20FD42F8A8F827FD04FF7DF8FCFCFCBBFFFCFCFC44FD
%42F82727FD05FF5227FCFCFCC2FFFD04FCFD42F827A7F8FFFFFFA8F868FC
%FCFCBCFFFD04FC4BFD41F87DF87CFFFFA82720FD04FCC2FFFD05FC4AFD3F
%F827F8527D7D27F820FD05FC99FFFD06FC934427F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F8272027F84B68FD06FC
%C2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
372.3467 304.4795 m
219.2764 304.4795 L
219.2764 542.5894 L
372.3467 542.5894 L
372.3467 304.4795 L
fu0 0 0 0 k
226.7275 526.7012 m
226.5615 441.2012 l
235.3945 423.8682 l
241.3945 418.0342 l
316.5615 330.8672 l
346.7285 311.5342 l
356.5615 311.5342 l
365.5615 313.3672 365.0615 321.8672 v
365.2285 393.5342 l
365.0615 527.3682 l
363.7285 535.0347 355.0615 535.5347 v
239.0615 535.7012 l
227.7275 536.8677 226.7275 526.7012 v
f0 1 1 0 k
283.2275 514.5347 m
239.0615 513.5347 l
237.2275 466.3682 249.7275 426.7012 v
253.1787 415.751 250.0615 396.7012 y
264.3945 363.7012 l
291.5615 341.5342 l
324.2285 349.2012 l
325.5615 353.3672 l
328.3945 356.3672 l
312.3945 401.5342 l
294.5615 464.0347 l
284.5615 467.8682 l
281.3945 502.2012 283.2275 514.5347 v
f0 0.2 1 0 k
226.7275 453.5347 m
226.5615 441.2012 l
230.0615 433.8682 l
233.2275 433.7012 l
233.5615 439.5347 l
235.0615 443.7012 233.8945 449.5347 v
232.7275 455.3682 227.8945 456.3682 226.7275 453.5347 c
f311.8945 491.3682 m
310.3945 493.8682 310.0615 497.8682 v
309.7285 501.8682 311.3945 507.3682 313.0615 508.8682 c
314.7285 510.3682 318.0615 509.3682 319.0615 507.2012 c
319.7285 498.0342 316.2285 494.2012 v
312.7285 490.3682 313.0615 487.7012 y
311.8945 491.3682 l
f353.8945 361.5342 m
350.7285 363.7002 346.7285 360.8672 v
342.7285 358.0342 341.5625 353.3682 341.2285 352.2012 c
340.8945 351.0342 339.7285 347.5342 y
343.8945 345.5342 l
347.7285 348.3672 l
348.2285 350.7012 l
352.7285 353.7012 353.7285 356.2012 v
354.7285 358.7012 354.2275 360.3672 353.8945 361.5342 c
f*u
1 D
0.65 0.53 0.51 1 k
236.4824 536.2432 m
230.6211 536.2432 225.8525 531.4746 225.8525 525.6133 C
225.8525 321.4551 L
225.8525 315.5938 230.6211 310.8252 236.4824 310.8252 C
355.1406 310.8252 L
361.002 310.8252 365.7705 315.5938 365.7705 321.4551 C
365.7705 525.6133 L
365.7705 531.4746 361.002 536.2432 355.1406 536.2432 C
236.4824 536.2432 L
f0 D
227.2695 321.4551 m
227.2695 525.6133 L
227.2695 530.6934 231.4023 534.8262 236.4824 534.8262 C
355.1406 534.8262 L
360.2207 534.8262 364.3525 530.6934 364.3525 525.6133 C
364.3525 321.4551 L
364.3525 316.375 360.2207 312.2432 355.1406 312.2432 C
236.4824 312.2432 L
231.4023 312.2432 227.2695 316.375 227.2695 321.4551 C
f*U
*u
1 D
283.3789 515.2432 m
238.3721 514.228 L
238.3525 513.5547 L
236.7998 459.1802 249.7881 418.3652 260.957 393.7002 c
273.0723 366.9502 285.7441 352.8633 285.8701 352.7246 C
286.0938 352.4795 L
327.7266 354.2139 L
326.9727 355.2773 L
275.7324 427.5405 284.0098 513.6006 284.0996 514.4614 C
284.1826 515.2612 L
283.3789 515.2432 L
f0 D
282.6211 513.8081 m
282.4746 512.0073 282.1396 507.0923 282.1396 499.7256 c
282.1396 471.9189 286.9922 409.9844 325.1074 355.5225 C
322.7676 355.4258 287.3496 353.9502 286.7041 353.9229 C
283.3057 357.8447 239.6426 410.168 239.6426 504.6523 c
239.6426 507.3452 239.6875 510.0806 239.7598 512.8418 C
241.0596 512.8711 281.1211 513.7744 282.6211 513.8081 C
f*U
*u
1 D
306.0615 364.4092 m
304.3115 364.7842 300.9365 364.7842 297.8115 367.6592 c
294.6865 370.5342 294.1865 372.4092 290.4365 382.2842 c
289.8262 383.8906 289.2031 385.8086 288.584 387.8984 C
291.8721 388.7393 294.5146 390.4883 294.9365 390.9092 c
295.4365 391.4092 296.8115 392.2842 295.8115 392.7842 c
294.8115 393.2842 291.3115 394.9092 290.1865 394.1592 c
289.4727 393.6836 288.8057 392.9053 287.3936 392.1445 C
286.3457 396.0596 285.3477 400.2422 284.4883 404.0244 C
286.6807 408.6514 289.4248 414.2617 289.6865 414.7842 c
290.0615 415.5342 288.5615 415.9092 287.0615 416.0342 c
285.5615 416.1592 285.3115 415.7842 284.3115 415.4092 c
284.001 415.293 283.1719 414.9834 282.1777 414.6123 C
282.0107 415.3955 281.8848 415.9746 281.8115 416.2842 c
281.1865 418.9092 279.3115 427.5347 278.9365 429.5347 c
278.5615 431.5347 277.4365 432.2847 275.5615 432.5347 c
274.1484 432.7231 271.6729 433.124 270.5371 433.3105 C
272.3467 435.7622 274.3184 438.6689 275.4268 440.3257 C
275.6045 440.564 275.7695 440.8091 275.918 441.064 C
276.1641 441.4346 276.3115 441.6597 Y
276.2783 441.6445 276.2275 441.6206 V
277.6084 444.4878 277.2969 448.0649 275.8115 449.7847 c
273.4365 452.5347 269.0615 452.2847 267.0615 451.9097 c
266.2578 451.7593 265.46 451.3267 264.9727 450.9189 C
266.7412 454.0991 269.9219 456.7422 271.3115 457.7847 c
272.8115 458.9097 274.6865 460.4097 274.6865 461.1597 c
274.6865 461.9097 273.4365 462.9097 272.5615 462.6597 c
271.6865 462.4097 269.6865 461.5347 Y
269.6865 462.1597 269.0615 463.1597 267.0615 462.1597 c
265.0615 461.1597 259.5615 459.0347 258.8115 458.9097 c
258.0615 458.7847 256.6865 458.7847 258.1865 460.9097 c
259.6865 463.0347 264.4365 467.9097 265.0615 468.6597 c
265.6865 469.4097 269.8115 473.6597 268.5615 477.5347 c
267.3115 481.4097 263.2275 482.2012 262.5615 482.5347 c
261.8945 482.8682 262.5615 483.7012 264.0615 484.2012 c
265.5615 484.7012 269.0615 486.5347 270.3945 486.5347 c
271.7285 486.5347 271.5615 487.8682 270.5615 488.3682 c
269.5615 488.8682 265.7275 489.7012 Y
263.0615 489.0347 262.2275 488.7012 v
261.3945 488.3677 261.2275 490.7012 261.2275 492.3682 c
261.2275 494.0352 261.5615 495.7012 261.3945 496.5347 c
261.2285 497.3682 259.7275 498.5347 257.8945 499.3682 c
256.0615 500.2017 255.5615 499.8682 Y
256.8945 495.8682 257.5615 494.2012 v
258.2275 492.5342 258.0615 487.3682 Y
255.0615 486.0347 253.1865 485.7847 v
251.3115 485.5347 249.6865 486.0347 248.8115 486.0347 c
247.9365 486.0347 247.4365 485.9097 248.1865 485.1597 c
248.9365 484.4097 251.1865 482.7847 253.5615 482.9097 c
255.9365 483.0347 259.8115 483.9097 Y
253.3115 477.7847 254.0615 472.5347 v
254.8115 467.2847 260.3115 467.1597 Y
258.4365 464.2847 257.5615 462.6597 v
256.6865 461.0347 254.5615 459.5347 254.9365 458.0347 c
255.3115 456.5347 257.5615 454.7847 260.4365 454.9097 c
263.3115 455.0347 266.5615 456.9097 Y
263.8115 455.2847 259.1865 449.0347 260.0615 443.6597 c
260.7383 439.5029 264.6367 436.8965 269.3408 437.3096 C
270.0889 436.8213 269.5215 436.1489 268.9365 434.1597 c
268.3115 432.0347 261.4365 422.6597 260.9365 421.2847 c
260.4365 419.9097 260.4365 419.9097 261.1865 419.4092 c
261.9365 418.9092 263.6865 417.9092 263.5615 417.2842 c
263.4365 416.6592 261.4365 413.5342 260.6865 412.4092 c
259.9365 411.2842 259.6865 410.4092 260.8115 409.5342 c
261.9365 408.6592 262.8115 408.2842 263.9365 406.4092 c
265.0615 404.5342 264.8115 400.9092 266.1865 397.7842 c
267.5615 394.6592 269.3115 392.9092 271.6865 394.1592 c
274.0615 395.4092 276.1865 399.2842 276.4365 400.9092 c
276.6865 402.5342 277.5615 407.0342 277.5615 407.7842 c
277.5615 408.5342 276.9365 409.4092 276.4365 408.4092 c
275.9365 407.4092 273.0615 402.2842 272.3115 401.0342 c
271.5615 399.7842 270.6865 399.4092 270.0615 399.2842 c
269.4365 399.1592 268.5615 401.2842 268.5615 403.0342 c
268.5615 404.7842 268.4365 406.4092 267.1865 407.7842 c
265.9365 409.1592 264.1865 409.6592 263.0615 409.9092 c
261.9365 410.1592 260.5615 410.5342 261.5615 411.9092 c
262.5615 413.2842 264.6865 415.2842 266.8115 416.9092 c
268.9365 418.5342 270.9365 420.5347 270.8115 420.9097 c
270.6865 421.2847 269.8115 422.7847 268.9365 422.5347 c
268.0615 422.2847 265.8115 422.1597 264.6865 421.7847 c
263.5615 421.4097 263.1865 422.2847 263.5615 422.9097 c
263.9365 423.5347 265.8115 427.4097 268.6865 430.9097 c
268.958 431.2407 269.251 431.6133 269.5508 432.0024 C
270.2012 431.9111 271.5664 431.5557 272.3115 430.1597 c
273.1475 428.5923 275.9922 419.165 277.7793 412.9736 C
277.2686 412.7832 276.9365 412.6592 Y
275.8115 412.0342 276.1865 410.9092 278.6865 409.7842 C
279.1592 408.0908 280.2031 404.7939 281.4697 400.9063 C
281.374 400.6924 281.2783 400.4824 281.1865 400.2842 c
279.5615 396.7842 277.4365 392.6592 278.8115 390.2842 c
280.0977 388.0625 282.2783 387.1699 285.9287 387.4707 C
287.3896 383.1279 288.667 379.3799 289.3115 377.5342 c
291.1865 372.1592 293.1865 366.0342 298.6865 363.6592 c
304.1865 361.2842 306.9365 363.1592 307.4365 363.4092 c
307.9365 363.6592 307.8115 364.0342 306.0615 364.4092 c
f0 D
256.8115 475.6597 m
257.0615 480.2847 260.8115 480.5347 Y
264.9365 480.9097 265.1865 476.7847 v
265.4434 472.5405 262.9365 471.2847 261.4365 471.0347 c
259.9365 470.7847 256.5615 471.0347 256.8115 475.6597 c
f268.3115 442.1597 m
263.9365 442.1597 262.8115 446.4097 264.5615 450.1597 c
264.5615 450.1606 264.5625 450.1616 264.5625 450.1626 C
264.7031 450.0342 265.1162 450.0352 265.9365 450.2847 c
268.8115 451.1597 271.9365 449.6597 272.3115 447.6597 c
272.6865 445.6597 272.6865 442.1597 268.3115 442.1597 c
f283.2061 409.8135 m
283.4473 409.9346 283.6582 410.0576 283.8115 410.1592 c
284.5615 410.6592 285.1865 410.7842 285.1865 410.4092 c
285.1865 410.2285 284.6328 408.6797 283.8799 406.7363 C
283.6387 407.8242 283.4131 408.8535 283.2061 409.8135 C
f284.0615 390.9092 m
280.0615 389.9092 280.3115 391.2842 280.3115 392.2842 c
280.3115 393.2705 280.5605 395.2393 282.1279 398.8936 C
282.9561 396.3721 283.8457 393.6904 284.7158 391.0859 C
284.5068 391.0254 284.29 390.9668 284.0615 390.9092 c
f*U
*u
1 D
312.9209 509.105 m
311.2617 507.8784 310.1758 505.4189 309.6924 501.7949 c
308.6572 494.0366 311.1221 491.4722 311.2275 491.3667 C
311.458 491.1367 L
311.7832 491.1616 L
311.9795 491.1768 316.6172 491.6177 319.0684 499.1489 c
319.7217 501.1572 320.0488 502.9131 320.0488 504.4048 c
320.0488 505.7817 319.7705 506.9336 319.2139 507.8516 c
318.3076 509.3447 316.9229 509.7759 316.1777 509.8999 C
315.5137 510.0112 314.207 510.0552 312.9209 509.105 C
f0 D
310.8564 498.2202 m
310.8564 499.2002 310.9258 500.3237 311.0967 501.6074 c
311.5215 504.791 312.4434 506.9897 313.7637 507.9653 c
314.5859 508.5728 315.4033 508.5923 315.9453 508.5024 C
315.9453 508.502 L
316.5615 508.3994 317.4199 508.0752 318.002 507.1162 c
318.3389 506.561 318.6289 505.7026 318.6289 504.395 c
318.6289 503.2031 318.3877 501.6377 317.7207 499.5874 c
315.9287 494.082 313.0234 492.9028 312.0303 492.6523 C
311.6455 493.2637 310.8564 494.9189 310.8564 498.2202 C
f316.1777 509.8999 m
316.1777 509.8999 L
316.1777 509.8999 L
316.1777 509.8999 l
f*U
*u
1 D
350.8711 362.9688 m
349.4922 362.8691 346.7461 362.2002 343.8564 358.8281 c
339.6777 353.9531 340.6572 348.9346 340.7002 348.7236 C
340.7598 348.4385 L
341.001 348.2773 L
342.5176 347.2656 346.6514 348.2715 350.6846 351.6582 c
353.8789 354.3418 355.0361 357.6182 355.0566 359.6094 c
355.0674 360.6982 354.7617 361.5713 354.1953 362.0674 c
353.4307 362.7363 352.2197 363.0654 350.8711 362.9688 c
f0 D
341.9854 350.3271 m
341.9854 351.9824 342.4063 354.958 344.9326 357.9063 c
347.4873 360.8867 349.8135 361.4717 350.9727 361.5547 c
352.1016 361.6357 352.8955 361.3213 353.2617 361.001 c
353.4492 360.8369 353.6465 360.3887 353.6387 359.624 c
353.6221 357.9336 352.5986 355.1172 349.7725 352.7441 c
346.0332 349.6025 342.9678 349.1172 342.0322 349.4092 C
342.0078 349.6338 341.9854 349.9443 341.9854 350.3271 C
f*U
226.083 453.6616 m
227.3682 453.0654 L
227.3955 453.1211 228.0674 454.4287 230.3115 454.1646 c
232.6787 453.8857 233.5195 449.252 233.5195 445.3682 c
233.5195 441.2988 232.0449 436.5117 231.3271 435.543 C
230.5449 436.0259 228.3818 437.7949 227.2549 443.1797 C
225.8672 442.8896 L
227.4316 435.4175 231.0088 434.0854 231.1602 434.0322 C
231.2744 433.9927 L
231.3945 433.9927 L
233.4404 433.9927 234.9365 441.9751 234.9365 445.3682 c
234.9365 448.2783 234.502 455.0981 230.4775 455.5718 c
227.1689 455.9614 226.126 453.7559 226.083 453.6616 C
f284.7275 469.0347 m
295.5605 489.5347 310.3945 496.5347 v
310.2285 492.3682 311.7285 491.8682 v
313.2285 491.3682 316.3945 494.7012 317.3945 497.0347 c
325.5615 485.0347 330.5615 458.2847 v
335.5615 431.5347 331.3115 374.2842 328.5615 351.7842 c
334.7275 354.0352 341.8945 354.7012 v
340.8945 350.5352 341.3945 349.2012 v
341.8945 347.8672 347.3955 349.8672 348.7285 350.8672 c
351.0625 333.8682 348.2285 311.7012 v
235.7275 311.7012 l
226.0605 313.2012 226.2275 321.0342 v
226.7275 439.3682 l
227.0615 440.5347 l
230.0615 434.8677 231.3945 434.7012 v
232.7275 434.5347 233.7275 440.3682 y
240.7285 436.8677 248.8945 429.0347 v
253.8945 409.2002 261.3945 393.8672 v
268.8945 378.5342 279.7285 359.0352 286.3945 353.2012 c
326.3945 354.8672 l
325.2285 356.8672 l
311.8955 376.2012 305.0615 393.0342 v
298.2275 409.8672 287.3945 435.8682 284.7275 469.0347 c
f283.7607 474.0679 m
283.4668 473.8101 283.4365 473.3628 283.6943 473.0679 C
286.0283 470.4014 L
286.2861 470.1069 286.7334 470.0771 287.0283 470.335 c
287.3223 470.5928 287.3525 471.04 287.0947 471.335 C
284.7607 474.0015 L
284.5029 474.2959 284.0557 474.3257 283.7607 474.0679 c
f283.5732 483.333 m
283.2246 483.1553 283.0859 482.729 283.2627 482.3799 C
288.2627 472.5469 L
288.4404 472.1982 288.8672 472.0591 289.2158 472.2363 c
289.5645 472.4141 289.7041 472.8403 289.5264 473.1895 C
284.5264 483.0225 L
284.3486 483.3711 283.9229 483.5103 283.5732 483.333 c
f286.3027 487.8608 m
285.9385 487.7183 285.7588 487.3076 285.9014 486.9429 C
290.4014 475.4429 L
290.5439 475.0786 290.9551 474.8984 291.3193 475.0415 c
291.6836 475.1841 291.8643 475.5947 291.7217 475.9595 C
287.2217 487.4595 L
287.0781 487.8237 286.668 488.0039 286.3027 487.8608 c
f288.6035 490.5142 m
288.2471 490.354 288.0879 489.9341 288.249 489.5771 C
292.749 479.5771 L
292.9092 479.2202 293.3291 479.0615 293.6855 479.2222 c
294.043 479.3823 294.2012 479.8022 294.041 480.1592 C
289.541 490.1592 L
289.3809 490.5161 288.9609 490.6748 288.6035 490.5142 c
f291.1494 493.5332 m
290.7822 493.3979 290.5947 492.9902 290.7295 492.623 C
295.3965 479.9561 L
295.5313 479.5889 295.9395 479.4009 296.3066 479.5361 c
296.6738 479.6714 296.8613 480.0791 296.7266 480.4463 C
292.0596 493.1133 L
291.9248 493.4805 291.5166 493.6685 291.1494 493.5332 c
f293.6377 496.3618 m
293.2734 496.2197 293.0928 495.8091 293.2344 495.4443 C
297.9004 483.4443 L
298.043 483.0796 298.4531 482.8989 298.8184 483.0405 c
299.1826 483.1826 299.3633 483.5933 299.2217 483.958 C
294.5557 495.958 L
294.4131 496.3228 294.0029 496.5034 293.6377 496.3618 c
f296.8545 497.5459 m
296.4795 497.4316 296.2695 497.0352 296.3838 496.6611 C
300.0508 484.6611 L
300.165 484.2866 300.5615 484.0762 300.9355 484.1904 c
301.3096 484.3047 301.5205 484.7012 301.4063 485.0752 C
297.7393 497.0752 L
297.625 497.4497 297.2285 497.6602 296.8545 497.5459 c
f299.3486 500.2104 m
298.9746 500.0928 298.7676 499.6948 298.8857 499.3218 C
302.7188 487.1553 L
302.8359 486.7817 303.2344 486.5747 303.6074 486.6924 c
303.9805 486.8101 304.1885 487.208 304.0703 487.5811 C
300.2373 499.7476 L
300.1201 500.1211 299.7217 500.3281 299.3486 500.2104 c
f303.1943 502.3809 m
302.8193 502.2705 302.6045 501.8765 302.7148 501.501 C
306.0488 490.168 L
306.1592 489.7925 306.5527 489.5776 306.9287 489.6885 c
307.3037 489.7988 307.5186 490.1929 307.4082 490.5684 C
304.0742 501.9014 L
303.9639 502.2769 303.5703 502.4917 303.1943 502.3809 c
f305.5244 505.0469 m
305.1504 504.9346 304.9375 504.5396 305.0498 504.1646 C
308.5498 492.4976 L
308.6621 492.1226 309.0576 491.9102 309.4326 492.0225 c
309.8066 492.1348 310.0195 492.5298 309.9072 492.9048 C
306.4072 504.5718 L
306.2949 504.9468 305.8994 505.1592 305.5244 505.0469 c
f322.6475 502.106 m
316.1475 492.7729 L
315.9229 492.4521 316.0029 492.0107 316.3232 491.7866 c
316.6445 491.563 317.0859 491.6421 317.3096 491.9634 C
323.8096 501.2964 L
324.0342 501.6172 323.9541 502.0586 323.6338 502.2827 c
323.3125 502.5063 322.8711 502.4272 322.6475 502.106 C
f325.2441 498.0518 m
317.2441 490.5518 L
316.958 490.2842 316.9434 489.8354 317.2119 489.5498 c
317.4795 489.2646 317.9277 489.25 318.2129 489.5176 C
326.2129 497.0176 L
326.499 497.2852 326.5137 497.7339 326.2451 498.0195 c
325.9775 498.3047 325.5293 498.3193 325.2441 498.0518 C
f327.4268 495.5669 m
317.7607 487.0669 L
317.4668 486.8086 317.4375 486.3608 317.6963 486.0669 c
317.9551 485.7729 318.4023 485.7441 318.6963 486.0024 C
328.3623 494.5024 L
328.6563 494.7607 328.6855 495.2085 328.4268 495.5024 c
328.168 495.7964 327.7207 495.8252 327.4268 495.5669 C
f329.2461 492.5532 m
319.5791 483.5532 L
319.292 483.2866 319.2764 482.8384 319.543 482.5518 c
319.8096 482.2651 320.2578 482.2495 320.5439 482.5161 C
330.2109 491.5161 L
330.498 491.7827 330.5137 492.231 330.2471 492.5176 c
329.9805 492.8042 329.5322 492.8198 329.2461 492.5532 C
f330.7598 488.3994 m
322.2598 480.8994 L
321.9658 480.6406 321.9385 480.1929 322.1973 479.8994 c
322.4561 479.606 322.9043 479.5776 323.1973 479.8369 C
331.6973 487.3369 L
331.9912 487.5957 332.0186 488.0435 331.7598 488.3369 c
331.501 488.6304 331.0527 488.6587 330.7598 488.3994 C
f332.5967 485.4033 m
323.7637 477.7363 L
323.4688 477.48 323.4365 477.0322 323.6934 476.7368 c
323.9502 476.4409 324.3975 476.4097 324.6934 476.666 C
333.5264 484.333 L
333.8213 484.5894 333.8535 485.0371 333.5967 485.3325 c
333.3398 485.6284 332.8926 485.6597 332.5967 485.4033 C
f334.1006 481.5732 m
323.7676 472.7397 L
323.4707 472.4854 323.4355 472.0381 323.6895 471.7407 c
323.9443 471.4434 324.3916 471.4082 324.6895 471.6626 C
335.0225 480.4961 L
335.3193 480.7505 335.3545 481.1978 335.1006 481.4951 c
334.8457 481.7925 334.3984 481.8276 334.1006 481.5732 C
f335.9395 476.9111 m
325.6064 468.2441 L
325.3066 467.9927 325.2666 467.5459 325.5186 467.2456 c
325.7705 466.9458 326.2168 466.9067 326.5166 467.1582 C
336.8496 475.8252 L
337.1494 476.0767 337.1885 476.5234 336.9375 476.8237 c
336.6855 477.1235 336.2393 477.1626 335.9395 476.9111 C
f336.2578 473.2314 m
325.9238 464.0649 L
325.6318 463.8052 325.6045 463.3574 325.8643 463.0645 c
326.124 462.7715 326.5723 462.7446 326.8652 463.0044 C
337.1992 472.1709 L
337.4912 472.4307 337.5186 472.8784 337.2588 473.1714 c
336.999 473.4644 336.5508 473.4907 336.2578 473.2314 C
f337.4307 468.4038 m
327.4307 459.7368 L
327.1348 459.4805 327.1025 459.0327 327.3594 458.7368 c
327.6152 458.4414 328.0625 458.4092 328.3584 458.6655 C
338.3584 467.3325 L
338.6543 467.5889 338.6865 468.0366 338.4297 468.3325 c
338.1738 468.6279 337.7266 468.6602 337.4307 468.4038 C
f338.7715 463.2427 m
326.9375 453.2427 L
326.6377 452.9897 326.6006 452.5425 326.8535 452.2437 c
327.1055 451.9448 327.5527 451.9072 327.8516 452.1597 C
339.6855 462.1597 L
339.9854 462.4126 340.0225 462.8599 339.7695 463.1587 c
339.5176 463.4575 339.0703 463.4951 338.7715 463.2427 C
f339.9316 458.9048 m
329.0986 449.5718 L
328.8027 449.3159 328.7695 448.8687 329.0244 448.5723 c
329.2803 448.2754 329.7275 448.2422 330.0244 448.4976 C
340.8574 457.8315 L
341.1533 458.0869 341.1865 458.5342 340.9316 458.8306 c
340.6758 459.1274 340.2285 459.1606 339.9316 458.9048 C
f340.4297 455.5693 m
327.5967 444.4028 L
327.3008 444.146 327.2705 443.6982 327.5273 443.4028 c
327.7842 443.1079 328.2314 443.0767 328.5264 443.3335 C
341.3594 454.5 L
341.6553 454.7568 341.6855 455.2046 341.4287 455.5 c
341.1719 455.7949 340.7246 455.8262 340.4297 455.5693 C
f340.6113 450.415 m
329.2783 441.0815 L
328.9756 440.833 328.9326 440.3862 329.1816 440.084 c
329.4307 439.7822 329.877 439.7388 330.1787 439.9878 C
341.5117 449.3213 L
341.8145 449.5698 341.8574 450.0166 341.6084 450.3188 c
341.3594 450.6206 340.9131 450.6641 340.6113 450.415 C
f340.748 445.2217 m
329.9141 435.2217 L
329.626 434.9565 329.6084 434.5083 329.874 434.2207 c
330.1396 433.9331 330.5879 433.915 330.875 434.1802 C
341.709 444.1802 L
341.9971 444.4458 342.0146 444.894 341.749 445.1816 c
341.4834 445.4692 341.0352 445.4873 340.748 445.2217 C
f341.4746 440.272 m
329.4746 431.439 L
329.1592 431.207 329.0918 430.7632 329.3242 430.4482 c
329.5557 430.1328 329.999 430.0654 330.3145 430.2974 C
342.3145 439.1304 L
342.6299 439.3623 342.6973 439.8062 342.4648 440.1211 c
342.2334 440.4365 341.79 440.5039 341.4746 440.272 C
f341.9473 434.9175 m
328.4473 423.9175 L
328.1436 423.6704 328.0977 423.2241 328.3447 422.9204 c
328.5928 422.6172 329.0391 422.5718 329.3418 422.8188 C
342.8418 433.8188 L
343.1455 434.0659 343.1914 434.5122 342.9443 434.8159 c
342.6963 435.1191 342.25 435.1646 341.9473 434.9175 C
f341.6123 429.0825 m
328.6123 418.415 L
328.3096 418.167 328.2656 417.7197 328.5137 417.418 c
328.7617 417.1152 329.208 417.0713 329.5107 417.3193 C
342.5107 427.9868 L
342.8135 428.2349 342.8574 428.6816 342.6094 428.9844 c
342.3613 429.2866 341.915 429.3306 341.6123 429.0825 C
f341.6162 424.0859 m
329.4492 414.252 L
329.1445 414.0059 329.0977 413.5605 329.3438 413.2559 c
329.5889 412.9512 330.0352 412.9043 330.3398 413.1504 C
342.5068 422.9834 L
342.8115 423.2295 342.8584 423.6758 342.6123 423.98 c
342.3662 424.2847 341.9209 424.332 341.6162 424.0859 C
f341.5723 418.8799 m
330.4053 408.2139 L
330.1221 407.9434 330.1113 407.4951 330.3818 407.2119 c
330.6523 406.9287 331.1006 406.918 331.3838 407.1885 C
342.5508 417.8545 L
342.834 418.125 342.8447 418.5732 342.5742 418.8564 c
342.3037 419.1396 341.8555 419.1504 341.5723 418.8799 C
f341.9473 413.584 m
327.6143 401.917 L
327.3105 401.6699 327.2646 401.2236 327.5117 400.9199 c
327.7588 400.6162 328.2051 400.5703 328.5088 400.8174 C
342.8418 412.4844 L
343.1455 412.7314 343.1914 413.1777 342.9443 413.4814 c
342.6973 413.7852 342.251 413.8311 341.9473 413.584 C
f341.9395 407.9102 m
328.6064 396.7441 L
328.3066 396.4932 328.2666 396.0459 328.5186 395.7461 c
328.7695 395.4463 329.2168 395.4063 329.5166 395.6582 C
342.8496 406.8242 L
343.1494 407.0752 343.1895 407.5225 342.9375 407.8223 c
342.6865 408.1221 342.2393 408.1621 341.9395 407.9102 C
f341.0635 400.5381 m
328.2305 387.8711 L
327.9521 387.5967 327.9492 387.1475 328.2246 386.8691 c
328.499 386.5908 328.9473 386.5879 329.2266 386.8633 C
342.0596 399.5303 L
342.3379 399.8047 342.3408 400.2529 342.0654 400.5322 c
341.791 400.8105 341.3428 400.8135 341.0635 400.5381 C
f342.0986 395.2373 m
327.4316 382.5703 L
327.1348 382.3145 327.1025 381.8672 327.3584 381.5713 c
327.6143 381.2744 328.0615 381.2422 328.3574 381.498 C
343.0244 394.165 L
343.3213 394.4209 343.3535 394.8682 343.0977 395.1641 c
342.8418 395.4609 342.3945 395.4932 342.0986 395.2373 C
f340.7822 389.085 m
327.6152 378.418 L
327.3115 378.1719 327.2646 377.7256 327.5107 377.4209 c
327.7568 377.1172 328.2031 377.0703 328.5078 377.3164 C
341.6748 387.9834 L
341.9785 388.2295 342.0254 388.6758 341.7793 388.9805 c
341.5332 389.2842 341.0869 389.3311 340.7822 389.085 C
f339.4072 383.3818 m
326.9072 371.5488 L
326.623 371.2793 326.6104 370.8311 326.8799 370.5469 c
327.1494 370.2627 327.5977 370.25 327.8818 370.5195 C
340.3818 382.3525 L
340.666 382.6221 340.6787 383.0703 340.4092 383.3545 c
340.1396 383.6387 339.6914 383.6514 339.4072 383.3818 C
f338.7305 376.8721 m
326.5635 364.8721 L
326.2852 364.5967 326.2822 364.1484 326.5566 363.8691 c
326.832 363.5908 327.2803 363.5879 327.5596 363.8623 C
339.7266 375.8623 L
340.0049 376.1377 340.0078 376.5859 339.7334 376.8652 c
339.458 377.1436 339.0098 377.1465 338.7305 376.8721 C
f339.917 372.3906 m
326.751 360.3906 L
326.4619 360.127 326.4414 359.6787 326.7051 359.3896 c
326.9688 359.1006 327.417 359.0801 327.7061 359.3438 C
340.8721 371.3438 L
341.1611 371.6074 341.1816 372.0557 340.918 372.3447 c
340.6543 372.6338 340.2061 372.6543 339.917 372.3906 C
f338.9326 365.9043 m
325.7666 354.5713 L
325.4697 354.3154 325.4365 353.8682 325.6914 353.5723 c
325.9463 353.2754 326.3945 353.2422 326.6904 353.4971 C
337.3467 362.6699 338.9375 364.0391 V
339.3213 362.1201 341.0332 353.5625 Y
341.1104 353.1787 341.4834 352.9297 341.8672 353.0059 c
342.251 353.083 342.5 353.4561 342.4238 353.8398 C
339.8516 366.6953 L
338.9326 365.9043 L
f340.7139 362.3545 m
328.8799 349.8545 L
328.6104 349.5703 328.623 349.1221 328.9072 348.8525 c
329.1914 348.583 329.6396 348.5957 329.9092 348.8799 C
341.7432 361.3799 L
342.0127 361.6641 342 362.1123 341.7158 362.3818 c
341.4316 362.6514 340.9834 362.6387 340.7139 362.3545 C
f343.3525 361.1582 m
336.1865 352.6582 L
335.9346 352.3584 335.9727 351.9121 336.2715 351.6592 c
336.5713 351.4072 337.0176 351.4453 337.2705 351.7441 C
344.4365 360.2441 L
344.6885 360.5439 344.6504 360.9902 344.3516 361.2432 c
344.0518 361.4951 343.6055 361.457 343.3525 361.1582 C
f331.8311 362.2041 m
331.4609 362.0771 331.2637 361.6738 331.3916 361.3037 C
335.0586 350.6367 L
335.1855 350.2666 335.5889 350.0693 335.959 350.1973 c
336.3291 350.3242 336.5264 350.7275 336.3984 351.0977 C
332.7314 361.7646 L
332.6045 362.1348 332.2012 362.3311 331.8311 362.2041 c
f328.8936 359.3262 m
328.5488 359.1406 328.4189 358.7119 328.6035 358.3662 C
333.6035 349.0322 L
333.7891 348.6875 334.2178 348.5576 334.5635 348.7422 c
334.9082 348.9277 335.0381 349.3564 334.8535 349.7021 C
329.8535 359.0361 L
329.668 359.3809 329.2393 359.5107 328.8936 359.3262 c
f335.3877 364.7207 m
335.0078 364.625 334.7783 364.2393 334.875 363.8604 C
337.708 352.6934 L
337.8037 352.3135 338.1895 352.084 338.5684 352.1807 c
338.9482 352.2764 339.1777 352.6621 339.0811 353.041 C
336.248 364.208 L
336.1523 364.5879 335.7666 364.8174 335.3877 364.7207 c
f354.2988 353.5977 m
347.2988 348.2646 L
346.9873 348.0273 346.9277 347.583 347.165 347.2715 c
347.4023 346.96 347.8467 346.9004 348.1582 347.1377 C
355.1582 352.4707 L
355.4697 352.708 355.5293 353.1523 355.292 353.4639 c
355.0547 353.7754 354.6104 353.835 354.2988 353.5977 C
f354.5986 349.2373 m
347.2656 342.9033 L
346.9688 342.6475 346.9365 342.2002 347.1924 341.9043 c
347.4482 341.6074 347.8955 341.5752 348.1914 341.8311 C
355.5244 348.165 L
355.8213 348.4209 355.8535 348.8682 355.5977 349.1641 c
355.3418 349.4609 354.8945 349.4932 354.5986 349.2373 C
f355.7939 345.5938 m
346.7939 338.5938 L
346.4844 338.3535 346.4287 337.9082 346.6689 337.5986 c
346.9092 337.29 347.3545 337.2344 347.6631 337.4746 C
356.6631 344.4746 L
356.9727 344.7148 357.0283 345.1602 356.7881 345.4697 c
356.5479 345.7783 356.1025 345.834 355.7939 345.5938 C
f355.9521 339.7549 m
347.6191 333.0879 L
347.3135 332.8428 347.2637 332.3975 347.5078 332.0918 c
347.7529 331.7861 348.1982 331.7363 348.5039 331.9805 C
356.8369 338.6475 L
357.1426 338.8926 357.1924 339.3379 356.9482 339.6436 c
356.7031 339.9492 356.2578 339.999 355.9521 339.7549 C
f355.5996 334.2383 m
346.0996 326.0713 L
345.8027 325.8164 345.7695 325.3691 346.0244 325.0723 c
346.2793 324.7754 346.7266 324.7422 347.0234 324.9971 C
356.5234 333.1641 L
356.8203 333.4189 356.8535 333.8662 356.5986 334.1631 c
356.3438 334.46 355.8965 334.4932 355.5996 334.2383 C
f355.8047 328.4355 m
345.3047 320.6025 L
344.9912 320.3682 344.9268 319.9238 345.1602 319.6104 c
345.3945 319.2969 345.8389 319.2324 346.1523 319.4658 C
356.6523 327.2988 L
356.9658 327.5332 357.0303 327.9775 356.7969 328.291 c
356.5625 328.6045 356.1182 328.6689 355.8047 328.4355 C
f355.0742 323.2158 m
345.7412 314.3818 L
345.457 314.1123 345.4443 313.6641 345.7139 313.3799 c
345.9834 313.0957 346.4316 313.083 346.7158 313.3525 C
356.0488 322.1865 L
356.333 322.4561 356.3457 322.9043 356.0762 323.1885 c
355.8076 323.4727 355.3584 323.4854 355.0742 323.2158 C
f353.7451 316.8857 m
348.7451 312.2197 L
348.459 311.9521 348.4434 311.5039 348.71 311.2178 c
348.9775 310.9316 349.4258 310.916 349.7119 311.1826 C
354.7119 315.8486 L
354.998 316.1162 355.0137 316.5645 354.7471 316.8506 c
354.4795 317.1367 354.0313 317.1523 353.7451 316.8857 C
f238.0361 447.8169 m
233.5361 437.4419 L
233.3809 437.0825 233.5459 436.6665 233.9043 436.5093 c
234.2637 436.354 234.6797 436.519 234.8359 436.8774 C
239.3359 447.2524 L
239.4922 447.6118 239.3271 448.0278 238.9688 448.1846 c
238.6094 448.3403 238.1934 448.1753 238.0361 447.8169 C
f240.4004 445.7915 m
236.0254 434.5415 L
235.8838 434.1768 236.0645 433.7661 236.4297 433.624 c
236.7939 433.4824 237.2051 433.6631 237.3467 434.0278 C
241.7217 445.2778 L
241.8633 445.6426 241.6826 446.0532 241.3184 446.1953 c
240.9531 446.3369 240.543 446.1563 240.4004 445.7915 C
f244.1982 442.8896 m
238.1982 432.5146 L
238.002 432.1758 238.1182 431.7422 238.4561 431.5464 c
238.7949 431.3501 239.2285 431.4663 239.4248 431.8047 C
245.4248 442.1797 L
245.6211 442.5186 245.5049 442.9521 245.166 443.1479 c
244.8271 443.3442 244.3936 443.228 244.1982 442.8896 C
f245.8486 437.3052 m
241.4736 430.8052 L
241.2549 430.4805 241.3408 430.0405 241.666 429.8218 c
241.9902 429.603 242.4307 429.6895 242.6494 430.0142 C
247.0244 436.5142 L
247.2432 436.8389 247.1563 437.2788 246.832 437.4976 c
246.5068 437.7163 246.0674 437.6299 245.8486 437.3052 C
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
