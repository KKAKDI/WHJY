%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (870.ai)
%%CreationDate: 3/25/2002 6:37 PM
%%BoundingBox: 218 348 372 588
%%HiResBoundingBox: 218.8687 348.9482 371.9395 587.0581
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13282 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC92444B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B2020
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B68FD
%07FC99FFFD05FC8C27F82727525152275251522752515227525152275227
%F8F85227F8F8275127F82744F82727F827F84BF827275251522752515227
%5251522752515227525152275251522727F86FFD05FCC2FFFD04FC8CF827
%FD14FF272026F827264B2776F86EFCFCF8F8269FC6C69EF8A8FD1AFF52F8
%6EFD04FCBBFFFD04FC2727FD15FFF893FC27F8C67427F86FFCFCFCF850FD
%04C627F8272027F827202752FD14FF7DF8B4FCFCFCC2FFFCFCFC8CF8FD15
%FFA8F8FCFC8CF89E7BF826FCFCFC8CF8FD04C69EF826686E686820F8F8A8
%FD15FF2744FCFCFCBBFFFCFCFC4427FD0DFFA82727262752A8FF7DF8FCFC
%FCF875C6F88CFCFCFC4427FD04C6204BFD04FC44F852FD17FF5227FCFCFC
%C2FFFCFCFC4A27FD0EFF52F8515027F8272726FCFCFC4B26C6F8FD04FC20
%4AC6C6C626278CFCFCFC68F852FD18FF7DF8FCFCFCBCFFFCFCFC4452FD0F
%FF7CF8A5C6C7202720FCFCFC6827C6F8FCFCFC6FF8C7C6C650F868FD04FC
%27F827F8277DFD15FF7D27FCFCFCC2FFFCFCFC4B27FD10FF2720C6C6C6F8
%27FCFCFC6EF8C6F8FCFCFCF851C6C620F868FD04FC26F8C6C6C626F8F87D
%FD13FF7DF8FCFCFC99FFFCFCFC4452FD0AFF7D27FD05F827A4C6C65126FC
%FCFC68279EF8FCFC2027C6C7F8278CFD04FC4BF89FFD04C6A451F8277DFD
%11FF7D27FCFCFCC2FFFCFCFC4B27FD09FF27F8206EFCFC8C6EF851C6C674
%27FCFCFC6FF851F8FCF8209E75F8268CFCFCFC6827F89EC6C6C69E2627FD
%04F8FD11FF7DF8FCFCFCBBFFFCFCFC2052FD06FFA85227F82093FD05FC6F
%F8C7C6C7F8B4FCFC4427F827F827F8F8F827444B2027F8F826C7C69F2627
%F827527DFD14FF7D27FCFCFCC2FFFCFCFC4A27FD04FF76F8F8F84B2627F8
%2668FD04FC2626C6C6F844FCFC26FD08F8204B264B509F745120F8F82620
%26F852FD15FF7DF8FCFCFCBBFFFCFCFC2052FFFF7D27F875FD05C6C74BF8
%20FCFCFC8C2751C65027FC93FD09F821FD05F827204B68FD04FC6FF827A8
%FD13FF7D27FCFCFCC2FFFCFCFC4A27FF7DF8F8519EFD07C67A20F892FCFC
%68F826C6F86FFD0BF827F84A8CFD0BFC20F87DFD12FF7DF8FCFCFCBCFFFC
%FCFC4452FFFFFF7DF8274AC7FD07C651F82768FC6827F827FD0BF87CFF7D
%F82044B4FD0AFC44277DFD11FF7D27FCFCFCC2FFFCFCFC4B27FD05FF7C27
%F82750FD06C69E26F8F820FD0DF8A8FD04FF5227F820204A686E6868686E
%686820F87DFD10FF7DF8FCFCFC99FFFCFCFC4452FD04FFA84BF8272027F8
%274A9F747B2627F875749F26F8F827FD05F82752FD09FF7D5227272027F8
%272027F8272027A8FD0FFF7D27FCFCFCC2FFFCFCFC4B27FFFF7D27F82092
%FCFCFC9244F8F827F84B50C6C6C674F87DFFFFFF52202751FD29FF7DF8FC
%FCFCBBFFFCFCFC2052FF52F8F8206F8CFD04FC4BF8FD07C67AF827FD04FF
%7D272752FD29FF7D27FCFCFCC2FFFCFCFC4A27FFFFFF7D52F8F8F84B68FC
%F87BFD06C626F827FD05FF7C27F87DFD29FF7DF8FCFCFCBBFFFCFCFC2052
%FD06FFA87D2727F827FD04C69E4BF8277DFD06FF52F8F8F8270027F82700
%27F8272127F8272127F852275227A8FD14FF7D27FCFCFCC2FFFCFCFC4A27
%FD0AFFF850C69E51F8F827A7FD08FF272707070628062806280628062806
%2806280627002700F87DFD14FF7DF8FCFCFCBCFFFCFCFC4452FD09FFA8F8
%9F26272076FD0BFF7DF82F072F072F072F072F072F072F072F072F072F07
%2FF87DFFA87D522752527DFD0CFF7D27FCFCFCC2FFFCFCFC4B27FD09FF7C
%F8F827A1FD0DFF7D00FD15070526FD09F827FD0AFF7DF8FCFCFC99FFFCFC
%FC4452FD09FF52F87DFD0FFF7DF82F072F072F072F072F072F072F072F07
%2F072F072FFD0DF8FD09FF7D27FCFCFCC2FFFCFCFC4B27FD09FF51A8FD10
%FF7D00FD150727FD0CF827FD08FF7DF8FCFCFCBBFFFCFCFC2052FD1BFF7D
%F82F072F072F072F072F072F072F072F072F072F072FFD0DF827527DA8FD
%05FF7D27FCFCFCC2FFFCFCFC4A27FD1BFF7C27FD0907280028FD0907FD12
%F852A8FFFF7DF8FCFCFCBBFFFCFCFC2052FD1BFFA1F82F072F072F062F07
%2F05F8F828072F072F062F072FFD13F8277DFF7D27FCFCFCC2FFFCFCFC4A
%27FD1BFF2727FD050727F8270628F8F8F828070707F8F82907FD15F8A77D
%F8FCFCFCBCFFFCFCFC4452FD1BFF52052F072F072F06F8F80000F8F8F806
%2F072FF8F8F82FFD15F8277D27FCFCFCC2FFFCFCFC4B27FD1BFF2727FD06
%07FD07F82707070727FD19F87DF8FCFCFC99FFFCFCFC4452FD1BFF52052F
%072F072F0728FD07F827072FFD1AF87D27FCFCFCC2FFFCFCFC4B27FD1BFF
%2727FD070728FD07F80706FD1AF87DF8FCFCFCBBFFFCFCFC2052FD1BFF27
%062F072F072F072800FD06F8270728F8F8F827FD15F8277D27FCFCFCC2FF
%FCFCFC4A27FF7D27FD04F8277DFD12FFF82807070027FD09F8270707FD04
%F806FD15F8277DF8FCFCFCBBFFFCFCFC205227FD08F8277DFD10FF27062F
%06FD0AF829072F05F8F8F80628FD15F8A87D27FCFCFCC2FFFCFCFC4AFD0C
%F852FD0FFFF8070707FD11F80700FD14F827FF7DF8FCFCFCBCFFFCFCFC44
%FD0DF87DFD0DFFA8F8072F072F072F072F05FD0AF8270727FD13F827FFFF
%7D27FCFCFCC2FFFCFCFC4BFD0EF8FD0DFF7DF8FD080727F8F8F8070628FD
%04F80607FD13F827A8FFFF7DF8FCFCFC99FFFCFCFC44FD0EF87DFFA87DA1
%FD08FF5227072F072F072F072F05F8F827072F06F8F8F8062F0727FD11F8
%52FD04FF7D27FCFCFCC2FFFCFCFC4BFD15F852A8FD04FF5200FD080727F8
%F8060705FD04F8070707FD0FF82051FD06FF7DF8FCFCFCBBFFFCFCFC20FD
%17F852FFFFFF2128072F072F072F072F0728062F00F8F8F8002F072F07FD
%08F8A827524B5252A8FD08FF7D27FCFCFCC2FFFCFCFC4AFD18F827FFFFF8
%06FD0807290505FD05F8FD040728FD07F87DFD0FFF7DF8FCFCFCBBFFFCFC
%FC2052FD18F827FFF82F072F072F072F0527FD05F827062F072F072F06FD
%06F87DFD10FF7D27FCFCFCC2FFFCFCFC4A27FF27FD17F827F8FD050728FD
%07F828FD070727FD05F8A7FD11FF7DF8FCFCFCBCFFFCFCFC4452FF7DFD19
%F82F072F0728FD05F827F8F8052F072F072F072FF8F8F82752FD13FF7D27
%FCFCFCC2FFFCFCFC4B27A7FD19F82707070729F8F8F827060706F8F8F8FD
%0707F84BFD16FF7DF8FCFCFC99FFFCFCFC4452FD1AF8062F072F05F8F827
%072F072FF8F8F82F072F072F072FF8FD17FF7D27FCFCFCC2FFFCFCFC4B27
%FD1AF82907070727F8F80007070706F8F8F806FD050706F8FD05FF7D2752
%27527DFD0CFF7DF8FCFCFCBBFFFCFCFC2027FD1AF8072F072F05F8F80007
%2F0727F8F8F82F072F072F072827FFFFFF4BFD08F8A8FD0AFF7D27FCFCFC
%C2FFFCFCFC4AFD1BF8FD0507FD09F827FD0607F84CFF52FD0BF8A7FD09FF
%7DF8FCFCFCBBFFFCFCFC20FD1AF827072F072F0728FD07F827062F072F07
%2F07275227FD0DF8A8FD08FF7D27FCFCFCC2FFFCFCFC4AFD1AF806FD0607
%27FD05F80006FD0707FD11F8FD08FF7DF8FCFCFCBCFFFCFCFC44FD1AF82F
%072F072F0627F80000270529072F072F072F072F06FD11F8A8FD07FF7D27
%FCFCFCC2FFFCFCFC4BFD1AF807070728F8F8F828FD0D0727FD11F852FD07
%FF7DF8FCFCFC99FFFCFCFC44FD19F8052F0728F8F8052F072F072F072F07
%2F072F072F072FFD12F827FD07FF7D27FCFCFCC2FFFCFCFC4BFD19F80707
%27F8F800FD1007FD12F827FD07FF7DF8FCFCFCBBFFFCFCFC2052FD17F800
%0728F8F8052F072F072F072F072F072F072F072F0728FD13F827A8FD05FF
%7D27FCFCFCC2FFFCFCFC4A2727FD17F807F8F8F8FD110700FD15F8A8FD04
%FF7DF8FCFCFCBBFFFCFCFC2052A8FD16F8290727F828072F072F06F8052F
%072F072F072F072F0727FD15F827FD04FF7D27FCFCFCC2FFFCFCFC4A27FF
%7DFD15F8070700F800FD040729F8F8F829FD070729FD17F852FFFFFF7DF8
%FCFCFCBCFFFCFCFC4452FFFFA827FD12F8002F0728FD05F8270627F8F805
%2F072F072F072F05FD18F8FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD04FFA8
%524BF827F827F827FD09F8280728FD07F828F8F8F827FD070700FD18F87C
%FFFF7DF8FCFCFC99FFFCFCFC4452FD0DFF27FD07F8270729F8F8F827F827
%05290727F8F8062F072F072F072FFD19F8A1FFFF7D27FCFCFCC2FFFCFCFC
%4B27FD0DFF27FD08F807F8F8F827FD0607F8F8F8FD070706FD19F87DFFFF
%7DF8FCFCFCBBFFFCFCFC2052FD0DFFA8FD07F82907F8F8F8062F072F072F
%06F8F800072F072F072F0727FD19F87DFFFF7D27FCFCFCC2FFFCFCFC4B27
%FD0EFF27FD06F80707F8F8F8FD040728F805F8F8F8FD0707FD1AF8FFFFFF
%7DF8FCFCFCBBFFFCFCFC2652FD0EFFA827FD04F8052F07FD04F827FD07F8
%28072F072F072F0621FD18F827FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD0F
%FF52FD04F8290707FD09F827F8F806FD060705FD19F8A8FFFFFF7DF8FCFC
%FCBCFFFCFCFC4B52FD10FF52F8F827072F0729FD07F827F8F8F82F072F07
%2F072FFD19F852FD04FF7D27FCFCFCC2FFFCFCFC4B27FD11FF52F805FD05
%0706280027002806F8F8F806FD050700F844FC68FD15F8FD05FF7DF8FCFC
%FC99FFFCFCFC4B52FD11FFA1F82F072F072F072F072F072F0728F8F8F828
%072F072F0727206FFCFCF8F8F82726FD0FF851FD05FF7D27FCFCFCC2FFFC
%FCFC4B27FD11FF2727FD0C07FD05F8FD0507F827F86EFC26F851C6C69EFD
%0EF87DFD05FF7DF8FCFCFCBBFFFCFCFC2652FD10FFA8F8062F072F072F07
%2F072F072F0700F82805F8062F072F0527C67520FCF851FD04C674FD0CF8
%27FD06FF7D27FCFCFCC2FFFCFCFC4B27FD10FF27F8FD0C0728F8F80627F8
%28070707F874C64AF8F8F826FD04C67BF8F8F84B20FD07F87DFD06FF7DF8
%FCFCFCBBFFFCFCFC2652FD10FFF829072F072F072F072F072F072F00F8F8
%27F827072F0728F8C62627446F4427F89FC6C674F8F875C6C62627FD04F8
%52FD07FF7D27FCFCFCC2FFFCFCFC4B27FD0FFF2727FD060706270027F827
%FD06F800070707F87526208CFD04FC4BF87B2626F875C6C6C67BFD04F87D
%FD08FF7DF8FCFCFCBCFFFCFCFC4B52FD0FFF27062F072F072F06FD0AF827
%062F072F06F8F8278CFD06FC27F8274427F8C7C6C67420277DFD0AFF7D27
%FCFCFCC2FFFCFCFC4B27FD0EFF76F8FD060727F8F8F8270528F8F800FD06
%0727204AF86FFD06FC6826FCFCFC27F8C6C64BF827FD07F87DFFFFFF7DF8
%FCFCFC99FFFCFCFC4B52FD0EFFF828072F072F072FF8F8F82F072F06F8F8
%29072F072F072FF893FC93F893FD05FC6F20FCFCFC8CF89EC6FD0BF827A8
%FF7D27FCFCFCC2FFFCFCFC4B27FD0DFF52F8FD0707F8F82807070727F827
%FD0607F827FCFCFCF8206E6892FC8CF86FFD04FCF87B26FD0CF827A87DF8
%FCFCFCBBFFFCFCFC2652FD0DFF27052F072F072F072FF8F8062F072FF8F8
%062F072F072F06F88CFCFCFCF8272027F827F84BFD05FC2026F8206F6827
%FD09F8277D27FCFCFCC2FFFCFCFC4B27FD0CFF52F8FD080705F8270707F8
%F800FD06072720FCFCFC68F874C6C6C626F868FC20FD04F82068FD04FCFD
%0AF852F8FCFCFCBBFFFCFCFC2652FD0CFFF828072F072F072F072F06F8F8
%2700F8F828F827F827072FF86F8CFC44F8F8279EC6C6C65120F82774C774
%4BF86FFCFCFCB4FD0AF82627FCFCFCC2FFFCFCFC4B27FD0BFF2727FD0A07
%00FD0AF827F827F8F8F82020FC20F87AC6C6C6F827FD05C675F8FCFCFCFD
%0DF8FCFCFCBCFFFCFCFC4B52FD0AFFA8F8062F072F072F072F072F0729FD
%0CF89EC6C62720FCFCFC44279EC6C67B20FD06C6262627F827FD0BF827FC
%FCFCC2FFFCFCFC4B27FD0AFF52F8FD0C0727FD0AF826C6C6C65020FD04FC
%F84BC6C67427FD06C6F82750C6C6C626FD08F852F8FCFCFC99FFFCFCFC4B
%52FD09FFA8F829072F072F072F072F072F0729F8270628002705280629F8
%C7C6C6C67BF8FD04FC93F851502726FD05C6F8279EFD05C6FD08F82727FC
%FCFCC2FFFCFCFC4B27FD09FFF827FD0B0729F8F800FD0707F827FD04C674
%20FD05FCF8204B20F826C6C67BF8F82020F89EC6C6C6FD0AF8FCFCFCBBFF
%FCFCFC2652FD08FF7DF8072F072F072F072F072F072FF8F8002F072F072F
%072F27F8F8FD04C627F8B4FD04FCF8FCFCFC68FD04F84B8CFCFC4B26C69E
%27FD09F827FCFCFCC2FFFCFCFC4B27FD08FFF800FD0B0705F8F829FD0607
%06F850F850C6C651F8F8F84A8CFC44F8FD04FCF86EFD06FC8CFD0EF8FCFC
%FCBBFFFCFCFC2652FD07FF52F82F072F072F072F072F072F0727F828072F
%072F072F072726C6F8272627F84BF84BFD05F8FD04FC2768FD06FC93F827
%FD0BF827FCFCFCC2FFFCFCFC4B27FD06FFA8F828FD0B0729F8F806FD0607
%28F89FC6F8684B208CFC2768FCFCFC20F844FCFCFCF8F844FD04FC8CF84B
%FC20FD0BF8FCFCFCBCFFFCFCFC4B52FD06FFF827072F072F072F072F072F
%072F05F8052F072F072F072FF851C6C6F8FD05FCF86FFCFCFC4B20F8204B
%20275027F827F827F84BFCFC8CFD0AF827FCFCFCC2FFFCFCFC4B27FD05FF
%52F806FD0D0706FD07070026C6C6C6F868FD04FCF844FCFCFC204B8C4A20
%F89EC6C6C64AF844FD05FCFD0BF8FCFCFC99FFFCFCFC4B52FD04FFA82706
%2F072F072F072F072F072F072F072F072F072F072F06F89EC6C6C62627FC
%FCFC6FF8F8266F20278CFCFCFCF8A5C6C6C69FF82768FD04FC27FD09F827
%FCFCFCC2FFFCFCFC4B27FD04FF27F8FD150706F8F87BC6C6C67BF8268C6F
%F8519E4BF8208CFD04FCF8F8FD04C6F8F8F8206E6827FD0BF8FCFCFCBBFF
%FCFCFC2652FFFFFF52F829072F072F072F072F072F072F072F072F072F07
%2F0727F8F84AC6C6C6F82720F8F8F89EC6C6274AFD05FCF827F89FC6C6FD
%0FF8272727FCFCFCC2FFFCFCFC4B27FFFFA8F828FD150728F8F8F826C6C6
%26F8F8FCFCFCF89FC6C64AF8FD05FCF8744BF82726FD0DF87DFFFF7DF8FC
%FCFCBBFFFCFCFC2652FFFFF827072F072F072F072F072F072F072F072F07
%2F072F0729FD05F85120275027FCFCFC2774C6C6C6F84BFCFCFC93F8C6C6
%A5F827FD0DF8FFFFFF7D27FCFCFCC2FFFCFCFC4B27FF27F8F827F805F827
%F805F827F800F827F8F8F8270027F827FD07F8519E7BF8FCFCFC2027C6C6
%C675F820686FF827C6C6C626FD0EF8FFFFFF7DF8FCFCFCBCFFFCFCFC4B52
%FFFD0E7D52FD10F89EC67A26FCFCFC92F89FC6C6F827F8F820F89EC6C6C6
%F87DFD0DF8FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD0FFF7DFD10F851C69E
%F826FCFC20F8F827F8F850C6C6C6F84BC6C64A27FF27FD0BF852FFFFFF7D
%F8FCFCFC99FFFCFCFC4B52FD0FFFA8FD11F84BF8F8F82720FD06F8FD04C6
%27F827F8277DFFA827FD09F827FD04FF7D27FCFCFCC2FFFCFCFC4B27FD10
%FFFD1DF826C69E27FD05F827A8FF7DFD08F820A8FD04FF7DF8FCFCFCBBFF
%FCFCFC2652FD10FFFD27F827FFFFA827FD05F852A8FD05FF7D27FCFCFCC2
%FFFCFCFC4B27FD10FF4BFD27F852FD04FF7D7D7CFD08FF7DF8FCFCFCBBFF
%FCFCFC2652FD10FF7DFD28F8FD0FFF7D27FCFCFCC2FFFCFCFC4B27FD11FF
%FD28F827FD0EFF7DF8FCFCFCBCFFFCFCFC4B52FD11FF7DFD27F827FD0EFF
%7D27FCFCFCC2FFFCFCFC4B27FD12FF27FD27F8A8FD0DFF7DF8FCFCFC99FF
%FCFCFC4B52FD13FF52FD26F87DFD0DFF7D27FCFCFCC2FFFCFCFC4B27FD14
%FFA82720FD23F87DFD0DFF7DF8FCFCFCBBFFFCFCFC2652FD17FF52FD22F8
%FD0EFF7D27FCFCFCC2FFFCFCFC4AF8FD17FF52FD21F827FD0EFF76F8FCFC
%FCBBFFFCFCFC6827A8FD17FFFD18F85227FD06F852FD0FFF274BFCFCFCC2
%FFFD04FCF827FD17FF52FD09F820FD0DF8FFFF7D2727F852A7FD0FFF52F8
%8CFCFCFCBCFFFD04FC92F827A8FD16FF52FD07F8A8A827FD0BF8A8FD16FF
%52F844FD04FCC2FFFD05FC8CF8F8F8522752275227522752275227522752
%275227522752274BF827F827275227522727FD09F8272752275227522752
%2752275227522752275227522727F8F868FD05FC99FFFD07FC8C4B204B44
%4B204B444B204B444B204B444B204B444B204B444B204B444B204B444B20
%4B4427204B2027204B444B264B4B4B264B4B4B264B4B4B264B4B4B264B4B
%4B2093FD07FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
371.9395 348.9482 m
218.8687 348.9482 L
218.8687 587.0581 L
371.9395 587.0581 L
371.9395 348.9482 L
fu0 0 0 0 k
226.4038 570.6699 m
226.2373 365.8359 l
227.5703 357.0029 235.4038 356.5029 v
354.5713 356.3359 l
364.2373 357.6689 364.4043 366.3359 v
364.5713 570.3369 l
363.5713 578.8364 354.9043 579.6699 v
235.5703 579.6699 l
228.4038 579.3364 226.4038 570.6699 v
f1 0.6 0 0 k
280.5288 541.3784 m
322.4043 540.5034 l
322.6543 535.6284 322.6543 533.0034 v
322.6543 530.3784 323.1543 516.6284 323.6543 513.7534 c
324.1543 510.8784 322.4043 499.2534 y
319.1543 492.6284 l
317.1543 479.3784 316.5293 477.1284 v
315.9043 474.8784 317.1543 455.3784 y
302.6543 411.0029 l
280.1538 387.8779 l
272.4038 386.1279 l
258.4038 390.2529 l
232.4038 390.5029 l
254.9038 423.1284 262.9038 446.7534 v
266.1016 456.1968 266.4038 480.6284 y
277.0288 493.0034 l
281.6538 517.0034 280.5288 541.3784 v
f0 1 1 0 k
283.0288 400.5029 m
302.6543 428.8784 306.9043 447.7534 v
314.6543 450.8784 l
321.1543 449.7534 l
330.9043 445.7534 l
339.9043 437.8784 l
338.5293 434.1284 l
338.0293 431.0034 l
341.2793 428.1284 l
346.1543 424.8784 l
352.2793 415.6279 l
352.6543 407.5029 l
347.1543 393.6279 l
342.4043 390.8779 l
335.1543 390.8779 l
331.2793 393.3779 l
330.1543 393.4199 l
325.5293 388.8779 l
319.0293 386.5029 l
314.9043 385.8779 l
306.7793 387.1279 l
301.7793 382.3779 l
291.1538 384.0029 l
286.2788 394.0029 l
283.0288 400.5029 l
f248.6538 540.9199 m
237.5703 544.1704 236.6538 544.3369 v
235.7373 544.5034 233.3203 545.5869 y
239.0703 548.0869 l
242.6538 550.4199 l
245.3203 559.3369 l
247.6538 563.9199 252.6538 563.9199 v
257.6538 563.9199 260.2373 563.1699 y
268.9038 566.5034 l
269.4038 570.5029 269.9038 573.6699 v
270.4038 576.8369 271.5703 578.8369 y
272.7373 578.7534 l
275.7373 577.0869 276.4873 575.3369 v
277.2373 573.5869 279.7373 575.7534 279.9873 575.7534 c
280.2373 575.7534 282.6538 572.6699 y
284.6533 574.9204 286.5703 576.5869 v
288.4873 578.2534 290.1538 579.3369 y
294.5703 579.5034 l
294.6543 577.0034 294.4873 576.2534 v
294.3203 575.5034 301.5713 574.7534 y
306.4043 574.2534 l
314.0713 575.3369 319.9043 574.2534 v
318.2373 572.7529 317.2373 571.9199 v
316.2373 571.0869 314.6543 569.9199 314.4043 569.5034 c
314.1543 569.0869 314.3213 568.2534 y
317.0713 559.4199 l
323.4033 556.4204 326.4873 553.8369 v
329.5713 551.2534 330.4873 549.3369 y
326.4033 549.5869 324.2373 549.5034 v
322.0713 549.4199 313.6543 549.1704 309.6543 549.8369 c
305.6543 550.5034 299.4863 552.4204 295.9868 555.5869 c
282.9873 553.9199 l
272.2373 550.3369 l
262.5703 545.8369 l
252.7373 541.0869 l
248.6538 540.9199 l
f0 0.2 1 0 k
252.1538 547.7534 m
249.2788 543.5034 248.0288 539.7534 v
246.7788 536.0034 247.0288 534.1284 y
248.4033 535.6699 250.0703 536.2534 v
251.7373 536.8369 261.6533 540.5034 264.3203 542.0034 c
266.9873 543.5034 271.6538 548.7534 272.1538 550.0034 c
272.6538 551.2534 271.9873 551.2539 271.6538 551.0869 c
271.3203 550.9199 269.4033 550.1704 267.5703 550.0869 c
265.7373 550.0034 264.7373 550.3369 y
259.8208 552.0039 257.2373 553.8369 v
254.6538 555.6699 250.0703 558.5034 246.5703 559.2534 c
243.0703 560.0034 236.9033 557.0864 233.5703 555.1699 c
233.9873 554.4199 l
235.9873 553.7529 238.9038 552.1699 v
241.8203 550.5869 248.4038 547.9199 252.1538 547.7534 c
f273.1538 551.4199 m
267.7373 552.3364 264.4038 556.6699 v
261.0703 561.0034 260.2368 565.1704 259.5703 566.3369 c
258.9038 567.5034 257.2368 569.5029 256.3203 570.1699 c
255.4038 570.8369 256.0703 570.7529 257.5703 570.6699 c
259.0703 570.5869 266.6533 570.3364 269.0703 565.6699 c
269.3208 559.4199 273.4873 552.5034 v
274.1538 550.8364 273.1538 551.4199 v
f276.8203 574.9199 m
279.2373 578.5034 279.6538 579.0034 v
280.0703 579.5034 281.7373 579.3369 y
282.4868 574.2529 282.8203 571.1699 v
283.1538 568.0869 282.9043 562.3364 281.2373 558.9199 c
279.5703 555.5034 278.5703 554.8369 y
276.9873 555.3369 l
279.6543 560.4199 278.9873 565.5034 v
278.3203 570.5869 276.9038 574.0034 y
276.8203 574.9199 l
f290.6538 558.5869 m
292.9868 556.4204 297.4873 556.0869 v
301.9873 555.7534 309.1533 557.2534 313.7373 558.7534 c
318.3213 560.2534 323.6533 561.8369 326.2373 562.0034 c
328.8213 562.1699 329.4043 562.3369 y
325.9883 563.7534 324.8213 564.5034 v
323.6543 565.2534 319.0713 568.4199 314.3213 568.2534 c
313.4883 568.5039 313.3213 567.5869 v
313.1543 566.6699 310.9873 562.9199 306.9043 561.0034 c
302.8213 559.0869 296.4883 558.8369 294.2373 559.0034 c
291.9873 559.1699 290.6538 559.1704 290.6538 558.5869 c
f285.2373 560.3369 m
286.2373 559.5869 288.1538 559.5034 v
290.0703 559.4199 292.5708 560.9204 293.2373 561.3369 c
293.9038 561.7534 300.5713 565.6704 303.8213 570.3369 c
307.0713 575.0034 307.8213 579.6699 y
302.4873 579.5869 l
296.7383 578.1699 294.4873 574.9199 v
293.7373 573.5864 293.7373 572.6699 v
293.7373 571.7534 292.1543 567.0029 290.2373 564.4199 c
288.3203 561.8369 285.2373 560.3369 y
f314.5713 439.0034 m
315.2373 439.3364 315.6543 442.1699 v
316.0713 445.0034 318.8213 447.5039 321.0713 446.8369 c
323.3213 446.1699 326.3213 444.6699 326.4043 444.4199 c
326.4873 444.1699 329.9873 440.0869 y
327.2373 435.5034 l
321.4043 433.5869 l
318.4053 437.5869 314.5713 439.0034 v
f327.4873 435.0869 m
330.9883 439.3369 332.0713 440.5869 v
333.1543 441.8369 336.6533 441.5864 337.7373 439.1699 c
338.8213 436.7534 338.2373 433.9199 y
337.9053 429.0869 336.5713 427.5034 v
335.2373 425.9199 332.7373 424.6699 331.4043 424.2534 c
330.0713 423.8369 331.1543 425.3369 y
333.8203 431.0869 327.4873 435.0869 v
f335.2373 416.9199 m
334.3213 414.4199 l
339.4873 413.2539 340.4043 411.5869 v
341.3213 409.9199 340.6543 409.0039 341.6543 408.5869 c
342.6543 408.1699 346.0713 406.8369 347.6543 409.2529 c
349.2373 411.6699 350.4053 413.0029 350.0713 414.5029 c
349.7373 416.0029 348.8213 417.8369 348.1543 418.0869 c
347.4873 418.3369 346.7383 418.8359 346.3213 418.9199 c
345.9043 419.0039 341.8213 419.1699 y
337.3203 418.7529 335.2373 416.9199 v
f320.4873 421.5034 m
317.8213 427.6699 308.1543 426.5034 v
306.9873 423.0034 l
311.8213 421.7539 314.6543 414.0869 v
317.4043 412.9199 319.1543 413.5029 v
320.9043 414.0869 321.2373 414.5029 y
323.4043 411.6699 l
325.7373 411.5859 327.6543 411.6699 v
329.5713 411.7529 333.4883 412.8369 334.5713 415.0029 c
335.6543 417.1699 336.5713 421.8364 332.4043 423.6699 c
328.2373 425.5034 322.8213 422.7529 322.3213 422.4199 c
321.8213 422.0869 320.4873 421.5034 y
f311.0713 438.6699 m
310.6553 441.1699 309.3213 442.9199 v
307.9873 444.6699 306.0713 443.7529 305.4043 442.4199 c
304.7373 441.0869 301.4043 433.5034 y
304.1543 432.7534 l
308.2383 438.0029 311.0713 438.6699 v
f302.0713 420.5034 m
295.8208 421.4199 l
291.4038 413.2529 l
291.3203 410.0029 293.1538 407.9199 v
294.9873 405.8369 297.1543 406.2529 298.9043 407.1699 c
300.6543 408.0869 303.2373 410.7529 303.2373 414.0029 c
303.2373 417.2529 302.0713 420.5034 y
f293.2373 407.5869 m
292.3203 409.2529 l
290.5703 412.7529 l
282.8203 400.0869 l
282.4873 394.5869 283.4873 393.0029 v
284.4873 391.4199 286.7373 390.7539 289.4038 392.3369 c
292.0703 393.9199 294.3203 398.5029 y
292.4038 400.9199 292.4038 403.2529 v
292.4038 405.5869 293.2373 407.5869 y
f293.1538 396.1699 m
291.2368 392.0859 285.8203 391.4199 v
280.4038 390.7529 287.8203 383.0029 y
291.9033 382.0029 292.3203 382.2529 v
292.7373 382.5029 294.4873 385.0029 y
294.4873 387.1699 l
293.4873 392.5029 293.7373 395.5029 v
293.1538 396.1699 l
f329.6543 388.8369 m
328.4512 386.4307 326.6543 384.1699 y
322.7373 382.3369 l
317.6543 379.5869 l
310.6543 381.0869 l
305.5713 386.0869 l
302.0713 390.1699 301.9043 393.0869 v
301.7373 396.0039 302.1543 398.3369 y
303.9873 400.8369 l
307.3213 398.8369 309.1543 398.5869 v
310.1543 398.2539 309.9043 397.5869 v
309.6543 396.9199 310.4043 392.5859 312.6543 390.6699 c
314.9043 388.7529 318.3213 388.3369 320.0713 390.2529 c
321.8213 392.1699 322.6543 396.5869 322.6543 397.7529 c
322.6543 398.9199 321.6543 402.3369 y
324.4043 406.2529 l
330.3213 403.5029 330.8213 403.4199 v
331.3213 403.3369 332.2373 403.3369 332.9043 402.3369 c
333.5713 401.3369 334.2373 397.0029 334.2373 395.7529 c
334.2373 394.5029 333.5713 393.5859 332.6543 393.4199 c
331.7373 393.2529 330.1543 393.4199 y
330.4043 390.3369 329.6543 388.8369 v
f*u
1 D
0.65 0.53 0.51 1 k
236.3252 580.2119 m
230.4639 580.2119 225.6953 575.4434 225.6953 569.582 C
225.6953 366.4238 L
225.6953 360.5625 230.4639 355.7939 236.3252 355.7939 C
354.4834 355.7939 L
360.3447 355.7939 365.1133 360.5625 365.1133 366.4238 C
365.1133 569.582 L
365.1133 575.4434 360.3447 580.2119 354.4834 580.2119 C
236.3252 580.2119 L
f0 D
227.1123 366.4238 m
227.1123 569.582 L
227.1123 574.6621 231.2451 578.7949 236.3252 578.7949 C
354.4834 578.7949 L
359.5635 578.7949 363.6953 574.6621 363.6953 569.582 C
363.6953 366.4238 L
363.6953 361.3438 359.5635 357.2119 354.4834 357.2119 C
236.3252 357.2119 L
231.2451 357.2119 227.1123 361.3438 227.1123 366.4238 C
f*U
*u
1 D
279.6958 541.3037 m
283.6367 457.2305 231.7095 391.4346 231.1846 390.7803 C
230.2695 389.6387 L
276.085 389.292 L
276.2998 389.5723 L
328.5264 457.665 323.1709 539.8989 323.1113 540.7217 C
323.0635 541.3682 L
279.6606 542.0576 L
279.6958 541.3037 L
f0 D
281.3267 532.1655 m
281.3267 534.9585 281.251 537.7798 281.1294 540.6167 C
282.5288 540.5942 320.4785 539.9917 321.7334 539.9717 C
321.7861 538.9419 321.876 536.6948 321.876 533.377 c
321.876 511.8931 318.0645 446.563 275.3828 390.7148 C
274.6978 390.7197 235.8052 391.0146 233.1646 391.0342 C
239.6782 399.6758 281.3267 457.8711 281.3267 532.1655 C
f*U
*u
1 D
244.5264 560.0444 m
239.063 559.7031 232.9316 555.5986 232.6733 555.4243 C
231.3091 554.502 L
232.9165 554.145 L
233.2988 554.0601 234.3071 553.5659 235.4751 552.9937 c
238.436 551.5425 243.3916 549.1133 249.5562 547.4849 c
257.708 545.3315 263.6089 548.875 264.9048 549.7544 C
267.3628 549.3125 270.0278 549.4019 272.562 550.707 C
271.9126 551.9668 L
267.0156 549.4443 261.3657 552.019 258.4351 553.7778 C
256.6235 555.0005 L
253.6035 557.1216 249.04 560.3262 244.5264 560.0444 c
f0 D
244.6143 558.6294 m
248.6323 558.8804 252.9512 555.8477 255.8091 553.8408 C
257.7056 552.562 L
259.0181 551.7749 260.8667 550.8794 262.937 550.2505 C
260.7168 549.0874 255.9575 547.2598 249.9185 548.855 c
243.8892 550.4478 239.0127 552.8384 236.0986 554.2661 c
235.4995 554.5601 235.0522 554.7744 234.6318 554.9702 C
236.6289 556.1504 240.8691 558.396 244.6143 558.6294 C
f*U
255.2446 571.1938 m
253.73 570.8442 L
254.9868 569.9302 L
258.2236 567.5762 258.8325 566.1255 259.8418 563.7212 c
260.4839 562.1914 261.2832 560.2876 262.9717 557.624 c
267.4761 550.5205 273.5225 550.7813 273.7778 550.7959 C
273.6997 552.2109 L
273.4771 552.2002 268.2065 552.0146 264.1689 558.3828 c
262.5439 560.9458 261.77 562.7886 261.1484 564.27 c
260.2334 566.4502 259.5723 567.999 257.1592 570.0283 C
259.7983 570.229 265.1357 569.936 268.8403 565.0737 C
269.9673 565.9331 L
264.4209 573.2124 255.3354 571.2148 255.2446 571.1938 C
f*u
1 D
271.8804 579.1055 m
271.5054 579.2749 271.0918 579.4619 Y
270.9595 579.1694 267.8564 572.2036 268.5313 564.4419 c
269.2085 556.6514 273.1816 551.605 273.3506 551.394 C
273.7456 550.9004 L
274.2808 551.2368 L
274.5337 551.396 280.4668 555.2598 279.6104 566.3911 c
278.7505 577.5688 272.3926 579.7563 272.1226 579.8442 C
272.0005 579.4712 271.8804 579.1055 V
f0 D
269.9434 564.5649 m
269.8823 565.2671 269.8545 565.9648 269.8545 566.6519 c
269.8545 572.0244 271.5249 576.7261 272.1426 578.2861 C
273.4995 577.6113 277.5332 574.9116 278.1973 566.2827 c
278.252 565.5688 278.2778 564.8882 278.2778 564.2397 c
278.2778 557.1709 275.2749 553.9019 274.0508 552.855 C
273.061 554.3037 270.4619 558.5996 269.9434 564.5649 C
f*U
244.4805 559.8965 m
245.6602 559.1104 L
249.9697 565.5757 260.5767 562.1982 260.6831 562.1636 C
261.125 563.5103 L
260.6479 563.6665 249.3896 567.2603 244.4805 559.8965 C
f237.7368 548.4624 m
235.3091 547.1675 232.6812 546.1768 232.6548 546.167 C
230.6436 545.4121 L
238.5337 543.1582 L
239.3711 542.9033 L
241.8008 542.1606 246.8564 540.6152 248.6787 540.4639 C
248.7959 541.876 L
247.1255 542.0151 241.9819 543.5874 239.7852 544.2588 C
238.9409 544.5156 L
236.8003 545.1274 235.0684 545.6221 V
236.0269 546.0352 237.2236 546.582 238.4038 547.2114 c
240.8462 548.5142 243.1597 549.5088 243.1831 549.5186 C
242.625 550.8213 L
242.6011 550.811 240.2344 549.7944 237.7368 548.4624 c
f264.8022 543.1187 m
262.9028 542.0332 260.561 541.1812 258.0811 540.2793 c
254.3975 538.9395 250.6655 537.5005 247.8052 535.1821 C
247.9805 536.3779 248.3037 538.0488 248.9063 539.769 c
250.0249 542.9653 252.9497 547.0483 252.979 547.0894 C
251.8286 547.9175 L
251.7036 547.7437 248.7559 543.6289 247.5684 540.2378 c
246.3818 536.8472 246.2031 533.6743 246.1963 533.5405 C
246.0952 531.6196 L
247.4185 533.0161 L
250.1304 535.8789 254.4185 537.439 258.5659 538.9473 c
261.104 539.8706 263.501 540.7427 265.5054 541.8882 c
270.9189 544.9814 272.9844 550.5269 273.0698 550.7612 C
271.7383 551.2466 L
271.7188 551.1938 269.752 545.9473 264.8022 543.1187 c
f276.1035 574.9868 m
277.3711 574.353 L
277.3867 574.3843 278.9756 577.5239 280.9414 578.7334 C
280.1992 579.9404 L
277.8862 578.5181 276.1753 575.1304 276.1035 574.9868 C
f281.0449 579.0186 m
281.0566 578.9658 282.1953 573.7251 282.1953 570.8369 C
282.2813 569.2466 L
282.5591 565.5449 283.0244 559.3496 276.3672 555.2744 C
277.1074 554.0654 L
284.5024 558.5928 283.9766 565.5923 283.6943 569.353 C
283.6123 570.8369 L
283.6123 573.8784 282.478 579.1006 282.4297 579.3213 C
281.0449 579.0186 L
f293.6973 579.4482 m
293.7036 579.3657 294.2847 571.1367 290.0034 565.4287 c
285.7402 559.7446 280.6558 558.7095 280.605 558.6997 C
280.8677 557.3071 L
281.0967 557.3496 286.5249 558.4282 291.1372 564.5781 c
295.7446 570.7217 295.1382 579.2007 295.1104 579.5591 C
293.6973 579.4482 L
f282.2329 571.0659 m
283.5742 570.6079 L
285.7505 576.981 290.2529 578.4331 290.4434 578.4917 C
290.0337 579.8486 L
289.8154 579.7832 284.6567 578.1626 282.2329 571.0659 C
f293.4048 574.2476 m
294.7339 573.7549 L
294.8052 573.9414 296.5801 578.3311 304.9434 578.7959 C
304.8652 580.2109 L
295.5063 579.6909 293.4863 574.4692 293.4048 574.2476 C
f299.5898 566.8564 m
293.2432 560.9751 288.3452 558.7598 285.4253 560.4502 C
284.7153 559.2236 L
288.2783 557.1611 293.6064 559.3794 300.5527 565.8169 c
307.4883 572.2456 308.5625 578.9497 308.6055 579.2319 C
307.2041 579.4434 L
307.1934 579.3789 306.1396 572.9272 299.5898 566.8564 c
f305.7715 574.6992 m
306.0371 573.3071 L
311.2939 574.314 316.127 574.0142 318.6348 573.729 C
317.7266 573.0669 316.5293 572.1445 314.9619 570.8901 c
314.4336 570.4683 313.9639 569.7026 313.3145 568.6431 c
311.6191 565.8799 309.0586 561.7036 303.4268 560.5308 c
295.6646 558.9136 289.0913 560.0234 289.0259 560.0352 C
288.7817 558.6387 L
289.0596 558.5903 295.6753 557.4683 303.7158 559.1431 c
309.9463 560.4409 312.8105 565.1118 314.5225 567.9019 c
315.0537 568.7681 315.5127 569.5161 315.8467 569.7837 c
319.2383 572.4976 320.4609 573.3223 320.8887 573.5361 C
322.75 574.4668 L
320.707 574.8657 L
320.4229 574.9209 313.6484 576.208 305.7715 574.6992 C
f314.0713 567.4614 m
317.9336 567.4614 320.5283 566.0122 322.8184 564.7339 C
324.4199 563.8696 L
325.6982 563.2305 326.9727 562.5938 V
325.4961 562.5513 323.6641 562.4111 321.7656 562.0317 c
320.3047 561.7397 318.4619 561.1216 316.3271 560.4058 c
312.2139 559.0264 307.0947 557.3096 301.6807 556.8765 c
293.8228 556.2476 290.5874 559.1572 290.5552 559.1865 C
289.582 558.1563 L
289.7275 558.0181 293.2422 554.7793 301.7939 555.4634 c
307.3809 555.9106 312.5918 557.6582 316.7783 559.062 c
318.8672 559.7627 320.6709 560.3677 322.043 560.6421 c
326.0566 561.4443 329.9736 561.1338 330.0127 561.1309 C
330.3877 562.4707 L
325.0547 565.1372 L
323.5098 565.9712 L
321.1895 567.2666 318.3018 568.8784 314.0713 568.8784 C
314.0713 567.4614 L
f316.207 558.8228 m
321.2324 557.3677 324.0811 554.7319 325.9658 552.9878 C
327.123 551.9546 L
327.9063 551.3135 328.6406 550.6201 329.2441 550.0269 C
328.1094 550.1177 326.9551 550.2104 Y
323.7871 550.1567 L
319.5107 549.9917 312.3535 549.7163 306.5801 551.1899 c
299.1064 553.0981 296.147 556.5854 296.1177 556.6206 C
295.0225 555.7212 L
295.1509 555.564 298.2617 551.8511 306.2285 549.8169 c
312.2012 548.292 319.4883 548.5728 323.8418 548.7402 C
326.8535 548.7964 L
332.793 548.3213 L
331.5957 549.6465 L
331.5264 549.7231 329.873 551.5361 328.0195 553.0518 C
326.9287 554.0278 L
324.9453 555.8628 321.9482 558.6362 316.6016 560.1841 C
316.207 558.8228 L
f271.7788 550.8784 m
273.4038 551.5454 273.9038 551.8369 v
274.4038 552.1284 276.7788 555.0034 y
279.0703 556.5034 279.9038 557.2534 v
280.7373 558.0034 281.7788 558.3784 282.4038 558.6284 c
284.0288 559.6284 l
285.5288 559.7534 286.1538 559.3784 v
286.7788 559.0034 289.4038 559.1284 290.0288 559.2534 c
290.6538 559.3784 291.5288 558.8784 y
291.2788 557.7534 l
295.0288 556.5034 l
296.2788 555.2534 l
291.1538 550.0034 286.7788 548.6284 v
282.4038 547.2534 280.7788 547.5034 279.0288 548.1284 c
277.2788 548.7534 271.6538 549.0034 y
271.7788 550.8784 l
f301.3398 433.8755 m
301.4648 432.4639 L
301.5967 432.4746 304.7178 432.686 306.6201 429.3213 c
307.4688 427.8198 307.5371 426.1401 306.8115 424.5918 c
306.0674 423.0044 304.5859 421.8325 302.9443 421.5342 c
299.5254 420.9121 296.189 422.1533 296.1558 422.166 C
295.6519 420.8413 L
295.8022 420.7837 299.3809 419.4453 303.1982 420.1396 c
305.2832 420.519 307.1592 421.9946 308.0947 423.9902 c
309.0068 425.9375 308.9189 428.1348 307.8545 430.0186 c
305.4893 434.2021 301.5088 433.8911 301.3398 433.8755 C
f301.1318 420.1353 m
301.1494 420.1069 302.8398 417.2666 302.5313 413.5615 c
302.2168 409.7861 298.4248 406.915 296.6221 407.0439 c
295.5923 407.1172 294.1992 408.0537 293.2329 409.3213 c
292.6685 410.0635 291.7695 411.5527 292.0986 413.1973 C
290.709 413.4756 L
290.3843 411.8516 290.8804 410.0713 292.106 408.4629 c
293.3384 406.8447 295.0713 405.7334 296.5205 405.6299 c
299.3984 405.4248 303.5947 409.25 303.9434 413.4443 c
304.292 417.627 302.4219 420.7422 302.3418 420.873 C
301.1318 420.1353 L
f301.5293 409.4023 m
301.5488 409.3896 303.2607 408.2246 303.2607 404.1416 c
303.2607 403.7051 303.2412 403.2354 303.1982 402.7305 c
302.7813 397.8633 298.873 397.1416 298.2783 397.0586 C
297.7188 397.208 294.2373 398.2588 293.4248 401.5088 c
293.2114 402.3623 293.1294 403.1523 293.1294 403.8604 c
293.1294 406.165 293.9946 407.6113 294.0063 407.6299 C
292.8027 408.3789 L
292.7285 408.2598 290.9888 405.4082 292.0498 401.165 c
293.1436 396.79 297.8828 395.6895 298.084 395.6445 C
298.1934 395.6201 L
298.3057 395.6309 L
298.3633 395.6367 304.0664 396.2607 304.6104 402.6094 c
305.1416 408.8115 302.3867 410.54 302.2686 410.6104 C
301.5293 409.4023 L
f306.6523 422.3413 m
306.6973 422.3237 311.2383 420.5391 313.2539 415.8877 c
315.5342 410.627 312.6582 408.2461 312.6289 408.2236 C
311.8076 407.8037 305.417 408.1865 303.5273 411.6738 C
302.2813 410.999 L
303.7197 408.3447 306.9307 407.3408 308.7168 406.9785 c
310.5498 406.6064 312.7861 406.5352 313.5137 407.1162 c
314.8203 408.1602 316.7197 411.4551 314.5547 416.4512 c
312.2949 421.6665 307.3643 423.5869 307.1553 423.666 C
306.6523 422.3413 L
f308.0654 427.1909 m
308.4082 425.8159 L
308.4707 425.8311 314.7119 427.3091 318.5342 422.8745 c
320.9102 420.1182 321.2578 418.0234 321.1309 416.75 c
321.0332 415.7656 320.5986 414.8857 319.9688 414.3955 c
318.8281 413.5088 315.7139 414.3115 314.9355 414.7773 C
314.207 413.5615 L
315.127 413.0098 318.9951 411.8418 320.8398 413.2773 c
321.7832 414.0117 322.4043 415.2266 322.542 416.6094 c
322.6953 418.1582 322.3115 420.6626 319.6084 423.7993 c
315.208 428.9053 308.3555 427.2632 308.0654 427.1909 C
f311.0508 439.3535 m
307.1729 438.2959 303.79 433.2764 303.6475 433.063 C
304.8271 432.2769 L
304.8584 432.3242 308.0586 437.0688 311.4238 437.9863 c
313.085 438.4395 315.4795 437.8696 317.5225 436.5347 c
319.4941 435.2466 320.7754 433.4966 321.0361 431.7329 c
321.6104 427.8608 317.0176 426.0742 316.8213 426 C
317.3203 424.6733 L
319.3496 425.4346 323.0322 427.9331 322.4385 431.9409 c
322.1172 434.1045 320.6084 436.2114 318.2979 437.7212 c
315.8936 439.2915 313.1172 439.917 311.0508 439.3535 c
f282.3628 399.96 m
282.377 399.7285 282.7202 394.2676 283.9585 392.1465 c
284.4761 391.2578 285.5454 390.7637 286.8179 390.8223 c
289.1431 390.9307 292.4819 392.8828 294.8799 398.0381 C
293.5947 398.6357 L
291.4614 394.0488 288.5752 392.3232 286.7524 392.2383 c
286.0166 392.2041 285.4297 392.4365 285.1821 392.8604 c
284.2959 394.3799 283.8677 398.5625 283.7778 400.0459 C
282.3628 399.96 L
f312.4111 407.4111 m
313.3252 405.0752 313.3115 402.4111 312.377 400.7813 c
311.9131 399.9717 311.2686 399.4971 310.4609 399.3691 c
307.6514 398.9258 304.0586 401.8535 304.0225 401.8838 C
303.1201 400.79 L
303.2861 400.6523 307.2402 397.4258 310.6816 397.9697 c
311.917 398.165 312.9287 398.8936 313.6064 400.0762 c
314.7607 402.0898 314.8096 405.1719 313.7314 407.9277 C
312.4111 407.4111 L
f320.4619 413.6836 m
320.6064 413.6221 323.9902 412.1299 323.6973 407.8857 c
323.5391 405.582 322.9346 404.0371 321.9502 403.4189 c
321.1943 402.9443 320.1455 402.9697 318.835 403.4941 c
315.8301 404.6963 314.2441 408.5615 314.2285 408.6006 C
312.9131 408.0732 L
312.9863 407.8916 314.7344 403.6084 318.3076 402.1787 c
320.0635 401.4766 321.543 401.4902 322.7031 402.2188 c
324.1074 403.1006 324.917 404.9736 325.1113 407.7881 c
325.4746 413.0674 321.0547 414.9717 321.0098 414.9912 C
320.4619 413.6836 L
f304.4521 442.6812 m
305.6875 441.9868 L
305.7148 442.0337 306.3691 443.1284 307.9043 443.1284 c
308.2832 443.1284 308.6621 442.7959 308.9121 442.5171 c
309.9717 441.3394 310.584 439.2095 310.54 438.7964 C
311.9326 438.5313 L
312.1104 439.4258 311.2656 441.8896 310.124 443.2813 c
309.4355 444.1201 308.6895 444.5454 307.9043 444.5454 c
305.5146 444.5454 304.4941 442.7573 304.4521 442.6812 C
f306.7529 447.5205 m
307.7217 446.4858 L
308.3965 447.1162 310.5059 448.7012 312.1367 448.4683 c
312.4766 448.4199 313.0303 447.9756 313.5654 446.8735 c
314.6523 444.6338 315.0703 440.9453 313.958 439.0249 C
315.1846 438.3149 L
316.5664 440.7002 316.082 444.936 314.8398 447.4927 c
314.1504 448.9136 313.2842 449.7363 312.3379 449.8716 c
309.6973 450.248 306.8711 447.6318 306.7529 447.5205 C
f321.1221 434.1533 m
321.6865 432.8535 L
322.7158 433.3008 325.7197 434.4614 327.2373 434.4614 c
327.7188 434.4614 328.9004 433.5371 329.8652 431.8018 c
330.4063 430.8296 332.0244 427.4204 330.1348 424.377 C
331.3398 423.6299 L
332.8896 426.127 332.8008 429.4395 331.1035 432.4907 c
330.166 434.1772 328.6064 435.8784 327.2373 435.8784 c
325.1143 435.8784 321.2842 434.2236 321.1221 434.1533 C
f327.4551 425.0361 m
324.3623 424.5205 320.3818 422.2134 320.2139 422.1157 C
320.9287 420.8911 L
320.9668 420.9141 324.8535 423.1655 327.6875 423.6377 c
329.374 423.9189 331.5684 423.2544 333.0234 422.0215 c
333.7861 421.375 334.6953 420.269 334.6953 418.6699 c
334.6953 415.1074 331.3682 412.5049 328.9834 412.2061 c
326.4639 411.8916 323.8936 412.3604 323.8672 412.3662 C
323.6064 410.9727 L
323.7197 410.9521 326.4141 410.457 329.1592 410.7998 c
332.001 411.1553 336.1133 414.1621 336.1133 418.6699 c
336.1133 420.3652 335.3613 421.8984 333.9395 423.103 c
332.1611 424.6094 329.5557 425.3862 327.4551 425.0361 c
f333.5146 413.4629 m
333.5537 413.46 337.4834 413.1221 339.6104 411.2988 c
340.3389 410.6738 340.5459 409.4844 340.1504 408.1953 c
339.6094 406.4287 337.8818 404.4092 334.6572 404.041 c
329.2041 403.417 325.0566 406.6885 325.0156 406.7217 C
324.126 405.6182 L
324.3125 405.4678 328.7598 401.9395 334.8174 402.6328 c
338.7227 403.0791 340.833 405.584 341.5059 407.7793 c
342.0684 409.6162 341.6963 411.377 340.5322 412.375 c
338.0527 414.5 333.8076 414.8613 333.6279 414.876 C
333.5146 413.4629 L
f320.9072 402.2568 m
322.4844 397.999 322.1836 392.9512 320.2363 391.0039 c
319.2451 390.0137 317.915 389.5059 316.5869 389.6094 c
315.1006 389.7266 313.7373 390.583 312.6445 392.0859 c
310.1758 395.4814 310.2773 398.4395 310.2793 398.4688 C
308.8633 398.54 L
308.8564 398.4004 308.7168 395.0781 311.498 391.2529 c
313.1963 388.917 315.1426 388.3018 316.4756 388.1973 c
318.2178 388.0596 319.9541 388.7178 321.2383 390.002 c
323.5791 392.3418 324.0166 397.9414 322.2354 402.749 C
320.9072 402.2568 L
f303.6855 387.5576 m
305.8252 384.9092 308.1934 385.1191 309.415 385.4805 c
311.5869 386.1221 313.3896 388.1777 313.6094 390.2627 C
312.1992 390.4111 L
312.0391 388.8887 310.6396 387.3203 309.0127 386.8389 c
307.9355 386.5205 306.3291 386.542 304.7891 388.4482 c
301.5518 392.4561 302.751 398.127 302.7637 398.1836 C
301.3799 398.4902 L
301.3223 398.2314 300.0137 392.1045 303.6855 387.5576 c
f293.5513 387.3262 m
294.1904 384.8496 296.0581 383.3115 298.4248 383.3115 c
301.1221 383.3115 303.5205 385.3047 304.2578 388.1592 C
302.8848 388.5137 L
302.2139 385.9131 300.1025 384.7285 298.4248 384.7285 c
296.71 384.7285 295.4004 385.832 294.9233 387.6807 c
293.6528 392.6035 294.585 396.8027 294.5942 396.8447 C
293.2134 397.1621 L
293.1709 396.9785 292.1899 392.5996 293.5513 387.3262 c
f285.0376 391.5566 m
285.1445 390.8984 286.1421 385.0771 288.2837 383.292 c
289.9834 381.875 292.4741 382.8809 295.1147 386.0498 C
294.0259 386.957 L
293.4834 386.3057 290.7007 383.123 289.1909 384.3809 c
287.7192 385.6074 286.7036 390.1406 286.437 391.7832 C
285.0376 391.5566 L
f332.0742 402.5869 m
332.6514 401.0537 333.9141 396.6885 332.835 394.9199 c
332.5762 394.4971 332.2021 394.2705 331.6563 394.207 c
327.751 393.7568 323.1563 399.0762 323.1104 399.1299 C
322.0322 398.21 L
322.2393 397.9668 327.1631 392.2617 331.8184 392.7988 c
332.792 392.9111 333.5615 393.3896 334.0449 394.1826 c
335.6758 396.8574 333.6377 402.457 333.4004 403.0869 C
332.0742 402.5869 L
f329.1992 393.2627 m
329.5391 390.042 328.8145 387.3662 327.2119 385.9209 c
326.3301 385.125 325.2666 384.8086 324.2178 385.0303 c
321.5635 385.5889 320.7773 389.9141 320.7695 389.958 C
319.373 389.7158 L
319.4102 389.499 320.3301 384.4004 323.9248 383.6436 c
325.4297 383.3262 326.9336 383.7617 328.1611 384.8682 c
330.1035 386.6211 330.9961 389.7344 330.6094 393.4111 C
329.1992 393.2627 L
f309.0508 386.1592 m
309.5615 384.1816 311.5869 380.4805 315.5977 380.6289 c
319.6084 380.7773 321.2793 384.2363 321.6016 386.0449 C
320.207 386.2959 L
320.1758 386.1279 319.4063 382.1875 315.5449 382.0449 c
311.6787 381.9014 310.4727 386.3271 310.4229 386.5146 C
309.0508 386.1592 L
f322.042 446.3779 m
317.7266 446.1978 315.0879 442.2261 314.9775 442.0571 C
316.1641 441.2817 L
316.1875 441.3169 318.5244 444.8125 322.1006 444.9619 c
323.3926 445.0156 324.5762 444.3994 325.4346 443.2271 c
326.8682 441.2686 327.1123 438.2739 326.0713 435.4121 C
327.4033 434.9277 L
328.6035 438.2285 328.2871 441.729 326.5781 444.064 c
325.4316 445.6304 323.8203 446.4521 322.042 446.3779 c
f332.7217 441.0215 m
330.0498 440.3096 326.9971 436.0601 326.6582 435.5776 C
327.8164 434.7622 L
328.6572 435.9556 331.2432 439.1606 333.0869 439.6523 c
333.9775 439.8896 335.2773 439.8213 336.2568 438.9185 c
337.1641 438.0815 338.0938 436.2534 337.374 432.2969 c
336.1563 425.6021 331.3525 424.8999 331.1484 424.873 C
331.3223 423.4663 L
331.5684 423.4961 337.3574 424.2856 338.7686 432.043 c
339.6035 436.6338 338.3857 438.8823 337.2178 439.9604 c
335.8164 441.2529 333.9766 441.356 332.7217 441.0215 c
f334.9336 417.4775 m
335.541 416.1963 L
337.2383 417 342.167 418.9473 344.5566 418.3184 c
347.3389 417.5859 348.292 414.1406 347.8838 412.5088 c
347.7305 411.8945 346.958 411.1221 345.8691 410.4932 c
344.3721 409.6289 342.6162 409.2275 341.5986 409.5176 C
341.21 408.1553 L
342.9111 407.6689 345.165 408.4502 346.5781 409.2656 c
347.4316 409.7588 348.915 410.791 349.2588 412.165 c
349.8545 414.5488 348.4268 418.7656 344.918 419.6895 c
341.5391 420.5776 335.2021 417.6045 334.9336 417.4775 C
f341.7061 408.2295 m
341.7373 408.2109 344.8486 406.3027 346.0752 403.084 c
346.5381 401.8701 346.9385 400.1729 346.2178 398.9814 c
345.6904 398.1084 344.6035 397.5674 342.9873 397.373 c
339.2314 396.9229 335.7783 399.4629 333.9619 401.7744 C
332.8467 400.8984 L
334.8906 398.2979 338.8164 395.4453 343.1553 395.9658 c
345.2275 396.2148 346.666 396.9824 347.4307 398.248 c
348.2461 399.5977 348.2363 401.3945 347.3994 403.5889 c
345.9941 407.2754 342.5811 409.3574 342.4355 409.4443 C
341.7061 408.2295 L
f335.4863 427.666 m
335.9883 426.3403 L
336.0322 426.3574 340.4902 427.9971 343.2979 425.7808 c
344.1895 425.0771 344.5576 424.1851 344.3926 423.1294 c
344.1543 421.6035 342.8994 420.2168 342.3223 420.0005 C
342.8203 418.6738 L
343.8457 419.0576 345.4727 420.856 345.793 422.9111 c
345.9648 424.0103 345.8232 425.5928 344.1768 426.8931 c
340.7344 429.6108 335.6982 427.7466 335.4863 427.666 C
f279.8887 547.9756 m
280.1074 547.209 279.9888 543.3169 279.8628 541.0425 C
281.2778 540.9644 L
281.3345 541.9858 281.6001 547.1445 281.252 548.3643 C
279.8887 547.9756 L
f283.209 548.6978 m
283.4644 547.4219 283.0483 543.1313 282.8667 541.5864 C
284.2739 541.4204 L
284.3438 542.0122 284.9443 547.249 284.5986 548.9761 C
283.209 548.6978 L
f322.5713 535.0034 m
327.5703 538.0039 336.2373 537.3369 v
344.9043 536.6699 346.9033 531.3369 346.7373 530.0034 c
359.0713 529.6699 361.4043 522.1699 v
363.7373 514.6699 358.5703 506.0034 349.2373 502.5034 c
339.9043 499.0034 334.2373 501.6699 y
331.4053 493.8369 319.0713 491.8369 v
323.0713 515.8369 322.5713 535.0034 v
f316.5713 480.1699 m
324.7373 484.5034 326.5713 485.6699 v
328.4053 486.8364 336.5713 489.1699 341.9043 485.1699 c
347.2373 481.1699 348.5713 475.1699 347.9043 472.1699 c
352.4053 470.3369 355.5713 464.5034 v
358.7373 458.6699 356.0713 451.3369 351.9043 446.5034 c
351.7373 435.5029 338.4043 433.1699 v
339.5703 437.0034 336.7373 439.5034 v
333.9043 442.0034 330.0713 439.6704 327.5713 435.8369 c
327.4043 436.8369 327.4043 437.5034 v
327.4043 438.1699 328.0713 442.5034 325.0713 445.0034 c
322.0713 447.5034 316.2373 442.6699 315.9043 442.1699 c
315.5713 441.6699 315.5703 443.3369 315.2373 444.3369 c
314.9043 445.3369 315.1162 448.1221 312.2373 449.1699 c
310.4043 449.8369 307.2373 447.6699 y
312.5713 464.6699 l
316.5713 480.1699 l
f338.0713 431.3369 m
346.9053 433.8369 353.5713 431.8369 v
360.2373 429.8369 363.2383 423.5039 363.5713 420.8369 c
363.9043 418.1699 361.7373 418.0039 362.2373 416.0029 c
362.7373 414.0029 364.2383 412.5039 364.0713 410.3369 c
364.2373 397.8369 l
362.9043 395.0029 355.9043 395.5029 v
358.0713 388.1699 351.9043 383.0029 v
345.7373 377.8369 334.7383 379.3369 330.5713 393.0029 c
334.9053 392.0029 333.5713 400.1699 v
336.7373 396.5029 341.7373 396.5029 v
346.7373 396.5029 348.2373 399.5039 346.7373 403.3369 c
345.2373 407.1699 343.7373 407.5029 y
342.9053 408.5029 344.5713 409.0029 v
346.2373 409.5029 349.4053 410.6699 348.5713 414.8369 c
347.7373 419.0039 344.0713 419.3369 341.0713 418.8369 c
345.7373 420.0039 345.2373 423.8369 v
344.7373 427.6699 340.2373 428.0039 336.7373 427.3369 c
336.7373 428.3364 337.2373 429.1699 v
337.7373 430.0034 338.0713 431.3369 y
f327.7373 385.3369 m
325.4043 382.3369 321.9043 385.3369 v
321.4033 386.6699 320.7373 385.1699 v
320.0713 383.6699 318.5713 381.6699 315.5713 381.3369 c
312.5713 381.0029 310.2373 384.6699 y
309.9033 386.3359 309.2373 386.1699 v
308.5713 386.0029 305.7373 385.8369 304.2373 388.0029 c
303.5713 387.8369 303.0713 387.0029 v
302.5713 386.1699 301.0713 384.5029 298.9043 384.1699 c
296.7373 383.8369 294.9038 385.8369 y
293.7373 385.8359 293.2373 385.1699 v
292.7373 384.5029 291.4043 383.1699 289.7373 383.3369 c
288.0703 383.5029 286.4038 386.3369 285.9038 391.0029 c
285.0703 392.1699 284.5703 392.5029 v
284.0703 392.8369 283.2373 398.3369 y
283.0703 399.6699 282.0703 398.6699 v
281.0703 397.6699 275.7373 390.0029 y
257.7373 389.8369 l
257.2373 383.5029 260.2373 376.1699 v
263.2373 368.8359 272.2373 367.5029 y
271.7373 358.8359 280.2373 357.5029 v
288.7373 356.1699 291.7373 362.0029 y
293.9028 356.6689 301.7373 356.3359 v
309.5713 356.0029 312.0713 356.3359 y
316.4033 358.6689 318.2373 364.3359 v
325.0703 357.1689 333.2373 363.3359 v
341.4043 369.5029 330.9033 383.5039 327.7373 385.3369 c
f276.7373 492.5034 m
268.9038 507.0029 253.4038 502.6699 v
251.2368 510.8364 241.5703 513.6699 v
231.9038 516.5034 226.7368 509.5029 226.5703 507.6699 c
226.4038 501.0034 l
225.9043 498.0029 231.2373 495.1699 v
232.9043 493.5039 231.7373 492.3369 v
230.5703 491.1699 227.5703 490.0039 226.5703 482.3369 c
225.5703 474.6699 228.2373 467.0039 234.9038 463.3369 c
241.5703 459.6699 252.0703 461.8369 y
254.0703 452.1699 262.5703 445.6699 v
274.9043 475.5034 276.7373 492.5034 v
fu*u
1 D
321.0293 520.8784 m
319.6543 522.2534 317.4043 523.8784 Y
315.5293 525.5034 315.0293 525.8784 v
314.5293 526.2534 313.4043 525.6284 313.7793 524.8784 c
314.1543 524.1284 314.5293 523.2534 314.5293 522.2534 c
314.5293 521.2534 313.6543 513.5034 311.6543 511.7534 c
309.6543 510.0034 307.0293 510.5034 Y
305.083 510.3486 303.6475 510.4058 V
303.9277 511.2515 304.126 511.8989 304.1543 512.1284 c
304.2793 513.1284 307.9043 514.2534 Y
309.2793 514.3784 309.5293 515.8784 v
309.7793 517.3784 309.7793 518.5034 Y
310.1543 519.0034 309.0293 519.3784 v
307.9043 519.7534 307.1543 520.2534 Y
306.5293 524.5034 306.4043 525.0034 v
306.2793 525.5034 306.7793 525.2534 305.4043 526.1284 c
304.0293 527.0034 303.1543 527.8784 302.2793 528.3784 c
301.4043 528.8784 299.5293 528.8784 299.7793 528.0034 c
300.0293 527.1284 300.1543 526.0034 Y
301.5293 522.6284 300.9043 521.8784 V
296.4038 524.1284 295.4038 525.0034 v
294.4038 525.8784 293.4038 526.3784 292.7788 526.0034 c
292.1538 525.6284 292.1538 524.6284 292.7788 523.2534 c
293.4038 521.8784 294.5288 519.6284 294.4038 519.2534 c
294.2788 518.8784 298.9043 516.6284 Y
294.4038 514.5034 291.0288 513.8784 v
287.6538 513.2534 286.1538 513.0034 285.5288 512.8784 c
284.9038 512.7534 285.0288 512.3784 285.4038 511.7534 c
285.7788 511.1284 287.1538 509.2534 Y
287.0288 509.1284 288.1538 509.0034 v
289.2788 508.8784 293.5288 509.0034 294.5288 509.1284 c
295.5288 509.2534 296.7793 509.7534 Y
297.1543 506.0034 296.1538 504.6284 v
295.1538 503.2534 295.2788 501.6284 296.6543 501.1284 c
298.0293 500.6284 300.0293 501.0034 300.4043 501.3784 c
300.7793 501.7534 300.7793 502.3784 Y
302.0273 505.7393 303.0068 508.5337 V
303.6816 507.6992 304.2793 506.8784 Y
305.5293 506.8784 306.2793 506.8784 v
307.0293 506.8784 309.1543 507.2534 309.2793 506.6284 c
309.4043 506.0034 307.5293 502.6284 303.5293 500.5034 c
299.5293 498.3784 298.9043 498.2534 295.6538 497.5034 c
292.4038 496.7534 287.6538 494.7534 285.7788 490.7534 c
284.0112 486.9829 285.9116 481.5498 290.3228 479.4727 C
288.5703 479.0796 286.5854 478.4692 284.6538 477.5034 c
280.6538 475.5034 276.5288 472.2534 275.7788 469.5034 c
275.0288 466.7534 276.5288 463.2534 Y
271.7788 459.8784 271.1538 456.0034 v
270.3555 451.0532 272.6538 448.1284 276.6538 447.3784 c
280.6538 446.6284 283.4038 446.2534 285.2788 447.3784 c
287.1538 448.5034 288.6538 452.8784 288.7788 454.0034 c
288.9038 455.1284 288.5288 455.5034 287.5288 455.0034 c
286.5288 454.5034 285.7788 452.8784 282.2788 452.6284 c
278.7788 452.3784 276.5288 452.8784 276.1538 453.2534 c
275.7788 453.6284 276.5288 456.6284 277.0288 457.6284 c
277.5288 458.6284 278.0288 459.8784 279.4038 459.7534 c
280.7788 459.6284 282.1538 459.2534 284.9038 460.0034 c
287.6538 460.7534 288.4038 462.0034 288.2788 462.3784 c
288.1538 462.7534 287.5288 463.8784 286.6538 463.7534 c
285.7788 463.6284 282.1538 463.8784 280.5288 464.0034 c
278.9038 464.1284 277.5288 465.8784 279.5288 469.1284 c
281.5288 472.3784 285.0288 475.7534 289.4038 477.3784 c
290.8633 477.9204 292.3472 478.3213 293.6816 478.6177 C
298.1064 478.2837 302.7939 480.7744 304.1543 485.3784 c
305.3994 489.5928 303.3438 493.0659 301.6953 494.7441 C
303.6475 495.4741 305.708 496.4419 307.9043 498.0034 c
313.5293 502.0034 315.9043 507.5034 317.4043 510.7534 c
318.9043 514.0034 320.6543 517.7534 321.0293 518.3784 c
321.4043 519.0034 322.4043 519.5034 321.0293 520.8784 c
f0 D
299.2793 489.8784 m
299.7793 486.3784 296.6543 483.5034 293.1538 484.0034 c
289.6538 484.5034 289.0288 489.6284 293.2788 491.7534 c
294.6802 492.4541 296.1372 492.937 297.6602 493.4136 C
298.3516 492.6299 299.0508 491.4785 299.2793 489.8784 c
f*U
*u
1 D
295.5288 464.0034 m
294.7788 464.5034 292.4038 466.6284 Y
291.1538 467.3784 290.6538 467.7534 v
290.1538 468.1284 289.0288 467.5034 289.4038 466.6284 c
289.7788 465.7534 290.4038 463.5034 290.4038 461.8784 c
290.4038 460.2534 288.2788 448.7534 286.7788 443.1284 c
286.1938 440.9351 285.4146 438.3979 284.4937 435.7871 C
281.1909 435.5063 277.0068 435.2534 274.6538 435.2534 c
271.1538 435.2534 267.1538 430.5034 270.2788 424.0034 c
271.7427 420.959 273.0981 418.7324 274.8384 417.249 C
273.5854 415.6172 272.4316 414.3418 271.2788 413.1279 c
268.9038 410.6279 267.6538 407.0029 267.0288 404.7529 c
266.4038 402.5029 266.2788 402.2529 267.6538 402.5029 c
269.0288 402.7529 270.1538 403.2529 270.2788 404.1279 c
270.4038 405.0029 271.2788 408.5029 273.9038 411.7529 c
274.7676 412.8223 275.8501 414.248 277.0269 415.8789 C
278.1978 415.3682 279.5405 415.0752 281.1538 415.0029 c
286.7788 414.7529 292.0288 416.5029 292.7788 417.2529 c
293.5288 418.0039 293.4038 419.8789 292.1538 421.1284 c
290.9038 422.3784 289.0288 423.2534 286.9038 422.8784 c
285.5474 422.6392 283.6255 422.2505 281.311 422.1606 C
282.4023 423.8564 283.4614 425.5859 284.4038 427.2534 c
285.186 428.6377 286.1211 430.6987 287.1064 433.106 C
288.8594 433.2314 290.4629 433.4121 291.5288 433.8784 c
293.5288 434.7534 295.7788 437.7534 295.4038 440.1284 c
295.123 441.9067 293.3706 446.1372 292.5078 448.1509 C
293.564 451.4624 294.3926 454.3511 294.7788 456.1284 c
296.0288 461.8784 296.2788 463.5034 295.5288 464.0034 c
f0 D
279.2788 424.0034 m
278.9194 423.3813 278.5723 422.7998 278.2329 422.2446 C
277.8369 422.2808 277.4395 422.3179 277.0288 422.3784 c
272.7788 423.0034 271.7788 427.1284 273.9038 429.5034 c
276.0288 431.8784 279.1538 432.3784 282.4038 432.7534 c
282.7295 432.791 283.0649 432.8208 283.4009 432.8496 C
282.1821 429.7168 280.7886 426.6162 279.2788 424.0034 c
f293.0288 440.7534 m
293.2666 439.0874 291.1245 436.7461 288.3306 436.2012 C
289.2944 438.7192 290.2671 441.4331 291.1611 444.0645 C
291.8794 443.1606 292.8677 441.8818 293.0288 440.7534 c
f*U
UULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
