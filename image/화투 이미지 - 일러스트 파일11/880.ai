%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (880.ai)
%%CreationDate: 3/25/2002 6:38 PM
%%BoundingBox: 222 316 376 555
%%HiResBoundingBox: 222.2603 316.1377 375.3311 554.2476
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 10050 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD08FC8C68686E6868686E68
%68686E6868686E6868686E6868686E6868686E6868686E6868686E686868
%6E6868686E6868686E6868686E6868686E6868686E6868686E688CFD08FC
%99FFFD06FC6FF8F8F8272727F8272727F8272727F8272727F8272727F827
%2727F8272727F8272727F8272727F8272727F8272727F8272727F8272727
%F8272727F8272727F8272727F8274AB4FD05FCC2FFFD05FC27F876FD42FF
%7D27F8FD05FCBBFFFD04FC4BF8FD46FF2720FD04FCC2FFFD04FCF87DFD46
%FFA8F868FCFCFCBBFFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6EF8FD
%48FF5226FCFCFCBCFFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6EF8FD
%48FF5220FCFCFC99FFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6FF8FD
%48FF5220FCFCFCBBFFFCFCFC6827FD48FF4B4BFCFCFCC2FFFCFCFC68F8FD
%48FF5220FCFCFCBBFFFCFCFC6827FD48FF514BFCFCFCC2FFFCFCFC6EF8FD
%48FF5226FCFCFCBCFFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6EF8FD
%48FF5220FCFCFC99FFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6FF8FD
%48FF5220FCFCFCBBFFFCFCFC6827FD39FF7DFD0EFF4B4BFCFCFCC2FFFCFC
%FC68F8FD37FFA827F8CFFD0DFF5220FCFCFCBBFFFCFCFC6827FD36FF2727
%F8F876FD0DFF514BFCFCFCC2FFFCFCFC6EF8FD33FF5227FD05F827FD0DFF
%5226FCFCFCBCFFFCFCFC6827FD15FFA87C5227524B527DFD0BFF7D7D4B52
%27524B52F827FD09F8A8FD0CFF274BFCFCFCC2FFFCFCFC6EF8FFA8FD10FF
%A851FD0AF8277DFD05FFA127FD14F827FD0CFF5220FCFCFC99FFFCFCFC68
%2727F8F8527DFD0AFF7D2727FD0EF827FFFFFF52FD17F876FD0BFF274BFC
%FCFCC2FFFCFCFC6FF87DFD05F820F82727522727FD15F8A827FD19F87DFD
%0AFF5220FCFCFCBBFFFCFCFC6827FFFD3CF827FD0AFF4B4BFCFCFCC2FFFC
%FCFC68F8FF27FD3CF852FD09FF5220FCFCFCBBFFFCFCFC6827FF7DFD3DF8
%A8FD08FF514BFCFCFCC2FFFCFCFC6EF8FFFFFD3EF8FD08FF5226FCFCFCBC
%FFFCFCFC6827FFFF27FD3DF87DFD07FF274BFCFCFCC2FFFCFCFC6EF8FFFF
%A8FD3DF827FD07FF5220FCFCFC99FFFCFCFC6827FFFFFF27FD3DF8FD07FF
%274BFCFCFCC2FFFCFCFC6FF8FFFFFFFD3EF852FD06FF5220FCFCFCBBFFFC
%FCFC6827FFFFFF52FD3DF852FD06FF4B4BFCFCFCC2FFFCFCFC68F8FFFFFF
%27FD3EF8FD06FF5220FCFCFCBBFFFCFCFC6827FFFFFF52FD3DF827FD06FF
%514BFCFCFCC2FFFCFCFC6EF8FFFFFF7DFD3EF8FD06FF5226FCFCFCBCFFFC
%FCFC6827FFFFFF7DFD3EF8FD06FF274BFCFCFCC2FFFCFCFC6EF8FFFFFF7D
%FD3EF8A8FD05FF5220FCFCFC99FFFCFCFC6827FFFFFF7DFD3EF87DFD05FF
%274BFCFCFCC2FFFCFCFC6FF8FFFFFF27FD3EF852FD05FF5220FCFCFCBBFF
%FCFCFC6827FFFFFF52FD3EF827FD05FF4B4BFCFCFCC2FFFCFCFC68F8FFFF
%FF27FD3FF8FD05FF5220FCFCFCBBFFFCFCFC6827FFFFFF52FD3FF8A8FD04
%FF514BFCFCFCC2FFFCFCFC6EF8FFFFFF52FD3FF827FD04FF5226FCFCFCBC
%FFFCFCFC6827FFFFFF7DFD40F8A8FFFFFF274BFCFCFCC2FFFCFCFC6EF8FF
%FFFF7DFD40F827FFFFFF5220FCFCFC99FFFCFCFC6827FD04FFFD41F84BFF
%FF274BFCFCFCC2FFFCFCFC6FF8FD04FFFD42F8277D5220FCFCFCBBFFFCFC
%FC6827FD04FF27FD44F84BFCFCFCC2FFFCFCFC68F8FD04FF52FD44F820FC
%FCFCBBFFFCFCFC6827FD04FF7DFD44F84BFCFCFCC2FFFCFCFC6EF8FD05FF
%FD43F82726FCFCFCBCFFFCFCFC6827FD05FF52FD40F827FF274BFCFCFCC2
%FFFCFCFC6EF8FD05FFA8FD40F8A8FF5220FCFCFC99FFFCFCFC6827FD06FF
%51FD3EF852FFFF274BFCFCFCC2FFFCFCFC6FF8FD07FFFD3EF8A8FFFF5220
%FCFCFCBBFFFCFCFC6827FD07FFA8FD3CF852FFFFFF4B4BFCFCFCC2FFFCFC
%FC68F8FD08FF7DFD3BF8FD04FF5220FCFCFCBBFFFCFCFC6827FD09FF7DFD
%39F8FD05FF514BFCFCFCC2FFFCFCFC6EF8FD0AFFA8FD1DF8272727FD17F8
%FD06FF5226FCFCFCBCFFFCFCFC6827FD0CFF5227FD15F827052F06F852FD
%04FF7D27FD11F827FD07FF274BFCFCFCC2FFFCFCFC6EF8FD0EFFA827FD0E
%F82727522727FD040706F8A1FD06FF7D2727FD0BF827A8FD08FF5220FCFC
%FC99FFFCFCFC6827FD11FF27277D275251522752527DA8FD04FF52052F07
%2F072F00527D7D7DA17DFD05FF7D7D5127F852517D7DFD0BFF274BFCFCFC
%C2FFFCFCFC6FF8FD0FFFA827F852FD0EFF5227FD050728F8F8F800FD05F8
%FD05FF2752FD0FFF5220FCFCFCBBFFFCFCFC6827FD04FFA852275252A8FD
%04FF27F827F8F8FD0EFF51F82F072F072F0728072F072F072F0527FD05FF
%524BFD07FFA827FD06FF4B4BFCFCFCC2FFFCFCFC68F8FFFFFF27FD06F827
%A752F827A17DF8F852FD0CFF27F806FD0D07F852FD05FF5227FD05FFCF27
%F8F8FD06FF5220FCFCFCBBFFFCFCFC6827FFFF27FD08F827277DFFFF5152
%5227FD0AFF7D27F82F072F072F072F072F072F072F0729F8FD06FFA8F8FD
%04FF52F8270527FD06FF514BFCFCFCC2FFFCFCFC6EF8FFFFFD0AF8FD04FF
%2752FFF852FD06FFA727F8F800FD0F07F852FF7D7DFD04FFF87DFF76F8F8
%280728F8FD06FF5226FCFCFCBCFFFCFCFC6827FFFFFD09F827FD04FFF8A8
%FFA8FD05F852A8FF27F8072F072F072F072F072F072F072F072F0027FFFF
%52F8F82752FF275252F8052F072F0627FD06FF274BFCFCFCC2FFFCFCFC6E
%F8FFFF52FD07F827A8FFFFFFA8F8FFFFFFFD07F827FF270006FD0D0700F8
%A8FFFFFFF8060000F827F8F806FD040728F8FD06FF5220FCFCFC99FFFCFC
%FC6827FFFFFF52F8FD04277DFD05FF7DF8FFFFFFFD08F827FF27F8052F07
%2F072F072F072F072F072FF852FFFFFF27062F0728F8F8F82F072F072F05
%52FD06FF274BFCFCFCC2FFFCFCFC6FF8FD0EFFA8F851FFFFFFFD09F87DFF
%7DF8F82706FD0A0728F8FFFFFF2727FD0407F828FD0507F852FD06FF5220
%FCFCFCBBFFFCFCFC6827FD0DFF52F82752FFFFFFFD09F852FFFFFF7CF82F
%072F072F072F072F072F072752FFFFA8F829072F072F072F072F0728F8FD
%07FF4B4BFCFCFCC2FFFCFCFC68F8FD04FFA87D7D7CA8FFFFA127F87DF8A8
%FFFFFF52FD08F827FFFFFF5105FD0407062706FD050700F8FFFFFF2700FD
%0907F8F87DFD06FF5220FCFCFCBBFFFCFCFC6827FFFF7D27FD07F82727FF
%A8F8FD04FFA827FD07F8A8FFFFFF52052F072F0627F8F8052F072F072FF8
%A8FFFF7DF8062F072F072F072F072F05F852FD05FF514BFCFCFCC2FFFCFC
%FC6EF8FF7DFD09F827FFFF7DF8FD05FF7DFD06F851FFFFFFA8F805070700
%F827FF5227F827002706274BFFFFFFF8F8FD0A0706F827FD04FF5226FCFC
%FCBCFFFCFCFC6827FF27FD09F87DFFFF2727FD06FFA852F827277DFFFFFF
%A8F827F829F82752FD05FF7D522727F827FFA8F827062F072F072F072F07
%2F072F06F852FFFFFF274BFCFCFCC2FFFCFCFC6EF8FFFD0AF8FFA7F8F8F8
%52FD0DFFA8F852A8F8F8F8A1FD0AFFCF27FFF805FD0E0705F8A1FFFF5220
%FCFCFC99FFFCFCFC6827FF4BFD08F87DA8FD05F8A8FD0BFFA1F87DFFFFF8
%27F852FD0CFF4B27072F072F072F072F072F072F072F072FF827A8FF274B
%FCFCFCC2FFFCFCFC6FF8FFA7FD06F8277DFFFD06F827FD06FFA751525252
%F876FFFFFF27277DF8A8FD0AFFA8F806FD0A07280027F8F8F82727A8FF52
%20FCFCFCBBFFFCFCFC6827FFFFA87D4B5252A8FFFF52FD07F8FD04FF5227
%FD05F87DFD04FFF87DFF52F8FD0AFF52F82F072F0728F82F072F072FF827
%4B527DFD05FF4B4BFCFCFCC2FFFCFCFC68F8FD0AFF27FD07F8FFFFFF27FD
%07F87DFD04FF277CFFFF27F827F82727A8FFFFFFA8F8F80027FD04F806FD
%0407F8A1FD08FF5220FCFCFCBBFFFCFCFC6827FD0AFFFD08F8FFFF52FD08
%F87DFD04FFF8A1FFFFFF27FD05F8277DFFA87D7D52527DFFFF0028072F07
%2FF8FD09FF514BFCFCFCC2FFFCFCFC6EF8FD0AFF27FD07F8FFFF27FD08F8
%FD05FF277DFFFFFFFD08F852FD08FF52F80707070527FD09FF5226FCFCFC
%BCFFFCFCFC6827FD0AFF27FD06F87DFFFFFD08F827FD05FFF87DFFFFFF52
%FD08F8A8FD07FFA827052F072752FFFF7D2727F82752FF274BFCFCFCC2FF
%FCFCFC6EF8FD0AFFA8FD06F8FFFFFF27FD07F8CFFFFFFFCFF8F827FFFFFF
%7DFD08F87DFD08FF7DF80628F87DA827FD07F82720FCFCFC99FFFCFCFC68
%27FD0BFFA827272752A8FFFFFF7D27FD04F827FD04FF7DF852F8F8A8FFFF
%FF27FD07F852FD09FFF8F8F827FD0BF84BFCFCFCC2FFFCFCFC6FF8FD15FF
%A85227527DFD04FF52F8A7FF27F827FD04FFFD07F8A7FD08FF272727F8A8
%FFFD0AF820FCFCFCBBFFFCFCFC6827FD18FF5227FD05F8FFFFFFF87DF852
%FD04FF5227F8F8F87DFD06FF5252F8F87DFFF8A8FF7DFD09F84BFCFCFCC2
%FFFCFCFC68F8FD17FF27FD06F852FFFFFF277C7DF8A7FD0CFFA852FD05F8
%FFFF2727FFFF27FD07F82720FCFCFCBBFFFCFCFC6827FD16FF27FD07F827
%FFFFFFF852FF52F8A87D7D7DFD07FF7D27FD06F8FFFF7D27FFFFFF52FD05
%F87D514BFCFCFCC2FFFCFCFC6EF8FD16FFFD08F87DFFFFFF5227FFFFFD06
%F82752FFFFFFA8FD08F8FFFFFFF8A7FD04FF7D7DA8FFFF5226FCFCFCBCFF
%FCFCFC6827FD16FFFD07F827A8FFFFFF4B52FFFF27FD07F827FFFF7DFD07
%F827FFFFFF5227FD09FF274BFCFCFCC2FFFCFCFC6EF8FD16FF27FD06F84B
%FD04FF2727FFFF52FD08F8A8FF27FD07F84BFFFFFF7DF8FD09FF5220FCFC
%FC99FFFCFCFC6827FD16FF7DFD05F852FD04FF7DF852FFFF52FD08F852FF
%52FD07F8FD05FFF87DFD08FF274BFCFCFCC2FFFCFCFC6FF8FD17FFA87D27
%7DA8FD04FF52F82727FFFFFFFD08F827FFA8FD06F8A8FD05FF5127FD08FF
%5220FCFCFCBBFFFCFCFC6827FD1AFF7D524B52527CF87D7D27FFFFFF52FD
%07F87DFFFFA852272752FD07FF7DF852A8FD06FF4B4BFCFCFCC2FFFCFCFC
%68F8FD18FFA8FD07F876FF7DF8FD04FF27FD06F8A8FD0EFF27F8F8F827A1
%FD04FF5220FCFCFCBBFFFCFCFC6827FD18FFFD08F87DFF7D27FD05FF7D27
%27277DFD10FFFD05F8277DFFFFFF514BFCFCFCC2FFFCFCFC6EF8FD17FF27
%FD08F87DFFFFF8FD19FF52FD07F8A8FFFF5226FCFCFCBCFFFCFCFC6827FD
%17FFFD09F87DFFFFF8FD19FF52FD07F852FFFF274BFCFCFCC2FFFCFCFC6E
%F8FD17FFFD09F8FFFFFFF87DFD18FF27FD08F8FFFF5220FCFCFC99FFFCFC
%FC6827FD17FFFD08F87DFFFF52F827FD18FF52FD07F827FFFF274BFCFCFC
%C2FFFCFCFC6FF8FD17FF27FD06F876FFFF52F8F8F852FD17FF7DFD07F827
%FFFF5220FCFCFCBBFFFCFCFC6827FD18FF5227F82727A8FFFFA8FD05F8A8
%FD17FFFD07F8A8FFFF4B4BFCFCFCC2FFFCFCFC68F8FD20FF27FD05F827FD
%17FFCF27FD04F8A8FFFFFF5220FCFCFCBBFFFCFCFC6827FD20FFFD07F8A8
%FD20FF514BFCFCFCC2FFFCFCFC6EF8FD1FFF7DFD07F827FD20FF5226FCFC
%FCBCFFFCFCFC6827FD1FFF7DFD07F827FD20FF274BFCFCFCC2FFFCFCFC6E
%F8FD1FFF7DFD08F8FD20FF5220FCFCFC99FFFCFCFC6827FD1FFFA8FD07F8
%52FD20FF274BFCFCFCC2FFFCFCFC6FF8FD20FF27FD06F852FD20FF5220FC
%FCFCBBFFFCFCFC6827FD20FFA827FD05F8FD21FF4B4BFCFCFCC2FFFCFCFC
%68F8FD22FF7D272751CFFD21FF4B20FCFCFCBBFFFD04FC277DFD47FFF893
%FCFCFCC2FFFD04FC4420A8FD45FF2727FD04FCBCFFFD05FC202752FD42FF
%A820278CFD04FCC2FFFD06FC44F8F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F8F8F84B8CFD05FC99FFFD08
%FC936893686F6893686F6893686F6893686F6893686F6893686F6893686F
%6893686F6893686F6893686F6893686F6893686F6893686F6893686F6893
%686F6893686F68FD08FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
375.3311 316.1377 m
222.2603 316.1377 L
222.2603 554.2476 L
375.3311 554.2476 L
375.3311 316.1377 L
fu0 0 0 0 k
230.2119 536.5264 m
230.2119 334.0254 l
229.8789 324.3594 241.0454 324.3594 v
252.2119 324.3594 357.3789 324.3594 y
367.3789 324.6934 367.3789 335.3594 v
367.3789 346.0254 367.3789 536.5264 y
367.7119 546.3594 355.3789 546.3594 v
343.0459 546.3594 240.0454 546.3594 y
230.2119 546.3599 230.2119 536.5264 v
f1 0.6 0 0 k
294.5454 430.3174 m
294.9204 426.3174 295.4204 423.1924 v
293.2954 420.8174 291.0454 419.4424 v
288.7954 418.0674 286.4204 417.3174 285.2954 417.1924 c
288.6704 411.3174 296.0454 408.9424 v
293.4204 404.8174 296.4204 396.5674 v
297.5454 398.6924 299.1709 399.5674 v
300.7959 400.4424 305.9209 403.1924 306.7959 405.5674 c
308.6709 403.8174 312.0459 402.8174 v
315.4209 401.8174 322.1709 401.3174 323.2959 400.1924 c
322.0459 404.9424 321.2959 406.8174 v
320.5459 408.6924 318.9209 412.8174 317.1709 413.9424 c
320.5459 416.1924 321.5459 419.5674 v
322.5459 422.9424 323.4209 425.1924 y
321.2959 424.6924 319.1709 425.1924 v
317.0459 425.6924 310.4209 425.9424 308.6709 424.5674 c
306.7959 430.0674 302.6709 432.4424 v
294.5454 430.3174 l
f339.4209 410.4424 m
335.9209 413.4424 332.9209 414.4424 v
329.9209 415.4424 326.5459 416.1924 y
327.7959 413.3174 327.9209 411.6924 v
328.0459 410.0674 330.4209 405.1924 332.5459 402.4424 c
329.2959 400.5674 327.5459 398.1924 v
325.7959 395.8174 324.4209 391.9424 323.7959 391.3174 c
325.6709 390.6924 327.9209 390.8174 v
330.1709 390.9424 335.0459 391.9424 336.7959 392.5674 c
336.5459 389.8174 338.5459 386.8174 v
340.5459 383.8174 343.1709 381.3174 343.6709 380.3174 c
345.7959 384.5674 346.9209 386.5674 v
348.0459 388.5674 348.1709 392.9424 348.0459 393.9424 c
349.9209 394.1924 353.2959 394.6924 v
356.6709 395.1924 361.0459 396.0674 y
358.7959 399.3174 357.9209 400.6924 v
357.0459 402.0674 351.1709 406.3174 350.0459 406.5674 c
352.7959 409.3174 352.7959 412.9424 v
352.7959 416.5674 352.7959 420.9424 352.7959 421.6924 c
349.9209 419.9424 348.0459 419.3174 v
346.1709 418.6924 340.1709 416.5674 339.4209 410.4424 c
f*u
1 D
0.65 0.53 0.51 1 k
239.9668 546.9014 m
234.1055 546.9014 229.3369 542.1328 229.3369 536.2715 C
229.3369 334.1133 L
229.3369 328.252 234.1055 323.4834 239.9668 323.4834 C
357.625 323.4834 L
363.4863 323.4834 368.2549 328.252 368.2549 334.1133 C
368.2549 536.2715 L
368.2549 542.1328 363.4863 546.9014 357.625 546.9014 C
239.9668 546.9014 L
f0 D
230.7539 334.1133 m
230.7539 536.2715 L
230.7539 541.3516 234.8867 545.4844 239.9668 545.4844 C
357.625 545.4844 L
362.7051 545.4844 366.8369 541.3516 366.8369 536.2715 C
366.8369 334.1133 L
366.8369 329.0332 362.7051 324.9014 357.625 324.9014 C
239.9668 324.9014 L
234.8867 324.9014 230.7539 329.0332 230.7539 334.1133 C
f*U
367.2129 448.5264 m
363.8789 447.5264 361.8789 444.1929 v
359.8789 440.8594 356.2129 431.1924 346.2129 428.1924 c
336.2129 425.1924 324.2129 428.1924 316.5459 431.1924 c
308.8789 434.1929 300.2119 431.1914 293.5454 429.5254 c
286.8789 427.8594 267.5449 423.8584 254.2119 431.5254 c
240.8789 439.1929 238.8789 454.8594 238.5454 462.8594 c
238.2119 470.8594 239.5459 481.5259 236.8789 488.8594 c
234.2119 496.1929 232.5454 500.8594 232.5454 501.8594 c
232.5454 502.8594 232.8784 502.8594 234.2119 502.1929 c
235.5454 501.5264 244.5454 498.8594 251.5454 499.1929 c
258.5454 499.5264 265.8784 501.8594 269.2119 503.1929 c
272.5454 504.5264 286.2124 508.1934 296.5454 497.5264 c
300.5459 504.1934 309.5459 504.5264 v
318.5459 504.8594 329.2119 503.8594 338.8789 512.1929 c
339.8789 505.5264 343.8789 500.5264 v
347.8789 495.5264 352.8789 488.5264 353.8789 478.1929 c
354.8789 467.8594 355.8799 455.8594 367.2129 452.8594 c
367.2129 448.5264 l
f258.5918 398.5273 m
259.999 398.3574 L
260.9829 406.4756 265.936 428.0664 265.9858 428.2832 C
264.605 428.6016 L
264.5547 428.3828 259.585 406.7197 258.5918 398.5273 C
f259.5454 400.9424 m
254.5454 399.4424 251.7954 393.6924 v
249.0454 387.9424 251.5454 382.9424 255.7954 381.9424 c
260.0454 380.9424 264.2954 383.9424 264.7954 390.4424 c
265.2954 396.9424 259.5454 400.9424 y
f252.0454 404.1924 m
246.5454 406.6924 240.2954 405.4424 v
234.0454 404.1924 234.0454 399.9424 234.2954 397.6924 c
234.5454 395.4424 237.5454 391.9424 245.2954 394.1924 c
253.0454 396.4424 253.0454 403.1924 252.0454 404.1924 c
f253.7954 418.9424 m
250.0454 423.1924 244.0454 422.9424 v
238.0454 422.6924 235.0454 418.6924 235.7954 415.6924 c
236.5454 412.6924 238.2954 410.9424 245.5454 411.6924 c
252.7954 412.4424 254.2954 417.1924 253.7954 418.9424 c
f269.7954 415.6924 m
266.7954 409.4424 271.7954 403.6924 v
276.7954 397.9424 283.5454 400.9424 285.2954 403.9424 c
287.0454 406.9424 286.2954 411.9424 281.2954 414.4424 c
276.2954 416.9424 270.7954 416.4424 269.7954 415.6924 c
f285.0454 394.1924 m
279.7954 396.1924 274.0454 393.1924 v
268.2954 390.1924 268.7954 384.1924 270.7954 382.1924 c
272.7954 380.1924 278.5454 378.9424 283.0454 384.1924 c
287.5454 389.4424 285.0454 394.1924 y
f287.2954 378.4424 m
282.0454 380.9424 276.5454 377.4424 v
271.0454 373.9424 272.5454 369.1924 274.2954 367.4424 c
276.0454 365.6924 281.5454 364.4424 285.5454 368.6924 c
289.5454 372.9424 287.2954 378.4424 y
f290.2954 362.6924 m
293.5454 355.6924 288.2954 351.1924 v
283.0454 346.6924 277.0454 348.1924 275.2954 350.9424 c
273.5454 353.6924 274.2954 359.1924 279.2954 361.9424 c
284.2954 364.6924 290.2954 362.6924 y
f297.7959 353.1924 m
292.7954 350.9424 291.0454 343.4424 v
289.2954 335.9424 294.0454 331.9424 299.2959 331.9424 c
304.5459 331.9424 305.7959 338.1924 304.7959 343.1924 c
303.7959 348.1924 297.7959 353.1924 y
f303.5459 373.4424 m
301.7959 367.4424 306.2959 362.4424 v
310.7959 357.4424 317.5459 359.9424 319.0459 362.6924 c
320.5459 365.4424 319.7959 371.4424 314.2959 373.1924 c
308.7959 374.9424 303.5459 373.4424 y
f304.7959 390.9424 m
304.0459 385.4424 307.7959 381.1924 v
311.5459 376.9424 319.0459 377.1924 320.5459 379.6924 c
322.0459 382.1924 321.7959 386.9424 316.0459 389.9424 c
310.2959 392.9424 304.7959 390.9424 y
f338.5459 378.4424 m
334.2959 379.1924 328.5459 375.9424 v
322.7959 372.6924 323.2959 367.6924 325.0459 365.1924 c
326.7959 362.6924 334.0459 362.1924 337.5459 368.1924 c
341.0459 374.1924 338.5459 378.4424 y
f349.5459 363.6924 m
345.7959 359.9424 346.0459 353.6924 v
346.2959 347.4424 351.7959 344.6924 356.5459 346.4424 c
361.2959 348.1924 362.5459 353.1924 359.5459 357.9424 c
356.5459 362.6924 349.5459 363.6924 y
f367.2959 378.1924 m
364.5459 373.1924 357.5459 373.6924 v
350.5459 374.1924 349.0459 381.6924 y
351.7959 385.6924 357.2959 386.1924 v
362.7959 386.6924 367.0459 382.9424 367.2959 381.1924 c
367.2959 378.1924 l
f*u
1 D
352.6943 422.5576 m
346.4561 419.0645 L
345.3877 418.5107 L
342.9883 417.2979 339.8262 415.6875 339.0313 411.8486 C
338.2412 412.6113 336.96 413.5137 334.8027 414.3525 c
330.3018 416.1035 326.8398 416.8545 326.6943 416.8857 C
325.3945 417.1641 L
325.8877 415.9297 L
325.9023 415.8926 327.3574 412.2402 327.5928 410.3545 c
327.8379 408.3936 329.7334 404.8936 331.4346 402.6904 C
330.623 402.2705 329.3643 401.5127 328.0449 400.1934 c
326.792 398.9414 325.6875 396.6201 324.7119 394.5713 c
324.0713 393.2246 323.4658 391.9531 323.002 391.3965 C
322.1982 390.4326 L
323.4385 390.2422 L
323.5752 390.2207 326.8184 389.7275 328.4121 389.9932 C
329.4277 390.1416 L
331.3135 390.4053 334.208 390.8428 336.1582 391.6416 C
336.2988 390.2695 336.748 387.8037 338.2227 385.7754 c
340.2236 383.0234 343.1514 379.8457 343.2754 379.7119 C
343.9707 378.958 L
347.1797 385.375 L
348.1162 387.249 348.8027 390.5811 348.8027 392.9727 c
348.8027 393.083 348.79 393.1738 348.7871 393.2793 C
350.2129 393.3789 353.5361 393.6592 355.7324 394.2588 c
358.3857 394.9824 361.083 395.2344 361.1104 395.2363 C
362.4941 395.3633 L
361.5791 396.4092 L
361.5625 396.4287 359.8506 398.3916 358.6465 400.3184 c
357.4375 402.2539 353.8301 405.5117 351.3418 406.7529 C
352.1074 408.0225 353.5205 410.8135 353.5205 414.1055 c
353.5205 414.3125 353.5146 414.5205 353.5039 414.7314 c
353.4551 415.6104 353.4355 416.4219 353.4355 417.1582 c
353.4355 420.0654 353.7393 421.7949 353.7432 421.8164 C
354.0098 423.2939 L
352.6943 422.5576 L
f0 D
340.2549 409.9424 m
340.2549 414.3271 343.3213 415.8779 346.0273 417.2461 C
347.1348 417.8203 L
350.584 419.751 352.1699 420.6396 V
352.0918 419.8115 352.0166 418.6533 352.0166 417.1895 c
352.0166 416.4219 352.0371 415.5732 352.0879 414.6533 c
352.0986 414.4727 352.1035 414.293 352.1035 414.1143 c
352.1035 410.1699 349.749 406.8945 349.7236 406.8604 C
349.1523 406.0771 L
350.0713 405.7705 L
352.1191 405.0879 356.2773 401.4346 357.4453 399.5664 c
358.1826 398.3867 359.043 397.2695 359.6758 396.4863 C
358.5977 396.3379 357.0244 396.0801 355.3594 395.626 c
352.7158 394.9053 348.0557 394.6523 348.0088 394.6504 C
347.2588 394.6104 L
347.3418 393.8643 L
347.3711 393.5996 347.3848 393.3047 347.3848 392.9873 c
347.3848 390.835 346.7402 387.667 345.9121 386.0088 C
344.2676 382.7207 343.626 381.4375 V
342.6318 382.5518 340.7539 384.7051 339.3691 386.6094 c
337.5342 389.1328 337.5049 392.6582 337.5049 392.6934 C
337.502 393.9688 L
336.4199 393.293 L
334.8877 392.335 331.208 391.8213 329.2314 391.5459 C
328.1797 391.3916 L
327.3604 391.2549 325.8477 391.376 324.7275 391.5049 C
325.1221 392.1934 325.5332 392.998 325.9922 393.9629 c
326.918 395.9072 327.9668 398.1113 329.0469 399.1914 c
330.9023 401.0469 332.7773 401.7725 332.7959 401.7793 C
333.749 402.1416 L
333.0791 402.9092 L
331.4365 404.7861 329.2314 408.6719 328.999 410.5303 c
328.832 411.8682 328.1582 413.8799 327.6846 415.1826 C
329.085 414.8154 331.4951 414.1182 334.2891 413.0322 c
338.2871 411.4775 338.8584 409.7686 338.8633 409.752 C
340.2549 409.9424 L
f*U
302.7021 431.5732 m
306.8467 429.2705 307.8408 424.3584 307.8496 424.3086 C
308.0654 423.1973 L
308.9707 423.875 L
310.6563 425.1396 315.9893 425.0381 318.124 424.5049 c
319.4971 424.1611 321.2578 424.1494 322.3477 424.1836 C
322.0898 423.29 321.6357 421.8008 320.8789 419.6807 c
319.7314 416.4688 316.7041 414.5645 316.6738 414.5449 C
315.791 413.999 L
316.6211 413.375 L
318.4102 412.0332 320.6162 406.7402 321.1084 404.7705 c
321.3818 403.6748 321.793 402.3896 322.1211 401.416 C
320.584 401.9307 319.1104 402.1445 317.4688 402.3779 C
313.208 403.1318 L
309.2559 404.0625 307.3428 406.1445 307.3242 406.165 C
306.7842 406.7637 L
306.2578 406.1533 L
304.8408 404.501 300.4619 401.0674 298.9785 400.3262 c
298.0488 399.8613 297.271 398.9102 296.7173 398.0938 C
296.2144 399.6221 295.5044 402.0996 295.5044 403.9424 c
295.5044 406.6836 296.6362 408.5498 296.647 408.5684 C
297.1343 409.3584 L
296.2456 409.6221 L
292.3809 410.7588 290.4785 412.2939 289.2192 413.3096 C
288.9883 413.4961 L
288.2485 414.0879 287.0122 415.458 286.1865 416.4063 C
287.7803 416.7354 290.0254 417.5693 291.9883 419.1387 c
294.4897 421.1406 295.9839 422.6289 296.0464 422.6914 C
296.3501 422.9941 L
296.2222 423.4033 L
295.5532 425.543 295.4077 427.3926 295.4077 428.5986 c
295.4077 429.5195 295.4927 430.0645 295.4946 430.0771 C
294.0962 430.3086 L
294.0869 430.252 293.9863 429.623 293.9863 428.5859 c
293.9863 427.3516 294.1475 425.5264 294.7544 423.4131 C
294.21 422.8936 292.9214 421.7002 291.1025 420.2461 c
288.6519 418.2852 285.7949 417.6514 284.7954 417.6514 C
283.2822 417.6514 L
284.251 416.4883 L
284.355 416.3643 286.8115 413.4219 288.1025 412.3887 C
288.3296 412.207 L
289.5039 411.2588 291.4858 409.7324 295.0649 408.543 C
294.6616 407.6602 294.0869 406.0713 294.0869 403.9424 c
294.0869 400.8447 295.811 396.374 295.8853 396.1855 C
296.4634 394.6982 L
297.1792 396.125 L
297.4985 396.7627 298.5596 398.5322 299.6123 399.0586 c
301.083 399.7939 304.9775 402.8086 306.8252 404.6934 C
307.7139 403.9238 309.6865 402.5049 312.8838 401.7529 C
317.2695 400.9756 L
319.3164 400.6846 321.084 400.4326 322.999 399.5488 C
324.543 398.8359 L
323.9619 400.4346 L
323.9521 400.4619 322.9688 403.1738 322.4834 405.1143 c
322.0537 406.834 320.1748 411.6641 318.1484 413.8584 C
319.2354 414.6924 321.2529 416.5166 322.2129 419.2041 c
323.4609 422.6963 323.9629 424.6875 323.9834 424.7705 C
324.2236 425.7305 L
323.2373 425.6484 L
323.208 425.6465 320.3281 425.415 318.4678 425.8799 c
316.6279 426.3398 311.6787 426.6279 309.0078 425.4717 C
308.5039 427.1475 307.04 430.7842 303.3896 432.812 C
302.7021 431.5732 L
f251.1523 404.0322 m
251.9385 402.8525 L
261.4258 409.0947 L
260.665 410.29 L
251.1523 404.0322 L
f264.2285 425.8262 m
260.7573 424.0908 252.5386 419.6094 252.4561 419.5645 C
253.1348 418.3203 L
253.2124 418.3623 260.4824 422.3252 264.2002 424.2207 C
265.0093 422.4053 267.3516 417.3486 269.2686 415.2188 C
270.3223 416.166 L
268.1768 418.5508 265.2261 425.4023 265.1968 425.4717 C
264.9009 426.1621 L
264.2285 425.8262 L
f297.5942 351.0898 m
298.9971 351.2949 L
296.0415 371.4893 297.2407 396.9033 297.2534 397.1572 C
295.8374 397.2275 L
295.8247 396.9717 294.6187 371.4229 297.5942 351.0898 C
f289.5239 361.9219 m
290.5669 360.9629 L
297.0464 367.9414 L
296.0444 368.9434 L
289.5239 361.9219 L
f285.8984 378.2793 m
286.6919 377.1055 L
288.2627 378.166 296.1362 383.54 296.9292 385.125 C
295.6616 385.7588 L
295.2446 384.9248 290.3701 381.3008 285.8984 378.2793 C
f284.0649 393.9629 m
285.0259 392.9219 L
294.7759 401.9219 L
293.8149 402.9629 L
284.0649 393.9629 L
f297.9033 399.1426 m
297.9775 398.9854 299.7549 395.2334 304.2813 390.4551 C
305.3105 391.4297 L
300.9561 396.0264 299.2051 399.7061 299.1875 399.7422 C
297.9033 399.1426 L
f295.4409 383.8223 m
295.6372 383.5029 300.2764 375.9609 304.2803 371.707 C
305.3115 372.6777 L
301.4092 376.8252 296.6968 384.4854 296.6499 384.5625 C
295.4409 383.8223 L
f338.3848 410.4385 m
339.707 410.9463 L
339.6699 411.043 336.0127 420.6455 336.2539 427.417 C
334.8379 427.4678 L
334.585 420.4043 338.2295 410.8418 338.3848 410.4385 C
f343.1221 379.9717 m
343.167 379.834 347.6563 366.1348 349.8896 360.6738 C
351.2021 361.2109 L
348.9873 366.624 344.5146 380.2754 344.4697 380.4131 C
343.1221 379.9717 L
f337.2764 378.1748 m
338.3154 377.21 L
338.6572 377.5781 341.6699 380.8457 342.2041 382.1787 C
340.8877 382.7061 L
340.5596 381.8848 338.499 379.4912 337.2764 378.1748 C
f345.3564 382.5098 m
349.8564 381.2598 L
350.2354 382.625 L
345.7354 383.875 L
345.3564 382.5098 L
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
