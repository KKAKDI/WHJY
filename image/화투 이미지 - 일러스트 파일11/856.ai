%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (856.ai)
%%CreationDate: 3/25/2002 6:34 PM
%%BoundingBox: 220 313 374 552
%%HiResBoundingBox: 220.4009 313.875 373.4717 551.9854
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 11778 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC6F204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B20FD
%07FC99FFFD05FC6827F85227525152275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%525152275251522752F827275251522727F84BFD05FCC2FFFD04FC68F851
%FD3AFFA7F8F8A8FD06FF7DF84BFD04FCBBFFFD04FC2752FD3AFFA8F8F852
%FD08FFA8F892FCFCFCC2FFFCFCFC8CF8FD3AFFA7F8F8F8FD0AFF2720FCFC
%FCBBFFFCFCFC204BFD39FFA8F8F8F8A8FD0AFF7D27FCFCFCC2FFFCFCFC4A
%27FD38FFA8F8F8F827FD0BFF7DF8FCFCFCBCFFFCFCFC4452FD38FFFD04F8
%A8FD0BFF7D27FCFCFCC2FFFCFCFC4B27FD37FFFD04F827FD0CFF7DF8FCFC
%FC99FFFCFCFC4452FD36FF27FD04F8FD0DFF7D27FCFCFCC2FFFCFCFC4B27
%FD35FF52FD04F876FD0DFF7DF8FCFCFCBBFFFCFCFC2052FD34FF7DFD04F8
%27FD0EFF7D27FCFCFCC2FFFCFCFC4A27FD33FFA827FD04F852FD0EFF7DF8
%FCFCFCBBFFFCFCFC2052FD33FF52FD05F8FD0FFF7D27FCFCFCC2FFFCFCFC
%4A27FD32FF7DFD05F852FD0FFF7DF8FCFCFCBCFFFCFCFC4452FD32FFFD06
%F8A8FD0FFF7D27FCFCFCC2FFFCFCFC4B27FD31FF27FD05F827FD10FF7DF8
%FCFCFC99FFFCFCFC4452FD16FFA8A8FD18FF7DFD06F8FD11FF7D27FCFCFC
%C2FFFCFCFC4B27FD17FF2752FD17FFFD06F827FD11FF7DF8FCFCFCBBFFFC
%FCFC2052FD16FFA8A7F852FD15FF52FD06F8A8FD11FF7D27FCFCFCC2FFFC
%FCFC4A27FD16FF277DA8F827FD13FFA8FD07F8FD12FF7DF8FCFCFCBBFFFC
%FCFC2052FD15FFA8F8FFFF52F84BFD12FF27FD06F87DFD12FF7D27FCFCFC
%C2FFFCFCFC4A27FD15FFF8F8FFFFFF27F827FD10FF7DFD06F820FD13FF7D
%F8FCFCFCBCFFFCFCFC4427FD14FF52F8F8FFFFFFA8F8F827FD0FFF27FD06
%F827FD13FF7D27FCFCFCC2FFFCFCFC4BF852FD12FFA8F8F8F8FD04FF27F8
%F876FD0DFF52FD07F8CFFD13FF7DF8FCFCFC99FFFCFCFC44F8F84BFD11FF
%27F8F8F8FD05FFF8F8F87DFD0CFFFD07F827FD14FF7D27FCFCFCC2FFFCFC
%FC4BF8F8F827FD0FFF7DFD04F87DFD04FF52F8F8F8A8FD0AFF27FD07F852
%FD14FF7DF8FCFCFCBBFFFCFCFC2052F8F8F827FD0EFFFD05F87DFD04FFA8
%FD04F8FD09FFA827FD07F8FD15FF7D27FCFCFCC2FFFCFCFC4A274BF8F8F8
%27FD0CFF27FD05F87CFD05FF27F8F8F827FD08FF52FD07F852FD15FF7DF8
%FCFCFCBBFFFCFCFC2052A8FD04F827FD0AFF7DFD06F8A1FD06FFFD04F87D
%FD07FFFD08F8A8FD15FF7D27FCFCFCC2FFFCFCFC4A27FF27FD04F852FD09
%FF27FD06F87DFD06FF27FD04F8A8FD05FF27FD07F827FD16FF7DF8FCFCFC
%BCFFFCFCFC4452FFFFFD05F87CFD07FFA8FD07F87DFD06FFA8FD04F852FD
%04FFA827FD07F87DFD16FF7D27FCFCFCC2FFFCFCFC4B27FFFF52FD05F8A7
%FD06FF27FD07F87DFD07FFFD05F87DFFFFFF52FD08F8A8FD16FF7DF8FCFC
%FC99FFFCFCFC4452FFFFA8FD06F8FD06FF27FD07F87DFD07FF7DFD05F8FF
%FFFFFD08F827FD17FF7D27FCFCFCC2FFFCFCFC4B27FFFFFF27FD06F8FD05
%FFFD08F8A87DA8FD05FFA8FD05F827FF52FD08F87DFD17FF7DF8FCFCFCBB
%FFFCFCFC2052FFFFFFA8FD06F827FD04FFFD08F8FF2752FD06FF27FD05F8
%A827FD07F827FD18FF7D27FCFCFCC2FFFCFCFC4A27FD04FF27FD06F87DFF
%FFFD09F8A8F8F8CFFD05FF76FD0EF827FD15FFA8CFFF7DF8FCFCFCBBFFFC
%FCFC2052FD04FF7DFD06F827A8FFF827FD07F87D002727FD05FFA8FD0EF8
%A8FD14FF51F852FF7D27FCFCFCC2FFFCFCFC4A27FD05FFFD07F851FFF850
%FD06F827F82806F8A7FD05FFFD0EF8FD13FFA7F8F8F8FFFF7DF8FCFCFCBC
%FFFCFCFC4452FD05FF52FD07F8A8F8C626FD05F852F8072F0527FD05FF52
%F85252A7FD047D4B27F8F827FD12FF52F8F8F8FFFFFF7D27FCFCFCC2FFFC
%FCFC4B27FD05FFA1FD08F82750C6FD05F852F8070729F87DFD04FFA87D00
%F8F827F8F8F827277D27A8FD10FFA827F8F8F8A7FFFFFF7DF8FCFCFC99FF
%FCFCFC4452FD06FFFD08F82727C651F8F8F8272728072F0728F8FFFFFF7D
%27F828062F072F072F0627F827A8FD0FFFA827F8F8F852FD04FF7D27FCFC
%FCC2FFFCFCFC4B27FD06FF76FD09F87B2627F8F8512706FD0407F852FF52
%F80029FD0A07F8F87DFD0DFF7D27F8F8F827FD05FF7DF8FCFCFCBBFFFCFC
%FC2052FD06FFA8FD08F827F827269FF87DF828072F072F062752F8F82700
%28072F072F072F072F072F05F852FD0BFF7DFD04F827A8FD05FF7D27FCFC
%FCC2FFFCFCFC4A27FD07FFFD09F852F84BC64BF82700FD0507F827527D7D
%52F828FD0A0700F8A8FD09FF7DFD05F87DFD06FF7DF8FCFCFCBBFFFCFCFC
%2052FD07FF7D527DA8A17D522727515226C6A4F82727072F072F072727FD
%04FFA8F829072F072F072F072F072F0527FD08FFA827FD04F851FD07FF7D
%27FCFCFCC2FFFCFCFC4A27FD07FFA752F8F8F827F8F8F8525226C6C6F87C
%F829FD040706F8FD04FF272706FD0A0729F8A7FD06FFA820FD05F8FD08FF
%7DF8FCFCFCBCFFFCFCFC4452FD06FF27F80028072F072F0728F827F8C7C6
%277D27052F072F072FF8FFFF7DF827072F072F072F072F072F072F072727
%FD06FF27FD05F87DFD08FF7D27FCFCFCC2FFFCFCFC4B27FD04FFCFF80006
%FD090700F850C6F87D7DF806FD0407F827F8F82806FD0D0706F8A8FD04FF
%27FD05F84BFD09FF7DF8FCFCFC99FFFCFCFC4452FD04FFF827072F072F07
%2F072F072F072FF826C6277DFF5227062F072FF827F8F8052F072F072F07
%2F072F072F072F072FF852FFFFFF7DFD05F827A8FD09FF7D27FCFCFCC2FF
%FCFCFC4B27FFFFFFF827FD0C0700F8F87BF87DFFFF52F805070727F8277D
%F806FD0E0728F8FFFFA8FD06F852FD0AFF7DF8FCFCFCBBFFFCFCFC2052FF
%FF2727072F072F072F072F072F072F06F85227FD05F87652F8F82F072900
%F85227062F072F072F072F072F072F072F072727FFFD06F827FD0BFF7D27
%FCFCFCC2FFFCFCFC4A27FF27F806FD0B0700F87DF8F82807070628F8F8F8
%29FD040705F827F806FD0B0705FD0AF87DFD0BFF7DF8FCFCFCBBFFFCFCFC
%20522727062F072F072F072F072F0728F827A87CF82F072F072F0729052F
%072F072F072FF87D52F8002F072F072F072F0728F82752FF52FD06F827FD
%0CFF7D27FCFCFCC2FFFCFCFC26F82706FD090700F8F852FFFFF828FD0F07
%2700FFA827F8F8F8270027F8F8F87DFFFF7DFD07F8A7FD0AFF7DFF7DF8FC
%FCFCBCFFFCFCFC2027062F072F072F06280027F82752FFFFFFA8F8072F07
%2F072F072F072F072F072F072F0627FD04FF7D7D4B52277DA8FD04FF27FD
%06F827FD07FFA852F8F827FF7D27FCFCFCC2FFFCFCFC4BF827FD05F827F8
%2752FD06FF7DF8FD100728F827F8527DFD0AFF52FD07F8A8FD05FF7DFD05
%F8FFFF7DF8FCFCFC99FFFCFCFC4452FD0CFFA85227A87D27072F072F072F
%072F072F072F072F072F06FD06F82752A8FD05FFA8FD07F827FD04FF5227
%FD04F827FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD09FFA87D27F8F8F8277D
%F8FD100728F827FD07F827A8FFFFFFFD08F852FFFF7DFD06F852FD04FF7D
%F8FCFCFCBBFFFCFCFC2052FD06FF2727FD07F827A8F8072F072F072F072F
%072F072F072F072F062727FD08F87DFFFF4BFD08F8FFA827FD06F852FD05
%FF7D27FCFCFCC2FFFCFCFC26F8FD06FFA8FD09F8FFF828FD0F07272727FD
%08F852FFA1FD08F85251FD07F87DFD06FF7DF8FCFCFCBBFFFCFCFC20F827
%FD06FF4BFD08F87D7DF82F072F072F072F072F072F072F072FF87D27FD08
%F852FF27FD0FF8277DFD07FF7D27FCFCFCC2FFFCFCFC4AF8F8F8A7FD04FF
%A7FD08F827FFF8F8FD0D0706F8FF27FD08F8277DFD10F87DFD08FF7DF8FC
%FCFCBCFFFCFCFC44FD04F87CFD04FF27FD08F8A8A8F8002F072F072F072F
%072F072F072752FFFD09F852FD0FF8277DFD09FF7D27FCFCFCC2FFFCFCFC
%4B27FD04F827FFFFFF7DFD09F8FF7DF8F8FD0A0705F8FFFF27FD18F87DFD
%0AFF7DF8FCFCFC99FFFCFCFC4452FD05F84BFFFFFF27FD08F851FFA82705
%2F072F072F072F0727F8FFFFFFFD18F87DFD0AFF7DF827FCFCFCC2FFFCFC
%FC4B277DFD05F827A8FF27FD09F827FFA827F8FD05070627F8FD04FFFD17
%F852FD0AFF52F827F8FCFCFCBBFFFCFCFC2052FF27FD05F827A8A8FD0AF8
%27FFA827052F072F05F852FD05FFFD16F852FD0AFF27F8277D27FCFCFCC2
%FFFCFCFC4B27FF52FD06F827A8FD0BF852FFA1F8060706F87DFD06FFFD15
%F827FD09FFA827F8F8A17DF8FCFCFCBBFFFCFCFC2652FFFFFD07F82727FD
%0BF8A8FF5227072752FD07FFFD14F827FD09FFA827F8F876FF7D27FCFCFC
%C2FFFCFCFC4B27FFFF52FD07F820FD0BF87DFFFFF805F8FD07FF7DFD14F8
%FD09FFA820F8F827FFFF7DF8FCFCFCBCFFFCFCFC4B52FFFFA8FD13F8A8FF
%FF52F852FD07FF7DFD13F8A8FD08FF7D27F8F8F8FFFFFF7D27FCFCFCC2FF
%FCFCFC4B27FFFFFFFD13F8FFFFFFA8F87DFD07FF7DFD12F87DFD08FFA8FD
%04F8A8FFFFFF7DF8FCFCFC99FFFCFCFC4B52FFFFFF52FD12F8FFFFFF7DF8
%7DFD07FF52FD11F852FD08FFA827F8F8F852FD04FF7D27FCFCFCC2FFFCFC
%FC4B27FFFFFF7DFD12F8FFFFFF262727FD07FF27FD10F820FD08FFA827F8
%F8F827FD05FF7DF8FCFCFCBBFFFCFCFC2652FD04FFFD11F827FFFFA8F826
%51FD07FF27FD0FF827A8FD08FF27FD04F8A8FD05FF7D27FCFCFCC2FFFCFC
%FC4B27FD04FF27FD11F8FFFF76F875F8FD07FFFD10F84BFD08FF27FD04F8
%27FD06FF7DF8FCFCFCBBFFFCFCFC2652FD04FF52FD10F827FFFFF8757427
%FD07FF27FD0FF8FD08FF52FD05F8FD07FF2727FCFCFCC2FFFCFCFC4B27FD
%04FFA8FD11F8FF7CF8C67BF8FD07FFFD0FF8A8FD07FF7DFD05F87DFD05FF
%7DF8F8F8FCFCFCBCFFFCFCFC4B52FD05FFFD10F827FF2726C67427FD06FF
%7DFD0EF852FD07FFA8FD05F827FD04FFA827F8F82727FCFCFCC2FFFCFCFC
%4B27FD05FFFD11F87DF8C6C64B27FD06FF76FD0EF8FD07FFCFFD06F8A8FF
%FFFF7DF8F8F8527DF8FCFCFC99FFFCFCFC4B27FD05FF4BFD10F82651C6C6
%4B52FD06FF27FD0DF87DFD07FF27FD05F827FFFFFF51F8F8F852FF7D27FC
%FCFCC2FFFCFCFC4BF852FD04FF27FD10F8209EC6C62752FD06FF27FD0DF8
%FD07FF52FD06F8FFFFFFFD04F851FFFF7DF8FCFCFCBBFFFCFCFC26F8F87D
%FFFFFF7DFD10F850C6C6C6F8A8FD06FFFD0DF8A8FD06FF7D27FD05F852FF
%A8FD04F827FFFFFF7D27FCFCFCC2FFFCFCFC4BF8F8F8A7FFFF7DFD10F89E
%C6C674F8FD06FF7DFD0CF827FD07FFFD07F8A8A7FD05F8FD04FF7DF8FCFC
%FCBBFFFCFCFC26FD04F8FFFFFFFD10F874C6C65127FD06FF7DFD0CF8A8FD
%06FF52FD06F827A8FD05F8FD05FF7D27FCFCFCC2FFFCFCFC4BFD05F8FFFF
%FD10F875C6C6F852FD06FF27FD0BF827FD05FFA727FD07F87DFD05F8A7FD
%05FF7DF8FCFCFCBCFFFCFCFC4BFD05F852FF27FD0FF84AC67AF87CFD06FF
%27FD0BF8A8FFFFFF7D20FD0EF87DFD06FF7D27FCFCFCC2FFFCFCFC4BFD06
%F8A127FD0FF827C627F827FD05FFA7FD0BF827FFFF27F8F85126FD0CF827
%FD07FF7DF8FCFCFC99FFFCFCFC4BFD06F82727FD0FF820A5F87BF8FD05FF
%52FD0BF8524BF82774C69EFD0CF827A8FD07FF7D27FCFCFCC2FFFCFCFC4B
%FD07F827FD10F82627C62052FD04FF27FD0CF8269FC6C6C627FD0CF87DFD
%08FF7DF8FCFCFCBBFFFCFCFC26FD19F89EC64A27FD04FFFD0BF851FD05C6
%51FD0CF827FD09FF7D27FCFCFCC2FFFCFCFC4BFD19F8C6C6C6F8A8FFFF52
%FD0AF826FD06C6FD0DF8CFFD09FF7DF8FCFCFCBBFFFCFCFC26FD18F84BC6
%C6C65127FFFF27FD0AF850FD05C626FD0CF87DFD0AFF7D27FCFCFCC2FFFC
%FCFC4BFD19F8C6C6C69EF87DA8FD0BF8FD05C674FD0CF827FD0BFF7DF8FC
%FCFCBCFFFCFCFC4BFD19F89EC6C6C64A2727FD0AF851FD04C674FD0DF8A8
%FD0BFF7D27FCFCFCC2FFFCFCFC4BFD19F851FD04C6FD0CF89EC69E51FD0E
%F851FD0CFF7DF8FCFCFC99FFFCFCFC4BFD19F826FD04C675FD0BF8C74BF8
%F87DFD0DF8FD0DFF7D27FCFCFCC2FFFCFCFC4BFD1AF8FD04C6FD0BF827F8
%277DFF51FD0CF876FD0DFF7DF8FCFCFCBBFFFCFCFC26FD1AF875C6C674FD
%0BF8207DFFFFA8FD0CF827FD0EFF7D27FCFCFCC2FFFCFCFC4BFD1AF826C6
%C6FD0CF8FD04FF52FD0CF87DFD0EFF7DF8FCFCFCBBFFFCFCFC26FD1BF89E
%51FD0BF87DFD04FFFD0CF827FD0FFF7D27FCFCFCC2FFFCFCFC4BFD1BF84B
%FD0CF8A8FFFFFF27FD0CF876FD0FFF7DF8FCFCFCBCFFFCFCFC4B27FD26F8
%27FFFFFFA8FD0CF827FD10FF7D27FCFCFCC2FFFCFCFC4B27FD26F852FFFF
%FF52FD0CF852FD10FF7DF8FCFCFC99FFFCFCFC4B5227FD25F87DFFFFFFFD
%0DF8FD11FF7D27FCFCFCC2FFFCFCFC4B27A8FD25F8FFFFFF27FD0CF827FD
%11FF7DF8FCFCFCBBFFFCFCFC2652FF52FD23F827FFFFFF27FD0CF87DFD11
%FF7D27FCFCFCC2FFFCFCFC4B27FFA8FD23F827FFFF76FD0DF8FD12FF7DF8
%FCFCFCBBFFFCFCFC2652FFFF27FD22F87DFFFFFD0DF852FD12FF7D27FCFC
%FCC2FFFCFCFC4B27FFFFA8FD22F8FFFF7DFD0DF8A8FD12FF7DF8FCFCFCBC
%FFFCFCFC4B52FFFFFF27FD21F8FFFF27FD0DF8FD13FF7D27FCFCFCC2FFFC
%FCFC4B27FFFFFF7DFD20F827FFA8FD0DF852FD13FF7DF8FCFCFC99FFFCFC
%FC4B52FD04FFFD20F852FF27FD0DF8A8FD13FF7D27FCFCFCC2FFFCFCFC4B
%27FD04FF52FD1FF851FD0FF8FD14FF7DF8FCFCFCBBFFFCFCFC2652FD04FF
%A8FD20F827FD0DF827FD14FF7D27FCFCFCC2FFFCFCFC4B27FD05FFFD1FF8
%FFFD0EF852FD14FF7DF8FCFCFCBBFFFCFCFC6827FD05FF52FD1DF8277DFD
%0EF8A8FD14FF274BFCFCFCC2FFFD04FCF852FD04FF7DFD1DF82751FD0EF8
%FD14FF7DF88CFCFCFCBCFFFD04FC93F852FD04FFFD1DF852FD0EF827FD13
%FF7DF844FD04FCC2FFFD05FC8CF82727522720FD2BF82727522752275227
%5227522752275227522752F8F844FD05FC99FFFD07FC444B264B2727204B
%2627204B2627204B2627204B4B4B264B4B4B264B4B4B264B4B4B264B4B4B
%264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B
%8CFD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
373.4717 313.875 m
220.4009 313.875 L
220.4009 551.9854 L
373.4717 551.9854 L
373.4717 313.875 L
fu0 0 0 0 k
227.936 535.4302 m
227.7695 330.4307 l
227.436 320.5967 240.936 321.0967 v
357.1025 320.9307 l
365.6025 322.0967 365.9365 331.9307 v
365.9365 535.5967 l
364.9365 544.5967 356.1025 544.9302 v
237.2695 544.7637 l
228.6025 543.7637 227.936 535.4302 v
f1 0.6 0 0 k
264.436 456.4307 m
260.269 460.0967 253.1025 460.4307 v
245.936 460.7637 240.1025 456.4297 238.1025 454.0967 c
236.1025 451.7637 232.769 446.2637 228.1025 444.4307 c
228.1025 442.2637 l
234.9355 440.4297 242.6025 441.5967 v
250.2695 442.7637 260.103 446.0967 265.2695 454.0967 c
264.436 456.4307 l
f281.7695 450.5967 m
275.4365 453.9297 273.2695 459.5967 v
271.1025 465.2637 272.1025 470.4307 273.1025 472.4307 c
274.1025 474.4307 276.1025 480.4307 y
279.936 472.5967 281.436 469.9307 v
282.936 467.2637 287.4355 461.2637 287.1025 452.2637 c
290.6025 452.4307 293.1025 449.4307 v
295.6025 446.4307 296.6025 439.5967 294.2695 431.7637 c
291.9365 423.9307 287.7695 422.9297 286.436 422.0967 c
285.1025 421.2637 281.1025 419.4307 279.1025 411.7637 c
276.7695 416.9307 274.436 419.9307 v
272.1025 422.9307 268.6025 425.7637 265.936 428.7637 c
263.2695 431.7637 261.436 437.0967 261.936 441.7637 c
262.436 446.4307 264.769 450.7637 271.1025 450.7637 c
277.436 450.7637 278.1025 447.9307 y
281.7695 450.5967 l
f289.6025 455.2637 m
292.103 455.4307 294.2695 452.4307 v
296.436 449.4307 297.769 446.5967 304.4365 444.9307 c
311.1025 443.2637 315.2686 444.7637 318.4365 445.9307 c
321.6025 447.0967 325.1025 449.4307 327.4365 448.9307 c
324.6025 453.7637 323.7686 455.2637 v
322.9365 456.7637 322.4365 462.2627 316.1025 467.0967 c
309.7686 471.9307 296.7695 475.0967 287.936 465.0967 c
292.103 466.5967 295.936 463.7637 v
299.7695 460.9307 297.7695 458.7637 294.7695 457.9307 c
291.7695 457.0967 289.6025 455.2637 y
f0 0.2 1 0 k
267.2695 449.9307 m
263.936 456.4307 263.436 459.2637 v
262.936 462.0967 262.7695 463.4307 y
259.436 465.0967 257.436 469.7637 v
255.436 474.4307 256.936 478.0967 y
259.9365 477.2637 262.2695 473.9307 v
264.6025 470.5967 267.936 465.4307 y
271.2695 463.5967 269.936 450.5967 v
267.2695 449.9307 l
f279.1025 411.7637 m
277.1025 402.5967 269.436 391.2637 v
269.6025 374.0967 l
278.936 351.9307 l
287.436 365.5967 l
282.269 368.0967 277.1025 383.9307 v
282.769 394.9307 279.1025 411.7637 v
f309.2686 377.5967 m
329.4365 385.5967 l
319.4365 368.5967 l
303.2695 361.5967 302.6025 360.9307 v
301.9355 360.2627 301.7686 361.4307 302.4355 362.9307 c
303.1025 364.4307 309.2686 377.5967 y
f*u
1 D
0.65 0.53 0.51 1 k
237.8574 545.4722 m
231.9961 545.4722 227.2275 540.7036 227.2275 534.8423 C
227.2275 331.0186 L
227.2275 325.1572 231.9961 320.3877 237.8574 320.3877 C
356.0146 320.3877 L
361.876 320.3877 366.6455 325.1572 366.6455 331.0186 C
366.6455 534.8423 L
366.6455 540.7036 361.876 545.4722 356.0146 545.4722 C
237.8574 545.4722 L
f0 D
228.6445 331.0186 m
228.6445 534.8423 L
228.6445 539.9224 232.7773 544.0552 237.8574 544.0552 C
356.0146 544.0552 L
361.0947 544.0552 365.2275 539.9224 365.2275 534.8423 C
365.2275 331.0186 L
365.2275 325.9385 361.0947 321.8057 356.0146 321.8057 C
237.8574 321.8057 L
232.7773 321.8057 228.6445 325.9385 228.6445 331.0186 C
f*U
227.936 395.1807 m
236.936 386.1807 241.936 376.1807 v
241.436 407.9307 227.936 429.1807 v
227.686 434.1807 l
242.686 423.9307 250.686 412.9307 v
245.936 430.4307 241.436 435.9307 v
246.936 436.4307 249.686 436.9307 v
252.436 437.4307 255.936 439.9307 y
258.186 439.6807 258.436 438.6807 v
258.686 437.6807 258.186 427.6807 267.436 421.1807 c
271.186 417.9307 270.936 416.4307 v
270.686 414.9307 266.436 383.9307 279.186 354.1807 c
299.1855 379.6807 297.186 441.9307 v
309.9365 438.4307 310.9365 438.4307 v
311.9365 438.4307 312.9365 438.1807 313.4365 436.9307 c
313.9365 435.6807 314.1865 427.9307 314.1865 425.4307 c
336.1865 466.1807 359.9365 477.6807 v
361.1865 477.9307 359.6865 475.6807 v
358.1865 473.4307 341.1865 453.9307 333.4365 430.9307 c
346.1865 441.1807 361.4365 444.4307 v
361.9365 443.4307 360.6865 442.6807 v
359.4365 441.9307 333.6865 421.1807 318.6865 393.9307 c
303.6855 366.6807 298.936 348.9307 294.936 321.4307 c
241.936 321.1807 l
238.936 337.4307 227.936 354.9307 v
227.936 395.1807 l
f296.186 321.4307 m
319.9365 392.6807 365.6865 425.9307 v
365.9365 424.4307 l
349.1865 405.6807 339.9365 382.1807 v
351.6865 394.9307 365.4365 402.4307 v
365.4365 400.1807 l
331.6865 369.6807 323.1865 321.4307 v
296.186 321.4307 l
f247.7412 460.3623 m
240.6392 458.333 237.228 453.9385 234.9707 451.0303 C
233.4351 449.1807 L
231.269 447.0156 227.3496 444.5557 227.3105 444.5313 C
228.0615 443.3291 L
228.2275 443.4326 232.1563 445.8984 234.437 448.1787 C
236.0903 450.1611 L
238.2344 452.9229 241.4741 457.0967 248.1309 458.999 c
255.5059 461.1064 261.1128 457.4189 262.9556 456.208 C
263.6191 455.7959 L
263.9478 455.6318 264.1777 454.6992 264.2134 453.8799 C
263.0317 452.2139 252.9312 439.209 228.2837 442.6318 C
228.0884 441.2275 L
255.228 437.459 265.436 453.1436 265.5356 453.3027 C
265.6445 453.4756 L
265.6445 453.6807 L
265.6445 454.1289 265.5776 456.4014 264.2529 457.0635 C
263.7339 457.3916 L
261.7573 458.6924 255.7417 462.6475 247.7412 460.3623 c
f*u
1 D
275.2603 480.6436 m
271.7666 470.1631 L
271.374 469.0342 271.1855 467.7646 271.1855 466.4248 c
271.1855 460.5928 274.7817 453.458 280.627 450.5527 C
279.8706 449.958 279.1826 449.418 278.6035 448.9629 C
277.772 449.9424 275.6113 451.3887 269.936 451.3887 c
267.3652 451.3887 265.2729 450.3906 263.7183 448.4219 c
261.0176 445.0029 260.5562 439.2158 261.4966 435.2666 c
262.6138 430.5752 266.4492 427.1494 269.833 424.126 C
271.4536 422.6611 L
274.8223 419.5332 277.5542 414.1025 278.5278 411.667 C
279.27 409.8115 L
279.8628 411.7197 L
280.4668 413.6641 282.5303 418.998 284.793 420.3174 c
287.8267 422.0869 293.3169 425.2881 295.3721 433.2529 c
295.9834 435.6201 296.2524 437.915 296.2524 440.0322 c
296.2524 445.332 294.5654 449.5283 292.3291 451.0205 c
290.1743 452.4561 288.5415 452.8916 287.6611 453.042 C
287.6616 453.1045 287.6636 453.1396 287.6636 453.2119 c
287.6636 455.4473 287.2993 461.8271 283.5488 468.2861 c
279.1094 475.9326 276.5879 480.7129 276.563 480.7607 C
275.7891 482.2305 L
275.2603 480.6436 L
f0 D
278.874 447.373 m
283.3525 450.8916 L
282.1919 451.3408 L
275.9995 453.7373 272.6304 461.1201 272.6304 466.5381 c
272.6304 467.7051 272.7866 468.7822 273.1055 469.6973 C
275.3315 476.376 276.0889 478.6475 V
277.1489 476.6904 279.2715 472.8291 282.3232 467.5742 c
285.9331 461.3564 286.2417 455.0654 286.2417 453.1006 c
286.2417 452.708 286.2295 452.4873 286.229 452.4756 C
286.1821 451.7334 L
286.9307 451.7217 L
286.9492 451.7217 288.7949 451.6729 291.543 449.8408 c
293.4565 448.5645 294.8345 444.7822 294.8345 440.0762 c
294.8345 438.0488 294.5786 435.8506 294 433.6074 c
292.0923 426.2158 287.1284 423.3213 284.1631 421.5908 c
281.8174 420.2236 280.0049 416.1777 279.1157 413.8467 C
277.7515 416.7686 275.3521 420.9756 272.4185 423.7002 C
270.7769 425.1836 L
267.5488 428.0674 263.8892 431.335 262.8755 435.5947 c
262.6152 436.6865 262.4741 437.958 262.4741 439.2822 c
262.4741 442.2334 263.1763 445.4502 264.8306 447.5439 c
266.103 449.1553 267.8208 449.9717 269.936 449.9717 c
276.8604 449.9717 277.7524 447.7393 277.7603 447.7178 C
278.0947 446.7979 L
278.874 447.373 L
f*U
263.0073 469.1338 m
262.9434 468.9209 261.4624 463.8682 263.0103 458.9668 c
264.5122 454.21 266.7168 450.0244 266.8096 449.8486 C
268.0625 450.5117 L
268.04 450.5537 265.8237 454.7637 264.3618 459.3936 c
263.8892 460.8916 263.731 462.4258 263.731 463.8066 c
263.731 465.5762 263.9829 467.0225 264.1694 467.8877 C
265.6123 467.0664 268.6953 464.8232 269.2324 460.3457 c
269.4775 458.3047 269.5586 456.5596 269.5586 455.1416 c
269.5586 452.3682 269.2476 450.8506 269.2427 450.8271 C
270.6289 450.5322 L
270.6606 450.6787 271.395 454.2197 270.6396 460.5146 c
269.8491 467.1025 264.1948 469.4873 263.9546 469.5859 C
263.2314 469.8818 L
263.0073 469.1338 L
f256.2466 478.3428 m
256.2227 478.2432 253.9771 468.3047 262.0386 462.8428 C
262.8335 464.0166 L
258.189 467.1631 257.3242 471.8809 257.3242 474.958 c
257.3242 475.7305 257.3809 476.377 257.4438 476.8916 C
260.7241 474.1787 263.0054 468.7227 263.0298 468.6631 C
264.3423 469.1982 L
264.2266 469.4814 261.458 476.1895 257.3115 478.7813 C
256.4741 479.3047 L
256.2466 478.3428 L
f*u
1 D
286.6416 465.1338 m
285.1411 463.333 L
287.3887 464.001 L
287.436 464.0146 292.1396 465.374 295.8105 463.0791 c
296.813 462.4521 297.3198 461.8086 297.3198 461.1631 c
297.3198 461.1045 297.3154 461.0459 297.3076 460.9893 c
297.1577 459.9268 295.7119 458.8887 294.7412 458.6123 c
293.2295 458.1797 289.9302 456.417 288.7725 455.7852 C
287.6289 455.6709 286.7656 455.373 286.687 455.3438 C
287.1836 454.0166 L
287.2002 454.0225 287.9839 454.2881 288.9941 454.376 C
288.9976 454.3701 289.0303 454.3105 Y
289.0337 454.3135 289.1084 454.3545 289.1704 454.3877 C
290.311 454.458 291.6929 454.2803 292.6592 453.2061 C
293.814 451.6865 L
295.9331 448.708 299.4805 443.7197 309.4189 443.4717 c
315.1924 443.3271 318.126 444.833 320.7158 446.1602 c
322.7646 447.21 324.5342 448.1182 327.4619 448.2217 C
328.6865 448.2656 L
328.0361 449.3057 L
327.999 449.3652 324.3193 455.2686 323.3584 458.1543 c
322.3916 461.0557 319.8213 468.7637 307.0908 471.6221 c
294.564 474.4346 286.7192 465.2275 286.6416 465.1338 C
f0 D
306.7803 470.2393 m
318.7295 467.5557 321.0322 460.6533 322.0146 457.7061 c
322.7998 455.3486 325.1494 451.3311 326.251 449.5107 C
323.6963 449.2178 321.9014 448.3604 320.0693 447.4209 c
317.5107 446.1104 314.8662 444.7529 309.4541 444.8887 c
300.2246 445.1201 297.0615 449.5664 294.9688 452.5088 C
293.7129 454.1543 L
293.0303 454.9131 292.2207 455.3311 291.3989 455.5713 C
292.7305 456.2549 294.2876 457.0078 295.1309 457.249 c
296.4253 457.6182 298.4585 459 298.7109 460.79 c
298.7275 460.9092 298.7373 461.0342 298.7373 461.165 c
298.7373 462.04 298.3052 463.1914 296.5615 464.2813 c
294.0786 465.833 291.2876 465.9512 289.3579 465.7744 C
292.1045 468.126 298.2515 472.1533 306.7803 470.2393 C
f*U
268.8569 390.5889 m
270.0151 389.7715 L
270.0757 389.8574 276.1279 398.5234 279.8677 411.7373 C
278.5044 412.123 L
274.8345 399.1563 268.9165 390.6729 268.8569 390.5889 C
f278.02 412.6885 m
278.0864 412.5059 284.4731 394.2529 271.0933 373.8193 C
272.2788 373.042 L
286.064 394.0957 279.4204 412.9854 279.3516 413.1729 C
278.02 412.6885 L
f276.748 384.2607 m
276.9038 383.6279 280.645 368.6904 287.7881 363.8447 C
288.584 365.0166 L
281.8911 369.5576 278.1611 384.4502 278.124 384.5996 C
276.748 384.2607 L
f308.4326 377.5918 m
308.9385 376.2686 L
309.7686 376.5859 329.3135 384.0801 333.3369 386.8467 C
332.5342 388.0146 L
328.6494 385.3428 308.6338 377.6689 308.4326 377.5918 C
f301.6006 361.0557 m
302.2705 359.8057 L
302.4092 359.8799 316.2354 367.2646 321.5635 368.2334 C
321.3096 369.6279 L
315.7627 368.6182 302.1768 361.3623 301.6006 361.0557 C
f260.436 461.1807 m
258.186 461.1807 256.186 462.1807 v
254.186 463.1807 247.686 463.1807 244.186 461.6807 c
237.686 482.9307 228.186 497.9307 v
227.936 502.4307 l
246.686 488.9307 260.436 461.1807 v
f268.436 464.9307 m
267.103 466.9297 265.7695 467.5967 v
264.436 468.2637 263.6025 469.5967 263.1025 470.4307 c
262.6025 471.2637 259.9355 475.9307 258.1025 477.4307 c
256.436 484.0967 261.436 491.7637 v
266.436 499.4307 271.6025 507.2637 272.6025 510.2637 c
272.2695 503.9307 272.2695 500.9307 v
272.2695 497.9307 274.936 480.7637 268.436 464.9307 c
f292.6025 471.7637 m
287.686 495.1807 272.436 513.4302 v
286.436 504.9302 301.6855 477.6807 v
320.4365 523.1802 346.4365 544.4302 v
348.4365 544.1802 l
333.9365 526.6802 315.1865 470.6807 v
303.7686 477.5967 292.6025 471.7637 v
f292.9902 331.0811 m
293.5488 329.7783 L
293.6177 329.8076 300.5215 332.749 305.6904 333.3936 C
305.5146 334.7998 L
300.1445 334.1299 293.2798 331.2061 292.9902 331.0811 C
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
