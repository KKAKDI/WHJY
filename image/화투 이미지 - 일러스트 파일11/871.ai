%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (871.ai)
%%CreationDate: 3/25/2002 6:37 PM
%%BoundingBox: 205 328 359 568
%%HiResBoundingBox: 205.2036 328.9902 358.2744 567.1006
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 11852 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC8C4BF826F827F826F8
%27F826F827F826F827FD05F826F827F826F827F8F8F827F826F827F826F8
%27F826F827F826F827F826F827F826F827F826F827F826F827F820206EFD
%06FC99FFFD05FC4427277D7DA17D7D7DA17D7D7DA17D5252A127F8F84B20
%27F827F8F8F852F8272027F87D52FD057D272727FD047DA17D7D7DA17D7D
%7DA17D7D7DA17D7D7DA17D7D7D52F84BFD05FCC2FFFD04FC68F852FD0BFF
%52FD05F820FD04FC20F87BC69EF827FCFCFC27F8F8F876A827F84B2026F8
%76FD17FFA8F84BFD04FCBBFFFD04FC2752FD0BFFA8F850C6C64BF8FD05FC
%F87BC6C6C6F868FCFC92F89FC69FF82720B4FCFCFC92F8A8FD17FFA8F892
%FCFCFCC2FFFCFCFC8CF8FD0CFF5126C6C6C67420FD04FC68F8C6C6C69EF8
%FCFCFCF84BC6C6C620F8FD06FC2027FD18FF2744FCFCFCBBFFFCFCFC6827
%FD0CFF267BC6C6C67BF8FD04FC9320C6C6C67427FCFCFCF89EC6C6C64A4B
%FD06FC2027F8277DFD15FF514BFCFCFCC2FFFCFCFC6EF8FD0CFF274AFD04
%C6F88CFCFCFC6827C6C6C67BF8FCFC6FF8FD04C62720FD06FC2726C626F8
%A8FD14FF5226FCFCFCBCFFFCFCFC6827FD0CFF2727FD04C62627FCFCFCB4
%F8C7C6C6C6F8FCFC4427FD04C6F86FFD05FCB4F89FC6C7F87DFFA8FD12FF
%274BFCFCFCC2FFFCFCFC6EF8FD0CFFA8F8FD04C69EF88CFCFCFC2626C6C6
%C6F892FC4A26C6C6C69EF88CFD05FC2027C6C6C626FD04F827CFFD0FFF52
%20FCFCFC99FFFCFCFC6827FD0DFF274BFD04C651F8B5FCFC68279EC6C64B
%4AFC2651C6C6C65120FD05FC68F89EC6C6C6F851C6C69E27F8FD0FFF274B
%FCFCFCC2FFFCFCFC6FF8FD0DFFA7F874FD04C627F8FCFCFC20279EC65027
%FC4A26C6C6C6F86FFD04FC68F84AFD04C6F87AFD04C6F87DFD0EFF5220FC
%FCFCBBFFFCFCFC6827FD0EFF52277AC6C6C69E27F86FFCFCF827C6C6F893
%4451C6C64A27FD04FC682750FD04C675F8FD05C62652FD0EFF4B4BFCFCFC
%C2FFFCFCFC68F8FD0FFF51F84AFD04C651F82768FCF8269E27206FF8C69E
%F868FCFCFC20F84AFD05C6F84BFD05C64B27FD0EFF5220FCFCFCBBFFFCFC
%FC6827FD10FF7D27F875C6C6C6C74BF8F84B20F850F844279E2720FCFC6F
%F8277AFD05C651279EFD05C62652FD0EFF514BFCFCFCC2FFFCFCFC6EF8FD
%11FFA852F8F8F8262627FD07F827F8F8F84B20F8F875FD06C626F82026F8
%5150C674F8A8FD0EFF5226FCFCFCBCFFFCFCFC6827FD14FFA87D5252527D
%52FD0AF84B7AFD05C69E752020204B686F2027F8F827FD0FFF274BFCFCFC
%C2FFFCFCFC6EF8FD1BFF51FD0CF826F827F8F8F84B8CFD06FC6EF87DFD0F
%FF5220FCFCFC99FFFCFCFC6827FD1CFF27FD0BF844936893FD0BFC6FF8FD
%0FFF274BFCFCFCC2FFFCFCFC6FF8FD0CFF7DF82727A8FD0CFFFD0CF88CFD
%0EFCF8FD0FFF5220FCFCFCBBFFFCFCFC6827FD0BFF27FD05F8A8FD0BFF52
%FD07F8527DFF272068FD0CFC93F8FD0FFF4B4BFCFCFCC2FFFCFCFC68F8FD
%0AFF52FD07F827F8F8F827A8FD05FFFD05F827A1FD05FF27F820FD0BFCF8
%4BFD0FFF5220FCFCFCBBFFFCFCFC6827FD09FFA8FD0DF827FD05FFF87D7D
%F827FD08FF7D27F86F8CFD06FC6FF827A8FD0FFF514BFCFCFCC2FFFCFCFC
%6EF8FD09FFFD0FF8FD04FF76F8FF7DF8A8FD0AFF76F8F8F827204AF820F8
%52FD11FF5226FCFCFCBCFFFCFCFC6827FD08FF27FD0FF87DFFFFFFF87DFF
%2727FD0DFFA87D27524B7C7DFD13FF274BFCFCFCC2FFFCFCFC6EF8FD07FF
%27FD10F87DFFFF7DF8FFA8F8CFFD27FF5220FCFCFC99FFFCFCFC6827FD05
%FFA8FD12F8FFFFFF2727FF2752FD05FFA852522752A8FD1DFF274BFCFCFC
%C2FFFCFCFC6FF8FD05FFFD13F8FFFF7DF8FFA7F8A8FFFFFFA827FD07F852
%A8FFFFFFA87D52527DFD12FF5220FCFCFCBBFFFCFCFC6827FD04FF52FD12
%F827FFFFF852FF2727FFFFFFA827FD0BF82727FD06F852FD10FF4B4BFCFC
%FCC2FFFCFCFC68F8FD04FF52FD13F8FF7DF8A8A8F8A8FFFFFF27FD15F87D
%FD0FFF5220FCFCFCBBFFFCFCFC6827FD04FFA8FD12F827FF2727FF2752FF
%FFFF52FD16F87DFD0FFF514BFCFCFCC2FFFCFCFC6EF8FD05FF7D27F82727
%527D7DA8FF7D7D27FD06F87DF8FF7DF8A8FFFF76FD17F8FD10FF5226FCFC
%FCBCFFFCFCFC6827FD13FF7CFD05F852FF2727FFFF7CFD17F8A8FD10FF27
%4BFCFCFCC2FFFCFCFC6EF8FD14FFCFFD04F8FF7DF8CFFF76FD17F8A8FD11
%FF5220FCFCFC99FFFCFCFC6827FD16FFF8F852FFF852FF52FD16F827FD13
%FF274BFCFCFCC2FFFCFCFC6FF8FD09FFA752272727527DFD06FF27F8FF52
%F827FD16F8277DFD14FF5220FCFCFCBBFFFCFCFC6827FD08FF52FD08F87C
%A8FFFF7DF8A8A8FD16F82752A8FD16FF4B4BFCFCFCC2FFFCFCFC68F8FD07
%FF52FD0BF852FFF852FF4BF8A7FD04FFA17D52522727F827F827F8272776
%7DFD1AFF5220FCFCFCBBFFFCFCFC6827FD06FFA827FD0DF827FFA8F8A8FD
%2EFF514BFCFCFCC2FFFCFCFC6EF8FD06FF27FD0FF8FFF852FD2FFF5226FC
%FCFCBCFFFCFCFC6827A87D4B522752FD10F82727FD30FF274BFCFCFCC2FF
%FCFCFC6EFD18F852FD30FF5220FCFCFC99FFFCFCFC68FD18F852FD30FF27
%4BFCFCFCC2FFFCFCFC6FFD19F8FD30FF5220FCFCFCBBFFFCFCFC68FD19F8
%FD30FF4B4BFCFCFCC2FFFCFCFC68FD19F87DFD2FFF5220FCFCFCBBFFFCFC
%FC68FD19F852FD2FFF514BFCFCFCC2FFFCFCFC6EFD19F827FD2FFF5226FC
%FCFCBCFFFCFCFC68FD1AF8FD2FFF274BFCFCFCC2FFFCFCFC6EFD1AF827FF
%A827F8F8F8277CFD26FF5220FCFCFC99FFFCFCFC68FD18F8754AF820F820
%93FC93202752FFA8524B5227A8FD1EFF274BFCFCFCC2FFFCFCFC6FFD17F8
%C6C6C674F820FD05FC68F8F8F826512627F84BFD1DFF5220FCFCFCBBFFFC
%FCFC68FD16F827FD04C67427FD05FC6FF84B9EFD04C6C7F8FD04277DFD18
%FF4B4BFCFCFCC2FFFCFCFC68FD13F820F8F8F8FD05C6F86EFCFCFC6FF87B
%FD06C69EF8F84B684AF8277DFD08FFA82727F82727A8FD07FF5220FCFCFC
%BBFFFCFCFC68FD12F84BFCB52027FD05C62744FCFC93F89FFD06C6A42720
%FD05FC2027A8FD06FF52FD07F852FD06FF514BFCFCFCC2FFFCFCFC6EFD11
%F820FCFCFC92F89EFD04C6F826F8F8F8279EC64A2720519E2720FD07FCF8
%52FD05FF27FD09F852FD05FF5226FCFCFCBCFFFCFCFC68FD11F844FD04FC
%2726C6C6C67AF820B4FC9220F8F827446F20F8F8B4FD07FC4B4BFD04FF52
%FD0BF8A8FD04FF274BFCFCFCC2FFFCFCFC6EFD11F868FD04FC8CF8267B74
%2644FD05FC20F8FD04FC20F8FD08FC2052FFFFFF7DFD0CF827FD04FF5220
%FCFCFC99FFFCFCFC68FD0EF827F8F844FD04FCB520F8F827F8FD06FCB5F8
%93FD04FCF86FFD07FC277DFFFFFFFD0EF8A8FFFFFF274BFCFCFCC2FFFCFC
%FC6FFD0BF827747B7427F820FD04FCF8279EC6264BFD07FCF868FD04FC4A
%20FCFCFC8C6F2026F876A8FF27FD0EF827FFFFFF5220FCFCFCBBFFFCFCFC
%6827FD09F89FFD05C67BF827FD04F8C6C6C65120FD07FCF86F684B449344
%27FC9326F8F851264B202752FD10F852FFFF4B4BFCFCFCC2FFFCFCFC68F8
%27FD07F87BFD06C64AF820FCFC274AC6C6C64A20FD06FC44F8F8272626F8
%F8204AF8279EFD05C674FD12F852FF5220FCFCFCBBFFFCFCFC6827FF52FD
%05F827FD06C69EF868FCFCFC207BC6C6C69FF84BFD04FC8C2726FD04C69F
%F820F89FFD08C651FD12F8A8514BFCFCFCC2FFFCFCFC6EF8FFFFA7FD04F8
%26FD06C64B20FCFCFC8C27F8272627F826F827446E44F8F8FD07C6F89EFD
%09C651FD12F8275226FCFCFCBCFFFCFCFC6827FD04FF7D27F851C67B2627
%F8F8F86FFCFC4AF8F8515027F8B4FC9244272027442750FD06C62774FD06
%C6A5747B26FD12F827274BFCFCFCC2FFFCFCFC6EF8FD06FF52F8F8F84B68
%8C8C2720FC20F874C6C6C62668FD08FC4427FD06C6F87BFD04C650F8F827
%FD15F85220FCFCFC99FFFCFCFC6820F852A8FFFFFF52F820FD05FC68F820
%279EFD04C65168FD08FC27F8519EC6C6C67AF8204B74C726F844FD04FC4B
%FD11F827274BFCFCFCC2FFFCFCFC6FFD04F827FF76F868FD07FC44F874FD
%05C6F8F88CFD05FC8C20F86FF8F84A7B4AF8206F20F8F8278CFD06FC6FFD
%11F85220FCFCFCBBFFFCFCFC6827FD06F844FD08FC2726FD05C69EF820F8
%204B204BF8F820B4FCFC6EF8F82768FCFCFC8C27F8FD08FC27FD0FF8524B
%4BFCFCFCC2FFFCFCFC68FD07F8FD07FC8C68F89FFD05C675F88C8C4AF826
%2627F892FD04FC68F868FD05FC44F868FD07FC20FD0FF87C5220FCFCFCBB
%FFFCFCFC6827FD05F827FD04FC8C4BF8F8F82774FD04C6C7F84BFCFCFC27
%51C6C651F8FD05FC2027FD06FCF84BFD06FC8C27FD0FF87D514BFCFCFCC2
%FFFCFCFC6EFD06F820FCFC9220F82675C6C6F827C6C6C69FF820FD04FCF8
%9FC6C6C62744FD04FC8CF8FD06FCF8F82020FD04FC20FD10F8275226FCFC
%FCBCFFFCFCFC68FD06F84BFC6FF8279EC6C6C650F8F8272027F827FD04FC
%8CF8FD04C65027FD05FCF8206FFCFC4427F8C65027F827FD13F827274BFC
%FCFCC2FFFCFCFC6EFD07F827F851FD04C650F868FC686E682020FD04FC6E
%F8FD05C6F8FD04FC92F827FD04F826FD04C627FD15F85220FCFCFC99FFFC
%FCFC6820FD07F851FD05C62768FD05FCF893FD04FC4A27FD05C6F88CFCFC
%B5F827C62774FD08C627FD13F827274BFCFCFCC2FFFCFCFC6FFD08F8FD05
%C67BF8FD06FC2644FD04FCF826FD05C6F84BFCFCF8F89EC6F827FD08C67A
%FD13F8275220FCFCFCBBFFFCFCFC6827FD06F84AFD05C64A27FD06FC68F8
%686F2020F827FD05C6FD04F8277AC6C627F8279EFD07C6FD13F87D4B4BFC
%FCFCC2FFFCFCFC68FD07F8FD05C67427F8FD07FCFD04F8208CF89EC6C6C6
%9FF8FD07C6F88CF8269EFD06C6FD13F8FF5220FCFCFCBBFFFCFCFC6827FD
%05F827C6C6C6A5F82720F844FD04FCB52027F86FFCFCFC4B26C6C6C64B27
%FD06C62627FCFC2027FD05C67BFD11F827A8FF514BFCFCFCC2FFFCFCFC6E
%FD07F8C6C67BF8278CFC44F8F86F6826F8278C4A20FCFCFC8CF84AC69EF8
%F82650C6C69E26F88CFCFCFCF84BFD04C6F82727FD0EF852A8FFFF5226FC
%FCFCBCFFFCFCFC68FD06F827C69FF86FFD04FC8C4BF827206FFCFC8CF868
%FCFCFC6827F8F820C74AFD04F8278CFD04FC93F89FC6C650F8A8FF7D27FD
%09F8527DFD05FF274BFCFCFCC2FFFCFCFC6EFD07F826F84AFD06FCF820FD
%06FC20F868FC8C6EF8F8F8C6C6C674F88CFD08FC27F84BF8F87DFD04FFA8
%27FD05F827A8FD07FF5220FCFCFC99FFFCFCFC68FD09F88CFD05FC68F88C
%FD05FC20F82027F8F8F86F2651FD04C6264BFD08FC68202752A8FD08FF7D
%7DA1A8FD09FF274BFCFCFCC2FFFCFCFC6FFD09F8FD06FC2744FD05FC2027
%8CFD06FC2774FD04C69EF8FD09FCF8FD18FF5220FCFCFCBBFFFCFCFC68FD
%08F827FD05FC92F8FD05FC68F88CFD07FCF87BFD05C62744FD08FCF8FD18
%FF4B4BFCFCFCC2FFFCFCFC68FD09F8FD05FC4420FD05FC2720FD07FC44F8
%4AFD05C62026FD08FCF8FD18FF5220FCFCFCBBFFFCFCFC68FD08F8278CFD
%04FC4B20FD05FCF86FFD07FC272051FD05C675F893FD06FC6827FD18FF51
%4BFCFCFCC2FFFCFCFC6EFD07F852F84BFD04FC20F8FD05FCF88CFD06FC4B
%F84AF8FD05C67AF8F86FFD05FC2027FD18FF5226FCFCFCBCFFFCFCFC68FD
%06F8A8FF76F84BFCFC20F8F86FFCFCFC92F86FFD05FC92F86F8CF89EFD04
%C6C7F87DF827446F6827F8FD19FF274BFCFCFCC2FFFCFCFC6EFD04F827CF
%A827FD07F851F8204427F826F8FD04FC4BF84AFCFCF851FD04C67427FFFF
%5227F82620FD1AFF5220FCFCFC99FFFCFCFC68F8F852A8FFA827FD07F827
%C6C74A27F875C64BF827F827F86FFCFCFC4BF8FD04C65127FD21FF274BFC
%FCFCC2FFFCFCFC6FF8FD04FF27FD08F826FD04C6F89EC6C69F5026F892FD
%04FC20F820C6C6C6F82752A8FD1FFF5220FCFCFCBBFFFCFCFC6827FFFFFF
%7DFD09F84BC6C6C69FF8C7FD04C6F8F844FCFCFC8CF8F8F826A526FD04F8
%277DFD1DFF4B4BFCFCFCC2FFFCFCFC68F8FFFFFFFD0BF8C6C6C626F84AC6
%C6C626F8F8F8FCFC8CFD0EF87DFD1BFF5220FCFCFCBBFFFCFCFC6827FFFF
%76FD0BF826C751F8F827C6C726FD04F827FD11F852A8FD19FF514BFCFCFC
%C2FFFCFCFC6EF8FFFF52FD2BF820A8FD18FF5226FCFCFCBCFFFCFCFC6827
%FFFF27FD2CF827FD18FF274BFCFCFCC2FFFCFCFC6EF8FFFF27FD2DF852FD
%17FF5220FCFCFC99FFFCFCFC6827FFFF51FD2DF827FD17FF274BFCFCFCC2
%FFFCFCFC6FF8FFFF7DFD2DF827FD17FF5220FCFCFCBBFFFCFCFC6827FFFF
%FF27FD2CF84BFD17FF4B4BFCFCFCC2FFFCFCFC68F8FFFFFF52FD2CF87DFD
%17FF5220FCFCFCBBFFFCFCFC6827FD04FFFD2BF827FD18FF514BFCFCFCC2
%FFFCFCFC6EF8FD04FFA8FD2AF87DFD18FF5226FCFCFCBCFFFCFCFC6827FD
%04FFA827FD27F82752FD19FF274BFCFCFCC2FFFCFCFC6EF8FD04FF27FD27
%F827A1FD1AFF5220FCFCFC99FFFCFCFC6827FFFFFF7DFD25F82727A8FD1C
%FF274BFCFCFCC2FFFCFCFC6FF8FFFFFFFD23F827A8FD20FF5220FCFCFCBB
%FFFCFCFC6827FFFF7DFD23F87DFD21FF4B4BFCFCFCC2FFFCFCFC68F8FFFF
%27FD07F8CFA127FD18F827FD22FF5220FCFCFCBBFFFCFCFC6827FFA8FD07
%F827FFFF27FD17F827FD23FF514BFCFCFCC2FFFCFCFC6EF8FF27FD07F8A8
%7DFD19F8FD24FF5226FCFCFCBCFFFCFCFC6827A827FD07F852FD08F8277D
%A852FD0CF827FD25FF274BFCFCFCC2FFFCFCFC6EF852FD0FF852A1FD05FF
%5227FD07F8277CFD26FF5220FCFCFC99FFFCFCFC682727FD0CF82752FD0B
%FF7D7D527D7DA8FD28FF274BFCFCFCC2FFFCFCFC6FFD0DF852A8FD3AFF52
%20FCFCFCBBFFFCFCFC6827FD0BF8A8FD3CFF4B4BFCFCFCC2FFFCFCFC68FD
%0AF827FD3EFF5220FCFCFCBBFFFCFCFC8C21FD08F827FD3FFF274BFCFCFC
%C2FFFD04FCFD09F8FD3FFF7DF88CFCFCFCBCFFFD04FC6FFD07F87CFD3EFF
%A82720FD04FCC2FFFD05FC4AFD06F8527D7C7D7D7D7C7D7D7D7C7D7D7D7C
%7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D
%7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D27F820FD05FC99FFFD06FC9320
%27F827F827F8272027F8272027F8272027F8272027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720
%27F8272027F84B68FD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
358.2744 328.9902 m
205.2036 328.9902 L
205.2036 567.1006 L
358.2744 567.1006 L
358.2744 328.9902 L
fu0 0 0 0 k
212.9888 552.1289 m
212.9888 483.7959 l
212.9888 345.6289 l
218.6553 339.4629 l
226.9888 335.7949 l
341.8223 335.9629 l
350.6563 337.9609 350.4893 345.7949 v
350.4893 551.7959 l
349.6563 559.6289 340.4893 560.2959 v
221.8223 560.4619 l
214.1553 559.1289 212.9888 552.1289 v
f0 1 1 0 k
227.4888 443.6289 m
228.6138 440.1709 l
224.6558 436.2959 223.3223 433.7959 v
221.9888 431.2959 220.4888 427.2959 y
221.4888 419.9629 l
223.1553 410.6289 l
226.9888 404.9629 l
230.8223 397.7949 231.3223 396.9629 v
231.8223 396.1289 233.9888 391.1289 y
242.9888 381.6289 l
256.3223 382.7949 l
267.3223 384.4629 268.9888 384.9629 v
270.6553 385.4629 277.3223 387.6289 y
280.1553 397.2959 l
282.1553 404.7959 l
285.9893 402.1289 l
290.6563 397.1289 296.6563 397.1289 v
302.6563 397.1289 304.4063 405.9629 302.6143 410.7959 c
300.8223 415.6289 311.3223 425.6289 y
319.9893 427.2959 l
323.6563 434.1289 323.6563 435.2959 v
323.6563 436.4629 319.1563 443.2959 y
315.1563 446.7959 l
312.6143 448.5459 l
310.9902 450.7969 306.1563 452.1289 v
309.3232 458.7959 305.6563 462.2959 v
301.9893 465.7959 298.0723 465.5459 295.3643 464.4209 c
292.6563 463.2959 290.1563 464.6289 y
279.8223 466.2959 l
273.9888 475.9619 263.9888 467.9619 v
257.1553 466.2959 l
250.9888 467.9619 l
244.4888 466.1289 l
239.6553 461.6289 l
234.8223 455.2959 l
227.4888 443.6289 l
f261.3638 557.2959 m
258.6138 559.6709 255.4888 559.6709 v
252.3638 559.6709 249.7388 558.6709 248.6138 556.4209 c
247.4888 554.1709 246.4888 549.0459 y
248.7388 543.9209 l
255.9888 538.1709 l
264.6138 534.5459 l
269.9888 532.1709 l
277.2388 528.9209 277.8638 528.6709 v
278.4888 528.4209 285.6143 527.5459 y
288.7393 527.9209 l
293.6143 522.2959 298.8643 520.2959 v
304.1143 518.2959 314.1143 517.7959 317.8643 522.6709 c
321.6143 527.5459 318.2393 530.2959 316.9893 531.6709 c
315.7393 533.0459 313.4893 535.6709 313.3643 536.9209 c
313.2393 538.1709 302.2393 550.7959 y
302.7393 555.4209 298.1143 557.1709 v
293.4893 558.9209 289.7393 556.9209 287.1143 554.0459 c
280.1138 556.0459 l
278.6138 558.7959 276.2388 559.7959 v
273.8638 560.7959 271.3638 559.2959 270.2388 556.7959 c
269.1138 554.2959 261.3638 557.2959 y
f0 0.2 1 0 k
266.6138 534.7959 m
256.9888 532.1709 248.9888 535.5459 v
240.9888 538.9209 237.4888 548.9209 238.4888 553.0459 c
239.4888 557.1709 245.1138 559.0459 248.1138 555.5459 c
246.3638 540.7959 266.6138 534.7959 v
f273.6138 533.6709 m
264.1138 538.5459 261.2388 544.2959 v
258.3638 550.0459 259.4888 556.0459 262.2388 558.0459 c
264.9888 560.0459 268.7388 558.7959 270.2388 556.7959 c
268.1138 553.0459 269.2388 546.9209 v
270.3638 540.7959 275.3638 532.5459 y
273.6138 533.6709 l
f277.6138 532.5459 m
275.4888 539.1709 275.8638 546.2959 v
276.2388 553.4209 279.6138 557.1709 282.4888 557.4209 c
285.3643 557.6709 287.1143 555.4209 287.1143 550.5459 c
287.1143 545.6709 283.1138 538.6709 278.8638 533.9209 c
277.6138 532.5459 l
f280.7388 533.1709 m
297.6143 534.6709 301.8643 550.9209 v
303.9893 551.6709 306.3643 550.6709 v
308.7393 549.6709 309.3643 547.2959 309.2393 545.2959 c
309.8643 544.6709 310.4893 545.0459 v
311.1143 545.4209 316.1143 547.6709 319.1143 543.4209 c
322.1143 539.1709 319.4893 533.1709 317.3643 531.9209 c
316.3643 532.0459 l
311.2393 535.6709 303.3643 533.2959 v
296.1143 529.2959 286.3643 530.5459 v
281.6138 530.5459 l
280.4888 531.4209 l
280.7388 533.1709 l
f277.6553 457.4629 m
274.6558 459.4629 273.8223 459.9629 v
275.6138 464.6709 282.1138 467.7959 v
288.6143 470.9209 294.1143 467.1709 295.3643 464.4209 c
291.3643 461.9209 288.9893 457.2959 v
284.4473 462.5039 277.6553 457.4629 v
f266.3638 458.5459 m
266.8638 462.9209 264.8638 466.9209 v
262.8638 470.9209 259.2388 471.4209 258.4888 471.4209 c
257.7388 471.4209 255.2388 470.7959 253.6138 468.5459 c
251.9888 466.2959 253.9888 462.7959 253.9888 461.9209 c
253.9888 461.0459 255.1138 457.6709 258.1138 454.7959 c
254.7388 453.6709 253.7388 451.0459 v
252.7388 448.4209 253.2388 445.2959 253.6138 444.5459 c
250.6138 443.9209 247.1138 440.1709 v
243.6138 436.4209 242.8638 431.4209 244.4888 429.1709 c
246.1138 426.9209 251.6138 426.9209 254.8638 429.9209 c
258.1138 432.9209 259.3638 437.4209 259.3638 437.9209 c
257.9888 440.0459 258.6138 442.2959 v
259.2388 444.5459 262.4888 445.9209 264.4888 446.0459 c
261.9888 448.5459 262.7388 452.7959 v
263.4888 457.0459 266.3638 458.5459 y
f241.9888 443.0459 m
242.9888 447.5459 245.1138 449.2959 v
245.1138 450.0459 l
243.2388 453.4209 l
237.9888 456.0459 l
230.6138 455.0459 229.9888 454.6709 v
229.3638 454.2959 225.9888 449.6709 y
226.6138 444.2959 l
227.8638 442.2959 l
228.6138 440.1709 l
233.9888 443.9209 241.9888 443.0459 v
f243.1138 432.6709 m
244.2388 429.5459 l
238.1138 426.9209 239.2388 418.5459 v
231.2388 417.4209 228.2388 409.4209 v
223.6138 411.6709 l
222.3638 416.1709 l
222.9888 422.6709 l
227.8638 425.9209 l
232.6138 432.6709 243.1138 432.6709 v
f241.2388 399.9209 m
241.8638 396.4209 245.3638 395.7959 v
248.8638 395.1709 252.7388 398.2959 y
253.4888 396.6709 255.8638 395.2959 v
258.2388 393.9209 260.3638 394.5459 260.9888 394.5459 c
261.6138 394.5459 261.4888 393.1709 y
259.2388 384.4209 l
254.9888 381.0449 254.6138 381.0449 v
254.2388 381.0449 245.1138 381.9199 y
238.7388 384.5459 238.1138 385.5459 v
237.4888 386.5459 234.9888 390.7959 y
237.7388 396.1709 l
241.2388 399.9209 l
f266.8638 434.6709 m
265.7388 429.5459 265.4888 428.0459 v
265.2388 426.5459 264.4888 423.1709 y
265.9888 416.7959 268.3638 414.6709 v
270.7388 412.5459 273.1138 412.6709 274.4888 414.2959 c
275.8638 415.9209 277.2388 420.7959 276.8638 426.5459 c
276.4888 432.2959 271.4888 435.5459 y
266.8638 434.6709 l
f272.6138 413.0459 m
270.7388 408.9209 272.1138 402.1709 v
273.4888 395.4209 277.9888 389.2959 y
281.4888 386.6709 281.8638 386.9209 v
282.2388 387.1709 284.9893 389.6709 y
284.8643 393.1709 l
286.9893 397.9209 285.3643 404.5459 v
283.7388 411.1709 281.4888 413.6709 y
277.8638 414.7959 277.1138 415.5459 v
276.3638 416.2959 275.9888 416.6709 y
272.4888 415.4209 272.6138 413.0459 v
f276.8638 422.2959 m
280.2388 420.2959 283.8643 421.6709 v
287.4893 423.0459 287.9893 427.5459 287.9893 428.0459 c
287.9893 428.5459 289.3643 427.9209 y
291.8643 426.7959 l
293.8643 419.6709 289.9893 415.7959 v
286.1143 411.9209 279.1138 414.4209 y
276.8638 416.1709 l
275.1138 417.2959 275.3638 417.6709 v
275.6138 418.0459 276.8638 422.2959 y
f291.8643 426.7959 m
295.2393 426.2959 298.2393 427.6709 v
301.2393 429.0459 301.4893 430.6709 y
308.3643 430.4209 312.1143 424.9209 v
315.8643 419.4209 314.7393 418.6709 y
311.7393 417.1709 l
310.8643 410.4209 302.6143 410.7959 v
298.7393 418.7959 292.3643 421.7959 v
291.8643 426.7959 l
f291.7393 446.0459 m
292.6143 442.7959 291.6143 439.7959 v
292.1143 439.2959 l
295.3643 439.6709 299.2393 437.0459 v
301.6143 439.9209 305.2393 441.0459 v
308.8643 442.1709 313.3643 441.4209 314.2393 441.2959 c
315.1143 441.1709 315.9893 445.0459 y
312.6143 448.5459 l
310.6143 451.7959 304.7393 452.1709 v
298.8643 452.5459 293.2393 448.6709 291.7393 446.0459 c
f278.1138 448.4209 m
275.9888 445.4209 l
278.1138 443.0459 277.9888 439.6709 v
281.4888 438.4209 284.3643 436.0459 v
290.2393 436.6709 291.7393 439.2959 v
293.2393 441.9209 291.7393 446.6709 290.1143 448.4209 c
288.4893 450.1709 281.2388 450.2959 278.1138 448.4209 c
f*u
1 D
0.65 0.53 0.51 1 k
222.9102 561.0039 m
217.0488 561.0039 212.2803 556.2354 212.2803 550.374 C
212.2803 345.7168 L
212.2803 339.8555 217.0488 335.0859 222.9102 335.0859 C
340.5684 335.0859 L
346.4297 335.0859 351.1982 339.8555 351.1982 345.7168 C
351.1982 550.374 L
351.1982 556.2354 346.4297 561.0039 340.5684 561.0039 C
222.9102 561.0039 L
f0 D
213.6973 345.7168 m
213.6973 550.374 L
213.6973 555.4541 217.8301 559.5869 222.9102 559.5869 C
340.5684 559.5869 L
345.6484 559.5869 349.7803 555.4541 349.7803 550.374 C
349.7803 345.7168 L
349.7803 340.6367 345.6484 336.5039 340.5684 336.5039 C
222.9102 336.5039 L
217.8301 336.5039 213.6973 340.6367 213.6973 345.7168 C
f*U
*u
1 D
264.4395 457.7441 m
262.271 455.082 261.5068 451.6191 262.4448 448.707 c
263.2817 446.1094 265.3623 444.2402 268.3037 443.4453 c
273.8848 441.9365 277.9219 444.5986 279.6719 450.9414 c
280.2007 452.8564 279.9375 454.7793 278.9111 456.502 c
277.6372 458.6396 275.3833 460.125 273.8145 460.4863 C
273.9185 460.4541 L
273.8638 460.4756 268.3892 462.5918 264.4395 457.7441 c
f0 D
268.6738 444.8135 m
265.5181 445.666 264.2783 447.6377 263.7939 449.1416 c
263.0015 451.6016 263.6704 454.5557 265.5381 456.8477 c
268.8184 460.874 273.209 459.21 273.394 459.1367 C
273.4429 459.1182 L
273.4961 459.1055 L
274.4883 458.877 276.5054 457.7695 277.6938 455.7764 c
278.5293 454.374 278.7349 452.874 278.3057 451.3184 c
276.7539 445.6934 273.5132 443.5059 268.6738 444.8135 c
f*U
258.1885 442.9463 m
257.373 441.3164 257.4585 439.4863 258.4219 437.9277 c
259.8647 435.5928 262.9873 434.2539 266.9888 434.2539 c
274.6587 434.2539 278.5088 438.127 278.6958 440.7461 c
278.9116 443.7734 276.5205 445.6582 276.2476 445.8633 C
275.397 444.7285 L
275.481 444.666 277.4473 443.1641 277.2817 440.8457 c
277.1533 439.042 274.0015 435.6709 266.9888 435.6709 c
263.4893 435.6709 260.8062 436.7656 259.6274 438.6719 c
258.9277 439.8047 258.8652 441.1309 259.4561 442.3125 c
260.9106 445.2207 264.8115 445.4199 264.8511 445.4219 C
264.7949 446.8379 L
264.6011 446.8301 260.022 446.6133 258.1885 442.9463 c
f252.6138 444.8066 m
247.835 443.3359 242.7803 437.334 242.7803 433.1289 c
242.7803 431.2109 243.4004 429.6504 244.5737 428.6143 c
245.9268 427.4199 247.9448 426.9512 250.4102 427.2598 c
252.9946 427.582 255.7681 429.3125 257.6484 431.7744 c
259.2715 433.8994 259.9966 436.251 259.6904 438.3965 C
258.2871 438.1953 L
258.5396 436.4297 257.9126 434.4551 256.522 432.6348 c
254.8643 430.4639 252.4546 428.9434 250.2344 428.666 c
248.1841 428.4092 246.5513 428.7588 245.5117 429.6768 c
244.6396 430.4463 244.1973 431.6074 244.1973 433.1289 c
244.1973 436.6836 248.9028 442.1816 253.0308 443.4521 c
256.8525 444.6279 258.5879 443.0254 258.6597 442.9561 C
259.6567 443.9629 L
259.5625 444.0576 257.3013 446.249 252.6138 444.8066 c
f264.7925 428.7598 m
264.5356 426.7275 L
264.3516 424.7861 264.1924 423.1104 262.5249 421.665 c
260.9746 420.3213 258.3076 419.6074 256.4526 420.041 c
255.4717 420.2695 254.8066 420.7842 254.4756 421.5703 c
253.2583 424.4609 254.4893 428.7188 254.502 428.7617 C
253.1426 429.1641 L
253.0854 428.9707 251.7544 424.3828 253.1689 421.0215 c
253.6792 419.8096 254.7031 418.9932 256.1309 418.6602 c
258.4175 418.127 261.5654 418.958 263.4526 420.5938 c
265.5498 422.4111 265.7515 424.5371 265.9463 426.5938 C
266.1851 428.499 L
266.6743 431.1055 267.6626 434.7393 267.6724 434.7754 C
266.3052 435.1484 L
266.2642 434.998 265.292 431.4238 264.7925 428.7598 C
f271.0981 434.7051 m
271.3418 434.543 277.0659 430.6348 276.2832 422.0264 c
275.7124 415.752 273.8369 414.167 272.77 413.7813 c
271.6357 413.3701 270.2583 413.8623 268.9897 415.1309 c
266.1938 417.9258 265.3638 423.1836 265.356 423.2363 C
263.9546 423.0234 L
263.9902 422.7891 264.8589 417.2568 267.9878 414.1289 c
269.6611 412.4551 271.5796 411.8428 273.2524 412.4482 c
274.9424 413.0605 277.085 415.1963 277.6943 421.8984 c
278.5566 431.3789 272.1514 435.708 271.8784 435.8877 C
271.0981 434.7051 L
f277.8447 438.7686 m
277.8984 438.7578 283.2515 437.5918 286.0488 432.9316 c
287.293 430.8574 287.6748 428.6953 287.1533 426.6758 c
286.6855 424.8662 285.5244 423.3105 283.9668 422.4092 c
281.2505 420.8359 277.9858 422.4863 277.6001 422.9844 C
276.355 422.3125 L
276.6846 421.6543 277.9893 421.0078 279.062 420.6875 c
280.2334 420.3359 282.52 419.9336 284.6777 421.1826 c
286.5615 422.2734 287.9639 424.1465 288.5254 426.3223 c
288.957 427.9922 289.0879 430.6201 287.2637 433.6602 c
284.1396 438.8672 278.3755 440.1064 278.1318 440.1563 C
277.8447 438.7686 L
f277.6543 448.9199 m
278.3223 447.6709 L
278.3667 447.6943 282.8071 450.0059 287.7783 448.4531 c
289.3379 447.9648 290.4229 446.9971 291.002 445.5762 c
291.9063 443.3574 291.3555 440.5195 290.6982 439.2988 c
289.7549 437.5449 286.5205 436.8379 284.5479 437.002 C
284.4307 435.5898 L
286.7676 435.3945 290.6445 436.209 291.9463 438.627 c
292.6982 440.0234 293.4639 443.291 292.3145 446.1104 c
291.5781 447.917 290.1553 449.1953 288.2002 449.8057 c
282.647 451.541 277.855 449.0293 277.6543 448.9199 C
f291.6055 440.0029 m
291.7051 438.5889 L
291.749 438.5918 296.1143 438.8496 299.334 435.7832 c
300.791 434.3945 301.3789 432.6719 300.9463 431.0586 c
300.499 429.3926 299.0566 428.1504 296.9902 427.6514 c
292.5391 426.5771 289.2803 428.6738 288.8232 429.1309 C
287.8213 428.1289 L
288.4844 427.4648 292.2588 425.0518 297.3223 426.2734 c
299.8711 426.8887 301.7383 428.54 302.3154 430.6914 c
302.8779 432.791 302.1289 435.0781 300.3105 436.8086 c
296.627 440.3184 291.8086 440.0176 291.6055 440.0029 C
f291.2988 426.8047 m
292.1523 423.0684 291.6299 419.3242 289.9346 417.0313 c
288.7334 415.4063 286.9961 414.499 284.7705 414.3359 c
278.562 413.8818 276.8667 417.2842 276.7974 417.4297 C
275.5112 416.834 L
275.5942 416.6523 277.6318 412.3926 284.874 412.9229 c
287.4932 413.1143 289.6367 414.2441 291.0742 416.1885 c
293.0371 418.8438 293.6377 422.9307 292.6797 427.1201 C
291.2988 426.8047 L
f280.3535 413.4316 m
280.377 413.4102 282.7358 411.2266 284.6357 403.7871 c
285.9707 398.5596 284.8857 393.9248 283.2183 391.6504 c
282.5454 390.7344 281.7988 390.208 281.1157 390.1699 c
278.4258 390.0195 274.7222 394.0117 273.1807 400.9492 c
271.5894 408.1113 273.2944 412.4863 273.312 412.5303 C
271.999 413.0635 L
271.9209 412.8711 270.1021 408.2705 271.7969 400.6426 c
273.5854 392.5938 277.8784 388.5703 281.1948 388.7549 c
282.3091 388.8164 283.4331 389.5479 284.3613 390.8125 c
286.0889 393.1699 287.5576 398.0732 286.0088 404.1377 c
283.9775 412.0947 281.3955 414.4033 281.2866 414.498 C
280.3535 413.4316 L
f292.2617 421.291 m
292.2998 421.2783 296.1084 419.9053 300.2236 413.416 c
302.3037 410.1367 302.8916 406.2871 301.8379 402.8516 c
301.1582 400.6367 299.8633 398.9268 298.374 398.2793 c
296.792 397.5918 294.1895 397.8867 291.5811 399.0498 c
288.7744 400.3008 286.6338 402.2695 285.9941 404.1865 C
284.6504 403.7383 L
285.4219 401.4219 287.7969 399.1855 291.0039 397.7559 c
294.0078 396.416 296.9746 396.125 298.9385 396.9795 c
300.8027 397.79 302.3936 399.8301 303.1924 402.4365 c
304.3682 406.2676 303.7227 410.5469 301.4209 414.1758 c
297.0029 421.1416 292.8867 422.5771 292.7129 422.6348 C
292.2617 421.291 L
f260.6348 410.0156 m
263.231 408.5176 266.3628 409.1855 268.5327 410.0098 c
270.0654 410.5928 272.4175 411.8398 272.6611 412.5723 C
271.3989 413.1777 L
270.8779 412.582 265.1206 409.0635 261.3428 411.2432 c
257.4355 413.498 257.5293 419.0547 257.5308 419.1113 C
256.1138 419.1484 L
256.1064 418.8867 255.9888 412.6953 260.6348 410.0156 c
f252.6436 404.166 m
251.729 401.1172 252.0117 398.248 253.4194 396.2949 c
254.6411 394.5996 256.6172 393.6641 259.1338 393.5879 c
265.0278 393.4092 271.1294 399.7676 272.1904 407.1953 C
270.7871 407.3965 L
269.8384 400.7559 264.3047 394.8496 259.1768 395.0039 c
257.1167 395.0664 255.5234 395.7998 254.5688 397.124 c
253.4209 398.7168 253.2139 401.1348 254.001 403.7588 c
255.3809 408.3584 260.0396 410.2861 260.0864 410.3047 C
259.5591 411.6201 L
259.3418 411.5332 254.2236 409.4326 252.6436 404.166 c
f238.4663 422.9609 m
237.3081 418.1348 239.3257 415.0771 244.6338 413.6133 c
247.3745 412.8564 250.0879 413.9453 251.8818 414.9922 c
253.9873 416.2207 255.9136 418.0742 256.1763 419.124 C
254.8013 419.4678 L
254.6963 419.0625 253.3174 417.459 251.1191 416.1885 c
249.5728 415.2949 247.2573 414.3594 245.0107 414.9785 c
240.4688 416.2324 238.875 418.5918 239.8442 422.6309 c
240.7622 426.4541 244.8198 429.001 244.8608 429.0264 C
244.1172 430.2324 L
243.9302 430.1172 239.5225 427.3613 238.4663 422.9609 c
f240.1294 404.7773 m
239.5586 402.1152 240.2085 399.3008 241.8677 397.248 c
243.0635 395.7695 244.626 394.9209 246.1553 394.9209 c
249.4697 394.9209 252.687 396.4844 253.3276 398.4053 C
251.9829 398.8535 L
251.6328 397.8027 249.2466 396.3379 246.1553 396.3379 c
245.0562 396.3379 243.895 396.9941 242.9697 398.1387 c
241.5771 399.8613 241.0337 402.2324 241.5151 404.4805 c
242.4648 408.9121 246.3218 413.4561 246.3604 413.502 C
245.2842 414.4238 L
245.1162 414.2275 241.1553 409.5664 240.1294 404.7773 c
f237.9473 392.3262 m
237.7573 387.959 240.8716 385.2754 243.0967 385.0898 c
245.3364 384.9033 248.2271 386.5391 249.1714 389.9395 c
250.021 392.998 250.0308 395.6836 250.0308 395.7959 C
248.6138 395.7969 L
248.6138 395.7705 248.6016 393.1826 247.8062 390.3193 c
247.0654 387.6533 244.8872 386.3633 243.2139 386.502 c
241.5078 386.6445 239.2173 388.9053 239.3633 392.2656 c
239.52 395.8691 241.5781 399.4004 241.5991 399.4355 C
240.3789 400.1563 L
240.2866 400 238.1196 396.291 237.9473 392.3262 c
f260.4927 394.3789 m
260.4961 394.3682 260.8179 393.3223 259.6748 390.75 c
258.499 388.1035 253.6958 385.2871 251.7681 386.1133 c
250.1846 386.792 249.6147 390.001 249.5288 391.1797 C
248.1152 391.0791 L
248.1528 390.5566 248.5557 385.9482 251.2095 384.8105 c
254.0825 383.5801 259.563 387.0078 260.9697 390.1748 c
262.3579 393.2988 261.9106 394.666 261.8066 394.9082 C
260.4927 394.3789 L
f269.978 388.3398 m
268.6338 387.3994 267.1689 387.0928 265.8535 387.4766 c
262.4526 388.4678 262.8574 394.6816 262.8618 394.7441 C
261.4487 394.8477 L
261.4263 394.5449 260.9585 387.4277 265.457 386.1152 c
267.1929 385.6094 269.0864 385.9863 270.7905 387.1777 c
273.1992 388.8623 274.8237 391.8271 275.0293 394.915 C
273.6152 395.0098 L
273.4399 392.3799 272.0122 389.7617 269.978 388.3398 c
f228.1851 411.4395 m
226.6978 408.3818 226.5449 404.9531 227.7549 401.7861 c
228.7515 399.1758 230.5454 397.1279 232.5537 396.3066 c
236.6016 394.6504 240.8091 398.3125 241.6362 400.1748 C
240.3413 400.75 L
239.7705 399.4658 236.29 396.3096 233.0908 397.6182 c
231.4629 398.2842 229.9258 400.0742 229.0791 402.291 c
228.46 403.9121 227.6865 407.1748 229.4595 410.8193 c
232.2573 416.5703 239.0352 417.752 239.1035 417.7637 C
238.875 419.1621 L
238.5674 419.1113 231.3101 417.8633 228.1851 411.4395 c
f230.4292 429.2188 m
225.6396 426.0254 224.1465 420.2217 223.7266 417.875 c
223.2319 415.1084 223.3716 412.6895 224.082 411.7129 c
225.6104 409.6113 228.2124 409.5879 228.3223 409.5879 C
228.3252 411.0039 L
228.3052 411.0049 226.3247 411.0391 225.2285 412.5469 c
224.8901 413.0117 224.6333 414.8945 225.1216 417.625 c
225.5093 419.793 226.8799 425.1494 231.2153 428.0391 c
237.4224 432.1777 243.2261 431.9248 243.2842 431.9219 C
243.3618 433.3369 L
243.1069 433.3516 237.0498 433.6328 230.4292 429.2188 c
f228.4019 440.5332 m
221.6235 435.5371 222.8071 428.0498 223.7212 426.5869 c
224.7329 424.9688 227.165 424.7637 227.2681 424.7559 C
227.3784 426.1689 L
226.873 426.21 225.4463 426.501 224.9233 427.3379 c
224.2529 428.4102 223.2412 434.9697 229.2427 439.3926 c
235.2178 443.7949 241.7563 442.2891 241.8218 442.2734 C
242.1567 443.6504 L
241.8647 443.7227 234.9263 445.3418 228.4019 440.5332 c
f245.8677 450.3848 m
243.6514 449.165 242.1465 447.2363 241.6309 444.9521 c
240.333 439.2021 244.9106 437.7959 244.9565 437.7822 C
245.3579 439.1416 L
245.2207 439.1836 242.0146 440.2158 243.0137 444.6396 c
243.5581 447.0527 245.2378 448.4199 246.5508 449.1426 c
248.8643 450.415 251.8145 450.665 254.2505 449.7949 C
254.7271 451.1299 L
251.9204 452.1318 248.5259 451.8467 245.8677 450.3848 c
f254.8608 453.334 m
251.0435 450.0615 252.9019 444.3145 252.9829 444.0723 C
254.3276 444.5195 L
254.311 444.5693 252.6934 449.6094 255.7837 452.2578 c
258.9336 454.958 260.9292 454.457 262.8594 453.9727 C
262.9834 453.9414 L
263.3271 455.3164 L
263.2041 455.3477 L
261.1382 455.8652 258.5674 456.5107 254.8608 453.334 c
f301.4473 430.0879 m
301.5029 430.085 306.9844 429.6982 310.2354 424.8984 c
312.043 422.2305 311.875 417.7031 309.8516 414.5938 c
308.9004 413.1318 306.7178 410.7852 302.7822 411.4932 C
302.5303 410.0986 L
305.9941 409.4746 309.0957 410.832 311.04 413.8203 c
313.3887 417.4316 313.5479 422.5361 311.4092 425.6934 c
307.7549 431.0879 301.7822 431.4883 301.5293 431.5039 C
301.4473 430.0879 L
f298.6406 437.6152 m
299.6719 436.6426 L
299.7236 436.6982 304.9932 442.1895 310.709 441.2627 c
316.249 440.3643 318.2617 436.3828 317.7881 433.0625 c
317.6006 431.751 316.6357 430.4219 315.1396 429.417 c
313.293 428.1748 311.002 427.6895 309.1611 428.1504 C
308.8174 426.7754 L
311.0693 426.2119 313.7285 426.7598 315.9307 428.2402 c
317.7588 429.4697 318.9463 431.1543 319.1904 432.8623 c
319.7598 436.8457 317.4189 441.6104 310.9355 442.6621 c
304.4717 443.71 298.876 437.8652 298.6406 437.6152 C
f291.1377 446.2793 m
292.1748 445.3125 L
292.2324 445.375 298.0586 451.5176 305.2969 451.2539 c
310.9385 451.0488 312.4717 447.9209 312.8691 446.5859 c
313.3877 444.8408 312.9775 442.959 311.9131 442.209 C
312.7314 441.0508 L
314.2939 442.1543 314.9229 444.6514 314.2275 446.9902 c
313.2188 450.3809 309.8994 452.5049 305.3477 452.6699 c
297.4531 452.958 291.3916 446.5518 291.1377 446.2793 C
f277.1543 457.7969 m
278.1548 456.793 L
278.2983 456.9355 281.7236 460.2461 286.3643 458.1504 c
288.5156 457.1777 289.4727 455.1094 289.8965 453.5449 c
290.6289 450.8379 290.2158 448.2988 289.9404 447.9102 C
291.0342 447.0088 L
291.71 447.8203 292.001 450.75 291.3789 453.4551 c
290.9131 455.4844 289.7656 458.1689 286.9482 459.4414 c
281.3994 461.9473 277.1958 457.8389 277.1543 457.7969 C
f295.9004 465.29 m
290.4893 463.1953 288.4053 457.2773 288.3193 457.0254 C
289.6592 456.5654 L
289.6787 456.6211 291.625 462.1152 296.4121 463.9688 c
298.9531 464.9521 301.2285 464.3389 302.6895 463.6514 c
304.7148 462.6973 306.1318 461.1289 306.4844 460.0723 c
307.2432 457.792 306.583 453.3848 305.0049 452.5957 C
305.6396 451.3281 L
308.0811 452.5488 308.7207 457.8428 307.8281 460.5195 c
307.29 462.1367 305.4668 463.9102 303.293 464.9336 c
300.873 466.0723 298.248 466.1992 295.9004 465.29 c
f284.8506 469.1572 m
277.1235 467.6113 273.2041 460.9326 273.041 460.6494 C
274.269 459.9414 L
274.3062 460.0059 278.0459 466.3516 285.1279 467.7676 c
291.9795 469.1377 294.582 464.1885 294.6895 463.9766 C
295.9561 464.6133 L
295.9258 464.6738 292.7891 470.7451 284.8506 469.1572 c
f254.9834 469.9033 m
253.498 468.3164 252.7754 466.0117 252.9482 463.415 c
253.2969 458.1777 257.8364 454.2539 258.0293 454.0898 C
258.9487 455.168 L
258.9058 455.2051 254.6709 458.876 254.3623 463.5098 c
254.2158 465.7109 254.8037 467.6377 256.0181 468.9355 c
256.9014 469.8789 258.0444 470.4209 259.1553 470.4209 c
260.1333 470.4209 261.8794 469.5029 263.3232 467.749 c
264.4985 466.3223 266.3384 463.2568 265.46 458.7656 C
266.8506 458.4932 L
267.8413 463.5557 265.7515 467.0293 264.4175 468.6494 c
262.8477 470.5566 260.7329 471.8379 259.1553 471.8379 c
257.6538 471.8379 256.1333 471.1328 254.9834 469.9033 c
f263.5425 468.1523 m
264.7656 467.4355 L
264.8472 467.5723 266.8174 470.7637 272.2778 470.4219 c
277.0928 470.1211 278.9287 466.0234 279.0044 465.8486 C
280.3066 466.4082 L
280.2178 466.6152 278.0693 471.4795 272.3667 471.8369 c
265.9937 472.2354 263.6396 468.3193 263.5425 468.1523 C
f227.9219 449.0313 m
226.2549 445.7803 226.3794 442.1465 228.2466 439.5488 C
229.3975 440.376 L
227.8423 442.54 227.7598 445.6094 229.1831 448.3848 c
230.4727 450.9004 233.332 453.5879 237.4888 453.5879 c
244.4658 453.5879 244.6108 449.4658 244.6138 449.291 C
246.0308 449.2959 L
246.0308 449.3535 245.9331 455.0039 237.4888 455.0039 c
233.4771 455.0039 229.811 452.7158 227.9219 449.0313 c
f244.355 461.6133 m
241.7266 456.3564 244.0869 451.5156 244.1885 451.3125 C
245.4565 451.9453 L
245.4351 451.9883 243.3193 456.373 245.6226 460.9785 c
246.624 462.9814 248.2109 464.083 249.9761 464.001 c
251.4126 463.9346 252.6929 463.0791 253.1616 461.873 C
254.4829 462.3867 L
253.814 464.1064 252.0293 465.3242 250.042 465.417 c
247.6909 465.5254 245.6182 464.1396 244.355 461.6133 c
f*u
1 D
279.8242 557.1992 m
278.1963 556.0508 276.1162 553.4717 275.4512 547.71 c
274.4434 538.9756 276.5669 533.127 276.6577 532.8828 C
276.7764 532.5645 L
277.0981 532.457 L
278.9141 531.8525 283.9199 537.334 286.6592 545.2295 c
288.5674 550.7314 287.8379 553.9297 286.8896 555.6445 c
286.166 556.9551 285.0449 557.8691 283.8154 558.1523 c
282.5513 558.4443 281.0962 558.0967 279.8242 557.1992 c
f0 D
276.6025 543.1055 m
276.6025 544.4785 276.6768 545.9658 276.8594 547.5479 c
277.4639 552.7891 279.25 555.0596 280.6416 556.041 c
281.5703 556.6973 282.6372 556.9697 283.4966 556.7715 c
283.8936 556.6797 284.8975 556.3203 285.6494 554.959 c
286.0752 554.1895 286.4424 553.0527 286.4424 551.4189 c
286.4424 549.9453 286.1436 548.0693 285.3193 545.6943 c
282.8774 538.6563 279.1138 534.7842 277.7905 533.9961 C
277.4111 535.2852 276.6025 538.5557 276.6025 543.1055 C
f*U
273.4834 560.6494 m
272.187 560.3252 267.5327 557.3506 268.4507 548.7207 c
269.291 540.8184 274.4976 532.2842 274.7188 531.9238 C
275.1436 531.2334 L
277.604 533.2471 L
276.7065 534.3438 L
276.0596 533.8145 275.5176 533.3711 V
274.2993 535.501 270.5381 542.4951 269.8599 548.8711 c
269.7842 549.583 269.7495 550.251 269.7495 550.8779 c
269.7495 556.8818 272.9395 559.0527 273.8271 559.2744 c
274.4121 559.4209 276.3599 559.0537 277.6597 558.0381 c
278.2925 557.5449 278.6138 557.0137 278.6138 556.4619 C
280.0308 556.4619 L
280.0308 557.459 279.5127 558.3906 278.5322 559.1553 c
277.0015 560.3506 274.604 560.9297 273.4834 560.6494 c
f262.2622 558.7188 m
260.6479 557.6426 259.4365 555.5215 259.022 553.0439 c
258.4082 549.3809 259.5581 545.4111 262.2588 541.8662 c
267.6675 534.7666 274.1724 532.7031 274.4468 532.6182 C
274.8647 533.9727 L
274.8013 533.9922 268.5054 536.0059 263.3857 542.7256 c
260.0654 547.083 260.1021 550.9141 260.4194 552.8105 c
260.7656 554.877 261.7729 556.6895 263.0483 557.5391 c
264.6089 558.5801 266.2051 558.373 267.0181 558.1572 c
268.3364 557.8076 269.2397 557.042 269.5215 556.4785 C
270.7891 557.1123 L
270.2603 558.1699 268.9229 559.1182 267.3818 559.5273 c
265.5796 560.0059 263.7607 559.7178 262.2622 558.7188 c
f251.8462 559.8525 m
249.4849 558.9814 247.8652 557.2705 247.6196 555.3877 c
247.0747 551.209 249.1982 543.1816 257.2832 538.1924 c
265.2227 533.293 271.4512 533.7344 271.7124 533.7559 C
271.5991 535.1689 L
271.5396 535.1641 265.5435 534.7607 258.0273 539.3984 c
250.5679 544.002 248.5464 551.5361 249.0249 555.2041 c
249.1997 556.543 250.4995 557.8447 252.3364 558.5225 c
254.5918 559.3545 258.0127 559.3301 260.8472 556.7695 C
261.7974 557.8213 L
258.4932 560.8057 254.4902 560.8271 251.8462 559.8525 c
f241.0054 557.0957 m
239.2075 556.1973 238.0469 554.4063 237.7373 552.0527 c
237.1475 547.5703 239.6782 542.0938 244.1851 538.0986 c
251.6943 531.4434 261.29 533.0439 266.4453 533.9033 C
266.605 533.9297 L
266.3726 535.3281 L
266.2119 535.3018 L
261.29 534.4805 252.1284 532.9531 245.1255 539.1592 c
240.0649 543.6445 238.7397 548.8086 239.1421 551.8672 c
239.3887 553.7402 240.2754 555.1465 241.6392 555.8281 c
245.6636 557.8398 247.6533 555.0205 247.7349 554.8994 C
248.9121 555.6885 L
248.8853 555.7285 246.1724 559.6787 241.0054 557.0957 c
f293.0059 558.3213 m
288.915 557.4326 286.4785 553.3271 286.377 553.1523 C
287.6006 552.4375 L
287.623 552.4756 289.833 556.1816 293.3066 556.9365 c
295.6396 557.4434 297.874 557.0693 299.2803 555.9346 c
300.6074 554.8652 301.2803 553.1357 301.2803 550.7959 c
301.2803 547.6602 298.3623 543.1387 294.0195 539.5449 c
288.8828 535.2939 283.064 533.2803 278.4546 534.1582 C
278.1895 532.7656 L
283.2085 531.8105 289.4648 533.9355 294.9229 538.4531 c
299.6455 542.3613 302.6982 547.2061 302.6982 550.7959 c
302.6982 553.5859 301.8467 555.6865 300.1689 557.0381 c
298.4053 558.46 295.7949 558.9277 293.0059 558.3213 c
f301.6729 551.4297 m
302.3027 550.1602 L
302.3857 550.2002 304.3721 551.1348 306.8242 549.8359 c
307.5234 549.4658 308.0732 548.3984 308.2959 546.9805 c
308.8076 543.7314 307.6201 538.7012 303.8145 534.79 c
298.3145 529.1367 283.8477 531.4316 282.6499 532.2988 C
282.6548 532.3037 282.5503 532.4395 282.5659 532.5293 c
282.5835 532.6377 282.7437 532.7881 282.8472 532.8506 C
282.1372 534.0771 L
282.0537 534.0293 281.3164 533.5879 281.1714 532.7822 c
281.1094 532.4404 281.1357 531.9131 281.6108 531.3418 c
282.3247 530.4854 286.5205 529.8115 289.998 529.6777 c
293.8926 529.5283 300.999 529.8643 304.8301 533.8018 c
309.2617 538.3555 310.2207 543.8662 309.6963 547.2012 c
309.3955 549.1133 308.6113 550.4941 307.4883 551.0889 c
304.3682 552.7402 301.7813 551.4834 301.6729 551.4297 C
f303.4922 533.9854 m
303.8203 532.6064 L
309.4561 533.9434 314.7607 533.1045 317.333 530.4678 c
318.7041 529.0625 319.1553 527.2793 318.6367 525.3096 c
318.1748 523.5527 316.8281 522.0791 314.7441 521.0479 c
310.4854 518.9424 303.9131 518.9697 298.7617 521.1162 c
291.1006 524.3076 287.4785 530.7393 287.4424 530.8047 C
286.2012 530.1211 L
286.3564 529.8398 290.0811 523.1973 298.2168 519.8076 c
303.7188 517.5156 310.7734 517.5029 315.373 519.7773 c
317.835 520.9961 319.4375 522.7842 320.0078 524.9492 c
320.6504 527.3906 320.0605 529.7012 318.3477 531.458 c
315.3896 534.4893 309.6973 535.457 303.4922 533.9854 C
f308.6563 544.5381 m
309.9883 544.0537 L
310.124 544.4258 311.627 545.2734 313.9277 545.2227 c
315.5225 545.1875 318.3438 544.668 319.3135 541.583 c
321.3389 535.1367 316.8213 532.3545 316.6289 532.2393 C
317.3477 531.0176 L
317.4053 531.0518 323.0371 534.459 320.665 542.0078 c
319.7637 544.8779 317.3193 546.5654 313.959 546.6396 c
311.7451 546.6885 309.1563 545.915 308.6563 544.5381 C
f263.4888 534.2119 m
265.4053 535.0459 l
267.8223 534.7129 268.3223 534.6289 v
268.8223 534.5459 271.3223 534.6289 y
273.4888 533.9619 l
274.5723 533.6289 l
275.4053 532.8789 l
276.2388 533.1289 l
276.8223 533.4619 l
277.5723 533.3789 277.8223 533.3789 v
278.0723 533.3789 279.0723 533.3789 y
280.6553 533.0459 l
281.4888 533.0459 l
281.9888 532.6289 l
282.2388 532.0459 l
283.4888 531.3789 l
286.2393 530.4619 l
287.5723 530.0459 l
289.4893 527.2119 l
281.6538 524.7627 279.8223 524.1289 v
277.6553 523.3789 276.2388 521.0459 y
269.7388 523.5459 l
270.4058 525.0459 269.0723 526.9629 v
267.7388 528.8789 263.4888 534.2119 y
f251.314 489.8682 m
252.4136 488.9736 L
262.7402 501.6641 271.4385 524.0664 271.5249 524.291 C
270.2026 524.8008 L
270.1167 524.5781 261.4976 502.3828 251.314 489.8682 C
f254.1626 484.083 m
255.3149 483.2578 L
265.9839 498.1455 276.4082 521.6484 276.5122 521.8848 C
275.2153 522.457 L
275.1118 522.2227 264.7456 498.8506 254.1626 484.083 C
f257.1138 496.6709 m
259.8638 501.2959 l
258.1138 505.9209 258.6138 510.6709 v
259.1138 515.4209 259.8638 518.5459 258.3638 521.2959 c
256.8638 524.0459 254.2388 524.5459 251.8638 524.0459 c
249.4888 523.5459 246.9888 523.5459 245.9888 524.9209 c
244.9888 526.2959 242.7388 528.1709 239.4888 527.1709 c
236.2388 526.1709 234.7388 523.6709 233.2388 521.4209 c
231.7388 519.1709 229.7388 516.0459 227.1138 514.9209 c
224.4888 513.7959 222.9888 510.6709 223.2388 508.5459 c
223.4888 506.4209 225.3638 504.2959 229.8638 504.5459 c
234.3638 504.7959 240.2388 507.0459 247.6138 504.7959 c
254.9888 502.5459 257.2388 497.2959 257.1138 496.6709 c
f261.6138 494.1709 m
262.9888 496.5459 l
266.7388 497.0459 269.6138 498.9209 v
272.4888 500.7959 276.8638 506.1709 278.9888 508.9209 c
281.1138 511.6709 284.2393 513.4209 287.2393 513.9209 c
290.2393 514.4209 293.3643 513.2959 296.9893 511.7959 c
300.6143 510.2959 303.1143 509.9209 306.1143 510.9209 c
309.1143 511.9209 312.6143 512.2959 315.7393 511.0459 c
318.8643 509.7959 319.3643 508.5459 318.8643 506.1709 c
318.3643 503.7959 312.4893 497.0459 299.8643 494.5459 c
287.2393 492.0459 275.9888 494.2959 272.3638 494.6709 c
268.7388 495.0459 262.1138 494.5459 261.6138 494.1709 c
f260.7388 471.0459 m
259.6138 478.4209 258.1138 483.2959 v
256.6138 488.1709 253.7388 491.5459 249.4888 493.7959 c
245.2388 496.0459 238.7388 498.7959 233.3638 496.7959 c
227.9888 494.7959 225.7388 487.4209 y
217.9888 489.6709 212.9888 485.1709 v
213.1138 452.6709 l
214.3638 447.0459 227.3638 442.4209 v
226.9888 448.9209 230.8638 452.0459 v
234.7388 455.1709 241.4888 454.7959 244.3638 452.0459 c
242.9888 457.1709 244.7388 460.7959 v
246.4888 464.4209 250.4888 466.1709 253.6138 463.0459 c
253.4888 467.6709 255.9888 469.6709 v
258.4888 471.6709 260.7388 471.0459 y
f224.4888 434.9209 m
220.6138 439.5459 213.2388 440.4209 v
212.9888 393.5459 l
222.9888 396.6709 228.1138 403.1709 v
226.8638 407.2959 227.9888 410.0459 v
224.6138 411.0459 224.1138 413.6709 v
223.6138 416.2959 225.6138 422.6709 227.3638 425.1709 c
224.7388 425.7959 223.8638 428.0459 v
222.9888 430.2959 224.4888 434.9209 y
f230.3223 398.9629 m
222.9893 396.1289 219.8223 387.6289 v
216.6553 379.1289 223.6553 366.2949 239.4888 358.7949 c
223.1553 348.2949 215.4888 339.2949 v
217.7344 336.4609 220.3223 336.1289 v
222.9102 335.7949 227.4888 335.6289 y
226.4888 340.7969 233.4888 346.1289 v
240.4888 351.4629 252.8223 355.4629 y
260.9893 349.9629 270.8223 350.9629 v
280.6553 351.9629 286.8223 364.2949 y
294.4902 364.4629 299.6563 368.6289 v
304.8223 372.7949 305.9902 379.7969 303.6563 383.1289 c
301.3223 386.4629 294.6553 391.1289 285.3223 393.4629 c
283.9473 390.0039 281.1553 389.4629 v
278.3638 388.9209 274.9888 394.1709 y
274.4888 393.9209 274.1138 393.1709 v
273.7388 392.4209 271.8638 387.0459 267.7388 386.6709 c
263.6138 386.2959 262.2388 392.5459 y
261.1553 392.6289 260.7388 391.5459 v
260.3223 390.4629 255.8638 384.7959 252.7388 385.1709 c
249.6138 385.5459 248.8638 389.9209 y
246.3218 385.4209 243.1553 385.7959 v
239.9888 386.1709 236.7388 389.4209 239.8638 398.1709 c
238.1138 397.7959 l
232.5308 394.7539 230.3223 398.9629 v
f234.1138 362.5449 m
228.6138 350.4199 228.1138 348.9199 v
227.6138 347.4199 217.4888 337.5449 y
213.4888 339.4199 213.2388 343.2949 v
217.3638 360.5449 225.4888 370.4199 v
233.6138 380.2949 234.1138 362.5449 y
f312.2393 449.0459 m
315.2393 446.1709 312.8643 441.6709 v
318.7393 439.5459 318.6143 434.0459 v
318.4893 428.5459 310.9893 426.9209 309.6143 427.5459 c
309.3643 427.0459 309.9893 426.4209 v
310.6143 425.7959 313.6143 422.0459 311.6143 416.7959 c
319.2393 412.5459 323.6143 411.0459 v
327.9893 409.5459 331.8643 410.7959 336.1143 414.0459 c
344.2393 414.7959 346.7393 420.9209 v
349.2393 427.0459 346.4893 433.7959 y
350.1143 442.4209 346.1143 447.5459 v
342.1143 452.6709 340.9893 453.0459 340.4893 455.0459 c
339.9893 457.0459 337.3643 462.9209 330.9893 464.0459 c
324.6143 465.1709 318.7393 461.4209 312.2393 449.0459 c
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
