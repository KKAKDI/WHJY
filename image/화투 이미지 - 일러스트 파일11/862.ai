%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (862.ai)
%%CreationDate: 3/25/2002 6:35 PM
%%BoundingBox: 213 317 367 556
%%HiResBoundingBox: 213.353 317.6611 366.4238 555.772
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 12872 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC6F204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B44FD
%07FC99FFFD05FC6827F84B204B444B27524B4B204B4B5227525152275251
%522752515227525152275251522752515227525152275251522752515227
%5251522752515227525152275251522727F86FFD05FCC2FFFD04FC68F851
%FFFFFD05FCC2FD04FCC2FD29FFC3FCC2FD0BFF7DF84BFD04FCBBFFFD04FC
%274BFFFFFFBBFD04FCBBFD04FCBCFD28FFC9FCFCFCFD0CFFA8F892FCFCFC
%C2FFFCFCFC8CF8FFC9C293B5FD09FCCAFD27FFCAFD04FCA7FD0CFF2720FC
%FCFCBBFFFCFCFC444BB5FD08FCBBFCFCFCBBFD28FFBBFD04FCCAFD0CFF7D
%27FCFCFCC2FFFCFCFC4A27BBFD07FC92CA6EFCB5CAFD20FFB5FCB5BCFD04
%FFB5FD04FCC3FFCAC3B5B5B4FD06FF7DF8FCFCFCBCFFFCFCFC4452CAB5FD
%05FCFFF852F8FD05FFC2BBFD1CFFB5FCFCFCB4FFFFFFB5FD04FCCABBFD04
%FCC2FD06FF7D27FCFCFCC2FFFCFCFC4B27FFA7B4FCFCFC4B274BF827FD04
%FFC3FCFCFD1CFFBCFD04FCBBFFFFCFFCFCFCB5FD06FCCAFD06FF7DF8FCFC
%FC99FFFCFCFC4452FFFFCFC9BCC9A827F8F827FFFFFFCAB5FCFCCAFD1BFF
%C9FD04FCB5FFFFFF526FC9BBFD05FCBCFD07FF7D27FCFCFCC2FFFCFCFC4B
%27FD08FFA7F852FFFFFFB5FCFCFCC9FD1CFFB4FD04FCFFFFFFF87DFFB5FD
%05FCFD08FF7DF8FCFCFCBBFFFCFCFC2052FD09FF7CF8FFFFC9FD04FCBCFD
%1DFFB5FCFCB5FFFFA827FFFF92FD04FCCAFD08FF7D27FCFCFCC2FFFCFCFC
%4A27FFFFFFA1C2BBC3CAFFFFF87DFFB5FD04FCC2FD06FF52522752275227
%522752275227522752275227522752A1FFC99AF8FFFF52F8FFF8278CFCB4
%CAFD09FF7DF8FCFCFCBBFFFCFCFC2052CFC2FD06FCBCFF274BFFBBFD04FC
%C2FFFFFFC2FFFF27204B444B204B444B204B444B204B444B204B444BF8A1
%FFFFFF2751FF2752F827A8FD0DFF7D27FCFCFCC2FFFCFCFC4A27CFFD08FC
%BCA8F8FFC2FD04FCCAFFFFB4BBFFFFF86EFD13FC2052FFFFFF7DF8A8F8F8
%52FD06FFC3FD08FF7DF8FCFCFCBCFFFCFCFC4452FFCAFD07FCB5FF2727FF
%4AFCFCC9FFFFB4FCB5FFFF2768FD13FC2052FD04FFF852F87DFFFFFFCABC
%BBFCFCC9FD07FF7D27FCFCFCC2FFFCFCFC4B27FFFFFFB5FD06FCFF52F852
%27FD04FFB4FCFCB4FFFFF86EFD13FC4B27FD04FFA7F827FFFFFFBBFD05FC
%FD08FF7DF8FCFCFC99FFFCFCFC4452FD04FFC9BCB4FCFC4BF87DF82727FF
%FFFFBCFCFCFCB5FFFF2768FD13FC444BC2FD04FF2727FFFFC9FD05FCBCFD
%08FF7D27FCFCFCC2FFFCFCFC4B27FD0AFF7DF8F8F8A8FFFFCAFD04FCB5FF
%FFF86FFD13FC4B20FCFCC3FFFFF87DFFFFB4FD05FCCAFD08FF7DF8FCFCFC
%BBFFFCFCFC2052FD06FFC9C2BCC2C9FF52F87DFFFFC2FD04FCB5FFFF2768
%FD13FCF84BFCFCFCC9FFF8A8FFFFC2FD04FCC2FD09FF7D27FCFCFCC2FFFC
%FCFC4A27FFFFFFA0BBFD06FC92FF2727FFFFBBFD04FCC3FFFFF868FD13FC
%2068FCFCFC92FFF8FFFFFF276EFCB5C3FD0AFF7DF8FCFCFCBBFFFCFCFC20
%52FFFFFFC2FD08FCB5FFF8A1FFC3FCFCFCB5FFFFCF2768FD13FCF893FCFC
%FCB57D27FFFFF827FD0EFF7D27FCFCFCC2FFFCFCFC4A27FD04FFC9B4FD07
%FCC352F8FFA86EFCB5C9FFCAB5F8FD14FC2068FCFCFC9376277DF852FD0F
%FF7DF8FCFCFCBCFFFCFCFC4452FD06FFC2B4FD05FCC3A8F87D7D27FD04FF
%BCFCF8FD14FC207DC2C24B272727F87DFD10FF7D27FCFCFCC2FFFCFCFC4B
%27FD07FFCABC8CFCFC4BF84B2727F876FFFFFFC3FCFCF8FD14FC2676FFFF
%FF27F8F8A8FD04FFCAC293BCFD09FF7DF8FCFCFC99FFFCFCFC4452FD0DFF
%A827F8F8F8A8FFFFFFB5FCFCF8FD14FCF86FFCC9FFFFF87DFD04FFB5FCFC
%FCBBFD09FF7D27FCFCFCC2FFFCFCFC4B27FD0FFFA827F8FD04FFFCFC6EF8
%FD14FCF8FCFCFCC9FFF87DFFFFC3FD05FCC3FD09FF7DF8FCFCFCBBFFFCFC
%FC2052FD0BFFCFC9CACAFFFF2752FFFFCAFCFC6827FD14FCF8FD04FCFFF8
%FFFFCAFD05FCB4CAFD09FF7D27FCFCFCC2FFFCFCFC4A27FD07FFA7BCB4FD
%05FC8CC252F8A8FFC3FCFC6EF8FD14FCF8FD04FCFFF8FFFF93FD05FCBBFD
%0AFF7DF8FCFCFCBBFFFCFCFC2052FD08FFC2B5FD07FCC2F852FFFF92FC44
%27FD13FC93F8FCFCFC8CA8F8FFFFBBFD04FCBBFD0BFF7D27FCFCFCC2FFFC
%FCFC4A27FD09FFC9B5FD07FCA7F8A8FFF8765220FD13FC6826B5B59AF852
%27FFA720FCFCFCBBFD0CFF7DF8FCFCFCBCFFFCFCFC4452FD0AFFCFBBFD05
%FCB57D52F8A8F8FF204BFD13FC6F20FFFFFF4B27F87DF852CACACAFFFFCA
%CAFD09FF7D27FCFCFCC2FFFCFCFC4B27FD0CFFC393B5B4BC4BF8F8F82027
%FF2768FD13FC204BC2FFFFFFF8F8F8A8FFFFCAC2B4FCFCBBFD09FF7DF8FC
%FCFC99FFFCFCFC4452FD13FF7DF8F852FFF893FD13FC4B44FCFCCFFF27F8
%FFFFFFBCFD05FCC2FD09FF7D27FCFCFCC2FFFCFCFC4B27FD15FFF827FFF8
%FD14FCF84BFCFCFCFF2752FFFFBCFD06FCFD0AFF7DF8FCFCFCBBFFFCFCFC
%2052FD16FFF852F8FD14FC2768FCFCFCC3524BFFFFB5FD05FCBCFD0AFF7D
%27FCFCFCC2FFFCFCFC4A27FD16FF7DF820FD14FCF88CFCFCFCC22752FFFF
%FD05FCB5C9BCA0FD08FF7DF8FCFCFCBBFFFCFCFC2052FD17FF2720FD14FC
%F8FD04FC6F5251FF274BFCFCFCBBB5FCFCCAFD08FF7D27FCFCFCC2FFFCFC
%FC4A27FD17FFF84BFD13FC92F8FFBCC299F82727F827A8CAC3B5FD04FCFD
%09FF7DF8FCFCFCBCFFFCFCFC4452FD17FF2768FD13FC6827FD04FF2727F8
%52FFFFC9B5FD04FCB5FD09FF7D27FCFCFCC2FFFCFCFC4B27FD17FFF8FD14
%FC4A20FD04FFA8F827FFFFFFB4FD05FCC3FD09FF7DF8FCFCFC99FFFCFCFC
%4452FD16FF7D27FD14FC202752FD04FF2727FFFFCAFD05FCBBFD0AFF7D27
%FCFCFCC2FFFCFCFC4B27FD16FF5220FD14FCFD04F8A7FFFF2752FFFF7CFD
%04FCB5CAFFA87DA8FD06FF7DF8FCFCFCBBFFFCFCFC2052FD16FF274BFD14
%FCFD05F8FFFF5227FF7D276FB4FCC2CF7CF8F8F87DFD06FF7D27FCFCFCC2
%FFFCFCFC4A27FD16FFF868FD13FC8CFD05F827FF7C277DF852FFFFFFA127
%FD04F87DFD06FF7DF8FCFCFCBBFFFCFCFC2052FD16FFF8FD14FC93FD05F8
%27FFA1F8F852FFFFFF7D27FD05F8A8FD06FF7D27FCFCFCC2FFFCFCFC4A27
%FD15FF5220FD14FC2027FD05F8FF7DF852FFFFFFA8FD07F8FD07FF7DF8FC
%FCFCBCFFFCFCFC444BC3FD14FF5220FD14FC275152F8F8F827FFA8F8FD04
%FF52FD06F827FD07FF7D27FCFCFCC2FFFCFCFC4B20FC93FD06FFCA93FD0B
%FFF86EFD14FCF87DFFFF7D7DF87DFFF8FD04FF27FD06F8A8FD07FF7DF8FC
%FCFC99FFFCFCFC444BFCFCBCFD04FFC9FCB5FD0AFFA8F88CFD13FC8CF8FD
%05FF7DF8FFF8FD04FF52FD05F87DFD08FF7D27FCFCFCC2FFFCFCFC4B20FC
%FCFCC9FFFFC9FCFCFCFD0AFF7DF8FD14FC6FF8FD06FF2727F87DFFFFFF7D
%FD04F876FD09FF7DF8FCFCFCBBFFFCFCFC204BFCFCFCC2FFFFFD04FCCAFD
%09FF274BFD14FC204BFD06FFA827F87DFFFFFF7DF82727A8FD0AFF7D27FC
%FCFCC2FFFCFCFC4A20FCFCFC92FFB5FD04FCC9FD09FFF868FD14FC2052FD
%07FF52F827FFFFFFF852FD0DFF7DF8FCFCFCBBFFFCFCFC204BFCFCFCBBCA
%FD05FCC9FD08FFA8F8FD15FCF8A8FD08FFF851FFFF2727FD0EFF7D27FCFC
%FCC2FFFCFCFC4A27BBFCFC99C9FD05FCCAFD08FF5127FD14FC68F8277DFD
%07FF76F8FF2720A8FD0EFF7DF8FCFCFCBCFFFCFCFC4452FFFF2752FFB5FC
%FCFCB5FD04FFBBFD04FF2744FD14FC4BF8F8F827FD06FF7D2752F87DFD0F
%FF7D27FCFCFCC2FFFCFCFC4B20FC92A0F8FFA7FCFCFCA0FFFFFF8CFCC2FF
%FFFFF8FD15FCFD05F852FD05FFCFF8F852FD07FF5227FD05F87DFF7DF8FC
%FCFC99FFFCFCFC444BFCFCFC27527DF8CACFFFFFFFBBFCFCB5FFFF5227FD
%15FCFD06F8FD06FF2752FD06FFA8FD08F87DFF7D27FCFCFCC2FFFCFCFC4B
%20FCFCFC4BF82751FD04FFCAFD04FCCAFF2744FD14FC6EFD06F8FD06FFF8
%7DFD06FFFD09F8FFFF7DF8FCFCFCBBFFFCFCFC204BFCFCFC4BF8F87DFD04
%FFC2FD04FCC2FFF893FD14FC2027FD05F827FD05FF5227FD05FF7DFD08F8
%FFFFFF7D27FCFCFCC2FFFCFCFC4A27C2BBCAFF52F8FD05FF8CFD04FCC252
%F8FD15FCF852CF4B5227A7F827A8FFFFFF5227FD05FF27FD07F8FD04FF7D
%F8FCFCFCBBFFFCFCFC2052BBBBB5BBC32752FD04FFFD05FCC22744FD14FC
%93F8FD07FF27277DFFFFA8F8FFFFFFA827F827F8F8F82752FD05FF7D27FC
%FCFCC2FFFCFCFC4A20FD05FC99F8A8FFFFFFFD05FCCAF8FD15FC4427FD08
%FF27F852FFFFF8A7FF7DF827FD0CFF7DF8FCFCFCBCFFFCFCFC444BFD05FC
%B52727FFFFFFC9FCFCFCBB5127FD15FC2752FD09FF52F827FF277D522752
%FD0DFF7D27FCFCFCC2FFFCFCFC4B20FD05FC8CF8F87DFFFFFFF899C2CAF8
%44FD14FC8CF8CFFD0AFF7DF8F852F8F852FD0EFF7DF8FCFCFC99FFFCFCFC
%4452BCB5FCFCFCCF5227F8A8FFA8F8FFFFA8F8FD15FC4427FD0CFFA827F8
%207DFD0FFF7D27FCFCFCC2FFFCFCFC4B27FD08FF27F8FF5227FFFF2726FD
%15FC2752FD0EFF7DF8FD0DFF7DFFFF7DF8FCFCFCBBFFFCFCFC2052FFCABB
%B5FCB5C2FFA827522752FFA8278CFD14FC92F8FD10FF277DFD09FF7D27F8
%F8FFFF7D27FCFCFCC2FFFCFCFC4A27C3FD06FC99FF7DF8F87DFF52F8FD15
%FC4427FD10FF274BFD08FFFD05F8FFFF7DF8FCFCFCBBFFFCFCFC2052FD08
%FC517D2727FFFFF86FFD15FC2776FD10FF7DF8FD07FFFD06F8FFFF7D27FC
%FCFCC2FFFCFCFC4A27B5FD06FC8C51F8F8F8527DF8FD15FC92F8FD12FFF8
%A8FD05FF27FD06F8FFFF7DF8FCFCFCBCFFFCFCFC4452FFC2B4FCFCB5BBFF
%FFFFA852F82744FD15FC204BFD12FF277DFD05FFFD06F852FFFF7D27FCFC
%FCC2FFFCFCFC4B27FD0CFF27F8FD15FC8CF87DFD06FF27FD05F8277DFD04
%FF52F8FD05FFFD06F8A8FFFF7DF8FCFCFC99FFFCFCFC4452FD0CFF274BFD
%15FC6FF8FD07FF27FD07F827FFFFFFA8F8A8FD04FF27FD04F87DFFFFFF7D
%27FCFCFCC2FFFCFCFC4B27FD0BFFA8F88CFD15FCF852FD08FFFD08F852FF
%FFFFF876FD04FFF8F8F851A8FD04FF7DF8FCFCFCBBFFFCFCFC2052FD0BFF
%5220FD15FC6827FD09FFA8FD07F827FFFFFF5227FFFFFF7D27A8FD07FF7D
%27FCFCFCC2FFFCFCFC4A27FD0AFFCFF86EFD15FC2027FD0AFFA7FD07F8A8
%FFFFA8F8A8FFFF274BFD08FF7DF8FCFCFCBBFFFCFCFC2052FD0AFF2727FD
%15FC93F8A8FD0CFF5127F8F8F827F852FFFFF87DFF7DF8FD09FF7D27FCFC
%FCC2FFFCFCFC4A27FD09FFA8F868FD15FC20F851FD0EFFA87DFFFF7DF820
%7D52F8FFF852FD09FF7DF8FCFCFCBCFFFCFCFC4452FD09FF5220FD15FC8C
%F8F8F827FD04FFA87DFD0DFF522727F85227A8FD09FF7D27FCFCFCC2FFFC
%FCFC4B27FD08FFCFF892FD15FC26FD04F84BFFFFFF7CF827A8FD0CFFA827
%F8F827FD0AFF7DF8FCFCFC99FFFCFCFC4452FD08FF274BFD15FCB4FD05F8
%27FFFFFFA1F8F8F84BA8FD0CFF7DF8A8FD0AFF7D27FCFCFCC2FFFCFCFC4B
%27FD07FFA8F88CFD15FC2020FD05F87DFFFF7DFD05F87DFD0CFF2052FD0A
%FF7DF8FCFCFCBBFFFCFCFC2052FD07FF2726FD15FC8C277DFD05F827FFFF
%FFFD05F827FD0CFF5227FD0AFF7D27FCFCFCC2FFFCFCFC4A27FD06FF7DF8
%FD16FC2020FF27FD04F852FFFFFF27FD05F8A8FD07FFA827A7FFFFF87DFD
%09FF7DF8FCFCFCBBFFFCFCFC2052FD06FFF84BFD15FC93F8A8FFFF27F8F8
%F8A8FFFFFF52FD05F87DFD07FF51F8F827A87DF8FD09FF7D27FCFCFCC2FF
%FCFCFC4A27FD05FF2720FD16FCF827FD04FFA77DF8A8FD04FF27FD04F8A8
%FD07FF52FD04F87DF87DFD08FF7DF8FCFCFCBCFFFCFCFC4452FD04FFA827
%68FD15FC6827A8FD06FF2727FD05FFA85227F8A8FD07FF27FD04F8272727
%FD08FF7D27FCFCFCC2FFFCFCFC4B27FD04FF2720FD16FCF84BFD07FFA8F8
%7DFD07FFF852FD07FF52FD05F827F852FD07FF7DF8FCFCFC99FFFCFCFC44
%52FFFFFF7DF8B5FD15FC4BF8FD09FF5127FD07FF7DF8FD07FFA8FD06F852
%F8FD07FF7D27FCFCFCC2FFFCFCFC4B27FFFFA8FD0FF820F820F827F820F8
%27F8F8F827277DA8FD05FFF87DFD07FF2727FD07FF27FD05F87D2027FD06
%FF7DF8FCFCFCBBFFFCFCFC2052FD10FFA8FD0A7DA8FFFF7D5227F8F8527C
%FFFF7DF8FD07FFA8F8A8FD07FFFD05F87D7DF8A8FD05FF7D27FCFCFCC2FF
%FCFCFC4A27FD22FF7D2727F82752F852FD07FF2727FD07FFCF27F8F8F87D
%FF2727FD05FF7DF8FCFCFCBBFFFCFCFC2052FD25FFA85227F8F851A8FD05
%FFA8F8A8FD0AFF2727FFFFF852FD04FF7D27FCFCFCC2FFFCFCFC4A27FD26
%FFA827F82727F82752FD04FF52F8FD0BFFF87DFF7DF8A8FFFFFF7DF8FCFC
%FCBCFFFCFCFC4452FD24FFA852F827A8FFFFFF5227F82752FFA8F87DFD0A
%FF52F8FFFF52F8FFFFFF7D27FCFCFCC2FFFCFCFC4B27FD23FF52F8F8A8FD
%07FFA851F8F8522727FD0AFFA8F87DFFFFF827FFFF7DF8FCFCFC99FFFCFC
%FC4452FD1CFF765252A8FFA1272776FD06FFA8F85252A8FFA127F8F87DFD
%0AFF274BFFFFA82752FF7D27FCFCFCC2FFFCFCFC4B27FD1AFF7DFD07F852
%FD09FFFD04F82052FFA827F82752FD08FFA7F8FFFFFF7DF8527DF8FCFCFC
%BBFFFCFCFC2052FD19FF7CFD07F8FD0BFFFD06F827FFFFFF5227F87CFD07
%FF2752FFFFFF52275227FCFCFCC2FFFCFCFC4A27FD18FFA8FD07F827FD0B
%FF76FD06F827FD04FF76F8F852FD05FF2727FD04FF52F8F8FCFCFCBBFFFC
%FCFC2052FD18FF27FD06F8277DFD0BFFA8FD07F8A8FD05FF5227277DFFFF
%FF7DF8FD05FF5227FCFCFCC2FFFCFCFC4A27FD18FF27F8F8F827277DFD0E
%FF52FD06F852FD07FF52F827A7FFFFF8A7FD04FF7DF8FCFCFCBCFFFCFCFC
%4452FD28FFCAC3BCC2C2FF52FD05F852FD07FF52A827F827FF277DFD04FF
%7D27FCFCFCC2FFFCFCFC4B27FD27FFBBFD06FCCAA827F8F8F852FD06FFF8
%F8F8FF7DF8F82727FD04FF7DF8FCFCFC99FFFCFCFC4452FD26FFBBFD08FC
%FD04FF7DF8A8FD04FF27F8F8F852FFFF52F827FD04FF7D27FCFCFCC2FFFC
%FCFC4B27FD26FFBCFD08FC75A8FFFFFF27F8FFFFFFA7FD04F827FFFFFFA8
%F820A7FFFF7DF8FCFCFCBBFFFCFCFC2052FD27FFBCFD07FC4BF827277DFF
%2727FFFF52FD05F8FD05FF27F852FF7D27FCFCFCC2FFFCFCFC4A27FD28FF
%CABBBB92BBBBCAFFFF5227FD04F8A1FFFD06F8FD06FF52F8277DF8FCFCFC
%BBFFFCFCFC2052FD34FF7D52F827FF52FD05F8FD07FF7D272627FCFCFCC2
%FFFCFCFC4A27FD37FFF8767DFD04F827FD08FFA827F8FCFCFCBCFFFCFCFC
%4452FD28FFFD0427F8527DFD08FF7DF8FF7D27F827A8FD09FF7D27FCFCFC
%C2FFFCFCFC4B27FD28FFFD08F8A7FD07FF2727FF7D27FD0BFF7DF8FCFCFC
%99FFFCFCFC4452FD28FF52FD08F8A8FD06FFA8F8A87D27FD0BFF7D27FCFC
%FCC2FFFCFCFC4B27FD29FFFD09F8FD07FF27272752FD0BFF7DF8FCFCFCBB
%FFFCFCFC2052FD2AFFFD08F8277DFD05FFA8F8274BFD0BFF7D27FCFCFCC2
%FFFCFCFC4A26FD2BFF5227F8F8F8277652F8F8277DFFFFFF27F87DFD0BFF
%76F8FCFCFCBBFFFCFCFC6827FD30FFA852F827F8F8F82727A8A8F852FD0B
%FF274BFCFCFCC2FFFD04FCF852FD2EFFA827FD05F8207D51F8F8F852FD0A
%FF7DF88CFCFCFCBCFFFD04FC92F852FD2DFF27FD06F827FFFFFF7C27F8FD
%09FF7DF844FD04FCC2FFFD05FC8CF8F82752275227522752275227522752
%275227522752275227522752275227522752275227522752275227522752
%FD07F8522752275227F82752275227522752F8F844FD05FC99FFFD07FC68
%4B204B444B204B444B204B444B204B4B4B264B4B4B264B4B4B264B4B4B26
%4B4B4B264B4B4B264B4B4B264B4B4B264B2627204B4B4B264B4B4B204B4B
%4B264B4B4B266F8CFD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
366.4238 317.6611 m
213.353 317.6611 L
213.353 555.772 L
366.4238 555.772 L
366.4238 317.6611 L
fu0 0 0 0 k
220.8882 540.4668 m
221.0547 334.6338 l
221.2212 325.4678 231.5547 325.1338 v
350.5557 324.9678 l
358.5557 327.4658 358.8887 334.7998 v
359.0557 539.9668 l
357.7217 547.8003 349.8887 548.4668 v
230.0547 548.6333 l
222.8882 548.6333 220.8882 540.4668 v
f0 1 1 0 k
309.6387 525.8418 m
270.2632 525.7168 l
270.7217 507.6333 269.3882 494.6333 v
268.0547 481.6333 262.2217 450.6338 256.7217 437.4668 c
251.2217 424.2998 242.2212 397.3018 229.5547 382.1338 c
273.7217 381.2998 l
288.8882 405.1338 297.5547 434.2998 v
306.2217 463.4668 311.0557 495.3003 309.6387 525.8418 c
fu0.65 0.53 0.51 1 k
334.8887 342.2998 m
328.7217 342.7998 329.7217 348.9678 v
330.7217 355.1338 335.0557 357.6338 y
339.7217 354.4658 339.7217 348.7998 v
339.7217 343.1338 336.3887 342.1338 334.8887 342.2998 c
f319.0557 355.7998 m
322.4209 360.6104 315.7217 365.6338 v
311.7217 368.6338 304.3887 368.9678 y
305.0557 361.9678 309.3887 358.1338 v
313.7217 354.2998 317.2227 354.7998 319.0557 355.7998 c
f315.0557 335.6338 m
315.542 340.0986 308.0557 342.2998 v
302.3887 343.9678 297.2217 342.2998 y
298.7222 334.7998 306.0557 333.2998 v
313.3887 331.7998 314.7227 334.1338 315.0557 335.6338 c
f324.5557 331.6338 m
320.8887 332.9678 315.8887 331.6338 v
310.8887 330.2998 310.2217 325.2998 y
320.7217 324.7998 l
324.5557 325.8018 324.5557 331.6338 v
f283.5547 366.2998 m
279.8877 370.1338 274.5547 367.7998 v
269.2217 365.4678 267.3882 359.7998 y
271.2212 357.9678 277.5547 359.6338 v
283.8882 361.2998 283.8877 364.1338 283.5547 366.2998 c
f339.2217 377.9678 m
342.0557 381.9678 338.0557 387.1338 v
334.0557 392.2998 328.3887 392.9678 y
327.0557 387.6338 329.0557 383.1338 v
331.0557 378.6338 334.3877 376.6338 339.2217 377.9678 c
f310.0557 387.7998 m
303.8887 386.8018 301.8887 392.1338 v
299.8887 397.4678 300.5547 401.9678 y
307.2217 398.6338 309.3887 397.1338 v
311.5557 395.6338 314.2227 389.2998 310.0557 387.7998 c
f292.2217 390.1338 m
295.4116 392.4072 293.0547 398.2998 v
291.3882 402.4678 286.5547 405.1338 y
283.5547 399.4678 l
283.2212 395.1338 285.5547 392.4678 v
287.8882 389.7998 290.8887 389.4678 292.2217 390.1338 c
f322.8887 407.6338 m
322.7217 413.7998 316.3887 415.2998 v
310.0557 416.7998 305.0557 415.2998 y
306.7217 409.2998 312.7217 406.4678 v
318.7217 403.6338 321.7217 405.1338 322.8887 407.6338 c
f340.7217 412.9678 m
338.3887 417.7998 342.8887 421.4668 v
347.3887 425.1338 352.3887 425.9668 y
353.2217 420.1338 351.2217 416.2998 v
349.2217 412.4678 343.5547 409.1338 340.7217 412.9678 c
f335.7217 437.1338 m
334.5557 442.9668 342.3887 444.9668 v
350.2217 446.9668 353.7217 444.4668 y
350.7217 437.9668 345.2217 435.9668 v
339.7217 433.9668 336.3877 435.8008 335.7217 437.1338 c
f301.7217 448.9668 m
304.2217 449.3003 307.3887 446.6333 v
310.5557 443.9663 310.0557 439.6333 y
308.2227 437.3008 304.5557 437.8003 v
300.8887 438.3003 299.5547 441.3003 y
301.7217 448.9668 l
f331.3887 454.8003 m
327.0547 460.1333 332.2217 465.1333 v
337.3887 470.1333 342.7217 470.6333 343.3887 470.4668 c
344.0557 470.3003 344.2217 463.9673 341.3887 459.8003 c
338.5557 455.6333 334.2217 452.9673 331.3887 454.8003 c
f314.5557 460.4668 m
316.2217 464.9673 313.7217 468.8003 v
311.2217 472.6333 306.3887 473.4668 y
305.0557 465.1333 l
305.7227 460.3003 314.5557 460.4668 v
fU318.9307 468.936 m
320.5293 432.3955 333.2764 384.9893 358.1514 361.4521 C
359.126 362.4814 L
334.5391 385.7471 321.9326 432.7432 320.3467 468.9976 c
318.624 508.3721 327.957 533.7158 328.0518 533.9673 C
326.7256 534.4663 L
326.6299 534.2124 317.1943 508.6216 318.9307 468.936 c
f317.4951 356.3662 m
317.626 356.1982 330.6387 339.2939 335.2129 324.7549 C
336.5645 325.1807 L
331.9131 339.9639 318.748 357.0635 318.6162 357.2334 C
317.4951 356.3662 L
f308.2236 350.7783 m
308.335 350.751 319.3926 348.0967 324.9355 345.6514 C
325.5078 346.9482 L
319.8467 349.4463 309.0117 352.0479 308.5537 352.1572 C
308.2236 350.7783 L
f332.8525 330.8916 m
334.2588 330.71 L
335.7598 343.5576 L
334.3516 343.71 L
332.8525 330.8916 L
f313.167 334.9619 m
313.3086 334.915 327.3945 330.2686 334.6201 327.3115 C
335.1572 328.624 L
327.8848 331.5986 313.752 336.2607 313.6104 336.3076 C
313.167 334.9619 L
f274.2622 381.7705 m
274.7871 381.6748 327.1006 371.9717 358.4141 343.7744 C
359.3633 344.8271 L
327.7461 373.2979 275.0425 383.0693 274.5142 383.165 C
274.2622 381.7705 L
f290.7671 390.7939 m
298.314 377.0303 298.9321 375.9033 V
297.8052 375.2607 282.0366 366.249 Y
282.7397 365.0186 L
300.8438 375.3643 L
292.0093 391.4756 L
290.7671 390.7939 L
f309.4326 388.2959 m
313.4473 380.9053 319.9199 368.8018 320.2021 367.792 C
321.5762 368.1396 L
321.2383 369.4912 312.4395 385.7314 310.6787 388.9717 C
309.4326 388.2959 L
f337.6611 378.7002 m
337.7285 378.6143 344.418 369.7842 347.0215 353.0264 C
348.4219 353.2432 L
345.7578 370.3936 339.0654 379.2021 338.7822 379.5674 C
337.6611 378.7002 L
f320.1924 407.3584 m
333.8584 399.1924 L
334.585 400.4092 L
320.9189 408.5752 L
320.1924 407.3584 L
f334.5527 398.5342 m
335.8906 398.0654 L
338.1729 404.5869 342.9502 412.6924 342.998 412.7725 C
341.7793 413.4951 L
341.7305 413.4131 336.8818 405.1904 334.5527 398.5342 C
f325.1074 429.1826 m
326.0039 428.085 L
337.0039 437.085 L
336.1074 438.1816 L
325.1074 429.1826 L
f307.9189 440.1025 m
308.3975 439.6792 319.7021 429.6855 325.5244 426.1924 C
326.2529 427.4072 L
320.543 430.834 308.9746 441.061 308.8584 441.1636 C
307.9189 440.1025 L
f321.9395 444.0151 m
322.8379 442.9185 L
326.543 445.9497 332.876 455.3398 333.1436 455.7378 C
331.9678 456.5288 L
331.9033 456.4331 325.4844 446.9146 321.9395 444.0151 C
f313.1074 461.7798 m
313.1396 461.7246 316.3438 456.1772 320.6523 450.3779 C
321.791 451.2227 L
317.5332 456.9531 314.3672 462.4321 314.3359 462.4868 C
313.1074 461.7798 L
f319.6924 463.604 m
320.751 462.6626 L
324.6709 467.0723 328.3154 470.2324 328.3516 470.2642 C
327.4258 471.3364 L
327.3887 471.3047 323.6768 468.0874 319.6924 463.604 C
f314.6182 480.0952 m
316.501 477.0356 318.5449 473.5859 318.7061 473.1099 C
320.0762 473.4727 L
319.9014 474.1699 317.0449 478.856 315.8252 480.8384 C
314.6182 480.0952 L
f318.9219 475.9502 m
320.1846 475.3076 L
320.542 475.9048 324.168 478.6997 327.4678 481.0566 C
326.6436 482.21 L
324.4961 480.6758 319.4443 476.9951 318.9219 475.9502 C
f314.8027 495.0688 m
314.833 495.0229 317.9238 490.4541 318.7168 488.0762 C
320.0605 488.5244 L
319.207 491.0879 316.1064 495.6709 315.9746 495.8647 C
314.8027 495.0688 L
f319.2988 488.3599 m
320.4785 487.5737 L
321.1592 488.5952 325.2314 491.7119 327.8018 493.5576 C
326.9756 494.709 L
326.2998 494.2236 320.3408 489.9219 319.2988 488.3599 C
f315.8633 507.6582 m
320.5293 502.4917 L
321.582 503.4419 L
316.9141 508.6084 L
315.8633 507.6582 L
f320.2939 504.5317 m
321.1494 503.4019 L
322.8926 504.7231 331.6309 511.3833 332.4893 512.7578 C
331.2881 513.5088 L
330.791 512.7144 325.2529 508.2905 320.2939 504.5317 C
f316.7627 527.9678 m
322.4297 517.3008 L
323.6816 517.9658 L
318.0146 528.6328 L
316.7627 527.9678 L
f323.2734 521.8486 m
324.1699 520.752 L
332.5098 527.5889 L
331.6016 528.6777 L
323.2734 521.8486 L
f237.3804 538.4155 m
237.4858 538.0894 248.1304 505.5156 266.6523 480.5444 C
267.791 481.3892 L
249.4106 506.1689 238.8335 538.5273 238.729 538.8511 C
237.3804 538.4155 L
f262.5459 488.2295 m
261.0249 489.0762 257.3545 490.7388 255.0093 491.7808 C
254.4341 490.4858 L
257.937 488.9292 261.8159 487.1162 262.2446 486.7773 C
262.4209 486.5986 262.7026 486.5234 262.9746 486.5981 c
263.395 486.7139 263.9712 486.8721 266.0747 495.125 C
264.7017 495.4751 L
263.98 492.645 263.0396 489.4106 262.5459 488.2295 C
f253.8838 501.1953 m
255.2256 500.7383 L
257.8926 508.5718 L
256.5508 509.0288 L
253.8838 501.1953 L
f244.9976 504.7944 m
245.793 504.5293 251.7207 501.9541 253.9375 500.9839 C
254.5059 502.2827 L
254.1777 502.4258 246.4644 505.7993 245.4458 506.1392 C
244.9976 504.7944 L
f247.1372 515.3408 m
245.8979 516.0269 240.0649 519.2534 Y
239.3784 518.0132 L
247.9722 513.2598 L
250.731 522.0889 L
249.3784 522.5117 L
247.5537 516.6733 247.1372 515.3408 V
f240.3789 532.2002 m
239.0801 532.8804 234.2168 535.4282 Y
233.5596 534.1724 L
241.3975 530.0664 L
243.083 538.4941 L
241.6934 538.7725 L
240.6641 533.625 240.3789 532.2002 V
f226.5493 449.0762 m
226.583 448.9751 229.9927 438.8677 236.6416 429.3926 c
243.2183 420.0205 246.5874 414.6455 246.6206 414.5908 C
247.8228 415.3428 L
247.7891 415.3955 244.4028 420.7998 237.8018 430.207 c
231.2759 439.5063 227.9268 449.4253 227.894 449.5244 C
226.5493 449.0762 L
f243.1953 420.7822 m
244.5811 420.4854 L
247.0791 431.6436 L
245.6968 431.9561 L
243.1953 420.7822 L
f236.7163 419.6123 m
244.7163 417.6123 L
245.0601 418.9873 L
237.0601 420.9873 L
236.7163 419.6123 L
f231.752 430.3262 m
237.752 427.4932 L
238.3574 428.7744 L
232.3574 431.6074 L
231.752 430.3262 L
f231.8794 437.8486 m
233.23 437.418 L
235.73 445.2515 L
234.3794 445.6821 L
231.8794 437.8486 L
f227.9585 439.6426 m
231.2915 438.3086 L
231.8179 439.625 L
228.4849 440.958 L
227.9585 439.6426 L
fu0 1 1 0 k
243.0547 537.4668 m
239.5552 538.6338 240.2217 542.8003 v
240.8882 546.9668 243.5547 548.3003 y
248.7217 547.8003 l
250.2212 544.9663 248.5547 541.1333 v
246.8882 537.3003 244.2212 537.3003 243.0547 537.4668 c
f229.8882 547.9668 m
230.5547 544.9663 232.0547 541.1333 v
233.5547 537.3003 237.2212 537.3003 238.5547 537.8003 c
239.8882 538.3003 240.2212 542.9668 239.5547 544.9668 c
238.8882 546.9668 236.5547 548.3003 y
229.8882 547.9668 l
f234.3882 534.1333 m
236.8882 536.8003 233.8882 540.3003 v
230.8882 543.8003 224.8887 540.4668 223.7217 540.4668 c
222.5547 540.4668 224.0547 535.8003 227.0547 533.9668 c
230.0547 532.1333 234.0547 532.9663 234.3882 534.1333 c
f241.0547 520.3003 m
240.7217 525.6333 234.0547 526.4668 v
228.1821 527.2012 224.2217 523.9668 y
226.7217 520.2998 231.8882 518.1333 v
237.0547 515.9668 240.8877 516.4673 241.0547 520.3003 c
f251.0547 520.6333 m
245.2217 523.1333 248.7217 529.3003 v
251.8862 534.8765 255.2217 537.1333 y
256.3877 531.8003 256.5547 529.9668 v
256.7217 528.1333 257.7212 519.7998 251.0547 520.6333 c
f257.7217 507.8003 m
252.8887 511.1333 256.7217 516.6333 v
260.5547 522.1333 263.7212 523.9663 264.0547 525.1333 c
264.3882 526.3003 264.8882 523.9668 264.8882 522.4668 c
264.8882 520.9668 265.3877 515.9673 264.0547 512.3003 c
262.7217 508.6333 259.8887 506.8003 257.7217 507.8003 c
f247.3882 507.1333 m
246.7217 512.6333 240.2217 513.4668 v
233.7217 514.3003 230.5552 511.3003 228.2217 511.3003 c
228.2217 510.4668 229.7217 509.9668 v
231.2217 509.4668 234.5552 507.7998 236.2217 506.1333 c
237.8882 504.4668 245.5547 501.7998 247.3882 507.1333 c
f256.0547 492.8003 m
255.2212 497.4663 249.0547 498.1333 v
242.8882 498.8003 239.5547 496.4673 237.0547 497.3003 c
236.8882 496.6338 237.8882 496.3003 v
238.8882 495.9668 241.5552 493.9663 242.2217 493.1333 c
242.8882 492.3003 246.5547 488.6333 251.3882 489.4668 c
256.2217 490.3003 255.8877 491.3003 256.0547 492.8003 c
f270.2217 510.8003 m
267.5547 506.9668 266.0547 505.9668 v
264.5547 504.9668 263.5547 500.8003 263.3882 497.4668 c
263.2217 494.1333 267.7217 493.6333 268.8882 494.9668 c
270.0547 496.3003 270.5552 503.1338 270.2217 510.8003 c
f317.7217 527.3003 m
312.5557 527.1333 310.3887 531.4668 v
308.1182 536.0078 309.2217 538.8003 y
313.7227 539.6333 317.0557 535.9668 v
320.3887 532.3003 319.5547 528.1338 317.7217 527.3003 c
f327.5557 532.8003 m
321.8877 535.4663 324.2217 540.1333 v
326.5557 544.8003 329.5557 546.4663 330.0557 547.1333 c
330.5557 547.8003 331.8896 545.1333 332.0557 544.1333 c
332.2217 543.1333 334.8887 532.3003 327.5557 532.8003 c
f331.8887 527.4668 m
329.2217 533.3003 334.3887 535.8003 v
339.5557 538.3003 344.8887 538.8003 y
345.2217 538.4663 344.8887 537.6333 v
344.5557 536.8003 342.2227 531.6333 340.0557 529.1333 c
337.8887 526.6333 334.5557 524.8003 331.8887 527.4668 c
f341.2217 522.6333 m
336.3896 521.3003 334.0557 520.8003 v
331.7217 520.3003 327.8877 516.6338 330.2217 513.3003 c
332.5557 509.9668 336.7217 511.1338 339.3887 515.3003 c
342.0557 519.4668 342.7217 522.7998 341.2217 522.6333 c
f309.8887 518.1333 m
314.7227 517.1338 317.0557 514.8003 v
319.3887 512.4668 319.7227 508.9673 317.0557 507.3003 c
314.3887 505.6333 310.5557 507.4663 309.8887 509.1333 c
309.8887 518.1333 l
f326.2217 493.6333 m
324.0557 497.6333 329.3887 501.4668 v
334.7217 505.3003 339.0557 504.6333 y
339.0557 499.4663 335.3887 495.6333 v
331.7217 491.8003 329.5547 491.2998 326.2217 493.6333 c
f309.7217 503.8003 m
317.8877 502.9673 317.3887 496.3003 y
315.7227 491.9673 309.0557 493.8003 v
309.7217 503.8003 l
f325.5557 481.3003 m
323.8887 485.8003 329.3887 488.4668 v
334.8887 491.1333 339.2217 490.8003 y
339.2217 490.2998 338.8887 489.6333 v
338.5557 488.9668 337.7217 483.3003 333.7217 480.8003 c
329.7217 478.3003 327.8896 478.6338 325.5557 481.3003 c
f316.3887 480.3003 m
316.8887 485.1333 313.7217 487.6333 v
310.3105 490.3257 308.3887 489.1333 y
307.7217 482.8003 l
307.5127 479.6094 311.5557 478.8003 v
315.7217 477.9668 316.3887 480.3003 y
f327.0557 470.3003 m
325.0557 474.3003 330.3887 477.8003 v
335.7217 481.3003 340.3887 482.4668 y
340.0557 481.6333 340.0557 481.1333 v
340.0557 480.6333 339.3877 475.1338 336.2217 471.8003 c
333.0557 468.4668 329.5557 467.4673 327.0557 470.3003 c
f247.7217 430.4668 m
242.0552 431.4668 243.7217 437.8003 v
245.3882 444.1333 249.5547 446.4673 249.5547 447.3003 c
249.5547 448.1333 251.8887 443.1333 252.7217 440.4668 c
253.5547 437.8003 253.2217 429.7998 247.7217 430.4668 c
f235.2217 444.3003 m
229.7217 446.6333 232.7217 452.1333 v
235.7217 457.6333 239.7212 459.2998 240.0547 460.6333 c
240.3882 461.9668 241.0547 455.4673 241.3882 453.3003 c
241.7217 451.1333 241.8887 442.6338 235.2217 444.3003 c
f228.7217 447.9668 m
230.3877 452.2998 228.0547 456.6333 v
225.7217 460.9668 221.3882 462.1333 y
220.8882 452.4668 l
221.0552 447.6333 228.7217 447.9668 v
f233.7217 431.2998 m
233.2217 435.4678 227.8882 436.1338 v
222.5547 436.7998 221.0547 433.7998 y
221.0547 431.7998 l
221.2217 428.3008 227.2217 427.6338 v
233.2217 426.9668 233.7217 431.2998 y
f237.3882 420.7998 m
236.0552 425.4678 230.2217 425.1338 v
224.3882 424.7998 222.3882 420.4678 y
224.2217 416.2998 230.8882 416.4678 v
237.5547 416.6338 237.3882 420.7998 y
f228.7217 439.9668 m
229.2217 444.3003 225.2217 445.3003 v
221.2217 446.3003 220.5547 444.1333 y
220.8882 438.8003 l
223.0552 437.8003 225.2217 437.9668 v
227.3882 438.1333 228.7217 439.9668 y
f310.7217 351.2998 m
310.0566 356.7998 303.5557 357.4678 v
297.0547 358.1338 293.8882 353.4678 y
294.8872 348.6338 302.7217 348.2998 v
310.5557 347.9678 310.7217 351.2998 y
fU*u
1 D
0.65 0.53 0.51 1 k
309.7217 526.5088 m
269.6567 526.5088 L
269.6797 525.7778 L
272.3076 443.6572 229.248 382.8193 228.813 382.2139 C
228.0127 381.1025 L
274.1128 380.7549 L
274.3228 381.0928 L
314.9727 446.1978 310.4795 525.0562 310.4287 525.8452 C
310.3867 526.5088 L
309.7217 526.5088 L
f0 D
309.0469 525.0918 m
309.0967 523.9941 309.1826 521.5557 309.1826 517.9688 c
309.1826 496.5503 306.0723 434.8789 273.3169 382.1787 C
272.5366 382.1846 233.21 382.4795 230.7261 382.499 C
236.2891 390.7568 271.2124 445.5347 271.2124 518.5454 c
271.2124 520.71 271.1714 522.896 271.1079 525.0918 C
272.4717 525.0918 307.7686 525.0918 309.0469 525.0918 C
f*U
*u
1 D
230.8096 549.1753 m
224.9482 549.1753 220.1797 544.4067 220.1797 538.5454 C
220.1797 334.8877 L
220.1797 329.0264 224.9482 324.2588 230.8096 324.2588 C
348.9678 324.2588 L
354.8291 324.2588 359.5977 329.0264 359.5977 334.8877 C
359.5977 538.5454 L
359.5977 544.4067 354.8291 549.1753 348.9678 549.1753 C
230.8096 549.1753 L
f0 D
221.5967 334.8877 m
221.5967 538.5454 L
221.5967 543.6255 225.7295 547.7583 230.8096 547.7583 C
348.9678 547.7583 L
354.0479 547.7583 358.1797 543.6255 358.1797 538.5454 C
358.1797 334.8877 L
358.1797 329.8076 354.0479 325.6768 348.9678 325.6768 C
230.8096 325.6768 L
225.7295 325.6768 221.5967 329.8076 221.5967 334.8877 C
f*U
ULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
