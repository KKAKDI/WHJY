%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (877.ai)
%%CreationDate: 3/25/2002 6:38 PM
%%BoundingBox: 224 340 378 580
%%HiResBoundingBox: 224.4995 340.8994 377.5713 579.0103
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 11734 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC6827F820F826F820F8
%20F8F8F820F820F826F820F826F820F820F820F820F8F8F820F8F8F820F8
%20F820F820F820F820F820F820F820F820F820FD07F826F820F84BFD06FC
%99FFFD04FCB42027F86F20276827F84BF86FF84B20276827202720F84427
%20F844272027F84BF84BF84BF84B20272027F827202720F844F844F82027
%202744276827206FF86FF84B44F86827F82768FD04FCC2FFFD04FC20F88C
%4BF8FCF84B8CF86827206EF892F86E44204420F84B4426F86FF86EF82744
%F88CF86820204BF84A20F8204AF84B204AF86FF8204427442620FCF86E20
%2768F88C27204AF8FCF8F88CFCFCFCBBFFFCFCFC68202027FC272092F86F
%44208C206827204B20FCF86FF84BF893F82720F844272027F86FF86F204B
%20F8F820F827F8F8F827F84B204BF892F8B4F86F44278CF868272092F8B4
%206F8C20204BFCFCFCC2FFFCFCFC20F8FCF8208CF8444AF8FCF84A20F88C
%F844F8684AF82720FD0DF8442620FD0DF82020442044F8FC20206FF8FCF8
%8C202068F8FC202092F8FCFCFCBBFFFCFCFCF8274493F86F68F868272093
%F893F84B442744278C2720FD20F82744274493F8B5F86F44278CF88C2744
%93F893FCF8FCFCFCC2FFFCFCFC2044F8448CF86F44F88C204426F86FF88C
%F84BF86EFD23F84AF8FC20264420FCF84427206EF8FCF84AFC4BF8FCFCFC
%BCFFFCFCFCF86F4420686FF893202720FD08F827FD25F827FC206827446F
%F892F893204B68208C92F8F8FCFCFCC2FFFCFCFC20F88C20F88C26F84BFD
%31F826F86EF8FCF84B202068F88CF844FCF84AF8FCFCFC99FFFCFCFC204B
%F89320272027FD33F84B204B8CF88CF8684B446FF8FC2027FCF8FCFCFCC2
%FFFCFCFC276826F892FD0DF820FD05F84BFD24F88C26204BF88CF892F86E
%44F88CFCF8FCFCFCBBFFFCFCFCF8F86827FD0DF8B4FC27F8F8F84BFC27FD
%23F8B4F86FF86F202720278CF844FC20F8FCFCFCC2FFFCFCFC2020FD0EF8
%26FCFCFD04F88CFCFD04F820FCFD1EF820F820208CF868F8682020FC20F8
%F8FCFCFCBBFFFCFCFCF827FD09F86F20F8F8F820FC20FD04F8FC20FD04F8
%93FC27FD21F827F827204BF8B4202768F8FCFCFCC2FFFCFCFC20FD09F820
%8CFD04F84A44FD04F827FC20FD04F8FC4BFD27F86E44F8684BF8FCFCFCBC
%FFFCFCFCFD0AF8206FFD04F8444BF8F8F8208CFC44F8F8278C92FD04F868
%B4FD24F86827F8F8FCFCFCC2FFFCFCFC20FD09F8FCFD05F84B8C20F8268C
%FD07FC44FD04F8FCFCFD26F8FCF8FCFCFC99FFFCFCFCFD09F827FC27FD04
%F844FD0CFC4BFD04F8FCB5FD25F8278CF8FCFCFCC2FFFCFCFC27FD08F868
%FCFD05F86FFD0CFC20F8F8F844FCFC4B206EFD23F820F8FCFCFCBBFFFCFC
%FCFD09F8FCFCFD04F827FD0DFCB4686F8CFD06FC6FFD24F8FCFCFCC2FFFC
%FCFCFD08F84AFCFCFD04F844FD04FC682026F8F8208CFD08FC684A204BFD
%25F8FCFCFCBBFFFCFCFCFD08F88CFCFC93202768FD04FC4BF84BFD05F827
%8CFD05FC68FD29F8FCFCFCC2FFFCFCFC20FD06F820FD0BFC8CFC44FD07F8
%68FD04FC27FD29F8FCFCFCBCFFFCFCFCFD07F86FFD0CFC444BFD05F86F20
%F868FCFCFCFD2AF8FCFCFCC2FFFCFCFC20FD06F88CFD0CFC4BFD08F844FD
%04FC20FD29F8FCFCFC99FFFCFCFCFD07F8FD09FC8C93FCFCFCB4684B204B
%206F8CFD05FC44FD29F8FCFCFCC2FFFCFCFC27FD05F820FD08FC442020FD
%10FC8CFD29F8FCFCFCBBFFFCFCFCFD06F8206F44FCFC4B2027F82044FD12
%FC4BFD28F8FCFCFCC2FFFCFCFCFD06F84B204AFCFC444A4492FC8C20F8FD
%11FC4AFD27F8FCFCFCBBFFFCFCFCFD06F8444B20FCFC4B204B4427F84B8C
%FD12FC4BFD26F8FCFCFCC2FFFCFCFC20FD05F84B4420FCFCF826204B44FC
%FCFC204AFD11FC27FD25F8FCFCFCBCFFFCFCFCFD06F8446FF8FCFC2768FC
%FCFC684BF8278CFD11FC8CFD25F8FCFCFCC2FFFCFCFC20FD05F868FCF8FC
%FCF86EFCF8F8F82068FC4BF8FD0CFC4AF86EFCFCFD25F8FCFCFC99FFFCFC
%FCFD06F868FCF86FFC4B44FD04FC934427F893FC4BFD06FC442720938C4B
%F86FFC4B277DFD22F8FCFCFCC2FFFCFCFC27FD05F8FCFC4B20FC204BFC8C
%F820F82044FC8C20F8FC68FCFCFC20202727F84A8C6FF86E2027FFFF27FD
%20F8FCFCFCBBFFFCFCFCFD05F827FCFC4427FC6FF8FCFC6F68FC444B20F8
%20B4682068FC4427A8FFFF7D20F82027F84BF8FFFFFF27FD1FF8FCFCFCC2
%FFFCFCFCFD05F88CFCFCFCF86E8CF88CFD04FC4B204A446E20F844FCFCF8
%52FD05FF7D5220F8F827FD04FF27FD1EF8FCFCFCBBFFFCFCFCFD04F820FD
%04FC4B20FCF827FCFC8CB5FCFC8C27204B8CFCFCFCF8FD09FF20F852FD05
%FF27FD1DF8FCFCFCC2FFFCFCFC20F8F8F8FD05FC8CF88C26F82020F820FD
%05FC68FCFCFC8CF8FD09FF52F8FD07FFFD1DF8FCFCFCBCFFFCFCFCF8F8F8
%6FFD06FC20276827686F68F844FCFCB42020FCFCFC6FF8FD09FFA8FD09FF
%FD1CF8FCFCFCC2FFFCFCFC20F8F8FD08FCF86EF88CFCFC68F8F820F820F8
%92FCFCF8F852FD12FF7DFD1BF8FCFCFC99FFFCFCFCF8F820FD08FC6FF827
%20FD04FC9368B4FC4BF827F84B4427FD13FF52FD1AF8FCFCFCC2FFFCFCFC
%27F84AFD09FC27F8F88CFD09FC688CFC92F8FFA8522752A7FD0EFF20FD19
%F8FCFCFCBBFFFCFCFCF82720FD0AFC27F827FD0DFC277D27FD04F852FD0D
%FF7DFD19F8FCFCFCC2FFFCFCFCF8F8F868FD09FC8C20F86EFD0CFC2027FD
%06F8FD0DFF52FD19F8FCFCFCBBFFFCFCFCF8F827278CFD09FC8C27F893FD
%0BFC27FD07F8A1FD0BFFA8F89320FD17F8FCFCFCC2FFFCFCFC20F85227F8
%44FD05FC8C6EFCFCFC4AFD06FC688CFCFCFC26FD08F87DFD0BFFF84BFCFC
%FD17F8FCFCFCBCFFFCFCFC204BF8FF7C27F84B686F2027F892FD09FC27F8
%272027F876FD07F8FD0BFF2727FCFCFCB4FD16F8FCFCFCC2FFFCFCFC2768
%2027FFFF522627F8517D52F88CFD07FC8CF87D524B52FF7DFD06F827FD0A
%FF4BF88CFCFCFC44FD16F8FCFCFC99FFFCFCFC206F8CF8A8FD08FF52F84B
%8CFCFCFC8C6FF8277DFD05FFFD05F827A8FD09FF522768FCFCFC20F868B5
%FD14F8FCFCFCC2FFFCFCFC2768FC2027FD09FFA827F8F820FD07F8FD04FF
%27FD04F87DFD09FF52F868FCFC8CF82768FCFCFCFD13F8FCFCFCBBFFFCFC
%FCF86FFCB4F852FD0BFFA87D7D52FD06F8FFFFFFA8F8F852A8FD09FF2727
%68FCFC4BF84B8CFCFCFC8C27FD12F8FCFCFCC2FFFCFCFC2068FCFC8CF8A8
%FD0DFF52FD06F852FFFFA8F8FD0BFFF8F868FC68F8F86EFCFCFC6EF8F827
%A8FD11F8FCFCFCBBFFFCFCFCF827FCFCFC6FF8A8FD0CFF7DFD06F852FFFF
%5227FD09FFA8F8278C9320F844FCFCB44427F852A8FF27276827FD0EF8FC
%FCFCC2FFFCFCFC20F8278CFCFC27F8FD0AFFA8527DFD06F827FFFF2752FD
%04FF7D7DA8A827F84B6820F84B8CFC4427F82752FFFFFF52F88CFC8C27FD
%0DF8FCFCFCBCFFFCFCFCF86F202068FCFC27F8FD08FF52FD09F8A8FFA8F8
%FFFFFF2727FD05F84BF82744924427F82752A8FD04FF7DF868FD04FC93FD
%0CF8FCFCFCC2FFFCFCFCF8F8FC44F8F88CFC27F8A7FD05FFA8FD06F82727
%F8F8FFFF5127FFFF27FD08F82620F8F8274BA8FD06FF7DF844FD04FC8CF8
%278C4A20FD08F8FCFCFC99FFFCFCFC2027F84B8C27F84B8C4BF852FD04FF
%7DFD06F827FFFFF87DFF2752FF52FD08F82727527DFD09FF7D2744FD04FC
%4BF84BFD04FC44F8277D515227F8FCFCFCC2FFFCFCFC27527DF820206E20
%F8204AF8277DFFFFA8FD07F87DFF7DF8A8F827F827FD07F87DFD0CFF52F8
%44FCFCFC8C27F86EFCFCFC8CF8277DFD05FFF8FCFCFCBBFFFCFCFCF827A8
%FF7D27F8202027FD04F8277DFF27FD06F87DFFFF27F8F84BA8FFA827FD04
%F87DFD0CFF512744FCFCFC44F820B4FCFC8C4BF851FD07FFF8FCFCFCC2FF
%FCFCFC20F827FD04FF7D522727F8F8F827277D7DFD06F8A7FFFFA8F852FD
%15FF27F868FCFC4AF82068FCFCFC20F8F8A8FD08FFF8FCFCFCBBFFFCFCFC
%F86FF852FD0EFF7D27F8F8F827FD04FFF8FD04FFA82727F82727A8FD09FF
%A8F8278CFC4427F86FFCFC8C4BF8277DFD0AFFF8FCFCFCC2FFFCFCFC2068
%92F852FD0FFF7D2727F8A7FFFF5227FFFFFF52FD07F8A7FD06FFA852F84B
%FC4AF82044FCFC9220F8F87DFD0CFFF8FCFCFCBCFFFCFCFC206FFC93F876
%FD11FF52F8FFFF2752FFFFA8FD08F827FD05FF5227206F2020F86FFC9344
%27F827A8FD0EFFF8FCFCFCC2FFFCFCFC2644FCFC92F827FD11FF27F8CFF8
%FFFF7DFD09F827FFFFFF7DF8F82026F820689220F8F82752FD11FFF8FCFC
%FC99FFFCFCFCF82768FCFC93F827A8FD07FF7D2776FD05FFA8FD0427F8F8
%27FD08F87DFF7627F827F827204BF827F82776FD14FFF8FCFCFCC2FFFCFC
%FC2720F8F86FFCFC20F852FD06FF7DF8F8F84BA8FFFFFF7DF8F876A8FFA8
%27FD06F85252FD07F8272752A7FD17FFF8FCFCFCBBFFFCFCFCF86F8C4BF8
%274492442727A8FD05FFF80729F8277DFFFFFFF8A8FD05FFA85252527DFF
%7CF827F852277D7DFD1CFFF8FCFCFCC2FFFCFCFC2068FCFCFC4427F8F820
%27F827A1FFFFFFF807070700F852FF5227FD06FF7DA8FD1BFFA87D522752
%277DA1FD05FFF8FCFCFCBBFFFCFCFCF82768FD04FCB4444BFD04F8277DFF
%27062F072F06F852272752272700F8F8F87DFD18FF7D2727FD09F852A8FF
%FFF8FCFCFCC2FFFCFCFC20F8F8F820204B204A204BF8F8F8277DFFF828FD
%040706F8F827002706280628F8FD17FF2720FD0EF87DFFF8FCFCFCBCFFFC
%FCFC207DFFA8525227272752277DA8FFFFFF27F8052F072F072F072F072F
%072F072FF852FD15FF7DFD12F87DF8FCFCFCC2FFFCFCFC277DFD0CFFCFF8
%F806FD0D0700F8FD15FF27FD15F8FCFCFC99FFFCFCFC207DFD0CFFF82707
%2F072F072F072F072F072F072F06F87DFD13FFA827FD16F8FCFCFCC2FFFC
%FCFC277DFFFF51F8F827A8FD04FF27F806FD0D0706F852FD13FFA827FD17
%F8FCFCFCBBFFFCFCFCF87DFF52FD05F8A8FD04FF4BF8052F072F072F072F
%072F072F06F852FD05FF7D7D4B27F8272752277DFD05FF27FD18F8FCFCFC
%C2FFFCFCFC267CFFFD06F827FFA852277D7D27F828FD0A07F827FFFFA14B
%FD0CF8277DFF27FD19F8FCFCFCBBFFFCFCFCF8A1FFFD07F87DFD04F852FF
%7DF82F072F072F072F072F072FF87DFD11F827FD1AF8FCFCFCC2FFFCFCFC
%277DFFFD07F827FD05F8A75227FD050727050707070627FD2DF8FCFCFCBC
%FFFCFCFC207DFF27FD0CF85252052F072F0727F8F8F8280600FD2EF8FCFC
%FCC2FFFCFCFC27F8274BFD10F8270027F8A8FF52FD31F8FCFCFC99FFFCFC
%FCFD04F826FD04F8A8FD0DF827A8FF27FD31F8FCFCFCC2FFFCFCFC27FD04
%F8277D2727A827FD0DF82027FD32F8FCFCFCBBFFFCFCFCFD05F827A8A8F8
%27FD42F8FCFCFCC2FFFCFCFCFD06F87D7DFD44F8FCFCFCBBFFFCFCFCFD06
%F852FD25F8206F8CFD04FC934427FD16F8FCFCFCC2FFFCFCFC26FD29F84B
%8CFCFCFCB5B5FD05FC9220FD14F8FCFCFCBCFFFCFCFC207D7D524B27FD23
%F892FD05FCC2CFFCFCB5B4FCFCFC44FD13F8FCFCFCC2FFFCFCFC277DFFFF
%7DFD23F8FD07FC92FFFCFCA7FFFD04FC68FD12F8FCFCFC99FFFCFCFC207D
%FFFFFD23F8B5FD07FCBBFFB5CAFFFFB5FD04FC68FD11F8FCFCFCC2FFFCFC
%FC277DFF52FD22F86EFD08FCBBFFC9FFC3B4FD06FC20FD10F8FCFCFCBBFF
%FCFCFCF87DFF27FD21F827FD05FCC2BBB5FCC2FFFFC2FD09FCFD10F8FCFC
%FCC2FFFCFCFC267C76FD22F868FD05FCC3FF92FCC3FF93B4B4FD08FC4AFD
%0FF8FCFCFCBBFFFCFCFCF8A127FD22F8FD06FCB5BBFCBCFFC2BCCAFFB5FD
%07FC8CFD0FF8FCFCFCC2FFFCFCFC2752FD22F826FD08FCC3C9CAFFFFFFCA
%B5FD08FCFD0FF8FCFCFCBCFFFCFCFC204BFD22F844FD06FCB5CAFFCAFFFF
%FFC9FD0AFC4BFD0EF8FCFCFCC2FFFCFCFC27FD23F86EFD06FCA1FFC3B4CA
%FFFFFF93FD09FC20FD0EF8FCFCFC99FFFCFCFCFD24F868FD06FCB5B5FCC3
%FFFFFFCFB5FD09FC4BFD0EF8FCFCFCC2FFFCFCFC27FD23F86FFD08FCC2FF
%FFC3FFC2FD0AFC20FD0EF8FCFCFCBBFFFCFCFCFD24F868FD07FCBCFFFFBC
%B5FFB5FD0AFC4BFD0EF8FCFCFCC2FFFCFCFCFD24F826FD06FCBBFFFFBBFC
%B5FFB5FD05FCCA93FCFCFCFD0FF8FCFCFCBBFFFCFCFCFD25F8FD05FCB5FF
%FFBCFCFCB5FFB5FCFCFCB4CAFFCAFCFC8CFD0FF8FCFCFCC2FFFCFCFCFD25
%F868FCFCFCB5FFCAB5FCFCFCB5FFFFC3C9C3FD04FFB5FC4AFD0DF84BF8FC
%FCFCBCFFFCFCFCFD25F827FCFCFCCAC9B5FD04FCB4FD08FFC9FCFCFD0DF8
%269EF8FCFCFCC2FFFCFCFC20FD25F868FD0BFCB592B5B4B592B4FCFC44FD
%0DF874C6F8FCFCFC99FFFCFCFCFD27F8B5FD12FC68FD0DF851C6C6F8FCFC
%FCC2FFFCFCFC27FD27F8FD11FC68FD0DF826C6C6C6F8FCFCFCBBFFFCFCFC
%F87B7427FD25F893FD0EFC6827FD0DF8FD04C6F8FCFCFCC2FFFCFCFC2074
%C6C651FD25F84BFD0CFC20FD0EF89EFD04C6F8FCFCFCBBFFFCFCFCF89FC6
%C6C651FD25F8202093FD06FC684BFD0FF87BFD05C6F8FCFCFCC2FFFCFCFC
%2674FD04C627FD29F820F820FD11F827FD06C6F8FCFCFCBCFFFCFCFC207B
%FD04C69E27FD3BF8279EFD06C6F8FCFCFCC2FFFCFCFC2774FD05C674FD3B
%F84AFD07C6F8FCFCFC99FFFCFCFC207BFD06C651FD3AF8FD08C6F8FCFCFC
%C2FFFCFCFC2774FD07C626FD38F851FD08C6F8FCFCFCBBFFFCFCFCF87BFD
%08C620FD26F84B4A7574514A27FD09F827FD09C6F8FCFCFCC2FFFCFCFC20
%74FD09C6FD23F8759EFD09C64AFD07F84AFD09C6F8FCFCFCBBFFFCFCFC20
%51FD09C6C7FD1FF8279EFD0EC651FD05F8C7FD08C69EF8FCFCFCC2FFFCFC
%FC6EF8FD0BC626FD0EF826FD0DF87BFD11C69EF8F8F826FD09C62720FCFC
%FCBCFFFD04FC27F8C7FD0AC65027FD0BF87BC627FD09F82750FD15C626F8
%4AFD08C627F8B4FCFCFCC2FFFD04FC8C26F84B747B747B747B747B747B50
%4BFD08F82675747B744BFD06F82051747B747B747B747B747B747B747B74
%7B747B747B747B747BF827747B747B747B4AF8F88CFD04FC99FFFD06FC93
%2627F8272027F8272027F8272027F827F827F8272027F8272027F827F827
%F8272027F8272027F8272027F8272027F8272027F8272027F8272027F827
%F827F8272027F82744FD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
377.5713 340.8994 m
224.4995 340.8994 L
224.4995 579.0103 L
377.5713 579.0103 L
377.5713 340.8994 L
fu0 0 0 0 k
231.3687 390.2891 m
231.3687 494.6221 l
238.8687 528.2891 l
275.2021 540.2891 l
319.5352 539.4556 l
338.0352 526.7891 338.5352 525.9556 v
339.0352 525.1221 370.8682 468.4556 y
370.8682 434.6221 l
348.5352 428.7891 l
330.7012 423.2891 l
310.3682 422.2891 l
283.2021 409.4561 l
266.5352 402.1221 l
237.3687 387.7891 l
231.3687 390.2891 l
f0 1 1 0 k
233.4937 495.9556 m
232.8687 490.9556 237.9937 487.0806 v
243.1187 483.2056 249.2437 483.2056 252.8687 485.7056 c
254.8687 480.9556 261.9937 479.5806 v
269.1187 478.2056 273.8687 481.7056 274.4937 485.3306 c
278.8687 482.7056 282.3687 484.9556 v
285.8687 487.2056 285.9937 490.5806 285.1187 493.3306 c
284.2437 496.0806 283.3687 499.7056 283.2437 500.7056 c
283.1187 501.7056 282.6187 505.0806 284.3687 507.7056 c
286.1187 510.3306 288.9937 510.9556 290.1187 510.4556 c
291.2437 509.9556 292.8687 508.7056 294.1187 508.0806 c
295.3687 507.4556 299.6191 505.9556 301.3682 506.5806 c
302.2432 504.5806 302.3682 503.9556 v
302.4932 503.3306 303.1182 502.4556 y
304.8682 505.2056 304.8682 508.4556 v
304.8682 511.7056 303.9932 515.0806 y
370.8682 520.2056 l
370.8682 561.8306 l
370.6182 572.0806 360.8682 572.0806 v
351.1182 572.0806 252.7437 572.0806 y
240.6187 572.0806 l
231.2437 571.0806 231.2437 562.5806 v
231.2437 554.0806 231.2437 541.3306 y
233.4937 495.9556 l
f231.4937 491.8306 m
236.7437 471.9556 256.9937 462.0806 v
243.3687 458.5806 231.3687 468.5806 v
231.4937 491.8306 l
f231.3687 463.4556 m
240.9937 449.8306 255.9937 443.8306 v
255.6187 442.8306 255.2437 442.5806 v
254.8687 442.3306 239.9937 438.8306 231.3687 443.9556 c
231.3687 463.4556 l
f326.4932 492.4556 m
317.7432 475.8306 302.7432 469.9556 v
304.3682 468.3306 304.7432 466.5806 v
329.6182 471.3306 339.3682 478.4556 v
329.9932 486.7056 326.4932 492.4556 v
f341.6182 476.0806 m
329.9932 457.9556 307.7432 449.5806 v
309.8682 448.7056 313.4932 448.8306 v
317.1182 448.9556 349.6182 455.8306 360.7432 467.9556 c
349.7432 470.9556 341.6182 476.0806 v
f1 0.6 0 0 k
275.6187 442.4556 m
272.3687 446.3306 269.1187 448.0806 v
265.8687 449.8306 262.3687 450.9556 y
262.4937 448.4556 262.4937 446.8306 v
262.4937 445.2056 262.8687 441.7056 263.2437 440.8306 c
260.9937 440.0806 259.2437 438.3306 v
257.4937 436.5806 256.1187 435.0806 y
258.6187 433.4556 259.9937 432.2056 v
261.3687 430.9556 264.2437 429.9556 y
263.2437 423.7056 l
270.9937 422.3306 l
271.8687 422.2056 l
275.6187 425.3306 275.8687 426.4556 v
277.4937 425.8306 278.6187 425.3306 v
279.7437 424.8306 282.8687 423.8306 y
286.9937 426.8306 287.6187 427.2056 v
285.9937 431.9556 284.6187 433.0806 v
288.6187 435.5806 290.1187 438.4556 v
291.6187 441.3306 292.7437 444.3306 y
290.4937 443.9556 288.2437 443.9556 v
285.9937 443.9556 279.1187 443.4556 275.6187 442.4556 c
f0 0.2 1 0 k
231.3687 375.9561 m
231.3687 357.9561 l
231.8691 347.7881 241.2021 347.7881 v
250.5352 347.7881 360.7012 347.7881 y
370.7012 347.6221 370.7012 359.7881 v
370.7012 371.9561 370.7012 389.2891 y
356.0352 380.4561 l
329.2012 364.6221 l
312.8682 364.9561 l
292.8687 367.1221 l
249.7021 381.2891 l
232.8687 379.4561 l
231.3687 375.9561 l
f*u
1 D
0.65 0.53 0.51 1 k
241.29 572.8306 m
235.4287 572.8306 230.6602 568.062 230.6602 562.2007 C
230.6602 357.71 L
230.6602 351.8486 235.4287 347.0791 241.29 347.0791 C
360.7803 347.0791 L
366.6416 347.0791 371.4102 351.8486 371.4102 357.71 C
371.4102 562.2007 L
371.4102 568.062 366.6416 572.8306 360.7803 572.8306 C
241.29 572.8306 L
f0 D
232.0771 357.71 m
232.0771 562.2007 L
232.0771 567.2808 236.21 571.4136 241.29 571.4136 C
360.7803 571.4136 L
365.8604 571.4136 369.9922 567.2808 369.9922 562.2007 C
369.9922 357.71 L
369.9922 352.6299 365.8604 348.4971 360.7803 348.4971 C
241.29 348.4971 L
236.21 348.4971 232.0771 352.6299 232.0771 357.71 C
f*U
231.3687 389.4561 m
237.1187 415.7051 253.6187 421.9556 v
270.1187 428.2056 277.1187 418.9551 y
285.3687 429.2056 298.6187 432.2056 v
311.8682 435.2056 321.1182 430.2056 322.6182 428.9556 c
330.3682 441.2056 344.6182 444.7056 v
358.8682 448.2056 368.6182 442.4556 370.1182 436.2056 c
370.1182 385.7061 l
368.1182 381.9561 366.3682 379.7061 v
364.6182 377.4561 349.6182 360.4561 349.6182 348.2061 c
342.1182 356.4561 333.1182 358.4561 v
324.1182 360.4561 314.8682 357.4561 309.3682 353.9561 c
303.8682 350.4561 295.1187 347.7061 292.8687 347.7061 c
290.6187 347.7061 286.1187 349.2061 283.1187 353.4561 c
277.1187 347.7061 269.6187 347.7061 v
262.1187 347.7061 255.1187 352.2061 250.1187 357.9561 c
245.1187 363.7061 240.6187 370.7061 237.6187 372.7061 c
234.6187 374.7061 231.6187 375.4561 y
231.3687 389.4561 l
f0 1 1 0 k
344.3682 391.9561 m
344.3682 379.0693 333.9219 368.6221 321.0352 368.6221 c
308.1484 368.6221 297.7026 379.0693 297.7026 391.9561 c
297.7026 404.8428 308.1484 415.2891 321.0352 415.2891 c
333.9219 415.2891 344.3682 404.8428 344.3682 391.9561 c
f0.65 0.53 0.51 1 k
244.8472 522.6641 m
244.4556 522.6519 244.1484 522.3252 244.1602 521.9341 c
244.9131 497.3379 260.835 487.2026 260.9956 487.103 C
261.9199 488.1509 L
253.2129 498.9312 252.5552 512.8755 252.5552 516.8291 c
252.5552 516.9248 252.5576 516.9678 252.5581 517.0518 C
254.5005 516.6616 259.3145 516.2681 265.0889 520.0283 c
265.417 520.2417 265.5098 520.6807 265.2959 521.0088 c
265.0825 521.3369 264.6436 521.4292 264.3154 521.2158 c
257.5586 516.8159 252.1563 518.606 252.1025 518.6245 C
251.2178 518.9307 L
251.1611 517.9966 L
251.1597 517.9707 251.1392 517.5679 251.1392 516.8574 c
251.1392 513.2832 251.6689 501.9282 257.7471 491.7002 C
253.1201 496.3438 246.0669 505.9795 245.5771 521.9771 c
245.5649 522.3687 245.2383 522.6758 244.8472 522.6641 c
f261.7466 525.1646 m
257.8408 521.8838 251.6152 521.9961 251.5527 521.9976 c
251.1616 522.0068 250.8369 521.6978 250.8271 521.3066 c
250.8174 520.9155 251.126 520.5908 251.5171 520.5806 c
251.7935 520.5737 258.3354 520.4487 262.6577 524.0796 c
262.9575 524.3311 262.9966 524.7783 262.7446 525.0776 c
262.4932 525.3774 262.0459 525.4165 261.7466 525.1646 c
f266.8774 517.1328 m
262.8271 513.2383 256.9648 513.4937 256.9063 513.4966 c
256.5156 513.5171 256.1821 513.2168 256.1616 512.8267 c
256.1406 512.436 256.4399 512.1025 256.8306 512.0815 c
257.0947 512.0669 263.356 511.7808 267.8599 516.1113 c
268.1421 516.3823 268.1509 516.8311 267.8794 517.1133 c
267.6084 517.3955 267.1597 517.4043 266.8774 517.1328 c
f269.7188 513.8071 m
265.0005 509.4038 258.6157 509.4961 258.5522 509.4976 c
258.1611 509.5063 257.8364 509.1968 257.8271 508.8062 c
257.8179 508.415 258.1265 508.0903 258.5176 508.0806 c
258.8013 508.0737 265.5332 507.9624 270.6855 512.771 c
270.9717 513.0381 270.9873 513.4863 270.7202 513.7725 c
270.4531 514.0586 270.0049 514.0742 269.7188 513.8071 c
f273.4556 510.6968 m
270.5723 506.6001 264.6675 507.1543 264.6084 507.1606 c
264.2192 507.2002 263.8711 506.9175 263.8306 506.5288 c
263.7905 506.1396 264.0723 505.7915 264.4609 505.751 c
264.7363 505.7217 271.2466 505.0957 274.6147 509.8813 c
274.8398 510.2012 274.7632 510.6436 274.4429 510.8687 c
274.123 511.0938 273.6807 511.0171 273.4556 510.6968 c
f277.4121 508.293 m
275.4751 504.7173 269.7588 504.6646 269.7017 504.6641 c
269.3105 504.6636 268.9937 504.3462 268.9937 503.9546 c
268.9941 503.564 269.311 503.2471 269.7021 503.2471 c
269.9712 503.2471 276.3169 503.2964 278.6582 507.6182 c
278.8447 507.9619 278.7168 508.3921 278.3726 508.5786 c
278.0288 508.7651 277.5986 508.6372 277.4121 508.293 c
f231.6187 543.4556 m
235.8687 553.4556 247.3687 557.9556 v
258.8687 562.4556 267.3687 559.2056 y
272.6328 565.0635 283.3687 566.2056 v
295.1187 567.4556 301.6182 563.2056 y
309.1182 569.7056 323.6182 566.4556 v
337.0615 563.4424 344.1182 549.4556 y
362.3682 549.9556 370.3682 536.7056 v
370.3682 466.9556 l
356.1182 464.9556 342.8682 474.4556 v
329.6182 483.9556 321.6182 497.9556 319.8682 499.9556 c
318.1182 501.9556 312.2012 510.2891 304.7012 513.2891 c
305.8682 510.6221 305.5352 506.6221 v
305.2021 502.6221 302.5352 500.7891 y
301.7012 501.6221 301.7012 502.9556 v
301.7012 504.2891 300.2012 509.9551 293.5352 512.6221 c
294.0356 513.4551 295.8687 513.1221 v
297.7017 512.7891 301.7012 510.2891 303.3682 503.7891 c
304.3691 509.7891 303.0352 513.9556 v
301.7012 518.1221 298.2026 520.4556 296.8687 521.9556 c
295.5352 523.4556 293.2021 527.4561 294.2021 531.2891 c
295.2021 535.1221 297.2017 535.2886 298.8687 535.1221 c
300.5352 534.9556 303.8691 534.1226 304.0352 536.7891 c
304.2012 539.4556 302.8672 539.9556 300.7012 539.4556 c
298.5356 538.9556 297.3682 539.2891 297.0352 540.7891 c
296.7021 542.2891 297.0356 542.9556 297.8687 543.9556 c
298.7017 544.9556 297.3687 546.7886 295.7021 547.1221 c
294.0352 547.4556 292.7017 545.6226 293.0352 544.2891 c
293.3687 542.9556 293.5352 540.1221 291.5352 538.7891 c
289.5352 537.4561 286.7017 536.9561 285.0352 538.7891 c
283.3687 540.6221 283.8691 543.2891 285.7021 544.7891 c
287.5352 546.2891 288.7021 547.7891 288.2021 549.7891 c
287.7021 551.7891 285.7021 551.9561 284.7021 550.7891 c
283.7021 549.6221 284.0352 548.2891 284.0352 547.4556 c
284.0352 546.6221 282.0352 544.4556 279.3687 543.9556 c
276.7021 543.4556 275.0352 545.4551 275.3687 547.1221 c
275.7021 548.7891 277.0356 549.9551 277.7021 551.1221 c
278.3687 552.2891 278.3691 553.9561 276.7021 554.7891 c
275.0352 555.6221 273.7017 554.1221 273.5352 552.6221 c
273.3687 551.1221 272.7021 548.2886 271.8687 546.6221 c
271.0352 544.9556 268.7017 542.1221 266.5352 542.1221 c
264.3687 542.1221 262.0352 543.9551 263.3687 546.6221 c
264.7021 549.2891 266.7021 550.1226 266.2021 552.2891 c
265.7021 554.4556 262.7021 554.2891 261.2021 551.7891 c
259.7021 549.2891 260.5356 547.1221 260.7021 545.1221 c
260.8687 543.1221 260.7021 540.2891 260.2021 539.2891 c
259.7021 538.2891 258.7017 538.1226 259.0352 537.2891 c
259.3687 536.4556 259.0352 535.2891 256.5352 533.9556 c
254.0352 532.6221 251.5352 532.9556 250.8687 536.9556 c
250.2021 540.9556 252.8682 547.1226 253.5352 548.7891 c
254.2021 550.4556 253.8691 550.9551 252.2021 551.1221 c
250.5352 551.2891 249.5356 546.2886 249.2021 544.6221 c
248.8687 542.9556 247.8687 539.9551 246.8687 538.6221 c
245.8687 537.2891 243.2021 529.6226 242.7021 526.7891 c
242.2021 523.9556 241.7021 513.4551 241.2021 510.6221 c
240.7021 507.7891 239.8687 506.2886 238.8687 505.1221 c
237.8687 503.9556 233.5352 493.7891 231.8687 492.4556 c
230.2021 491.1221 231.6187 543.4556 y
f287.478 510.9614 m
284.6157 510.0078 282.5044 506.1597 282.3276 503.1636 c
282.2334 501.561 281.5962 496.3306 277.3687 496.3306 c
276.2915 496.3306 275.4976 496.6196 275.0078 497.189 c
274.1812 498.1514 274.3999 499.6646 274.4023 499.6797 C
274.6914 501.5791 L
273.2368 500.3237 L
273.2124 500.3022 270.7266 498.1924 267.0942 498.4951 c
263.5791 498.7886 262.0801 502.0991 262.0176 502.2397 C
261.6128 503.1577 L
260.8745 502.4634 L
260.835 502.4263 259.876 501.5474 257.7959 501.8247 c
255.7026 502.1035 254.1836 505.0767 254.1685 505.1069 c
253.9927 505.4561 253.5669 505.5972 253.2178 505.4219 c
252.8682 505.2466 252.7266 504.8218 252.9014 504.4722 c
252.9761 504.3223 254.769 500.7979 257.6084 500.4194 c
259.2803 500.1968 260.4233 500.5791 261.1089 500.9419 C
261.8511 499.7148 263.689 497.3569 266.9761 497.083 c
269.6777 496.8579 271.7925 497.7529 273.0132 498.4634 C
273.104 497.7769 273.3384 496.9624 273.9243 496.2759 c
274.6948 495.3716 275.854 494.9136 277.3687 494.9136 c
281.7134 494.9136 283.5098 499.1323 283.7427 503.0806 c
283.8887 505.5615 285.6431 508.856 287.9263 509.6167 c
289.6743 510.1992 291.0547 509.2056 291.9683 508.5479 C
292.5039 508.1812 L
293.7344 507.4434 298.0415 505.0747 301.7969 505.5869 c
302.1846 505.6396 302.4561 505.9971 302.4033 506.3848 c
302.3506 506.7725 301.9932 507.0439 301.6055 506.9912 c
298.2231 506.5298 294.0376 508.9141 293.2334 509.397 C
292.7964 509.6978 L
291.7891 510.4233 289.9141 511.7729 287.478 510.9614 c
f282.3281 503.1704 m
282.0991 499.8125 283.0571 497.1963 283.9019 494.8882 c
284.9512 492.0225 285.7095 489.9517 283.9614 487.5376 c
280.4009 482.6206 275.1528 486.0605 274.9312 486.2095 C
273.9058 486.8979 L
273.8276 485.6626 L
273.813 485.4307 273.3789 479.9824 265.189 479.8306 c
256.7739 479.6743 253.6343 485.8389 253.5049 486.1011 C
253.0996 486.9229 L
252.4038 486.3237 L
252.2002 486.1479 247.334 482.0669 240.0649 486.3979 c
232.8525 490.6948 234.6274 496.3247 234.7065 496.5625 c
234.8301 496.9326 234.6309 497.3345 234.2612 497.459 c
233.8916 497.584 233.4907 497.3877 233.3647 497.0186 c
233.3413 496.9497 231.1079 490.0845 239.3394 485.1802 c
245.9224 481.2583 250.9136 483.6563 252.6504 484.772 C
253.7773 482.979 257.4624 478.2695 265.2153 478.4136 c
272.479 478.5483 274.4878 482.5806 275.0371 484.5366 C
276.9883 483.5864 281.7051 482.0054 285.1089 486.7065 c
287.2993 489.731 286.2954 492.4731 285.2329 495.3755 c
284.4365 497.5508 283.5337 500.0166 283.7422 503.0737 c
283.769 503.4644 283.4736 503.8022 283.0835 503.8291 c
282.6929 503.856 282.355 503.5605 282.3281 503.1704 c
f266.5845 533.5024 m
266.2832 533.2544 266.2407 532.8105 266.4873 532.5083 c
266.7344 532.2061 267.1802 532.1611 267.4834 532.4067 c
267.5098 532.4282 270.1821 534.5454 274.7983 534.084 c
279.4697 533.6167 282.5049 530.6499 282.5347 530.6201 C
282.5894 530.5659 L
282.6548 530.5239 L
282.9326 530.3477 283.6069 529.9282 284.2148 529.5845 C
283.7998 529.3198 283.2964 529.0249 283.0078 528.8579 C
282.5039 528.563 L
281.8218 528.1538 278.605 527.1792 274.2803 527.6597 c
269.9756 528.1382 268.5728 529.585 268.5591 529.5996 c
268.2935 529.8818 267.8472 529.9028 267.561 529.6421 c
267.2749 529.3809 267.248 528.9424 267.5044 528.6523 c
267.6719 528.4634 269.2808 526.7896 274.124 526.2515 c
278.7656 525.7354 282.2656 526.7671 283.2334 527.3481 C
283.7183 527.6313 L
285.5171 528.6733 286.1523 529.0942 286.1523 529.6953 c
286.1523 529.7261 286.1504 529.7573 286.1475 529.7886 C
286.1011 530.2441 L
285.5933 530.4614 L
285.3408 530.5454 284.3066 531.1558 283.4683 531.687 C
283.0796 532.063 279.9058 534.9976 274.939 535.4941 c
269.7061 536.0176 266.7095 533.6055 266.5845 533.5024 c
f278.0352 534.1221 m
280.7021 532.6221 280.7021 530.6221 v
280.7021 528.6221 279.7017 527.1226 277.0352 526.7891 c
274.3687 526.4556 270.3682 527.1221 270.5352 531.1221 c
270.7021 535.1221 276.5352 534.9551 278.0352 534.1221 c
fu0 0 0 0 k
314.3682 402.1221 m
313.8672 402.2891 312.7012 402.9561 v
311.5352 403.6221 310.7012 403.6221 y
310.9932 402.3311 310.9932 401.2061 v
310.9932 400.0811 311.3682 399.0811 312.3682 399.4561 c
313.3682 399.8311 314.3682 402.1221 y
f317.1182 398.8311 m
315.9932 397.8311 315.3682 397.2061 v
314.7432 396.5811 314.7432 396.4561 316.2432 396.8311 c
318.2021 397.0391 318.5352 397.5391 v
318.8682 398.0391 318.6191 398.8721 318.0352 398.8721 c
317.4512 398.8721 316.6172 399.2881 316.9512 399.8721 c
318.6182 401.3721 l
318.7852 401.6221 318.7852 402.1221 v
318.7852 402.6221 319.1191 409.2061 319.0352 409.7061 c
318.9512 410.2061 318.6191 411.5391 318.5352 411.9561 c
318.4512 412.3721 318.7852 412.5391 319.2852 412.2891 c
319.7852 412.0391 320.7852 410.9561 y
321.2012 410.4561 321.1182 409.9561 v
321.0352 409.4561 320.7852 405.4561 320.7852 405.2061 c
320.7852 404.9561 321.2852 404.2891 321.5352 404.5391 c
321.7852 404.7891 325.8682 408.9561 326.1182 409.2061 c
326.3682 409.4561 326.4521 409.8721 326.7852 410.1221 c
327.1182 410.3721 327.4512 410.4561 327.9512 409.7061 c
328.4512 408.9561 328.9512 408.1221 y
328.8682 407.2061 328.3682 406.9561 v
327.8682 406.7061 320.7012 400.9561 320.4512 400.7061 c
320.2012 400.4561 319.8672 400.1221 319.9512 399.7061 c
320.0352 399.2891 320.1182 398.3721 y
320.6191 397.8721 321.0352 398.2061 v
321.4512 398.5391 324.6172 400.2891 324.9512 400.4561 c
325.2852 400.6221 325.1182 400.9561 325.8682 400.7061 c
326.6182 400.4561 327.3691 399.2891 327.5352 398.7061 c
327.7012 398.1221 327.4512 398.0381 326.9512 397.8721 c
326.4512 397.7061 323.4512 395.8721 y
323.1191 395.7061 323.5352 395.5391 v
323.9512 395.3721 324.7012 394.7891 y
325.7842 394.6221 325.4512 393.8721 v
325.1182 393.1221 324.2852 392.1221 323.7852 390.7061 c
323.2852 389.2891 322.9512 385.2881 322.9512 384.3721 c
322.9512 383.4561 323.6172 382.9551 324.7012 382.8721 c
325.7852 382.7891 329.3691 382.5391 331.0352 382.9561 c
332.7012 383.3721 334.6191 385.7051 334.7852 386.1221 c
334.9512 386.5391 335.0352 387.1221 335.0352 387.4561 c
335.0352 387.7891 335.5342 387.7061 335.9512 387.2891 c
336.3682 386.8721 337.7852 383.6221 338.1182 382.8721 c
338.4512 382.1221 338.1191 381.3721 337.5352 380.9561 c
336.9512 380.5391 335.0352 380.1221 334.0352 379.7891 c
333.0352 379.4561 325.5352 379.6221 323.5352 379.9561 c
321.5352 380.2891 320.9512 380.7891 320.8682 382.7891 c
320.7852 384.7891 321.0352 390.4561 y
320.9521 391.2881 320.5352 391.1221 v
320.1182 390.9561 317.4512 387.8721 316.7012 387.2061 c
315.9512 386.5391 310.3691 381.1221 309.7852 380.8721 c
309.2012 380.6221 306.8672 380.8721 306.4512 380.8721 c
306.0352 380.8721 305.9512 381.4561 306.6182 381.7061 c
307.2852 381.9561 307.7842 382.2891 308.2012 382.5391 c
308.6182 382.7891 317.7852 393.1221 318.0352 393.7061 c
318.2852 394.2891 318.3682 394.7881 318.3682 395.1221 c
318.3682 395.4561 317.7842 395.9551 317.2012 395.6221 c
316.6182 395.2891 313.6172 393.2051 312.9512 392.8721 c
312.2852 392.5391 311.2012 392.8721 310.7012 393.0391 c
310.2012 393.2061 310.2012 393.7051 310.6182 394.1221 c
311.0352 394.5391 315.7852 398.6221 316.0352 398.7891 c
316.2852 398.9561 317.7852 399.8721 317.1182 398.8311 c
fU0.65 0.53 0.51 1 k
253.0352 417.2891 m
251.5352 417.4561 247.5352 422.2891 249.0352 426.6221 c
250.5352 430.9551 254.0352 430.9556 y
257.2021 431.2891 259.3687 428.2891 v
261.5352 425.2891 260.0352 419.123 257.8687 417.7891 c
255.7021 416.4551 253.0352 417.2891 y
f239.5352 435.2891 m
234.7021 432.9556 236.2021 426.7891 v
237.7344 420.4897 242.2021 420.6226 244.3687 420.7891 c
246.5352 420.9556 250.2021 424.1221 248.2021 429.9556 c
246.2021 435.7891 240.3687 435.9556 239.5352 435.2891 c
f231.5352 423.4556 m
233.8682 425.1221 238.0352 421.9556 v
242.2021 418.7891 242.0356 413.4551 241.2021 412.1221 c
240.3687 410.7891 234.7017 409.7891 231.5352 413.9551 c
231.5352 423.4556 l
f272.8687 457.7891 m
277.3682 461.9556 273.5352 467.4556 v
269.7021 472.9556 265.2021 471.7886 263.3687 470.6221 c
261.5352 469.4556 260.0352 464.6221 264.0352 460.6221 c
268.0352 456.6221 272.2021 457.2891 272.8687 457.7891 c
f278.8687 468.2891 m
282.2017 471.2891 280.5352 475.7891 v
278.8687 480.2891 274.2021 482.1226 270.8687 480.2891 c
267.5352 478.4556 268.2021 473.7891 270.8687 470.9556 c
273.5352 468.1221 276.7021 467.2891 278.8687 468.2891 c
f288.7021 477.4556 m
284.2021 480.7891 286.2021 488.2891 v
287.8789 494.5776 292.2026 494.9561 295.2021 493.7891 c
298.2017 492.6221 300.7021 488.2886 297.8687 483.1221 c
295.0352 477.9556 289.7021 476.6221 288.7021 477.4556 c
f291.3687 465.6221 m
292.3677 470.6226 298.2017 471.2891 v
304.0352 471.9556 305.2012 467.7891 305.3682 466.9556 c
305.5352 466.1221 304.2021 461.9556 299.0352 461.9556 c
293.8687 461.9556 291.8687 464.1221 291.3687 465.6221 c
f288.5352 452.6221 m
289.5356 458.1226 296.3687 459.2891 v
303.2012 460.4556 305.7012 455.7886 305.7012 454.6221 c
305.7012 453.4556 304.5361 448.9561 298.0356 448.2891 c
291.5352 447.6221 288.8682 450.7886 288.5352 452.6221 c
f261.5029 450.8394 m
261.5078 450.8096 261.9937 447.875 261.9937 446.1221 c
261.9937 444.6782 262.376 442.3252 262.5669 441.2407 C
260.6157 440.5845 258.6797 438.6465 257.7998 437.7305 C
257.5342 437.457 L
254.9561 434.8789 L
255.6099 434.3887 L
255.6929 434.3267 257.6587 432.855 259.3374 431.8477 C
260.6621 431.0317 L
261.7002 430.3823 262.4497 429.9131 263.0308 429.7681 c
263.2505 429.7129 263.4463 429.5996 263.5962 429.4971 C
263.4653 428.7661 262.5044 423.4141 Y
263.8999 423.1641 L
265.1313 430.0283 L
264.8701 430.29 L
264.8047 430.3555 264.2075 430.9351 263.3735 431.1431 c
263.0112 431.2339 262.271 431.6968 261.4141 432.2329 C
260.0669 433.063 L
259.0039 433.7007 257.8359 434.5249 257.1221 435.0405 C
257.708 435.6265 258.5361 436.4541 Y
258.8218 436.7485 L
259.6309 437.5908 261.7798 439.8276 263.4761 440.0884 C
264.2021 440.2002 L
264.0649 440.9214 L
264.0581 440.9561 263.4106 444.377 263.4106 446.1221 c
263.4106 447.2935 263.2192 448.8896 263.0708 449.9502 C
264.0376 449.6494 265.4541 449.1914 266.439 448.7974 c
268.0303 448.1611 272.4243 445.2119 275.1514 441.8433 C
275.4287 441.5005 L
275.8589 441.5981 L
275.8955 441.6064 279.5278 442.4238 283.5918 442.749 c
287.2783 443.0444 290.0459 443.2915 291.7373 443.5332 C
291.3369 442.5322 290.8628 441.3462 Y
290.5737 440.4771 287.1724 435.1348 284.1802 433.4023 C
283.4624 432.9868 L
283.9849 432.3423 L
284.0059 432.3164 286.0884 429.7329 287.0337 427.0532 C
288.3706 427.5249 L
287.6152 429.665 286.2534 431.6699 285.5435 432.6348 C
288.6924 434.8682 291.8613 439.8579 292.2075 440.8979 C
294.0352 445.4634 L
292.6968 445.1431 L
291.3765 444.813 287.2461 444.4634 283.4785 444.1621 c
280.0376 443.8867 277.0088 443.2905 275.959 443.0688 C
273.0322 446.5278 268.6689 449.4321 266.9653 450.1138 c
265.2871 450.7847 262.519 451.6011 262.4023 451.6353 C
261.3174 451.9546 L
261.5029 450.8394 L
f275.2881 427.0283 m
274.6567 426.127 272.7954 423.6201 271.7769 422.856 C
272.6274 421.7222 L
273.7178 422.54 275.3413 424.6875 276.0688 425.686 C
278.1973 424.5259 282.6221 423.1738 282.8296 423.1108 C
283.2407 424.4673 L
281.7407 424.9219 277.5654 426.2988 276.2749 427.2026 C
275.6948 427.6089 L
275.2881 427.0283 L
f277.1953 443.1768 m
278.542 442.7344 L
289.877 477.7388 L
288.5273 478.1724 L
277.1953 443.1768 L
f277.7725 468.4058 m
277.8022 468.3594 280.7788 463.7212 282.7402 459.9614 C
283.9971 460.6167 L
282.0054 464.4346 278.9951 469.1255 278.9648 469.1724 C
277.7725 468.4058 L
f272.3174 457.8438 m
272.3521 457.8008 275.8467 453.4678 279.2944 448.7065 C
280.4424 449.5376 L
276.9717 454.3306 273.4551 458.6909 273.4199 458.7344 C
272.3174 457.8438 L
f280.1602 450.7993 m
280.5771 449.4448 L
290.0581 452.2729 L
289.6792 453.6382 L
280.1602 450.7993 L
f284.0894 463.4404 m
284.6479 462.1377 L
284.7056 462.1626 290.4478 464.6187 292.5278 465.0986 C
292.2095 466.4795 L
290.0063 465.9712 284.3301 463.5435 284.0894 463.4404 C
f231.0269 491.4072 m
231.0947 491.1938 237.7627 470.9175 255.1865 462.123 C
250.3516 461.9312 239.6733 462.4092 231.6655 469.3252 C
230.7388 468.2529 L
241.8569 458.6509 257.3203 460.8237 257.9731 460.9214 C
260.4897 461.2959 L
258.1416 462.2759 L
239.5103 470.0527 232.4468 491.6201 232.3774 491.8374 C
231.0269 491.4072 L
f230.8472 473.8096 m
231.2417 473.3799 240.6938 463.2642 255.7749 461.2529 C
255.9624 462.6582 L
241.4067 464.5986 231.9834 474.6675 231.8901 474.769 C
230.8472 473.8096 L
f230.7534 463.9375 m
230.832 463.8003 238.5591 450.6069 255.1782 443.3892 C
251.1465 442.229 240.7852 440.02 231.5156 444.5913 C
230.8887 443.3198 L
243.1929 437.2524 256.8804 442.4053 257.457 442.6279 C
259.1567 443.2832 L
257.4609 443.9487 L
240.0854 450.769 232.063 464.5029 231.9839 464.6411 C
230.7534 463.9375 L
f230.7632 451.7324 m
231.1235 451.4487 239.771 444.7544 256.1089 442.5864 C
256.2954 443.9917 L
240.3726 446.104 231.7261 452.7788 231.6406 452.8457 C
230.7632 451.7324 L
f302.582 470.2705 m
303.1543 468.9736 L
303.2959 469.0361 317.4766 475.4263 326.8184 491.9399 C
325.584 492.6382 L
316.4844 476.5522 302.7197 470.3315 302.582 470.2705 C
f304.1104 466.9917 m
304.292 465.5864 L
304.4736 465.6099 322.625 468.0459 339.876 477.5005 C
339.1943 478.7437 L
322.1865 469.4214 304.2891 467.0151 304.1104 466.9917 C
f303.6553 468.4648 m
304.0811 467.1133 L
304.2627 467.1704 322.374 472.96 333.2061 483.9585 C
332.1963 484.9526 L
321.6152 474.2095 303.834 468.521 303.6553 468.4648 C
f303.8281 448.7998 m
304.0459 447.4136 L
304.3701 447.4185 336.7314 448.1362 361.3008 467.0605 C
360.4355 468.1836 L
341.7373 453.7813 318.4912 450.0962 308.7256 449.1577 C
316.3057 452.3745 331.8672 460.4453 342.2891 475.8926 C
341.1133 476.6855 L
327.2588 456.1475 304.0605 448.8711 303.8281 448.7998 C
f307.0322 449.3101 m
307.3701 447.9341 L
307.6504 448.0024 335.5693 454.9834 351.8477 469.9336 C
350.8887 470.9775 L
334.8809 456.2764 307.3086 449.3784 307.0322 449.3101 C
f230.9048 547.9199 m
233.4048 545.7534 L
234.3325 546.8247 L
231.8325 548.9912 L
230.9048 547.9199 L
f231.2314 552.0923 m
235.7314 548.0923 L
236.6729 549.1519 L
232.1729 553.1519 L
231.2314 552.0923 L
f231.0112 558.312 m
237.8447 550.812 L
238.8926 551.7661 L
232.0591 559.2661 L
231.0112 558.312 L
f231.1665 564.4917 m
240.833 553.3252 L
241.9043 554.2529 L
232.2378 565.4194 L
231.1665 564.4917 L
f233.4893 568.5039 m
244.6563 555.0039 L
245.748 555.9072 L
234.5811 569.4072 L
233.4893 568.5039 L
f237.3003 571.0327 m
247.9668 556.6987 L
249.1035 557.5449 L
238.437 571.8784 L
237.3003 571.0327 L
f241.96 571.375 m
251.7935 557.708 L
252.9438 558.5361 L
243.1104 572.2031 L
241.96 571.375 L
f247.2666 571.582 m
255.4331 558.4155 L
256.6372 559.1626 L
248.4707 572.3291 L
247.2666 571.582 L
f251.9263 571.4268 m
259.2593 559.0933 L
260.4775 559.8179 L
253.144 572.1514 L
251.9263 571.4268 L
f256.2598 571.5933 m
264.0933 558.4268 L
265.311 559.1514 L
257.4775 572.3179 L
256.2598 571.5933 L
f260.7319 571.645 m
267.3984 557.9785 L
268.6719 558.5996 L
262.0054 572.2661 L
260.7319 571.645 L
f265.5605 571.6548 m
270.5605 560.9883 L
271.8438 561.5898 L
266.8438 572.2563 L
265.5605 571.6548 L
f269.5396 571.7041 m
273.2061 562.0376 L
274.5313 562.5405 L
270.8647 572.207 L
269.5396 571.7041 L
f272.7017 571.7153 m
275.7017 563.3818 L
277.0356 563.8618 L
274.0356 572.1958 L
272.7017 571.7153 L
f277.0215 571.7588 m
279.188 564.2588 L
280.5493 564.6523 L
278.3828 572.1523 L
277.0215 571.7588 L
f280.3374 571.998 m
281.6709 564.498 L
283.0664 564.7461 L
281.7329 572.2461 L
280.3374 571.998 L
f283.8306 571.8823 m
284.6636 563.8823 L
286.0737 564.0288 L
285.2397 572.0288 L
283.8306 571.8823 L
f287.1606 571.9204 m
287.4946 565.2534 L
288.9097 565.3247 L
288.5767 571.9907 L
287.1606 571.9204 L
f290.1631 571.7236 m
290.8296 564.5566 L
292.2407 564.6875 L
291.5742 571.8545 L
290.1631 571.7236 L
f293.3306 571.8823 m
294.1636 563.8823 L
295.5737 564.0288 L
294.7397 572.0288 L
293.3306 571.8823 L
f296.8301 571.8892 m
297.6636 563.0557 L
299.0742 563.1885 L
298.2407 572.022 L
296.8301 571.8892 L
f300.4922 572.1123 m
300.6592 560.1123 L
302.0771 560.1318 L
301.9102 572.1318 L
300.4922 572.1123 L
f303.9922 571.9556 m
303.9922 563.9556 L
305.4102 563.9556 L
305.4102 571.9556 L
303.9922 571.9556 L
f306.1631 563.8608 m
307.5732 563.7173 L
308.4063 571.8838 L
306.9961 572.0273 L
306.1631 563.8608 L
f308.834 565.5605 m
310.2363 565.3506 L
311.2363 572.0171 L
309.834 572.2271 L
308.834 565.5605 L
f311.3428 565.939 m
312.7275 565.6392 L
314.0605 571.8057 L
312.6758 572.1055 L
311.3428 565.939 L
f314.3369 566.2451 m
315.7334 565.999 L
316.7334 571.666 L
315.3369 571.9121 L
314.3369 566.2451 L
f317.1914 566.667 m
318.5449 566.2441 L
320.2119 571.5776 L
318.8584 572.0005 L
317.1914 566.667 L
f319.8691 566.6978 m
321.2012 566.2134 L
323.2012 571.7134 L
321.8691 572.1978 L
319.8691 566.6978 L
f323.3633 565.1797 m
324.707 564.7314 L
327.04 571.7314 L
325.6963 572.1797 L
323.3633 565.1797 L
f327.0156 563.8003 m
328.3867 563.4438 L
330.5537 571.7773 L
329.1826 572.1338 L
327.0156 563.8003 L
f329.5225 562.8247 m
330.8799 562.4194 L
333.7139 571.9194 L
332.3564 572.3247 L
329.5225 562.8247 L
f332.1924 560.002 m
333.5439 559.5762 L
337.377 571.7427 L
336.0254 572.1685 L
332.1924 560.002 L
f335.041 558.2119 m
336.3613 557.6992 L
341.8613 571.8657 L
340.541 572.3784 L
335.041 558.2119 L
f338.2119 554.3882 m
339.5244 553.8555 L
346.6914 571.5225 L
345.3789 572.0552 L
338.2119 554.3882 L
f340.5547 551.0796 m
341.8477 550.4985 L
351.5146 571.9985 L
350.2217 572.5796 L
340.5547 551.0796 L
f344.0479 547.8975 m
345.3545 547.3467 L
355.6885 571.8467 L
354.3818 572.3975 L
344.0479 547.8975 L
f347.8955 548.5933 m
349.1748 547.9849 L
360.5078 571.8179 L
359.2285 572.4263 L
347.8955 548.5933 L
f351.2285 546.4272 m
352.5078 545.8169 L
364.6748 571.3169 L
363.3955 571.9272 L
351.2285 546.4272 L
f354.5811 546.1323 m
355.8213 545.4458 L
368.6553 568.6123 L
367.415 569.2988 L
354.5811 546.1323 L
f357.1279 544.7056 m
358.2744 543.8726 L
371.2744 561.7847 L
370.1279 562.6167 L
357.1279 544.7056 L
f360.5254 543.2817 m
361.5449 542.2964 L
371.2109 552.2964 L
370.1914 553.2817 L
360.5254 543.2817 L
f362.6006 541.3486 m
363.4697 540.2295 L
370.9697 546.0625 L
370.1006 547.1816 L
362.6006 541.3486 L
f240.7021 413.2891 m
241.8687 411.2891 l
241.7021 410.4561 l
240.8687 409.9561 l
240.2021 412.2891 l
240.7021 413.2891 l
f244.3687 420.7891 m
245.7021 414.7891 l
247.0352 415.9551 l
245.0352 422.7891 l
244.3687 420.7891 l
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
