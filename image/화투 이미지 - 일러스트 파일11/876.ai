%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (876.ai)
%%CreationDate: 3/25/2002 6:38 PM
%%BoundingBox: 224 311 378 550
%%HiResBoundingBox: 224.8809 311.2148 377.9512 549.3252
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 12960 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC8C4BF826F827F826F8
%27F826F827F826F827F826F827F826F827F826F827F826F827F826F827F8
%F8F827F820F827F820F820F820F827F820F827F820F820F820F820F82020
%6EFD06FC99FFFD05FC6827F8277CA17D7D7DA17D7D7DA17D7D7DA17D7D7D
%A17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D2727686F68936827204BF8
%6F6893686F6893686F6827F827684BF827684BF84BFD05FCC2FFFD04FC68
%F852FF27F87DFD1CFF76F8FD05FFF827FD04FC68F88C6FF84AFD07FC26F8
%FCFC26F86FFCFCFC92F827FD04FCBBFFFD04FC274BFFFFFF27F8F87DA8FD
%18FF7CF827FD06FFF8278CFCFCFC204BFC6FF8278CFD04FC4BF8B4FC27F8
%92FD05FC4BF892FCFCFCC2FFFCFCFC8CF8FD05FFFD05F8527DFD14FF7DF8
%F827FD06FFCFF8F868FCFC8CF84AFCFCF8F868FCFC8CF86EFC4AF8FD07FC
%F82720FCFCFCBBFFFCFCFC6827FD05FF52FD07F82727A1FD0FFFA8F8F8F8
%52FD06FFF82768FD04FC93F86FFCFC442768B4F84BFC93F893FD06FC2027
%5227FCFCFCC2FFFCFCFC6EF8FD05FF7DFD0CF852A8FD0AFFA8FD04F827FD
%05FFF8268CFCFCFC4427F8F8F84B8CFC44F8F826FCFC2026FD06FC20F8A7
%7DF8FCFCFCBCFFFCFCFC6827FD06FFFD0EF827FD09FFFD05F87DFD04FFF8
%27FCFCFC4BF827446F684BF82068FC2027FCFC8CF88CFD04FCB420277DFF
%7D27FCFCFCC2FFFCFCFC6EF8FD06FF52FD0FF8A8FD06FF27FD05F87DFFFF
%FF4BF8FCFC8C20F86EFD06FC68FD06FC4A20FD04FC6FF827A8FFFF7DF8FC
%FCFC99FFFCFCFC6827FD06FFA8FD10F87DFD04FF52FD06F87DFFFFA8F868
%FC8C27F8B5FD0EFCF86FFCFC2027F852FD04FF7D27FCFCFCC2FFFCFCFC6F
%F8FD07FF27FD10F852FFFF7DFD07F8A8FFFF52F8FC68F820FCFCFC444AF8
%27F820F84BFD05FC2020FCFCFC4427F84BA8FFFF7DF8FCFCFCBBFFFCFCFC
%6827FD08FFFD11F87CFF27FD07F8FFFFFFF86F44F844934427F827204B68
%6F682720FD05FC68F820FD04FC9320F852FF7D27FCFCFCC2FFFCFCFC68F8
%FD08FF52FD11F827FD08F8FFFF272044F82020F82744FD07FCF84AFCFC68
%FCFCFC8CF8F8FD05FC68F8207DF8FCFCFCBBFFFCFCFC6827FD08FFA827FD
%19F8FFA8F820F8F8F82093FD08FC8CF88CFCFCF844FCFCFC8C27F893FD04
%FC8C272727FCFCFCC2FFFCFCFC6EF8FD09FF52FD19F8FF27F8F8F86FFD0B
%FC4B20FCFC92F8F820FD04FC4BF84AFD04FC68F8F8FCFCFCBCFFFCFCFC68
%27FD0AFF27FD17F827A8FD05F827204B686F686F68FCFCB4F893FCFC4427
%6820F893FCFCFC93F8278CFCFCFCF827FCFCFCC2FFFCFCFC6EF8FD0BFFFD
%26F8FCFC2020FCFCFC2020FC8C4AF8278CFCFCFCF8F868FCFC4AF8FCFCFC
%99FFFCFCFC6827FD0BFF7DFD23F84BFCFC8CF868FCFCB4F893FCFCFC9320
%F82093FCFC44F844FC6827FCFCFCC2FFFCFCFC6FF8FD0CFF27FD21F8FD04
%FC2720FCFCFC4420FD06FC8C26F82768FC68F8446EF8FCFCFCBBFFFCFCFC
%6827FD0AFF5227FD1FF827F8B4FCFCFC6FF8B4FCFC8C2068FC20278CFD04
%FCB42020209268F84427FCFCFCC2FFFCFCFC68F8FD08FF76FD21F827F8FD
%05FCF84AFCFCFC26F8FCFC20F82068FD05FC8C27F86E2027F8FCFCFCBBFF
%FCFCFC6827FD06FF7D27FD21F87DF84BFD04FC4427FCFCFC6FF8B5FCB4F8
%FF4BF820B5FD05FC6FF84BF827FCFCFCC2FFFCFCFC6EF8FFFFFFA876FD23
%F8FFA8F88CFCFCFC8CF868FCFC6FF86EFCFC2027FFFF7D27F86FFD05FC8C
%F8F8F8FCFCFCBCFFFCFCFC68272727FD24F852FFFF7D20FD04FC4BF8FCFC
%6FF86FFCFC8C277DFD04FF7DF8274492FCFCFC92F827FCFCFCC2FFFCFCFC
%6EFD26F87DFFFFFF274BFCFCFC8CF88CFC4BF868FCFCFC2027FD07FF7C27
%F82044FCFC4AF8FCFCFC99FFFCFCFC6827FFA827FD21F8A8FD04FF2768FC
%FCFC20278C4BF893FCFCFC4BF8FD0BFF5227F86F6827FCFCFCC2FFFCFCFC
%6FF8FFFFFFA852FD1FF820A8FFFFFFF86FFCFC8CF86820F8FD04FC6FF8A7
%FD0DFF7DF8F8F8FCFCFCBBFFFCFCFC6827FD06FFA87D4B27F827FD19F827
%FFFFFFF88CFCFC27F82020FD04FC6FF8A8FD10FF2727FCFCFCC2FFFCFCFC
%68F8FD0BFF27FD1AF852FFFFF8FCFCFCF8F844FD04FC4BF8A7FD11FF7DF8
%FCFCFCBBFFFCFCFC6827FD0AFFA827FD1BF8FFFFF8FCFC442768FCFCFC8C
%4BF8A8FD12FF7D27FCFCFCC2FFFCFCFC6EF8FD0AFF52FD1CF827FFF8FCFC
%278CFCFCFC68F8F8FD14FF7DF8FCFCFCBCFFFCFCFC6827FD0AFFFD1EF8A8
%F8FD05FCB4202752FD15FF7D27FCFCFCC2FFFCFCFC6EF8FD09FF7DFD0EF8
%27FD0FF852F8FCFCFC8C4BF827A1FD16FF7DF8FCFCFC99FFFCFCFC6827FD
%09FF52FD0DF827FF7DFD0FF82768FC442727A8FD18FF7D27FCFCFCC2FFFC
%FCFC6FF8FD09FFFD0DF87DFFFFFF51FD0FF86F20F87DFD1AFF7DF8FCFCFC
%BBFFFCFCFC6827FD08FFA8FD0AF8274BFD06FF27FD0DF827F827A8FD1BFF
%7D27FCFCFCC2FFFCFCFC68F8FD08FF7DFD08F8277DFD09FF27FD0DF852FD
%1DFF7DF8FCFCFCBBFFFCFCFC6827FD08FF51FD06F87DFD0DFF27FD0CF8FD
%04FF52A8FD18FF7D27FCFCFCC2FFFCFCFC6EF8FD08FF27FD04F827FD10FF
%52FD0BF87DFFFFFF7DF87DFD17FF7DF8FCFCFCBCFFFCFCFC6827FD08FFFD
%04F852FD12FFA8FD0AF852FD04FFF8F87DFD16FF7D27FCFCFCC2FFFCFCFC
%6EF8FD08FFF8F8F852FD15FF7C27FD07F852FD04FF27F8F827FD15FF7DF8
%FCFCFC99FFFCFCFC6827FD08FFF8F851FD18FF7DFD06F827FD04FFA8F8F8
%F8277DFD13FF7D27FCFCFCC2FFFCFCFC6FF8FD07FFA8F8F8FD1BFF27FD04
%F827FD05FFFD06F876FD11FF7DF8FCFCFCBBFFFCFCFC6827FD07FF7DF87D
%FD1CFF7D27F8F8F8FD05FF27FD06F8274BFD0FFF7D27FCFCFCC2FFFCFCFC
%68F8FD07FFA17DFD1EFFA827F8F8A1FD04FF7DFD09F852FD0DFF52F8FCFC
%FCBBFFFCFCFC6827FD28FFA827F8A1FD05FFFD0AF8277DFD0AFF7DF827FC
%FCFCC2FFFCFCFC6EF8FD29FFA82051FD05FF27FD0BF852FD08FF27F8F8F8
%FCFCFCBCFFFCFCFC6827FD2AFF7D52FD05FF52FD0CF852FD06FF27F8F8F8
%27FCFCFCC2FFFCFCFC6EF8FD2BFF7DFD05FF7CFD0DF87DFD04FF52FD05F8
%FCFCFC99FFFCFCFC6827FD32FFFD0DF827FFFFFF7DFD05F827FCFCFCC2FF
%FCFCFC6FF8FD32FF27FD0DF852FFFFFD07F8FCFCFCBBFFFCFCFC6827FD32
%FF52FD0EF8FF27FD06F827FCFCFCC2FFFCFCFC68F8FD33FFFD0EF851FD08
%F8FCFCFCBBFFFCFCFC6827FD33FF52FD15F827FCFCFCC2FFFCFCFC6EF8FD
%33FFA8FD16F8FCFCFCBCFFFCFCFC6827FFFF4BFD31FF52FD14F827FCFCFC
%C2FFFCFCFC6EF8FF7DF827FD31FFFD15F8FCFCFC99FFFCFCFC6827FFA1F8
%27FD31FFA8FD13F827FCFCFCC2FFFCFCFC6FF8FF274BF8A8FD30FF7D51FD
%13F8FCFCFCBBFFFCFCFC6827FF274A2752FD2BFF7D522727FD15F827FCFC
%FCC2FFFCFCFC68F8FFF87B50F8FD27FFA85127FD1BF8FCFCFCBBFFFCFCFC
%6827FFF89EC6F87DFD20FFA8A17D522727FD1DF827FCFCFCC2FFFCFCFC6E
%F87DF8C6C651F8FD1FFF27FD24F8FCFCFCBCFFFCFCFC6827274BC6C69E27
%52FD20FFA85227FD1FF827FCFCFCC2FFFCFCFC6EF8F850C6C6C650F8A8FD
%21FFA152FD1FF8FCFCFC99FFFCFCFC6827F8FD05C62627FD1FFF7CF8F820
%4B4427FD1BF827FCFCFCC2FFFCFCFC6FF827C69F26C6C69FF8A8FD1CFF52
%20F84A8CFCFCFC8C27FD1BF8FCFCFCBBFFFCFCFC682750C67427C6C6C651
%27FD1AFFA8202044FD08FC6FFD19F827FCFCFCC2FFFCFCFC68F89FC675F8
%75C6C69EF8A8FD18FF7CF84B8CFD09FC8C6E20FD18F8FCFCFCBBFFFCFCFC
%6827C6C64AF84BC6C6C62651FD17FF4BF86FFD07FCB56827F8F8F827204B
%4427FD13F827FCFCFCC2FFFCFCFC6EF8C6C64BF851C6C6C69FF8FD15FFA8
%27F88CFD06FC4426F827206EFD07FC4AFD13F8FCFCFCBCFFFCFCFC6827C6
%C6262626FD04C6277CFD13FF7DF820FD05FC684BF8274492FD09FC93FD13
%F827FCFCFCC2FFFCFCFC6EF8C6C6272626FD04C6264BFD12FF52F844FD04
%FC26FD0BF820F826204AFD15F8FCFCFC99FFFCFCFC6827C6C62075F8FD04
%C69FF8FD0CFFA87DA17D7DF82768FD05FC444B686F8CFD06FCB46893684B
%20FD0CF84BFD07F827FCFCFCC2FFFCFCFC6FF8C6C6F87AF874FD04C6F8FD
%07FFA85127F8F8F826F827FD04F8208CFD13FC20FD0BF826FC27FD07F8FC
%FCFCBBFFFCFCFC6827C6C6F8C62651FD04C6F87DFD04FF5227F827507BC6
%C69E9FC6277CFFA827F82768FD10FC93FD0CF88CFC8C2727FD04F827FCFC
%FCC2FFFCFCFC68F8C6C6F8C675F8FD04C62652FFFF7DF8F850C6C6C65027
%F8F8F89EF8FD04FFA827F8F84B68FD0DFC20FD0AF820F86EFCFCF87652FD
%04F8FCFCFCBBFFFCFCFC6827C6C6F8C6A4F89EC6C6C64A52A827F875C6C6
%5027F827F82751C62651FD07FF7D27F8F827446F6893684B20FCFCFC8CFD
%0AF86FFC2768FCFC4B27FF7D27F827FCFCFCC2FFFCFCFC6EF8C6C6F8C6C6
%2627C6C6C64BF8F820C69E51F8204A9F50F874C6C6F87DFD0AFFA7515120
%27F827F820FCFCFC26FD09F892FCFCF86FFCFC68F8FFFF7D27F8FCFCFCBC
%FFFCFCFC6827C6C6F8C6C6A5F89FC6C64AF850C74AF8269FC6C69E2774C6
%C67BF8FD11FF27278CFCFCB4FD07F820F8FD04FC2768FCFCFCF8A8FFFF7C
%27FCFCFCC2FFFCFCFC6EF8C6C6F8C6C6C62726C6C675749EF82774FD04C6
%26F8C6C6C6F876FD10FF52F88CFCFCFC20FD06F84A8CF868FCFCFCF868FC
%FCFC2052FFFF7DF8FCFCFC99FFFCFCFC6827C6C6F8C6C6C69EF87AC6C67B
%F851FD05C651F8C7C69FF84BFD10FFA8F868FCFCFC68FD05F82093FCFC20
%6FFCFCFC2768FCFCFC2052FFFF7D27FCFCFCC2FFFCFCFC6FF8C6C6F8FD04
%C62626C675F851747BC6C6C67BF89EC651F852FD11FF2720FCFCFC8CFD04
%F820F8FD04FC4B20FCFCFCF86EFCFCFC4A27FFFF7DF8FCFCFCBBFFFCFCFC
%6827C6C6F8A5C6C6C6C7F84BF875C627F8C6C69FF8757427F8A8FD11FF52
%F8B4FCFCFC27F8204493F86FFD04FC2027FCFCFC2744FCFCFC6827FFFF7D
%27FCFCFCC2FFFCFCFC68F8C6C62674FD04C67BF84BC651F8F8C69FF85120
%F827FD13FFF868FCFCFC4AF86EFCFCF827FD05FC68F8FCFCFC204BFCFCFC
%6EF8FFFF7DF8FCFCFCBBFFFCFCFC44F89EC62651FD05C67BC69FF86FF851
%F8757A27F82752FD11FF4B27FCFCFCB4F893FCFC44278CFCFC938CFC8CF8
%FCFCFC4B44FCFCFC8CF8FFFF7D27FCFCFCC2FFFCFCFC6EF8F89E51F8FD07
%C6F84BFCF820F8F87BC69F4AF8F876FD0EFFA8F868FCFCFC2020FCFC44F8
%68FCFCFC206FFCFCF86FFCFC204BFD04FCF8FFFF7DF8FCFCFCBCFFFCFCFC
%682726279EF8FD06C62627FCFC20759E51F8279EC6C675F8277DFD0CFF52
%F8FCFCFC8C2068FC44F844FCFCFC8CF844FCFC2720FCFC4B20FD04FCF8FF
%FF7D27FCFCFCC2FFFCFCFC6EF8C6F827F875FD04C64AF88C4A684B26C6C6
%C626F84AC6C6C626F852FD0BFFF84AFCFCFC4AF8FC20F844FD04FC20F820
%FCFC4420FCFC204AFD04FCF8FFFF7DF8FCFCFC99FFFCFCFC68F89EC7F827
%26C6C6C67AF86893F84B6827FD04C6742726C7C6C674F827FD09FFA8F8FD
%04FCF84B202768FD04FC4BF87DF8FCFCB4F8B5FC4B20FD04FCF8FFFF7D27
%FCFCFCC2FFFCFCFC6FF851C69FF8F89EC67AF844FC20F844FCF82774C6C6
%C69E27F89EC6C67A2026FD08FF5220FCFCFC44F8F8278CFD04FC26F8FFFF
%F844FCFC2044FC2026FD04FCF8FFFF7DF8FCFCFCBBFFFCFCFC6827F8C6C6
%75F851C62720FCFC27F86FFC27F8F8F827507B744BF851C6C69E27F8FD07
%FFF86FFCFCFC27F827FD04FC8C27F8A8FFFF4B27FCFC4427FC6F20FD04FC
%F8FFFF7D27FCFCFCC2FFFCFCFC68F8F874C6C675F851F8FCFC6EF82068FC
%4420C69E4A27F826FD04F874C69E26F8FD06FFF88CFCFC4AF86FFD04FC68
%F8F8FD04FFA8F88CFCFCF88C8CF8FCFCFC8CF8FFFF7DF8FCFCFCBBFFFCFC
%FC68272727FD04C6F893FCFC204BF8B4FCB5F8FD08C67B26279EC6C64BF8
%A8FFFFFF7DF8FCFCFC6893FD04FC44F827FD06FF2720FCFC2720FCF893FC
%FC6827FFFF7D27FCFCFCC2FFFCFCFC6EF827F89EC6C64AF8FCFCFCF868F8
%FCFCFC2650FD0EC651F852FFFF2726FD07FC8CF8F87DFD07FFA8F868FC8C
%F88C2744FCFC6FF8FFFF7DF8FCFCFCBCFFFCFCFC682720F826C6C62744FC
%FC93F892F8FCFCFC20F826759EFD0BC67A27F8277D2768FD06FC4BF84BA8
%FD09FF4B27FCFC204B4427FCFC6827FFFF7D27FCFCFCC2FFFCFCFC6EF8FC
%20F84AC6F88CFCFC20276820FCFCFC4AF852F8F8F827264B264B264BF827
%F8F8F8527DCFF88CFD04FC44F8F87DFD0CFFF826FC8CF86EF8FCFC4A20FF
%FF7DF8FCFCFC99FFFCFCFC6827FCFC68F82627FCFCFC27446F20FCFCFC68
%27FFFFFFA15252274B265227527DFD05FF7D27FCFCFC93202752FD0EFFA8
%F86FFC27202768FC2052FFFF7D27FCFCFCC2FFFCFCFC6FF8FCFCFC44F8F8
%FCFCFCF892204AFD04FCF8FD12FF52F8FC8C20F852A8FD10FF7CF8928CF8
%F84BFC4A27FFFF7DF8FCFCFCBBFFFCFCFC6827FD04FC444BFCFC8CF8FC4B
%44FD04FC207DFD11FF274B682727FD14FF4BF8FC44F8F8FC4451FFFF7D27
%FCFCFCC2FFFCFCFC68F8FD05FC44FCFC6EF8FCF86EFD04FCF87DFD11FF27
%F8F852FD16FFF820FCF8F88C4B27FFFF7DF8FCFCFCBBFFFCFCFC682744FD
%07FC204BFC2768FD04FC27F827FD05F82727527D7DA8FD04FFA8F8F87DFD
%17FFA827446FF84B4452FFFF7D27FCFCFCC2FFFCFCFC6EF8F844FD06FCF8
%68FCF892FD04FC204A6892FCFC8C6F444A2027FD06F852F87DFD19FF76F8
%6826F84B27FFFF7DF8FCFCFCBCFFFCFCFC6827682044FD04FC6FF8FCFCF8
%FD15FC2727A87DFD1BFF4B208C922052FFFF7D27FCFCFCC2FFFCFCFC6EF8
%FC68F844FCFCFCF84AFC92F8FD0DFC8C6E68688CFCFC4AF8FD1FFF2026FC
%4AF8FFFF7DF8FCFCFC99FFFCFCFC44F88CFC68F844FC8CF88CFC6827FD07
%FCB4684B2027FD05F86FFCB4F8A1FD20FFF84B6827FFFF7D27FCFCFCC2FF
%FCFCFC6FF820FCFC68F8F82720FCFC6FF820204B204AF820F820204B684A
%F82044FCFCFC2027FD21FFA8F826F8FFFF7DF8FCFCFCBBFFFCFCFC6827F8
%6FFCFC8C27F893FCFCFC93444B204B444B68FCFCFC8C27F86FFD04FC4427
%A8FD22FF7DF8F8FFFF7D27FCFCFCC2FFFCFCFC68F86EF88CFD11FC6EF8F8
%20FD05FC68F852FD24FF52F8FFFF7DF8FCFCFCBBFFFCFCFC6827FC4BF8B5
%FD0DFC932027F84B8CFD05FC68F852FD26FF27FFFF7D27FCFCFCC2FFFCFC
%FC6EF8FCFC26F8FD07FC8C6F684AF820F82644FD07FC44F851FD2AFF7DF8
%FCFCFCBCFFFCFCFC6827FCFC68F820FD06FC20F827204B68FD08FC932020
%7CFD2BFF7D27FCFCFCC2FFFCFCFC6EF8FC20F844FCFCFC448CFCFC8C20F8
%6FFD07FC8C4420F852A8FD2CFF7DF8FCFCFC99FFFCFCFC6827F8278CFC8C
%4BF827F84B8CFCFC93F8278CFCFCFC8C27F82752FD2FFF7D27FCFCFCC2FF
%FCFCFC6FF84AFC6F20F82092FC8CF82044FCFCFC20F844FCFCFC68F8A8FD
%30FF7DF8FCFCFCBBFFFCFCFC682720F8F84B8CFD05FC44202092FCFC68F8
%20FCFCFC2027FD30FF7D27FCFCFCC2FFFCFCFC68F84B68FD09FC8C4BF820
%8CFC68F820FCFCFCF87DFD2FFF52F8FCFCFCBBFFFCFCFC8CF88CFD0CFC93
%20F820938C27F8B4FC4B27FD2FFF274BFCFCFCC2FFFD04FCF84BFD0EFC8C
%27F8202020F8FC8CF8A8FD2DFFA7F88CFCFCFCBCFFFD04FC92F86FFD10FC
%4427F8F820FCF87DFD2CFFA82720FD04FCC2FFFD05FC6EF8274468686E68
%68686E6868686E6868686E684AF8F84420277D7D7D7C7D7D7D7C7D7D7D7C
%7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7D
%7D27F820FD05FC99FFFD06FCB54A27F8272027F8272027F8272027F82720
%27F827F827F8272027F8272027F8272027F8272027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F84B68FD06FCC2FFFD52FC
%BBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
377.9512 311.2148 m
224.8809 311.2148 L
224.8809 549.3252 L
377.9512 549.3252 L
377.9512 311.2148 L
fu0 0 0 0 k
232.7534 531.354 m
232.7534 328.0205 l
233.2539 318.1875 242.5869 318.1875 v
251.9199 318.1875 360.5869 318.1875 y
370.2539 318.8535 370.2539 329.0205 v
370.2539 339.1875 370.2539 533.354 y
370.0869 542.687 358.0869 542.687 v
346.0869 542.687 243.0869 542.687 y
232.7534 542.6875 232.7534 531.354 v
f0 0.2 1 0 k
265.9199 366.1875 m
270.0864 363.5205 280.9199 363.0205 v
291.7534 362.5205 299.5869 365.6875 y
295.7534 368.3535 292.7534 371.3535 v
289.7534 374.3535 280.9199 382.6875 270.4199 385.1875 c
270.7534 386.1875 271.7534 386.5205 v
272.7534 386.8535 280.9204 391.5205 282.5869 394.5205 c
284.2534 397.5205 286.7534 405.6875 y
280.7534 406.1875 271.7534 404.5205 v
262.7534 402.8535 254.7534 395.8535 y
254.4199 407.0195 250.7534 414.8535 v
247.0869 422.6875 244.2529 427.0205 242.4199 431.0205 c
240.5869 435.0205 239.2534 439.0205 y
238.5864 439.187 238.4199 437.5205 v
238.2534 435.854 237.0864 428.5205 235.9199 425.5205 c
234.7534 422.5205 233.0869 416.5205 232.7534 414.5205 c
232.4199 412.5205 232.7534 378.0205 y
238.0869 364.5195 238.7534 363.8535 v
239.4199 363.1875 242.7534 354.6875 y
251.4199 352.8535 l
263.4199 359.8535 l
265.9199 366.1875 l
f0 1 1 0 k
310.0869 542.5205 m
311.9209 537.854 316.9209 535.5205 v
312.5879 533.1875 310.4209 530.354 v
308.2539 527.5205 303.7539 517.6875 301.7539 515.854 c
302.4209 514.687 l
306.2539 515.6875 307.2539 515.354 v
308.2539 515.0205 316.2539 507.854 y
313.5869 505.02 312.2539 498.687 v
310.9209 492.354 311.5869 484.0205 y
311.7539 476.5205 l
314.5869 478.187 316.5869 479.687 v
318.5869 481.187 324.5869 483.6875 326.5869 485.354 c
328.5869 487.0205 342.0879 495.854 343.9209 507.0205 c
348.4209 503.1875 352.2539 501.354 v
356.0869 499.5205 367.4209 496.1875 370.2539 493.354 c
370.4209 513.187 l
369.7539 518.1875 365.7539 520.854 v
361.7539 523.5205 356.2539 525.854 y
367.4199 530.354 368.5869 537.854 v
366.5869 542.854 358.5869 542.854 v
352.7539 542.854 l
310.0869 542.5205 l
f317.4209 423.1875 m
313.0869 423.5195 306.0869 419.8535 v
299.0869 416.1875 290.9199 408.8535 y
287.4199 406.1875 l
289.9199 405.6875 291.9199 404.6875 v
293.9199 403.6875 297.4204 402.0215 301.9209 400.1875 c
306.4209 398.3535 315.4199 397.3545 320.0869 398.6875 c
319.4209 396.8535 318.7539 396.5205 v
318.0869 396.1875 310.9209 386.3535 308.7539 380.8535 c
306.5869 375.3535 303.2539 360.3535 y
302.0869 353.8535 l
306.9209 358.0205 309.2539 359.5205 v
311.5869 361.0205 320.2529 365.5205 323.0869 367.5205 c
325.9209 369.5205 336.4209 377.5205 337.9209 381.5205 c
339.2539 374.6875 341.7539 370.1875 v
344.2539 365.6875 352.0869 355.3535 353.5869 353.5205 c
355.0869 351.6875 362.0879 343.3545 362.4209 342.6875 c
362.7539 342.0205 363.9209 340.3535 363.7539 342.0205 c
363.5869 343.6875 362.5869 352.6875 362.5869 355.5205 c
362.5869 358.3535 363.0869 370.1875 363.2539 375.1875 c
363.4209 380.1875 362.5869 399.3535 358.2539 407.0205 c
353.9209 414.6875 336.2539 421.5205 y
317.4209 423.1875 l
f232.7534 368.1875 m
238.4199 366.3545 243.2534 359.6875 v
244.4199 367.5215 247.9199 372.6875 v
251.4199 377.8535 257.7529 384.1875 260.4199 389.0205 c
261.4199 381.6865 262.4199 378.8535 v
263.4199 376.0205 266.7534 363.8535 267.2534 354.0205 c
271.5869 355.0195 275.7534 354.8535 v
279.9199 354.6875 287.4199 353.3545 290.4199 353.1875 c
293.4199 353.0205 298.2534 352.8535 y
296.0864 350.0215 295.4194 348.6875 v
294.7534 347.3535 291.7534 341.6865 287.2534 337.8535 c
282.7534 334.0205 274.7534 332.6875 y
280.0869 326.3535 280.5869 318.0205 v
241.9199 318.1875 l
232.5869 319.1875 232.5869 328.5205 v
232.5869 337.8535 232.7534 368.1875 y
f*u
1 D
0.65 0.53 0.51 1 k
242.6748 543.229 m
236.8135 543.229 232.0449 538.4604 232.0449 532.5991 C
232.0449 327.9414 L
232.0449 322.0801 236.8135 317.3115 242.6748 317.3115 C
360.333 317.3115 L
366.1943 317.3115 370.9629 322.0801 370.9629 327.9414 C
370.9629 532.5991 L
370.9629 538.4604 366.1943 543.229 360.333 543.229 C
242.6748 543.229 L
f0 D
233.4619 327.9414 m
233.4619 532.5991 L
233.4619 537.6792 237.5947 541.812 242.6748 541.812 C
360.333 541.812 L
365.4131 541.812 369.5449 537.6792 369.5449 532.5991 C
369.5449 327.9414 L
369.5449 322.8613 365.4131 318.7295 360.333 318.7295 C
242.6748 318.7295 L
237.5947 318.7295 233.4619 322.8613 233.4619 327.9414 C
f*U
238.7534 541.5205 m
244.0034 536.5205 244.7534 533.2705 v
245.5034 530.0205 251.7534 515.5205 258.5034 509.0205 c
252.2534 506.5205 248.7534 504.2705 v
245.2534 502.0205 238.5034 499.2705 233.0034 500.0205 c
233.0034 498.5205 l
236.7534 497.5205 238.7534 496.5205 v
240.7534 495.5205 247.5034 492.0205 256.7534 492.5205 c
248.7534 479.0205 249.0034 461.0205 v
251.2534 462.2705 252.5034 465.0205 v
253.7534 467.7705 258.0034 472.7705 263.5034 474.7705 c
269.0034 476.7705 276.7534 478.7705 280.2534 484.5205 c
286.0034 474.5205 296.7534 469.0205 v
307.5039 463.5205 312.7539 458.5205 315.2539 453.7705 c
313.5039 464.5205 313.0039 468.7705 v
312.5039 473.0205 309.2539 488.7705 300.2539 496.5205 c
317.1709 508.937 317.9209 509.187 v
323.0869 513.187 l
319.2539 513.1875 315.7539 513.854 v
312.2539 514.5205 308.5869 515.187 307.2539 515.5205 c
305.9209 515.854 299.7539 514.021 298.4204 512.854 c
299.2539 518.52 299.2539 523.187 v
299.2539 527.854 300.7539 540.354 y
299.2539 539.354 297.7534 537.854 v
296.2534 536.354 285.7534 524.687 283.2534 519.187 c
277.5869 528.52 267.0869 531.687 v
256.5869 534.854 244.2539 535.687 240.0869 542.0205 c
238.7534 541.5205 l
f309.377 541.9404 m
309.4746 541.7549 311.6611 537.728 315.6191 535.2686 C
313.8574 534.1572 310.3154 531.647 308.3936 528.3799 C
305.6904 523.3394 L
303.9746 520.0107 302.0303 516.2383 300.8291 515.3374 C
301.3867 514.0742 L
301.4375 514.084 306.4961 515.0332 308.7998 514.3418 c
310.749 513.7573 316.3389 512.6895 321.1455 512.6221 C
318.7002 511.2246 315.5283 508.8003 313.6152 504.8281 c
311.0693 499.5391 310.7666 493.3477 310.7666 489.1572 c
310.7666 488.4321 310.7764 487.7666 310.7842 487.1768 C
310.7949 486.0205 L
311.082 474.5298 L
312.207 475.4761 L
312.2666 475.5254 318.1768 480.4321 322.0381 482.1211 c
325.8555 483.7915 341.3682 493.1372 344.418 505.9658 C
346.252 504.4199 350.8564 500.8994 357.501 498.3584 c
364.7236 495.5967 368.4375 493.8447 369.1865 492.8452 C
370.3203 493.6958 L
369.5137 494.7715 367.1113 496.2017 358.0068 499.6826 c
349.752 502.8389 344.5439 507.7349 344.4922 507.7837 C
343.5322 508.6968 L
343.3057 507.3916 L
341.0859 494.5674 325.2666 485.0811 321.4697 483.4199 c
318.4365 482.0923 314.374 479.0176 312.4268 477.4756 C
312.374 479.5728 312.2129 486.0205 Y
312.2012 487.1958 L
312.1934 487.7749 312.1846 488.4287 312.1846 489.1411 c
312.1846 493.2065 312.4736 499.1899 314.8926 504.2129 c
317.9639 510.5928 324.8945 512.8223 324.9648 512.8438 C
324.6484 514.2212 L
319.7246 513.4824 311.6074 514.9795 309.207 515.6992 c
307.5439 516.1982 304.8584 515.9902 303.04 515.7593 C
304.2236 517.4277 305.5557 519.9849 306.9502 522.6899 C
309.6143 527.6611 L
311.9834 531.6875 317.29 534.6191 317.3438 534.6484 C
318.5322 535.2983 L
317.3203 535.9043 L
313.0869 538.0215 310.6543 542.5557 310.6309 542.6011 C
309.377 541.9404 L
f355.5762 526.4565 m
353.3896 525.8877 L
355.5088 525.1055 L
355.5557 525.0879 360.2842 523.333 363.6191 521.1758 c
367.6465 518.5693 368.0996 517.4878 369.5781 512.8071 C
370.9297 513.2339 L
369.3887 518.1147 368.8027 519.5093 364.3887 522.3652 c
362.1865 523.791 359.4873 525.0132 357.7529 525.7373 C
360.626 526.9424 366.2031 530.0835 369.4004 537.231 C
368.1074 537.8101 L
364.0557 528.7539 355.6611 526.4785 355.5762 526.4565 C
f369.7539 396.7705 m
356.2539 408.0205 l
352.0039 402.0205 344.5039 397.2705 v
337.0039 392.5205 325.2539 387.5205 323.7539 387.0205 c
322.2539 386.5205 322.0039 387.0205 y
325.5039 390.5205 330.0039 401.5205 332.0039 405.7705 c
334.0039 410.0205 337.2539 414.2705 y
327.2539 414.0205 318.2539 421.7705 316.5039 423.2705 c
314.7539 424.7705 307.7539 426.5205 305.5039 427.0205 c
303.2539 427.5205 303.5039 428.2705 y
311.2539 428.2705 318.0039 430.5205 v
324.7539 432.7705 336.7539 434.5205 y
331.0039 440.7705 327.0039 451.2705 326.7539 454.2705 c
326.5039 457.2705 322.7539 468.7705 321.7539 471.0205 c
320.7539 473.2705 321.0039 474.2705 y
326.0039 469.5205 330.0039 466.7705 v
334.0039 464.0205 341.0039 462.7705 347.5039 457.5205 c
354.0039 452.2705 355.7539 444.0205 y
359.2539 450.7705 363.7539 455.2705 v
368.2539 459.7705 370.2539 461.2705 y
369.7539 396.7705 l
f302.6104 418.6104 m
298.395 415.7998 294.2871 412.4785 291.2876 410.0537 c
289.0713 408.2617 287.1567 406.7148 286.4741 406.4219 C
286.7114 405.0635 L
286.752 405.0605 290.8286 404.7959 293.8818 402.917 c
297.104 400.9346 309.9043 396.1982 318.9082 397.8086 C
316.2266 394.7959 310.8369 388.1338 307.8418 380.2725 c
303.8613 369.8232 301.3281 353.542 301.3037 353.3779 C
300.959 351.1377 L
302.5186 352.7832 L
302.5625 352.8301 306.9932 357.4824 310.8516 359.6533 C
312.6455 360.6211 L
318.7109 363.8496 332.3857 371.1318 337.6729 379.8896 C
338.3311 376.8359 340.0713 370.7803 344.4248 364.6123 c
347.4395 360.3408 351.917 354.6982 355.8672 349.7207 c
359.1602 345.5713 362.5645 341.2813 362.8193 340.5908 C
362.8584 340.3857 362.9736 339.8105 363.4814 339.6514 C
363.8828 339.5254 L
364.2461 339.8359 L
364.9121 340.4775 364.5225 342.7285 364.1875 343.957 c
363.4473 346.6719 362.9668 356.5576 363.4609 364.2246 C
363.6074 366.3047 L
364.2568 375.1758 365.6064 393.6338 358.3857 407.8418 C
357.1221 407.1992 L
361.6816 398.2285 362.7314 387.4395 362.7314 378.5752 c
362.7314 373.748 362.4199 369.4912 362.1943 366.4082 C
362.0469 364.3164 L
361.9072 362.1553 361.8457 359.8145 361.8457 357.501 c
361.8457 351.4707 362.2646 345.6201 362.8203 343.584 c
362.8877 343.335 362.9111 343.1494 362.957 342.9277 C
361.8711 344.415 360.0049 346.7871 356.9775 350.6016 c
353.2344 355.3193 348.5742 361.1904 345.583 365.4287 c
339.7656 373.6699 338.7178 382.0205 338.708 382.1035 C
338.4072 384.6309 L
337.3584 382.3125 L
333.2285 373.1836 317.791 364.9658 311.9795 361.8721 C
310.1563 360.8877 L
307.5244 359.4072 304.75 356.9375 303.0654 355.3252 C
303.8887 360.0693 306.0889 371.6914 309.166 379.7686 c
313.0635 389.998 321.4209 398.4355 321.5049 398.5195 C
320.7744 399.6904 L
312.4004 396.8193 297.8813 402.1201 294.6245 404.124 c
292.6284 405.3525 290.3237 405.9404 288.7285 406.2236 C
289.6245 406.8936 290.7554 407.8008 292.1787 408.9521 c
295.1567 411.3594 299.2354 414.6563 303.3965 417.4307 c
310.626 422.25 317.708 422.5596 317.7793 422.5625 C
317.7295 423.9785 L
317.4248 423.9678 310.1914 423.6641 302.6104 418.6104 c
f249.6709 375.7783 m
245.1616 370.6807 243.5874 363.9551 243.0708 360.7773 C
239.0635 366.0557 233.104 368.9082 232.8286 369.0361 C
232.2314 367.751 L
232.3013 367.7188 239.2612 364.4297 242.9419 358.541 C
244.0786 356.7227 L
244.2495 358.8613 L
244.2568 358.9561 245.0737 368.4424 250.7324 374.8389 c
255.083 379.7568 258.354 384.4473 259.9985 387.2373 C
260.3398 384.4063 261.0239 379.6895 262.0879 376.8525 c
263.6914 372.5771 266.6528 360.1914 266.6528 353.7949 C
266.6528 352.7627 L
267.6172 353.1338 L
267.6616 353.1514 272.1846 354.8457 279.8203 353.8604 c
286.8315 352.9561 293.5933 352.1611 297.0073 352.1904 C
296.1206 351.0752 294.9595 349.5303 294.6196 348.6797 c
294.5659 348.5469 289.1255 335.3379 274.4326 333.2383 C
273.1602 333.0566 L
273.9932 332.0781 L
274.0503 332.0107 279.7275 325.2598 279.9717 318.4258 C
281.3877 318.4766 L
281.1768 324.3877 277.4028 329.9521 275.8022 332.0645 C
290.3979 334.8018 295.8804 348.0166 295.936 348.1543 c
296.3208 349.1162 298.3853 351.667 299.1494 352.5684 C
300.5713 354.248 L
298.436 353.7139 L
296.2573 353.1689 284.8662 354.6387 280.002 355.2666 c
273.8906 356.0547 269.7515 355.2207 268.0234 354.7422 C
267.7793 361.4873 264.9785 373.1807 263.415 377.3506 c
261.9297 381.3105 261.1597 389.6318 261.1519 389.7158 C
259.7739 389.876 L
259.2744 388.377 255.3638 382.2139 249.6709 375.7783 c
f238.9531 440.6431 m
238.4341 440.6221 238.1055 440.2222 237.9775 439.4536 C
237.7681 438.0449 L
237.3486 435.1367 236.4756 429.085 235.4429 425.9873 c
234.1675 422.1621 232.3711 414.7354 232.353 414.6602 C
233.731 414.3281 L
233.7485 414.4023 235.5313 421.7705 236.7876 425.54 c
237.8599 428.7568 238.7456 434.8936 239.1709 437.8428 C
239.1958 438.0098 239.2056 438.0747 V
239.2251 438.0068 239.252 437.9541 239.2695 437.8848 c
239.4434 437.1909 241.0278 430.9902 243.1733 426.9668 C
244.6426 424.5654 L
247.875 419.5166 253.8916 410.1211 254.1035 395.2754 C
254.1255 393.7373 L
255.2803 394.7529 L
255.3433 394.8086 261.6704 400.3281 268.873 402.8115 c
274.7974 404.8535 282.9258 405.0596 285.7192 405.0674 C
284.8936 402.9395 282.8647 397.6787 282.0562 395.2529 c
281.1538 392.5459 270.5796 386.2754 269.271 385.9912 C
269.2974 384.5977 L
269.375 384.585 277.1377 383.2754 283.5635 378.0859 c
286.0869 376.0488 288.4722 373.8945 290.5771 371.9932 c
293.3569 369.4824 295.8218 367.2803 297.9624 365.8848 C
295.3579 365.332 290.4126 364.335 287.0083 363.9766 c
281.4312 363.3887 272.9492 363.9385 265.8687 367.2432 C
265.269 365.958 L
272.6128 362.5313 281.3906 361.959 287.1567 362.5664 c
292.0083 363.0781 299.9648 364.8672 300.0449 364.8848 C
302.0674 365.3418 L
300.1885 366.2188 L
297.9067 367.2832 294.9507 369.9531 291.5269 373.0449 c
289.4087 374.958 287.0078 377.127 284.4541 379.1895 c
279.6899 383.0361 274.4043 384.7988 271.5767 385.5322 C
275.2593 387.4834 282.4819 392.0479 283.4009 394.8057 c
284.4077 397.8262 287.3833 405.4355 287.4136 405.5127 C
287.7817 406.4531 L
286.7715 406.4785 L
286.3301 406.4902 275.8735 406.7236 268.4111 404.1514 c
262.6245 402.1563 257.562 398.4219 255.4312 396.7158 C
254.8555 411.1162 249.0366 420.3301 245.8359 425.3291 C
244.4243 427.6328 L
242.3579 431.5068 240.814 437.5522 240.6445 438.2285 c
240.415 439.1465 239.8896 440.6807 238.9531 440.6431 c
f351.5723 404.3262 m
352.0947 402.499 352.1943 395.7314 352.29 389.1865 c
352.3721 383.6348 352.457 377.8936 352.7988 374.6953 c
353.2852 370.1592 355.5811 362.2715 357.1982 357.0967 C
354.4668 361.4775 350.4561 368.46 348.1729 375.0039 c
344.5 385.5342 343.7188 396.9521 343.7109 397.0664 C
342.2969 396.9746 L
342.3047 396.8584 343.0967 385.2539 346.835 374.5371 c
350.5742 363.8184 358.8408 351.9814 358.9238 351.8633 C
360.1748 352.498 L
360.123 352.6523 354.9414 368.0039 354.209 374.8457 c
353.873 377.9795 353.7891 383.6875 353.707 389.207 c
353.6055 396.1504 353.5088 402.708 352.9355 404.7148 C
351.5723 404.3262 L
f324.5459 380.3115 m
319.5527 376.2051 316.3232 373.5508 V
317.6523 376.0986 319.2295 379.4258 320.1621 381.7568 c
321.6006 385.3535 325.998 390.5078 326.042 390.5596 C
324.9658 391.4814 L
324.7793 391.2637 320.3721 386.0986 318.8457 382.2842 c
317.2646 378.3301 314.083 372.0664 313.2002 370.9629 C
314.2012 369.9707 L
325.4619 379.2295 L
328.8301 382.0801 333.3818 387.9258 335.1689 392.7754 C
333.8389 393.2656 L
332.1553 388.6963 327.7051 382.9844 324.5459 380.3115 C
f314.2529 412.9326 m
307.1064 410.2227 301.5938 408.4629 301.5391 408.4463 C
301.8506 407.0684 L
301.9229 407.0781 309.1221 408.0674 313.2959 408.3135 c
316.2686 408.4883 325.5879 407.7832 331.1553 407.3613 C
335.5039 407.0615 L
335.5039 408.4795 L
331.2617 408.7744 L
325.6592 409.1992 316.2813 409.9082 313.2119 409.7275 c
311.8311 409.6465 310.1289 409.4834 308.458 409.3027 C
310.3086 409.958 312.4297 410.7256 314.7549 411.6084 c
321.8242 414.2891 331.2158 415.0566 331.3096 415.0645 C
331.1982 416.4766 L
330.8057 416.4463 321.5137 415.6875 314.2529 412.9326 c
f257.106 378.3086 m
256.6304 377.2383 252.4214 367.6123 251.0537 359.1338 c
250.0239 352.7471 246.896 346.4932 245.9385 344.6826 C
245.3486 344.959 244.3154 345.5088 242.9385 346.5801 c
240.7583 348.2754 233.5933 355.9277 233.521 356.0049 C
232.4858 355.0361 L
232.7837 354.7178 239.8003 347.2256 242.0684 345.4609 c
244.3877 343.6572 245.9634 343.1201 246.0293 343.0986 C
246.5825 342.9141 L
246.8701 343.4209 L
247.0459 343.7314 251.1973 351.1211 252.4531 358.9072 c
253.4224 364.916 255.9087 371.6309 257.3418 375.1914 C
257.3218 374.9023 257.2949 374.5205 Y
257.2949 373.6113 256.3608 365.1357 255.6108 358.3252 c
254.7949 350.9209 254.2949 346.3525 254.2949 345.7705 C
254.2949 345.2998 L
254.7285 345.1172 L
254.9302 345.0322 259.7388 343.0508 266.1152 344.0703 C
271.6123 345.1611 L
275.2251 345.9463 279.2466 346.7949 284.2529 347.1396 C
282.1792 346.3252 279.9565 345.3428 279.0425 344.5586 c
277.2974 343.0625 264.978 337.2373 256.5234 337.4785 C
256.522 337.4785 l
255.498 337.4785 254.9302 337.1992 254.813 336.6475 c
254.7993 336.584 254.793 336.5234 254.793 336.4639 c
254.793 335.7549 255.7065 335.3486 256.2158 335.123 c
258.4893 334.1123 266.373 328.9053 270.5176 325.0049 c
272.1563 323.4619 273.3247 322.1982 274.1577 321.2178 C
272.2686 322.1123 269.7051 323.2471 267.4648 323.9473 c
263.6563 325.1367 253.3096 331.248 249.1548 334.1045 C
248.8232 334.332 L
248.4575 334.1641 L
248.3652 334.1221 239.1748 329.9111 232.7949 327.9482 C
233.2119 326.5928 L
239.0225 328.3809 247.0371 331.9648 248.689 332.7129 C
252.9971 329.7959 263.0547 323.8398 267.042 322.5938 c
270.9336 321.3779 276.1226 318.6699 276.1748 318.6426 C
278.2734 317.5439 L
277.123 319.6143 L
277.0698 319.71 275.77 322.0068 271.4893 326.0361 c
267.5659 329.7295 260.3887 334.5381 257.4688 336.0693 C
266.3242 336.2393 278.1401 341.9189 279.9644 343.4824 c
281.313 344.6387 286.9277 346.665 288.9775 347.3486 C
288.7534 348.7295 L
281.3599 348.7295 276.0215 347.5693 271.3115 346.5459 C
265.8916 345.4707 L
261.0044 344.6885 257.0435 345.8125 255.7456 346.2549 C
255.8857 347.8799 256.4604 353.0957 257.0195 358.1699 c
258.0103 367.166 258.7119 373.6035 258.7119 374.5205 C
258.8555 376.5264 L
258.9272 377.2705 258.9814 377.8301 258.9814 378.248 c
258.9814 378.9443 258.832 379.251 258.3667 379.374 c
257.6616 379.5596 257.3271 378.8066 257.106 378.3086 c
f231.8696 348.2031 m
234.3887 343.166 238.8535 338.2666 240.4165 336.627 C
239.2695 335.8271 232.8481 331.3516 Y
233.6587 330.1895 L
242.603 336.4229 L
242.0044 337.0215 L
241.9453 337.0811 236.0493 343.0127 233.1372 348.8369 C
231.8696 348.2031 L
f239.6079 419.8701 m
239.5449 419.0205 L
239.5449 418.2363 239.3921 416.7334 239.1807 414.6533 c
238.7363 410.2813 238.0205 403.2402 238.0205 395.2725 c
238.0205 394.4434 238.0283 393.6035 238.0449 392.7568 c
238.1924 385.2432 240.0991 379.207 241.7012 375.376 C
239.4897 377.8857 233.3774 385.624 233.3096 385.71 C
232.1973 384.8311 L
232.5044 384.4424 239.7402 375.2813 241.2524 373.7695 C
243.959 370.8164 L
245.1035 371.6475 L
245.0498 371.7334 239.7046 380.3975 239.4619 392.7842 c
239.4453 393.6211 239.438 394.4502 239.438 395.2705 c
239.438 403.168 240.1489 410.165 240.5908 414.5107 c
240.6426 415.0205 240.6904 415.4932 240.7339 415.9336 C
240.7603 415.627 240.7949 415.3164 240.7949 415.0205 c
240.7949 412.5303 241.4966 403.96 244.6147 397.4639 c
247.603 391.2373 251.3799 385.6768 251.418 385.6211 C
252.0151 384.7461 L
252.5962 385.6318 L
252.6377 385.6953 256.8418 392.0176 264.312 395.6328 c
268.7725 397.791 273.9951 399.3564 277.5938 400.2979 C
276.4165 399.4365 275.269 398.4238 274.646 397.3848 c
273.4692 395.4238 267.6807 386.9023 262.8984 384.1338 C
261.3892 383.2598 L
263.0806 382.833 L
263.1294 382.8213 268.021 381.5508 273.8135 376.9648 c
276.1118 375.1455 278.4146 373.5449 280.3921 372.2529 C
279.124 372.4873 277.6768 372.668 276.0298 372.7285 c
269.5137 372.9697 263.3711 375.8799 263.3101 375.9092 C
262.6968 374.6318 L
262.9575 374.5068 269.1582 371.5645 275.9771 371.3125 c
281.3892 371.1123 284.6353 369.5908 285.5654 369.0928 C
285.7754 368.9746 285.9077 368.9014 285.916 368.8975 C
286.6367 370.1162 L
286.6104 370.1338 286.4414 370.2314 286.207 370.3584 C
284.8311 371.1318 279.7451 374.0771 274.6934 378.0762 c
270.4395 381.4434 266.7407 383.0596 264.8228 383.7539 C
269.5981 387.2256 274.6699 394.6709 275.8608 396.6563 c
277.2368 398.9492 282.0225 401.3623 282.0703 401.3867 C
281.6143 402.7158 L
281.5137 402.6953 271.4365 400.6543 263.6948 396.9082 c
257.3965 393.8604 253.4478 389.1572 252.0298 387.2656 C
250.8892 389.0176 248.168 393.3369 245.8921 398.0771 c
242.8882 404.3359 242.2119 412.6143 242.2119 415.0205 c
242.2119 415.0771 242.0229 420.6533 240.4307 420.6533 c
240.2759 420.6533 239.7583 420.5967 239.6079 419.8701 C
f232.3188 378.3379 m
234.3203 370.832 237.7466 364.9121 237.8911 364.6631 C
239.1157 365.3779 L
239.0811 365.4365 235.6387 371.3896 233.688 378.7031 C
232.3188 378.3379 L
f350.4092 534.6553 m
347.6357 530.3701 346.1377 525.4321 346.0752 525.2241 C
345.9844 524.9209 L
346.1494 524.6509 L
347.9238 521.7476 353.4688 517.7075 358.3604 514.1431 c
361.2383 512.0459 363.957 510.0654 365.2529 508.7695 c
367.2588 506.7637 368.0391 504.0127 368.3457 502.1895 C
363.6025 506.8301 359.6025 508.6299 355.3984 510.4897 c
353.7637 511.2129 352.0732 511.9609 350.3398 512.8945 c
344.0781 516.2666 341.8232 518.9438 341.8008 518.9707 C
340.7832 520.2012 L
340.5527 518.6226 L
338.8018 506.5854 332.8105 501.6582 328.8467 498.3984 C
327.54 497.3062 L
325.2666 495.3359 322.0439 492.7925 319.8838 491.1138 C
322.2832 496.1143 326.1016 503.4058 329.3477 508.3833 c
333.1074 514.1489 335.8164 522.6968 335.9297 523.0581 C
336.1631 523.7988 L
335.4033 523.9629 L
325.9063 526.0166 316.1396 521.7441 311.9697 519.9199 c
310.5039 519.2783 309.1699 518.7725 308.0732 518.3896 C
310.9248 520.9614 315.8955 525.3232 320.1719 528.4482 c
324.5654 531.6587 330.0234 530.207 332.7236 529.1538 C
333.7939 528.5811 334.4951 528.3574 334.5596 528.3389 C
335.0996 529.6392 L
335.0039 529.6924 334.3184 530.0605 333.2617 530.4805 C
331.9219 531.2178 329.9375 532.5684 327.7832 534.9912 c
324.0244 539.2202 323.7129 542.2983 323.71 542.3291 C
322.2969 542.2163 L
322.3086 542.0737 322.6133 538.6748 326.7246 534.0498 c
327.5898 533.0762 328.4219 532.291 329.2148 531.6104 C
326.2354 532.1118 322.584 531.9663 319.3359 529.5928 c
312.876 524.8716 304.8496 517.3628 304.7695 517.2876 C
302.7783 515.4214 L
305.4258 516.083 L
305.5508 516.1143 308.5293 516.8677 312.5381 518.6211 c
316.4658 520.3398 325.5098 524.2656 334.3174 522.7012 C
333.5791 520.5093 331.1982 513.8159 328.1602 509.1577 c
324.2461 503.1553 319.4863 493.7925 317.3574 489.0615 C
316.2139 486.52 L
318.4326 488.2061 L
318.4951 488.2539 324.7441 493.0073 328.4678 496.2349 C
329.7461 497.3037 L
333.4805 500.374 339.5918 505.5039 341.6836 517.0811 C
342.8994 515.9531 345.3506 513.9712 349.668 511.6465 c
351.4502 510.687 353.166 509.9277 354.8252 509.1934 c
359.3096 507.2095 363.5459 505.335 368.7363 499.7861 C
369.9629 498.4756 L
369.9629 500.2705 L
369.9629 500.5068 369.9199 506.106 366.2549 509.7715 c
364.8809 511.146 362.2461 513.0654 359.1953 515.2886 c
354.7764 518.5078 349.3389 522.4814 347.5391 525.1475 C
347.9102 526.2876 349.3223 530.3667 351.5986 533.8857 c
354.2275 537.9478 360.6367 541.876 360.7012 541.915 C
359.9648 543.126 L
359.6904 542.959 353.2148 538.9917 350.4092 534.6553 c
f325.9688 542.0566 m
326.1045 541.8999 329.3223 538.2031 331.8896 536.6631 c
334.54 535.0723 338.0596 532.1494 339.6563 529.6401 C
340.0947 528.9507 L
340.7148 529.4824 L
340.8623 529.6084 344.332 532.5996 345.876 535.4312 c
347.3701 538.1704 350.5391 540.9321 352.9404 541.5869 C
352.5674 542.9541 L
349.4775 542.1113 346.1055 538.8125 344.6318 536.1099 c
343.5586 534.1416 341.3643 531.9961 340.3418 531.0527 C
338.4873 533.5845 335.1924 536.334 332.6182 537.8779 c
330.2451 539.3018 327.0713 542.9482 327.0391 542.9849 C
325.9688 542.0566 L
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
