%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (863.ai)
%%CreationDate: 3/25/2002 6:35 PM
%%BoundingBox: 220 304 374 543
%%HiResBoundingBox: 220.1509 304.8545 373.2217 542.9644
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13854 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC92204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204A44FD
%07FC99FFFD05FC8C27F82727525152275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%5251522752515227525152275251522727F893FD05FCC2FFFD04FC8C20F8
%FD44FF52F88CFD04FCBBFFFD04FC4B27FD46FF52F8FD04FCC2FFFD04FCF8
%A8FD47FFF868FCFCFCBBFFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6E
%F8FD48FF5220FCFCFCBCFFFCFCFC6827FD48FF274BFCFCFCC2FFFCFCFC6E
%F8FD17FFCABBFD2FFF5220FCFCFC99FFFCFCFC6827FD17FFBCFCC2FD2EFF
%274BFCFCFCC2FFFCFCFC6FF8FD17FFFCFCFCC3FD2DFF5220FCFCFCBBFFFC
%FCFC6827FD16FFC2FD04FCFD2DFF4B4BFCFCFCC2FFFCFCFC68F8FD16FFC2
%FD04FCA1FD2CFF5220FCFCFCBBFFFCFCFC6827FD16FFBCFD04FCC2FD2CFF
%514BFCFCFCC2FFFCFCFC6EF8FD16FFC2FD04FCBBFD2CFF5220FCFCFCBCFF
%FCFCFC6827FD10FFCAFD05FFCAFD04FCC2FD05FFCABBBCFD24FF274BFCFC
%FCC2FFFCFCFC6EF8FD10FFBBFCB5BCCAFFFFBBFCFCFCCAFFFFCFBBFCFCFC
%BBFD24FF5220FCFCFC99FFFCFCFC6827FD10FFC2FD04FCCFFFFFC24BA8FF
%FFCFFD05FCC3FD24FF274BFCFCFCC2FFFCFCFC6FF8FD10FFCAFD05FCCFFF
%FFF87DFFFFB4FD05FCCAFD24FF5220FCFCFCBBFFFCFCFC6827FD11FFBBFD
%04FCBCFFFF2752FFCAFD05FCB5FD25FF4B4BFCFCFCC2FFFCFCFC68F8FD11
%FFCAB5FCFCFCC2FFFF2752FFC9FD05FCCAFD25FF5220FCFCFCBBFFFCFCFC
%6827FD12FFCFC2B5BCCFFFFF7DF8FF7D93FCFCFCCAFD21FFCFCAFFFFFF51
%4BFCFCFCC2FFFCFCFC6EF8FD15FF2727FFFF7D20FF2727C9C3FD22FFC2FC
%BCFFFFFF5220FCFCFCBCFFFCFCFC6827FD16FFF827FFFFF87DF8FD07FFC2
%FD1BFFCAB5FCFCB5FFFFFF274BFCFCFCC2FFFCFCFC6EF8FD16FFA8F852FF
%F8F852FD04FFA1BCFCB5FD1BFFBCFD04FCFFFFFF5220FCFCFC99FFFCFCFC
%6827FD17FFA8F87DF827FD04FFB4FCFCFCB5FD1BFFFD05FCFFFFFF274BFC
%FCFCC2FFFCFCFC6FF8FD12FFC9FCB5BCCFFFA7F82727FFFFFFB4FD04FCC2
%FD11FFBBC9FD07FFC3FD04FCB5FFFFFF5220FCFCFCBBFFFCFCFC6827FD13
%FFB5FCFCFCC2FFA8F852FFFFCAFD05FCCAFD11FFB5B5CFFD06FFC2FD04FC
%BCFFFFFF4B4BFCFCFCC2FFFCFCFC68F8FD13FF93FD04FCBCFF4B27FFFFCA
%FD04FC93FD12FFB5FCB5CAFD05FFA7FCFCFC8CFD04FF5220FCFCFCBBFFFC
%FCFC6827FD13FFCAFD05FCFF7D27FFFFFFBBFCB5BCFD13FFFCFCFCBBFD06
%FF4B99C2FD05FF514BFCFCFCC2FFFCFCFC6EF8FD14FFBBFCFCFCB4FF7DF8
%FFFF52F8A8FD15FFB4FCFCFCC3FD04FFA7F8A8FD06FF5220FCFCFCBCFFFC
%FCFC6827FD15FFC9B4B49AFFA8F8FFA8F87CFD16FFB5FCFCFCB4FD04FF52
%27FD07FF274BFCFCFCC2FFFCFCFC6EF8FD17FF52F87DFFF8A7F876FD06FF
%CAFD10FFC9FD04FCFD04FFF852FD07FF5220FCFCFC99FFFCFCFC6827FD16
%FFC9CA52277DF8F852FD04FFC2BBFCFD0DFFCFFD04FFBCFCFCBBFFFFFFA8
%F8A8FD07FF274BFCFCFCC2FFFCFCFC6FF8FD13FFC2FD04FCB451F8F827FF
%FFC9B5FCFCFCB5FD0DFFB5C3FD04FFC320FD04FF5227FFFFFFC2BBBBFFFF
%5220FCFCFCBBFFFCFCFC6827FD0AFFC2C9FD08FFB5FD04FCB47D207DFFC9
%B5FD04FCBCFD0DFFFCFCC2FD04FF277DFFFFFFF87DCFBBFCFCFCBBFFFF4B
%4BFCFCFCC2FFFCFCFC68F8FD0AFFC9FCBBFD07FFC9FD05FCC2F87DFFB5FD
%05FCCAFD0DFFB5FCFCC3FFFFFF2752FFFF7DF8CAB5FD04FCB5FFFF5220FC
%FCFCBBFFFCFCFC6827FD0AFFC9FCFCBBCFFD06FFC3FD04FCC25251FFFD05
%FCBBFD0EFFB5FCFCB5CFFFFF7DF8FFFF2727C9FD05FCC3FFFF514BFCFCFC
%C2FFFCFCFC6EF8FD0AFFC9FCFCFCB5FD07FFC9B5B56EFF2752FFFD05FCCA
%FD0EFFB5FCFCFCC3FFFFA8F8FFFFF8A8C2FD04FCB5FFFFFF5220FCFCFCBC
%FFFCFCFC6827FD0AFFCAFD04FCC3FD09FF277D5227FF99FCFCBBCAFFFFCF
%FD08FFCAFFFFFFB5FCFCFCB5FFFFFFF8A82727FFCF8CFCFCBCCAFFFFFF27
%4BFCFCFCC2FFFCFCFC6EF8FD0BFFFD04FCB4FFFFFFCAC3CAFFFFC2512727
%52A82727FFFFC9BBB493FD08FFC2B4CAFFC2FCFCFCB5FFFFFF2752F87C52
%F827A1FD06FF5220FCFCFC99FFFCFCFC6827FD0BFFBCFD04FCFD04FFFCFC
%B5BBFCCAF8FD0427FFC3B5FCFCFCC9FD08FFC3FCFCC9CAB5FCFCBCFFFFFF
%5127F827277DFD08FF274BFCFCFCC2FFFCFCFC6FF8FD07FFC9CAFFFFCAB4
%FCFCB4FD04FFBBFD04FCC37DF820F8FFC3FD05FCCAFD08FFC2FCFCFCC9CA
%7526FD04FF7DF8F852FD0AFF5220FCFCFCBBFFFCFCFC6827FFFFFFC9B5B4
%FD04FCBBFFCF766FFD05FFC2FD04FCC2FF27F8A8FFB5FD04FCB5FD09FFBC
%FCFCFCB5FF7DF8FD04FF7DF8A8FFC9C2B5BCBCC9FD04FF4B4BFCFCFCC2FF
%FCFCFC68F8FFFFFFCAB4FD06FC92FF52F8FD05FFB5FD05FCFF2727FFFF8C
%FD04FCCAFD09FFC3FD04FCCAFFF8A7FFFFFF2727FFB5FD05FC99FD04FF52
%20FCFCFCBBFFFCFCFC6827FD04FFCAB5FD06FCCAFFF8A1FFFFFFC9FD06FC
%FF5251FFFF9AFCFCFCCAFD0AFFCAFD04FCCAFF2752FFFFA8F8FFC2FD06FC
%FD05FF514BFCFCFCC2FFFCFCFC6EF8FD05FFC9B4FD05FCC9FF5227FFFFFF
%B4FCFCFC8C93C2FF2752FF52F8A8FD08FFC9BBCAFFFFFFB5FCFCFCC3FF52
%27FFFF2727FFC2FD05FCBCFD05FF5220FCFCFCBCFFFCFCFC6827FD06FFCF
%C2FCFCFC937DFFA8F8A8FFFFBBFCFCFCC3F87DFF27527DF8A8FD0AFFFCB5
%C9FFFFFFBBB4B5FFFFA8F8FFA8F8A8A84BFD04FCB5CFFD05FF274BFCFCFC
%C2FFFCFCFC6EF8FD09FFA7A127F8F876F852FFFFCA938CBCFF52F8FFF84B
%F8A8FD0AFFCAFCFCFCCAFFFFFFF87DFFFFFFF87D27F827F8279AB5B5C3FD
%07FF5220FCFCFC99FFFCFCFC6827FD0CFFA87DF8F8F8FFFFFFF852FFFFA8
%277D27F8A8FD0BFFCAFCFCFCBBFFFFFF5251FFFFFF2752F82752FD0DFF27
%4BFCFCFCC2FFFCFCFC6FF8FD0FFF7DF87DFF7DF8A8FFFFFF2727F8A8FD0C
%FFC3FD04FCCAFFFF5227FFFFFF76F827FFFFC3BBB4B5B4BBCAFD06FF5220
%FCFCFCBBFFFCFCFC6827FD06FFCAC9BCC2BCC3CAFFFFFF2752FF274BFD05
%FFF827FD0DFFCAFD04FCBCFFFF7DF8FFFFFF7DF8A8FFBBFD05FCB5FD07FF
%4B4BFCFCFCC2FFFCFCFC68F8FD05FFCAFD06FCB4C2FFFFA8F8A8F8FD06FF
%27F8FD09FF7D52FFFFFFFD04FCB5FFFFFFF8FFFFFF2727FFBBFD06FCCAFD
%07FF5220FCFCFCBBFFFCFCFC6827FD06FFC9B5FD06FCCAFFFF27F852FD06
%FF2752FD09FF7DF827A8FFBBFCFCFCBBFFFFFFF8A1FFA8F8A8FFBBFD05FC
%C2FD08FF514BFCFCFCC2FFFCFCFC6EF8FD07FFC9B4FD05FCC3FFFF27F8A7
%FD06FF2752FD09FF7DF8F827A8FFB4FCFCFD04FF2751FFF852A87668FD04
%FCBBFD09FF5226FCFCFCBCFFFCFCFC6827FD08FFCABCFCFCFCB57CFFFFA8
%F8FD07FFF8A8FD09FF7DF8F8F827FFFF2752FD04FF4B527DF827F8F876B4
%FCFCC2FD0AFF274BFCFCFCC2FFFCFCFC6EF8FD0AFFCFC2A027F8F852A827
%52FD05FFA1F8FD0AFFFD05F87DFF5227FD04FF7DF8F8F84BA8FD10FF5220
%FCFCFC99FFFCFCFC6827FF5252FD0CFF7DF8272727FD05FF7D27FD0AFF27
%FD04F827FF7D27FD04FFA8F8F8FFCFC2FCFCFCB5B5BBFD0AFF274BFCFCFC
%C2FFFCFCFC6FF8FF27F852FD0DFF7D27F8A8FD04FF2752FD0AFFFD06F8FF
%FFF8FD05FFF87DFFB5FD06FCC3FD0AFF5220FCFCFCBBFFFCFCFC6827FF27
%F8277DFD0EFF2752FD04FF277DFD05FF277CFFFF7DFD06F8FFFF2752FFFF
%FF2727FFC3FD06FCC2FD0BFF4B4BFCFCFCC2FFFCFCFC68F8A8F8F8F827FD
%0EFF5227FFFFFFA8F8FD06FF27F852FFFFFD06F8FFFF2752FFFFA8F87DFF
%BBFD05FC93FD0CFF5220FCFCFCBBFFFCFCFC68277DFD04F87DFD0EFFF8FF
%FFFF5227FD06FFF8F8F8A8FF27FD04F827FFFF7DF8FFFF2727FF52278CFC
%FCB5C2FD0DFF514BFCFCFCC2FFFCFCFC6EF87DFD04F827FD0EFF2752FFFF
%2752FD05FF52FD04F8FFA827F8F8F8FFFFFFA8F8FF7DF827F82052FD12FF
%5226FCFCFCBCFFFCFCFC6827A8FD04F827FD0EFF5227FFFFF8A8FD05FF52
%FD04F852FFFFFFF87DFD04FFF87DF8F8277DFD14FF274BFCFCFCC2FFFCFC
%FC6EF8FF27F8F8F827FD0EFFA8F8FF52F8FF27FD04FFFD05F827FFFFFF52
%F8FD04FF27F827A8FD16FF5220FCFCFC99FFFCFCFC6827FFFF5227F8FD10
%FF277D2752A8F852FFFFFF27FD05F8FFFFFFA827A8FFFFFF27F8A8FD17FF
%274BFCFCFCC2FFFCFCFC6FF8FFFFFF7DF8FD0DFFA827522727F8A852F8F8
%7DFFFF52FD04F827FD04FF2751FFFFFF2727FD18FF5220FCFCFCBBFFFCFC
%FC6827FD04FFF8A8FD09FFA84B27F8F87C7DF827FF27F8F8F8FFFFFF27F8
%F8F87CFD04FFA8F8FFFF52F8FF7D27FD05F8274BA8FD0EFF4B4BFCFCFCC2
%FFFCFCFC68F8FD04FF2752FD07FFA827FD05F8FFFFF852FFFD04F852FFFF
%FF27F87CFD06FFF852A8F8A752FD0BF82776FD0BFF5220FCFCFCBBFFFCFC
%FC682751FFFFFF5152FD06FFA827FD05F827FFA8F8FF7DFD04F827FD04FF
%F8FD07FF52272752A827FD0BF82752FD0BFF514BFCFCFCC2FFFCFCFC6EF8
%F87DFFFF7DF8FD06FF52FD06F851FF2727FF52FD05F8A8FFFFFFF87DFD07
%FFFD0EF8277DFD0DFF5226FCFCFCBCFFFCFCFC68F8F827FFFFA8F8FD06FF
%27FD06F8FFA8277DFF27FD05F87DFFFFFF2752FD06FF7DF8277DFFFF27FD
%04F827277CA8FD0FFF274BFCFCFCC2FFFCFCFC6EF8F8F8FFFFFFF8A8FD05
%FF27FD05F87DFF5244C9FFA7FD05F8A8FFFFFF5227FD06FF2727FD05FFA1
%7D7DA7FD13FF5220FCFCFC99FFFCFCFC6820F8F827FFFF2752FD04FF52F8
%27F8F8F87DFFFFF8B5FCBBC927F8F8F827FD04FF7D27FD05FF52F8FD1DFF
%274BFCFCFCC2FFFCFCFC6FF8527D27F8FF2751FFFFA727F8A7FD06FF27F8
%B4FCFCFC9A27F8F87DFD05FFF8FD04FF7DF8A87D27F8F8F820277DFD15FF
%5220FCFCFCBBFFFCFCFC6827FFFFFF27F852F8FF7CF827FD08FFF827BBFD
%04FCCA524BFD06FF277DFFFFFFF87CA827FD07F82727A8FD12FF4B4BFCFC
%FCC2FFFCFCFC68F8FD04FF76F8F827F852FD08FF52F8FFBBFD04FCC24B27
%FD06FF2752FFFFF8275227FD0CF852FD10FF5220FCFCFCBBFFFCFCFC6827
%FCB5BBFFFFA8F827A8FD09FFF827FFCFFD04FCB5A127FD06FF5227FF2727
%F82727FD0AF85276FD11FF514BFCFCFCC2FFFCFCFC6EF8FD04FCCAFF2752
%FD05FFA8522727FD04F852BCFCFCFCC27D27FD06FF7D2752F852FFFFFF27
%FD06F82052FD14FF5226FCFCFCBCFFFCFCFC6827FD04FCB5FF2752FD04FF
%27FD06F82775FFFFC36F6FFFFFF8FD07FFF8277CFD05FFA87D4B5252A8FD
%16FF274BFCFCFCC2FFFCFCFC6EF8FD05FCFF76F8FFFFFF27FD06F86EFCB4
%FFFFFFA8F8A8FFF8FD06FFA8F827FD22FF5220FCFCFC99FFFCFCFC6827C9
%BBFCFC99FF7D27FFFFFFFD06F8B5FCFCFCFD04FF4B27FFF8A1FD05FF2727
%FD04FFA87D7DA8FD1BFF274BFCFCFCC2FFFCFCFC6FF87DFFFF7DF827FFF8
%FFFF51FD05F86EFD04FCFD04FFA7F87D277DFD04FF27F8FFFFFFA827FD05
%F851A8FD18FF5220FCFCFCBBFFFCFCFC6827F87CFFFF7D27F8275227F827
%FD04F86EFCFCFCB5FD05FF27272752FFFFFF27F8A8FFFFFF27FD08F8277D
%FD16FF4B4BFCFCFCC2FFFCFCFC68F8F8F852FFFFFF52F8F827FFFFFF7DF8
%F8A0FCFCFCC2FD06FFF8F827FFA820F87DFFA827FD0DF87CFD14FF5220FC
%FCFCBBFFFCFCFC6827F8F8F8A8FFFFFF4B27FFFFFFA827F84BFFBCFCB5CF
%FD07FFF8277D27F8522727F8525227FD08F82752A8FD15FF514BFCFCFCC2
%FFFCFCFC6EFD04F827FFFFFF5227FFFFFF51F8F8A7FF7D27FD09FF7DFD05
%F8277DFFFFFFA751F827F8272752A8FD18FF5226FCFCFCBCFFFCFCFC68FD
%04F827FFFFFFA8F8FFFF7DF82727FFFF5227FD08FFA8F827F8527DFD14FF
%CFFD12FF274BFCFCFCC2FFFCFCFC6EFD04F827FD04FFF8A8FFF827F8FFFF
%FF2752FD06FFA84BF827F876FD15FFBC93FD12FF5220FCFCFC99FFFCFCFC
%68275227F852FD04FFF8A12727F852FFFFFF277DFD05FFFD0427F8A8FD15
%FFC3FCFCFD12FF274BFCFCFCC2FFFCFCFC6FF8FFFFA8F852FFFFFF2727F8
%52F8A8FFFFFFF8FD04FF76F8275227F8A7FD0EFFC3FD06FFC9FCFCFCCAFD
%11FF5220FCFCFCBBFFFCFCFC6827FFFFFF7DF8A8FFFF27F8522752FFFFFF
%7C27FFFF4B27F87D7D2727FD0FFFC2B5CFFD05FFFD04FCC9FD06FFCFC3C2
%BCBCB4CFFD04FF4B4BFCFCFCC2FFFCFCFC68F8FD04FF76F8A7FF27F852F8
%FD04FF4B2727F8277DFF52F827FD10FFB5FCC2FD04FFC2FD04FCC9FD04FF
%CABBFD05FCBBFD05FF5220FCFCFCBBFFFCFCFC6827FD05FF52F87DF8A8F8
%7DFFFFA852F8F827A8FFFF27277DFD09FFB5FD06FFCAFCFCFCFD04FFC2FD
%04FCCFFD04FFBCFD05FCB5CFFD05FF514BFCFCFCC2FFFCFCFC6EF8FD05FF
%52F8F87D27275251F8F8277DFFFFFF7DF827A8FD09FFC3FCBBFD05FFBBFC
%FCFCC2FFFFFFBCFD04FCFD05FF92FD05FCC2FD06FF5226FCFCFCBCFFFCFC
%FC6827FFFF5227F827F827A8F8F827277DFD04FFA827F852FD0AFFCAB5FC
%B4FD05FFBBFCFCFCC2FD04FF92FCFCCAFD04FF7C6FFD04FCBBFD07FF274B
%FCFCFCC2FFFCFCFC6EF827F82751A84BF8A827F8FD07FF52F8F8A8FD0BFF
%B5FCFCFCC3FD04FF92FCFCFC92FD04FF2776FD04FFCF27F852BC92B5C2FD
%08FF5220FCFCFC99FFFCFCFC682752FFFFFF7DF87D7DF8A8FD05FFA8F827
%7DFD05FFA8A8FD05FFCAFD04FCBCFD04FFBBFCFCFCBBFFFFFFA8F8FD04FF
%7DF827A8FD0DFF274BFCFCFCC2FFFCFCFC6FF8FD04FF2027FFF852FD04FF
%A827F852A8FFA852FD05F876FD04FFBCFD04FCC2FD04FFC2FCFCFCC9FFFF
%FF5127FFFFA727F852FD0FFF5220FCFCFCBBFFFCFCFC6827FFFFFF52F8FF
%5227FD04FF4BF827A8FFFF5227FD05F827FD05FFC3FCFCFCB5CAFD05FFF8
%A1CFFD04FF2752FF4BF827FD11FF4B4BFCFCFCC2FFFCFCFC68F8FFFF7DF8
%A8A8F87CFFA852F8277DFFFFFF52FD07F852FD05FFCAB5FCFCA0FD05FF7D
%F8FD05FFA8F852F8277DFD12FF5220FCFCFCBBFFFCFCFC6827FFFFF852FF
%2727FF51F8F8A1FD04FFA8FD08F8FD07FF5227FD07FF5227FD04FFA827F8
%F852A8FD13FF514BFCFCFCC2FFFCFCFC6EF8FF2727FF7DF827F8277DFD06
%FF52FD07F8A8FD07FF2752FD07FFF87DFFFF7D27F8277D7DF8F827BCB4B5
%C2FD0EFF5226FCFCFCBCFFFCFCFC68275227A8A8F8F827A8FD08FFFD07F8
%A8FD08FFF8FD07FF7D27A852F8274BA8FD04FF7D6FFD05FCCAFD0CFF274B
%FCFCFCC2FFFCFCFC6EF8F87CFF27F8A8FD09FFA8FD05F827FD09FF5227FD
%06FF7D27F8F8277DFD08FF99FD06FCC3FD0BFF5220FCFCFC99FFFCFCFC68
%F827FFA8F87DFD09FFA82727A17D7DFD0BFF2752FFFFA8524BF827275227
%F827FFC2BBBBCAFFFFFFC9FD07FCC9FD0AFF274BFCFCFCC2FFFCFCFC6FF8
%FFFF2727FD09FFA82727FD0EFF7DF851F8F8F82751A8FD04FF7D2720FD04
%FCBBCAFFFFC2FD07FCCAFD09FF5220FCFCFCBBFFFCFCFC6827FF7CF8FD09
%FF7DF827FD06FF7D7D7D52522727FD04F82752A8FD0AFFBBFD05FCBBFD04
%FFC9CAC9CACAFD0BFF4B4BFCFCFCC2FFFCFCFC68F8FFF8525252FD13F827
%27527C7DFFFF7C27F827A1FD09FFC2FD06FCC2FD13FF5220FCFCFCBBFFFC
%FCFC682727F8F827517D7DFFFF7DF8277DFD09FF7D27F8A8FD08FF272727
%A0FCB5BBCAFD04FFBBFD06FCC3FD12FF514BFCFCFCC2FFFCFCFC6EF82752
%FD05FF5220F827FD0DFF52F852FD09FF76FD05FCC3FD04FFC3BBB4FCB4B5
%B4CAFD11FF5226FCFCFCBCFFFCFCFC6827FD05FF7DF827527DF827A8FD0C
%FF7DF827A8FD07FFCAFD06FCCAFD1CFF274BFCFCFCC2FFFCFCFC6EF8FFFF
%FF7D27F876FD04FF27F84BFD0DFF27F8205252CFFD04FF99FD06FCC9FD1B
%FF5220FCFCFC99FFFCFCFC6827FFA827F827FD07FF7D2727A8FD0CFF27FD
%04F87DFD04FFC3B5FD05FCC9FD1AFF274BFCFCFCC2FFFCFCFC6FF852F827
%F8F827FD07FFA851FD04F827FD08FF52FD05F827FD06FFC3C9C3C9C9FD1A
%FF5220FCFCFCBBFFFCFCFC68F827A8FFFF7D27F82752FD06FF27FD05F8A8
%FD06FF7DFD06F87DFD24FF4B4BFCFCFCC2FFFCFCFC8CF8FD05FF7DFD04F8
%7DFD04FF27FD06F8A7FD06FF27FD06F8FD24FF2720FCFCFCBBFFFD04FC27
%7DFD04FF7DFD05F87DFFFFFFA8FD07F8FD07FF27FD05F87DFD23FFF893FC
%FCFCC2FFFD04FC2027FD04FFA8FD06F8A8FFFFFF52FD06F827FD07FF5227
%F8F8F827FD22FF2727FD04FCBCFFFD04FCB4F827A8FFFFFF27FD05F827FD
%04FF52FD06F8A8FD09FF5227F8FD21FF52F868FD04FCC2FFFD06FCF8F827
%522752FD06F827522752274BFD05F8272752275227522752275227272752
%275227522752275227522752275227522752275227522752275227522727
%F8F868FD05FC99FFFD07FC684B264B4B4B264B2627204B4B4B264B4B4B26
%4B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B
%4B264B4B4B264B4B4B264B4B4B264B4B4B206FFD07FCC2FFFD52FCBBFFFD
%52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
373.2217 304.8545 m
220.1509 304.8545 L
220.1509 542.9644 L
373.2217 542.9644 L
373.2217 304.8545 L
fu0 0 0 0 k
228.186 526.9932 m
228.186 321.1592 l
228.6865 312.3262 238.0195 312.1592 v
355.8535 312.1592 l
364.8535 313.6592 365.3535 322.1592 v
365.1865 527.3262 l
364.5195 534.9932 355.0195 535.6597 v
236.8525 535.6597 l
229.686 535.6602 228.186 526.9932 v
fu0.65 0.53 0.51 1 k
299.6865 440.3262 m
300.5205 436.8262 299.8535 434.6597 v
299.1865 432.4932 297.8525 428.6597 298.3525 425.6597 c
298.8525 422.6597 301.0195 420.1597 304.1865 420.1597 c
307.3535 420.1597 310.6865 423.8267 308.6865 429.9932 c
306.6865 436.1597 299.6865 440.3262 y
f290.0195 427.8262 m
289.5195 423.1587 288.686 420.9927 v
287.8525 418.8262 287.186 414.3262 290.186 411.6592 c
293.186 408.9922 297.5195 410.1592 297.5195 414.6592 c
297.5195 419.1592 295.6855 421.1597 293.8525 423.6597 c
292.0195 426.1597 290.0195 427.8262 y
f278.186 418.3262 m
277.8525 415.1592 277.3525 413.1592 v
276.8525 411.1592 274.1865 406.6582 276.0195 401.9922 c
277.8525 397.3262 284.3525 396.4922 285.186 401.9922 c
286.0195 407.4922 283.6855 410.1582 282.3525 412.4922 c
281.0195 414.8262 278.186 418.3262 y
f232.3525 431.3262 m
232.519 428.4932 231.8525 426.4932 v
231.186 424.4932 230.1865 419.9937 232.5195 417.3262 c
234.8525 414.6592 239.8525 414.4912 239.8525 418.9922 c
239.8525 423.4932 238.0195 424.9927 236.186 427.3262 c
234.3525 429.6597 232.3525 431.3262 y
f228.186 410.4922 m
232.853 404.8262 233.0195 402.1592 v
233.186 399.4922 229.0195 398.6592 228.186 399.1592 c
228.186 410.4922 l
f267.3525 413.9922 m
263.519 412.3252 259.8525 411.4922 v
256.186 410.6592 251.8525 407.1602 252.8525 403.3262 c
253.8525 399.4922 258.853 398.3262 262.5195 401.8262 c
266.186 405.3262 267.3525 413.9922 y
f250.186 383.4922 m
249.0195 388.8262 256.186 390.8262 v
263.3525 392.8262 269.5195 392.1592 y
265.186 387.6582 263.686 385.9922 v
262.186 384.3262 258.853 381.4932 254.5195 381.3262 c
250.186 381.1592 250.5195 382.1582 250.186 383.4922 c
f228.186 384.8262 m
231.5195 382.4922 234.686 378.6592 v
237.8525 374.8262 234.8525 370.9922 y
230.353 369.8252 228.0195 373.4922 v
228.186 384.8262 l
f260.3525 342.4922 m
258.5195 347.6602 264.186 351.8262 v
269.8525 355.9922 278.686 354.9922 y
276.3525 349.9922 275.186 348.1592 v
274.0195 346.3262 269.1865 342.4932 265.5195 341.8262 c
261.8525 341.1592 260.3525 342.4922 y
f301.8535 380.1592 m
303.6855 385.8252 310.5195 384.9922 v
317.3535 384.1592 320.8535 380.8262 325.1865 379.8262 c
320.3535 378.8252 318.6865 377.9922 v
317.0195 377.1592 312.1875 375.6592 307.8535 376.1592 c
303.5195 376.6592 302.0205 377.1592 301.8535 380.1592 c
f332.8535 394.6592 m
328.5205 395.9922 326.3535 396.9922 v
324.1865 397.9922 319.6875 399.6582 315.3535 399.4922 c
311.0195 399.3262 309.0205 396.9922 308.8535 395.1592 c
308.6865 393.3262 310.1855 390.1602 316.0195 389.8262 c
321.8535 389.4922 326.6865 392.8262 328.6865 393.3262 c
330.6865 393.8262 332.8535 394.6592 y
f342.8535 409.1592 m
338.8535 410.1592 335.8535 411.1592 v
332.8535 412.1592 329.1855 412.9932 323.5195 412.3262 c
317.8535 411.6592 317.3525 407.9932 317.5195 407.3262 c
317.6865 406.6592 319.1875 402.9922 324.3535 403.1592 c
329.5195 403.3262 334.3535 405.6602 336.3535 406.3262 c
338.3535 406.9922 342.8535 409.1592 y
f298.5195 313.4922 m
293.186 315.9922 290.186 316.6592 v
287.186 317.3262 281.0195 322.8252 283.0195 326.4922 c
285.0195 330.1592 293.3525 326.3252 295.686 320.9922 c
298.0195 315.6592 298.5195 313.4922 y
f269.8525 312.3262 m
264.6855 312.4922 260.8525 316.6592 v
257.0195 320.8262 258.3525 324.3262 y
263.8525 327.6582 269.8525 320.9922 v
275.8525 314.3262 274.3525 312.6592 y
269.8525 312.3262 l
f244.686 312.3262 m
238.519 316.125 240.8525 321.4922 v
242.5195 325.3262 253.186 318.9932 253.0195 312.1592 c
244.686 312.3262 l
fU254.2178 336.3672 m
237.4722 337.1172 228.5664 332.6475 228.1958 332.4561 C
228.8428 331.1953 L
228.9307 331.2402 237.8218 335.6826 254.1543 334.9512 c
266.4619 334.4004 309.125 334.5488 341.3711 359.5996 C
340.502 360.7188 L
308.6377 335.9648 266.4028 335.8213 254.2178 336.3672 c
f248.2295 333.6387 m
243.4219 331.4834 228.4717 323.0547 227.8379 322.6973 C
228.5342 321.4629 L
228.689 321.5498 244.0615 330.2168 248.8096 332.3457 c
253.5869 334.4873 259.3477 340.0938 261.9121 343.3906 C
260.793 344.2607 L
258.3188 341.0801 252.7852 335.6816 248.2295 333.6387 c
f246.291 331.4033 m
248.3291 330.0361 258.5298 323.1943 259.2026 322.8584 C
259.8389 324.125 L
259.3027 324.4053 251.9155 329.335 247.0811 332.5811 C
246.291 331.4033 L
f234.5786 324.8389 m
234.6289 324.8174 239.6553 322.6982 241.5405 320.9697 C
242.4985 322.0146 L
240.4312 323.9092 235.3423 326.0557 235.1265 326.1455 C
234.5786 324.8389 L
f270.457 335.2383 m
283.7856 326.2412 L
284.5864 327.4111 L
271.2476 336.4141 L
270.457 335.2383 L
f286.2642 336.998 m
291.2476 335.0713 299.083 331.8662 300.2441 330.9385 C
301.1289 332.0459 L
299.4258 333.4072 288.0649 337.8213 286.7749 338.3203 C
286.2642 336.998 L
f286.8491 337.8887 m
288.1899 337.4297 L
289.2153 340.4268 292.561 350.2998 292.561 351.4922 C
291.144 351.498 L
291.1074 350.707 288.9038 343.8955 286.8491 337.8887 C
f305.0127 342.7129 m
306.3594 342.2715 L
306.7197 343.3682 309.8828 353.0195 310.0527 354.043 C
308.6543 354.2754 L
308.5391 353.5811 306.4141 346.9805 305.0127 342.7129 C
f306.6973 342.0283 m
309.5654 340.5615 314.2559 338.1445 314.627 337.9023 C
315.4121 339.082 L
314.9043 339.4209 308.6006 342.6465 307.3418 343.29 C
306.6973 342.0283 L
f323.8105 360.6592 m
323.8105 359.0488 321.3506 352.3604 319.6963 348.2568 C
321.0107 347.7275 L
321.4424 348.7979 325.2285 358.2578 325.2285 360.6592 C
323.8105 360.6592 L
f321.7246 348.1816 m
325.6631 346.3799 331.7354 343.5703 332.3223 343.2188 C
333.0508 344.4336 L
332.209 344.9395 323.3242 349.0078 322.3145 349.4707 C
321.7246 348.1816 L
f281.9731 371.6963 m
260.5811 353.2539 236.9336 344.6611 236.6973 344.5762 C
237.1748 343.2422 L
237.4136 343.3271 261.2988 352.002 282.8989 370.6221 c
304.3066 389.0771 337.5859 440.0552 351.1133 483.6997 C
349.7598 484.1196 L
336.3037 440.7036 303.2354 390.0254 281.9731 371.6963 c
f275.9888 506.2847 m
276.041 505.9927 281.2236 476.8555 280.9775 455.918 c
280.7241 434.3779 271.3164 408.2725 265.0547 395.9805 c
258.4063 382.9307 227.918 340.5 227.6108 340.0732 C
228.7612 339.2451 L
229.0693 339.6729 259.6206 382.1914 266.3174 395.3379 c
273.8926 410.207 282.1548 435.5024 282.3945 455.9014 c
282.6426 476.9751 277.436 506.2417 277.3833 506.5347 C
275.9888 506.2847 L
f243.5786 354.7734 m
240.6162 349.8369 230.6851 333.9443 230.585 333.7852 C
231.7871 333.0332 L
231.8872 333.1934 241.8247 349.0967 244.7935 354.0449 c
247.6299 358.7715 262.5532 385.2754 267.3535 397.9072 C
266.0283 398.4111 L
261.2612 385.8662 246.4033 359.4824 243.5786 354.7734 c
f236.2554 415.7129 m
239.4561 404.6318 245.6743 366.4307 245.7363 366.0459 C
247.1357 366.2725 L
247.0728 366.6582 240.8413 404.9443 237.6167 416.1055 C
236.2554 415.7129 L
f242.2061 394.0449 m
241.436 394.6494 232.124 401.9668 Y
231.248 400.8516 L
242.166 392.2734 L
254.8481 401.333 L
254.0239 402.4854 L
243.0107 394.6191 242.2061 394.0449 V
f236.2886 384.0723 m
244.4517 378.543 L
251.354 383.5869 L
250.5181 384.7314 L
245.1294 380.793 244.4204 380.2754 V
243.6807 380.7773 237.0835 385.2461 Y
236.2886 384.0723 L
f233.647 370.9492 m
240.5161 362.9023 241.6987 361.5176 V
239.9248 360.9668 228.2261 357.3359 Y
228.646 355.9824 L
244.1733 360.8008 L
234.7251 371.8691 L
233.647 370.9492 L
f247.3184 360.1084 m
247.5537 358.71 L
247.793 358.751 271.7402 362.9502 292.894 380.8682 C
291.978 381.9502 L
271.1328 364.293 247.5537 360.1475 247.3184 360.1084 C
f287.7231 376.335 m
288.1489 374.9834 L
303.1602 379.7373 L
302.7119 381.0811 L
287.7231 376.335 L
f283.4854 375.3037 m
284.8867 375.5146 L
283.8545 382.3965 282.0039 396.1221 282.3877 398.8086 C
280.9844 399.0098 L
280.4756 395.4473 283.3618 376.125 283.4854 375.3037 C
f274.7695 390.6689 m
274.9053 390.293 278.1519 381.4248 283.5063 377.3457 C
284.3657 378.4727 L
279.3457 382.2979 276.1343 391.0615 276.1025 391.1504 C
274.7695 390.6689 L
f262.9775 378.6592 m
262.9775 375.29 260.0303 363.9521 260.0005 363.8379 C
261.3716 363.4805 L
261.4951 363.9531 264.3945 375.1094 264.3945 378.6592 C
262.9775 378.6592 L
f292.2417 411.0176 m
296.9917 387.7676 L
298.3804 388.0508 L
293.6304 411.3008 L
292.2417 411.0176 L
f301.7744 393.3486 m
302.0986 391.9697 L
310.5986 393.9697 L
310.2744 395.3486 L
301.7744 393.3486 L
f303.7783 421.146 m
310.5029 404.335 L
318.8428 406.2178 L
318.5303 407.6006 L
312.377 406.2109 311.3701 405.9834 V
310.9512 407.0293 305.0947 421.6729 Y
303.7783 421.146 L
f311.7441 436.2568 m
316.4941 414.7559 L
317.8789 415.0625 L
313.1289 436.5625 L
311.7441 436.2568 L
f319.4355 419.3223 m
319.9375 417.9961 L
320.3164 418.1396 329.2646 421.5313 332.0254 423.0376 C
331.3467 424.2817 L
328.6709 422.8223 319.5273 419.3564 319.4355 419.3223 C
f320.7451 449.7559 m
321.7305 445.3218 324.709 428.7021 324.7393 428.5347 C
326.1338 428.7847 L
326.1045 428.9521 323.1201 445.6006 322.1279 450.0635 C
320.7451 449.7559 L
f326.9346 432.5718 m
327.4385 431.2476 L
337.9385 435.2476 L
337.4346 436.5718 L
326.9346 432.5718 L
f327 460.4858 m
331.75 441.7358 L
333.123 442.0835 L
328.373 460.8335 L
327 460.4858 L
f333.6572 445.311 m
334.2158 444.0083 L
344.7158 448.5083 L
344.1572 449.811 L
333.6572 445.311 L
f335.2461 475.002 m
339.4541 456.5894 L
351.2754 463.0376 L
350.5967 464.2817 L
341.8262 459.4976 340.4189 458.73 V
340.0439 460.3696 336.627 475.3174 Y
335.2461 475.002 L
f254.5313 456.3892 m
254.6387 456.1294 265.3267 430.1934 270.751 409.7275 C
272.1211 410.0908 L
266.6719 430.6489 255.9487 456.6699 255.8408 456.9302 C
254.5313 456.3892 L
f252.9336 433.2476 m
253.0376 433.208 263.3384 429.269 265.7119 427.1328 C
266.6602 428.1865 L
264.0913 430.498 253.8721 434.4067 253.4385 434.5718 C
252.9336 433.2476 L
f248.6675 448.2539 m
259.6675 443.7539 L
260.2046 445.0654 L
249.2046 449.5654 L
248.6675 448.2539 L
f263.0137 435.8838 m
264.3579 435.4351 L
264.5449 435.981 267.8091 442.7256 269.8228 446.8486 C
268.5493 447.4707 L
268.0098 446.3662 263.271 436.6563 263.0137 435.8838 C
f273.2969 451.6035 m
279.0469 439.6035 L
280.3252 440.2158 L
274.5752 452.2158 L
273.2969 451.6035 L
f280.6851 444.9106 m
281.687 443.9087 L
289.937 452.1587 L
288.9351 453.1606 L
280.6851 444.9106 L
f275.5044 465.7148 m
276.0161 463.9253 280.563 456.395 281.0801 455.5425 C
281.5977 454.688 L
289.2329 463.959 L
288.1392 464.8604 L
282.8301 458.4136 281.7769 457.1343 V
280.1699 459.8193 277.2153 464.8872 276.8677 466.1045 C
275.5044 465.7148 L
f271.9175 478.6768 m
272.6187 477.9233 278.8223 471.2944 280.6567 470.5083 C
281.2153 471.811 L
280.0405 472.3145 275.5249 476.8818 272.9546 479.6426 C
271.9175 478.6768 L
f280.4126 473.3872 m
281.4595 472.4321 L
289.2095 480.9321 L
288.1626 481.8872 L
280.4126 473.3872 L
f278.8125 488.9966 m
280.0596 488.3228 L
285.0596 497.5728 L
283.8125 498.2466 L
278.8125 488.9966 L
f269.4224 495.1714 m
278.9224 485.1714 L
279.9497 486.1479 L
270.4497 496.1479 L
269.4224 495.1714 L
fu0 1 1 0 k
274.436 522.1597 m
273.1743 519.3013 272.186 517.1597 v
270.686 513.9097 271.186 504.6597 276.936 505.1597 c
282.686 505.6597 279.936 515.4097 278.686 517.1597 c
277.436 518.9097 274.436 522.1597 y
f260.0195 507.6597 m
260.6855 505.6602 260.8525 503.9932 v
261.0195 502.3262 263.0195 498.4927 266.5195 497.3262 c
270.0195 496.1597 272.519 499.4932 270.3525 502.6597 c
268.186 505.8262 266.0195 506.3262 264.686 506.6597 c
263.3525 506.9932 260.0195 507.6597 y
f295.5195 509.3262 m
292.5195 507.6592 290.0195 507.3262 v
287.5195 506.9932 284.0195 504.3262 283.186 500.6597 c
282.3525 496.9932 286.186 495.4927 288.686 496.3262 c
291.186 497.1597 294.1855 500.6597 294.8525 504.1597 c
295.5195 507.6597 295.5195 509.3262 y
f264.3525 488.9932 m
265.3525 485.9932 265.8525 483.9932 v
266.3525 481.9932 268.6855 478.9927 271.8525 478.3262 c
275.0195 477.6597 276.6865 481.4932 275.0195 483.9932 c
273.3525 486.4932 270.853 487.3267 268.5195 487.9932 c
266.186 488.6597 264.3525 488.9932 y
f297.8525 493.3262 m
295.0195 491.6592 292.5195 491.3262 v
290.0195 490.9932 287.0195 487.8267 287.0195 484.9932 c
287.0195 482.1597 289.3525 480.9932 293.186 482.6597 c
297.0195 484.3262 297.353 489.3262 297.5195 490.3262 c
297.686 491.3262 297.8525 493.3262 y
f266.0195 473.8262 m
267.6855 470.3262 268.8525 468.8262 v
270.0195 467.3262 272.6855 465.3267 275.3525 465.4932 c
278.0195 465.6597 279.686 468.8262 277.3525 471.6597 c
274.6514 474.9399 271.353 474.1597 270.0195 474.1597 c
268.686 474.1597 266.0195 473.8262 y
f298.3525 476.1597 m
294.1865 474.6602 291.5195 473.9932 v
288.8525 473.3262 285.1855 470.1597 285.3525 466.6597 c
285.5195 463.1597 288.8525 462.1597 292.3525 464.1597 c
295.8525 466.1597 296.8525 470.6602 297.186 471.9932 c
297.5195 473.3262 298.3525 476.1597 y
f276.0195 462.1597 m
272.8525 459.9932 l
270.1865 460.4932 269.0195 460.9932 v
267.8525 461.4932 266.5195 461.9932 y
266.8525 460.9932 266.8525 459.9932 v
266.8525 458.9932 268.019 456.4932 268.3525 455.9932 c
266.853 453.9927 266.0195 452.3262 v
265.186 450.6597 265.019 447.8262 268.3525 446.8262 c
271.686 445.8262 273.1855 449.8262 273.3525 450.8262 c
275.5195 449.8262 277.186 451.8262 v
278.8525 453.8262 276.0195 456.6597 y
276.0195 462.1597 l
f299.5195 463.1597 m
296.3525 461.8262 294.8525 461.6597 v
293.3525 461.4932 289.019 459.6602 287.8525 456.9932 c
286.686 454.3262 288.8525 450.9932 292.8525 452.1597 c
296.8525 453.3262 297.6855 457.3262 298.3525 458.8262 c
299.0195 460.3262 299.5195 463.1597 y
f249.3525 471.9932 m
250.019 468.6592 249.8525 466.8262 v
249.686 464.9932 249.6855 460.6597 252.3525 458.1597 c
255.0195 455.6597 259.0195 457.1597 259.0195 459.6597 c
259.0195 462.1597 257.1855 465.6602 254.8525 467.4932 c
252.5195 469.3262 249.3525 471.9932 y
f235.686 456.3262 m
237.5195 454.6592 238.5195 453.3262 v
239.5195 451.9932 242.686 448.8267 247.186 447.9932 c
251.686 447.1597 253.5195 451.8262 250.5195 455.1597 c
247.5195 458.4932 242.0195 457.1597 240.686 457.1597 c
239.3525 457.1597 235.686 456.3262 y
f240.5195 439.9932 m
242.853 437.8262 244.0195 436.6597 v
245.186 435.4932 247.5195 433.4927 250.686 432.8262 c
253.8525 432.1597 258.019 434.9932 254.8525 438.6597 c
251.686 442.3262 247.5195 441.4927 245.0195 441.3262 c
242.5195 441.1597 240.5195 439.9932 y
f307.5195 451.4932 m
307.8525 448.3262 307.5195 446.1597 v
307.1865 443.9932 307.1855 438.4932 310.0195 435.9932 c
312.8535 433.4932 316.1855 436.3262 316.0195 439.6597 c
315.8535 442.9932 313.3535 446.9932 311.6865 448.4932 c
310.0195 449.9932 307.5195 451.4932 y
f316.3535 463.1597 m
316.5205 460.3267 316.3535 457.9932 v
316.1865 455.6597 316.6875 451.8262 318.8535 449.6597 c
321.0195 447.4932 325.3535 448.4932 324.6865 452.1597 c
324.0195 455.8262 323.1865 458.3262 320.6865 460.1597 c
318.1865 461.9932 316.3535 463.1597 y
f322.6865 474.1597 m
323.0195 471.4927 323.0195 470.3262 v
323.0195 469.1597 322.6875 464.6592 323.8535 461.3262 c
325.0195 457.9932 331.1855 457.3267 331.0195 462.4932 c
330.8535 467.6597 326.1865 471.6597 y
322.6865 474.1597 l
f330.8535 488.9932 m
330.5205 485.8267 330.3535 483.4932 v
330.1865 481.1597 330.3525 476.9932 333.5195 474.4932 c
336.6865 471.9932 339.5195 474.9927 338.6865 478.3262 c
337.8535 481.6597 335.6875 483.1592 334.3535 484.8262 c
333.0195 486.4932 330.8535 488.9932 y
f356.1865 497.1597 m
354.1865 495.9932 351.6865 494.1597 v
349.1865 492.3262 347.8525 488.4932 348.0195 485.6597 c
348.1865 482.8262 350.8535 481.8262 353.8535 483.3262 c
356.8535 484.8262 357.5205 488.3262 357.3535 491.6597 c
357.1865 494.9932 356.1865 497.1597 y
f358.8535 473.6597 m
355.0195 472.6597 353.1865 472.1597 v
351.3535 471.6597 348.1855 469.9932 348.0195 466.6597 c
347.8535 463.3262 350.8525 462.6592 353.5195 463.3262 c
356.1865 463.9932 357.8535 466.1602 358.6865 468.9932 c
359.5195 471.8262 358.8535 473.6597 y
f355.3535 456.1597 m
351.8535 456.4932 349.6865 456.4932 v
347.5195 456.4932 344.0195 455.4932 342.5195 453.1597 c
341.0195 450.8262 343.0205 445.8262 347.8535 447.1597 c
352.6865 448.4932 353.5195 451.9932 354.0195 453.4932 c
354.5195 454.9932 355.3535 456.1597 y
f350.5195 443.3262 m
346.6875 443.8262 344.8535 443.8262 v
343.0195 443.8262 338.1855 442.6592 336.5195 439.3262 c
334.8535 435.9932 337.3525 432.9932 341.0195 433.4932 c
344.6865 433.9932 346.5205 436.9932 347.8535 438.6597 c
349.1865 440.3262 350.5195 443.3262 y
f344.5195 430.4932 m
340.0195 430.8267 338.5195 430.9932 v
337.0195 431.1597 332.5205 431.3262 330.3535 428.1597 c
328.1865 424.9932 329.1855 421.8262 334.0195 422.1597 c
338.8535 422.4932 340.3525 425.6592 341.5195 426.8262 c
342.6865 427.9932 344.5195 430.4932 y
f228.186 393.4922 m
231.0195 394.1592 234.0195 393.1592 v
237.0195 392.1592 238.3525 389.3262 238.3525 387.3262 c
238.3525 385.3262 235.686 384.3252 232.686 385.4922 c
229.686 386.6592 228.3525 388.6592 y
228.186 393.4922 l
f269.3525 402.6592 m
268.8525 398.3262 269.8525 394.6592 v
270.8525 390.9922 273.853 388.6582 277.0195 389.9922 c
280.186 391.3262 278.6855 396.4922 276.3525 398.6592 c
274.0195 400.8262 269.3525 402.6592 y
f267.5195 389.4922 m
268.6865 386.3262 268.0195 383.1592 v
267.3525 379.9922 266.6865 377.8252 264.5195 377.4922 c
262.3525 377.1592 259.6865 380.3262 260.0195 383.6592 c
260.3525 386.9922 267.5195 389.4922 y
f294.186 364.3262 m
293.3525 361.8262 292.186 360.8262 v
291.0195 359.8262 287.8525 355.8262 288.3525 352.6592 c
288.8525 349.4922 292.519 348.3262 295.3525 351.1592 c
298.186 353.9922 296.8525 357.9922 295.8525 359.9922 c
294.8525 361.9922 294.186 364.3262 y
f309.6865 369.1592 m
308.8525 366.4922 308.0195 364.6592 v
307.1865 362.8262 305.5195 359.4922 306.5195 355.6592 c
307.5195 351.8262 314.0195 352.1602 314.1865 356.8262 c
314.3535 361.4922 312.5195 363.8262 311.5195 365.8262 c
310.5195 367.8262 309.6865 369.1592 y
f328.5195 373.8262 m
326.0195 370.9922 324.6865 369.6592 v
323.3535 368.3262 321.1865 364.9922 321.6865 361.9922 c
322.1865 358.9922 327.6855 356.3262 329.5195 362.3262 c
331.3535 368.3262 328.5195 373.8262 y
f354.3535 367.8262 m
351.3535 366.8262 348.3535 366.8262 v
345.3535 366.8262 340.6875 365.8262 339.8535 362.6592 c
339.0195 359.4922 341.4531 356.957 346.0195 357.8262 c
349.5195 358.4922 351.1875 362.3262 351.8535 363.3262 c
352.5195 364.3262 354.3535 367.8262 y
f345.3535 338.8262 m
342.5205 341.6602 340.8535 343.3262 v
338.0195 346.1592 332.1875 348.8262 329.8535 345.6592 c
327.5195 342.4922 330.3525 338.1582 336.0195 337.9922 c
341.6865 337.8262 344.1875 339.1602 345.3535 338.8262 c
f330.3535 331.4922 m
328.0195 333.4922 327.0195 334.9922 v
326.0195 336.4922 324.5205 339.1592 320.8535 340.6592 c
317.1865 342.1592 314.6865 339.9922 314.1865 338.6592 c
313.6865 337.3262 314.3535 333.9922 318.8535 332.1592 c
323.3535 330.3262 326.8535 332.1582 330.3535 331.4922 c
f314.5195 325.3262 m
312.1865 326.6582 310.6865 328.4922 v
309.1865 330.3262 307.1865 333.4922 303.0195 334.1592 c
298.8525 334.8262 296.353 330.6602 299.8535 327.8262 c
303.3535 324.9922 307.5195 324.9922 309.6865 324.9922 c
311.8535 324.9922 314.5195 325.3262 y
fU*u
1 D
0.65 0.53 0.51 1 k
238.1074 536.3682 m
232.2461 536.3682 227.4775 531.5996 227.4775 525.7383 C
227.4775 322.0801 L
227.4775 316.2188 232.2461 311.4502 238.1074 311.4502 C
355.2656 311.4502 L
361.127 311.4502 365.8955 316.2188 365.8955 322.0801 C
365.8955 525.7383 L
365.8955 531.5996 361.127 536.3682 355.2656 536.3682 C
238.1074 536.3682 L
f0 D
228.8945 322.0801 m
228.8945 525.7383 L
228.8945 530.8184 233.0273 534.9512 238.1074 534.9512 C
355.2656 534.9512 L
360.3457 534.9512 364.4775 530.8184 364.4775 525.7383 C
364.4775 322.0801 L
364.4775 317 360.3457 312.8682 355.2656 312.8682 C
238.1074 312.8682 L
233.0273 312.8682 228.8945 317 228.8945 322.0801 C
f*U
ULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
