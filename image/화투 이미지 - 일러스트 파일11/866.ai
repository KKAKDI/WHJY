%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (866.ai)
%%CreationDate: 3/25/2002 6:36 PM
%%BoundingBox: 220 331 374 570
%%HiResBoundingBox: 220.2759 331.4453 373.3477 569.5552
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 8882 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC684BF820F827F820F8
%27F820F827F820F827F820F827F820F827F826F827F826F827F826F827F8
%26F827F826F827F826F827F826F827F820F827F826F827F8F8F827F82620
%6FFD06FC99FFFD05FC27F8277D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7D
%A17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D
%7D7DA17D52F851F82750274B75F8277D7D7D52F8278CFD04FCC2FFFD04FC
%20F87DFD34FF7DF8514AF850F84AC6F826F8A8FD04FF2720FD04FCBBFFFC
%FCFC8CF87DFD33FF7D27F8279EF8262750C720279E267DFD05FFF84BFCFC
%FCC2FFFCFCFC4B27FD31FF7DCF51F84AF87427F8F84A75F8269EC6F87DFD
%05FF7DF8FCFCFCBBFFFCFCFC207DFD25FFA82727F8277DFF7D522751F827
%F8279EC7F8C674C79EC6747BC6C69EF8A8FD06FFF8FCFCFCC2FFFCFCFC20
%7DFD23FF7D52F84B747B26F8F8F82627F8279EF84AFD06C627269FC6C650
%2027FD07FFF8FCFCFCBCFFFCFCFC207DFD21FF7DF826F8F8F82750C69E27
%F89FC6C7F827F8FD07C67427F827F82752FD08FFF8FCFCFCC2FFFCFCFC27
%7DFD20FF76F827509EC69F26F8F84B9E4BF89FC64BF89EFD0AC6F8F87DFD
%09FFF8FCFCFC99FFFCFCFC207DFD1EFFA827F8274B27F82726759E7B20F8
%2627F8F8F89FFD08C69E27F8512627A8FD08FFF8FCFCFCC2FFFCFCFC277D
%FD1DFFA82720FD05C69E51FD05F84BF8F826FD0BC6745126F8F827FD08FF
%F8FCFCFCBBFFFCFCFCF87DFD1BFFA87C27F82720FD06F827F8279E75F827
%7AFD0FC67A27F8FD08FFF8FCFCFCC2FFFCFCFC207CFD19FF7DF8F8272651
%747B9E9E747B74F8F89EC627F87BFD07C6F8F8F84A9EC6C6C675F84B74F8
%27FD07FFF8FCFCFCBBFFFCFCFCF8A1FD19FF27F89F747B4A27F8F8F827F8
%F8F8274B27F8C7FD06C6BAB4FC27F827F8277AC6C67BF8272627FD07FFF8
%FCFCFCC2FFFCFCFC207DFD19FF5227F827F851525252FD04FF7D5227F8FD
%05C6C0BAFCFC4420F8FFFFFF27F84AC6C6C650F8F8A7FD06FFF8FCFCFCBC
%FFFCFCFC207DFD1DFF522027F8277CFD04FF7DF8C7C6C6C6C0B492684BF8
%2052FD05FF7DF850C6749F7AF827FD06FFF8FCFCFCC2FFFCFCFC277DFD19
%FFA1765127F827F8C62652FD04FFF851C6C6C6C068F8F8F8277DFD08FF7D
%F8504BF8264AF8A8FD05FFF8FCFCFC99FFFCFCFC207DFD19FF27F827F827
%A4F8C65151FFFFFF2727FD04C68C274BA8FD0CFF52279EC74A27F827FD05
%FFF8FCFCFCC2FFFCFCFC277DFD18FFA7F875F851F89FF8C6F87DFFFF4BF8
%9EC6C6C6BA4AF8FD0FFF2727C6C69E27F8FD05FFF8FCFCFCBBFFFCFCFCF8
%2727A8FD0CFFA87D7DFD06FFA827279E9F9E9F50277427FFFFA8F8507B7A
%C6C6BAF87DFD10FFF84B9E9F9E2751FD04FFF8FCFCFCC2FFFCFCFC204A27
%F8272727F82727512726F82727FD04F87DFFFF52F8F82774FD04C6F826F8
%52FFFF52F8C64A51C6C620F8FD11FFA8F84BF8F826F8A8FFFFFFF8FCFCFC
%BBFFFCFCFCF875C6A5F827517BF8272627F84B7427F89FC675F827F82750
%FD04C6A526F8F827F8FFFFFF5227FD04C66E277DFD12FF52F8C75027F852
%FFFFFFF8FCFCFCC2FFFCFCFCF8F875C6C64AF850C650F8507BF8279E26F8
%275051F84BFD05C64BF827688C44F8FD04FFF84B747520F852FD14FF2726
%C69E20F8FFFFFFF8FCFCFCBCFFFCFCFC2052F875C6C6742750C67A275027
%F8F8267B2627F875FD05C627F8926827F827F827FFFF7DF820F8F852A8FD
%0DFFA127F827262720FF7D2750C69E2727FFFFF8FCFCFCC2FFFCFCFC277D
%A7F827C6C674F8507B26F8207B4AF82651F89FFD05C627F8FC20F8209244
%4AF8A8FF52F82751FD0DFF5227F8F820F820F844F8FFFF7DF8F85174F827
%FFF8FCFCFC99FFFCFCFC207DFFA8F827F82726F8F827F8F84AC79E27F89F
%FD05C675F8B5F8276827F827202727FF5227F8FD0DFF52F8F8F844272027
%20FCF8FD04FF7CFD04F87DF8FCFCFCC2FFFCFCFC277DFFFFFFF8F84A51F8
%F850C69E26F8F826FD07C62020F8F820F820FC8C6E44F8A8A7F851FD0CFF
%52F868272020F82720FC8CF8FD07FFA87DA8F8FCFCFCBBFFFCFCFCF87DFD
%04FF4BF84AC650F8F827F8279EFD0AC6C726F8206FF8202027F852FF2752
%FD0BFF5227684BF84BF84BF8B4FC2720FD0AFFF8FCFCFCC2FFFCFCFC207C
%FFFFA84B27FD06F84AFD07C69E2774FD05C69E26F8268CFCFC8CF8FD0BFF
%A87D27F868FC208C444BF88CFC27F84BFD0AFFF8FCFCFCBBFFFCFCFCF8A1
%FF52F827517B749FFD0BC6C74B27F89FFD05C627F86F2027F8277DFD08FF
%7D20F8F84B68FD05FC8C6F8C27F82727FD0AFFF8FCFCFCC2FFFCFCFC207D
%4BF89EFD13C626F84B9EFD04C626F84B686EF820FFA826FD04F820F84A8C
%FD0AFC8C20FCF8A7FD0AFFF8FCFCFCBCFFFCFCFC207DF8A5C69FFD05C67B
%4A5150C7FD05C69F4A27F87DF8279EC6C6C69E27FD05F851F8517AA526F8
%F8B4FD0EFC2027FD0BFFF8FCFCFCC2FFFCFCFC275126C64BF8C6C6C674F8
%F84B2727F8F8F826F8F8F82752FFFFFF26F874C6C6C674F8688C20F8F827
%2627F8F8F8FD08FC8C2026204A686FF8F8A8FD0BFFF8FCFCFC99FFFCFCFC
%2051F8C6C6A5C6C674F827FD05FF7D7D7DA1A8FD07FF27279EC6C6C64A27
%F827749F2620F82720FD06FC932027F827444BF8272052A8FD0CFFF8FCFC
%FCC2FFFCFCFC27F82626C6C6C626F852FD13FF27209E27FD05F82620F820
%2020FD06FC20F8F8F820F827204AF8A8FD0EFFF8FCFCFCBBFFFCFCFCF827
%27F8F827F8277DFD14FFA8F8F8F85174C6C6C726FD04F8B4FD08FC8C6FF8
%27684B20F827FD0EFFF8FCFCFCC2FFFCFCFCF8F8277DA87CFD16FF51F827
%264B2026F826F8F8684AF8FD09FC2020F827F8F8F82620F8F8FD0DFFF8FC
%FCFCBBFFFCFCFCF827FD18FF5227F82720274A757A27F82720F8F893FD09
%FC9368934420F86F684BF82152FD0CFFF8FCFCFCC2FFFCFCFCF827FD16FF
%52F8274A7B747B5027FD06F820FD07FCF8202092FCFCFC27F820F827F820
%20F827FD0BFFF8FCFCFCBCFFFCFCFC207DFD15FF52F826F82726512627F8
%272027F82068FD09FC6827F82768FC686F20F8F86F4427F8F8A8FD0AFFF8
%FCFCFCC2FFFCFCFC277DFD15FFFD047D7C5227FD04F84A68FD0CFC4BF87D
%27F820FD04FC4AF86EFC8CF820A8FD09FFF8FCFCFC99FFFCFCFC207DFD1B
%FFA8F8278CFD0CFCB44427F8A8FFFF7D272093F827204BF86F68932027FD
%09FFF8FCFCFCC2FFFCFCFC277DFD1BFF202068278CFD05FC8C6F444A2027
%F82752FD05FFA8F820FC6826F8F8F820F8F8F852FD08FFF8FCFCFCBBFFFC
%FCFCF87DFD1BFFF868FC44FD04FCB420F8F8274B527DFD09FF7DF820FC68
%6F442020FC6827F84BA8FD06FFF8FCFCFCC2FFFCFCFC207CFD1BFFF86EFD
%04FC8C4AF82752FD0FFF7DF8204BFD04F82068686EF8F8A8FD05FFF8FCFC
%FCBBFFFCFCFCF8A1FD1AFFA827F827686F20F8F87DFD12FFA827F86FFC93
%20F8F827F8F8F827A8FD04FFF8FCFCFCC2FFFCFCFC207DFD1AFF522752F8
%27F8527DFD16FF52F820206F2020FCFC6826F827A8FFFFFFF8FCFCFCBCFF
%FCFCFC207DFD1AFF4B52F87DFD1CFF5227F827F8F8F827206F202752FFFF
%F8FCFCFCC2FFFCFCFC277DFD1AFF52F8F8FD23FF7D5227F820F8F87DFFF8
%FCFCFC99FFFCFCFC207DFD1AFFA8F827FD27FF5227F84BFFF8FCFCFCC2FF
%FCFCFC277DFD1BFF277DFD29FF767DFFF8FCFCFCBBFFFCFCFCF87DFD49FF
%F8FCFCFCC2FFFCFCFC207CFD49FFF8FCFCFCBBFFFCFCFCF8A1FD49FFF8FC
%FCFCC2FFFCFCFC207DFD49FFF8FCFCFCBCFFFCFCFC207DFD49FFF8FCFCFC
%C2FFFCFCFC277DFD49FFF8FCFCFC99FFFCFCFC207D7DA1525227522727F8
%272727F8272727F82727522752527D7DA8FD2FFFF8FCFCFCC2FFFCFCFC27
%FD1DF827275252A7FD28FFF8FCFCFCBBFFFCFCFCFD25F85252A8FD23FFF8
%FCFCFCC2FFFCFCFCFD29F8277DA8FD1FFFF8FCFCFCBBFFFCFCFCFD2CF827
%7DA8FD1CFFF8FCFCFCC2FFFCFCFC20FD2EF82752FD1AFFF8FCFCFCBCFFFC
%FCFCFD33F8FD0427527DA8FD11FFF8FCFCFCC2FFFCFCFC20FD3BF827277D
%A8FD0BFFF8FCFCFC99FFFCFCFCFD41F85276FD08FFF8FCFCFCC2FFFCFCFC
%27FD43F82752FD05FFF8FCFCFCBBFFFCFCFCFD47F82752FFFFF8FCFCFCC2
%FFFCFCFCFD4AF876F8FCFCFCBBFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD
%4BF8FCFCFCBCFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8FCFCFC99FF
%FCFCFCFD4CF8FCFCFCC2FFFCFCFC27FD4BF8FCFCFCBBFFFCFCFCFD4CF8FC
%FCFCC2FFFCFCFCFD4CF8FCFCFCBBFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20
%FD4BF8FCFCFCBCFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8FCFCFC99
%FFFCFCFCFD4CF8FCFCFCC2FFFCFCFC27FD4BF8FCFCFCBBFFFCFCFCFD4CF8
%FCFCFCC2FFFCFCFCFD4CF8FCFCFCBBFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC
%20FD4BF8FCFCFCBCFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8FCFCFC
%99FFFCFCFCFD4CF8FCFCFCC2FFFCFCFC27FD4BF8FCFCFCBBFFFCFCFCFD4C
%F8FCFCFCC2FFFCFCFCFD4CF8FCFCFCBBFFFCFCFCFD4CF8FCFCFCC2FFFCFC
%FC20FD4BF8FCFCFCBCFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8FCFC
%FC99FFFCFCFCFD4CF8FCFCFCC2FFFCFCFC27FD4BF8FCFCFCBBFFFCFCFCFD
%4CF8FCFCFCC2FFFCFCFCFD4CF8FCFCFCBBFFFCFCFCFD4CF8FCFCFCC2FFFC
%FCFC20FD4BF8FCFCFCBCFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8FC
%FCFC99FFFCFCFCFD4CF8FCFCFCC2FFFCFCFC27FD4BF8FCFCFCBBFFFCFCFC
%FD4CF8FCFCFCC2FFFCFCFCFD4CF8FCFCFCBBFFFCFCFCFD4CF8FCFCFCC2FF
%FCFCFC20FD4BF8FCFCFCBCFFFCFCFCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8
%FCFCFC99FFFCFCFCFD4CF8FCFCFCC2FFFCFCFC27FD4BF8FCFCFCBBFFFCFC
%FCFD4CF8FCFCFCC2FFFCFCFC20FD4BF8FCFCFCBBFFFCFCFC44FD4BF8FCFC
%FCC2FFFCFCFC8CFD4AF820FCFCFCBCFFFD04FC4BFD49F8FD04FCC2FFFD05
%FC4AFD47F8FD05FC99FFFD06FC932027F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F82768FD06FCC2FFFD52
%FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
373.3477 331.4453 m
220.2759 331.4453 L
220.2759 569.5552 L
373.3477 569.5552 L
373.3477 331.4453 L
fu0 0 0 0 k
227.3901 554 m
227.3901 454.25 l
236.6401 442.75 l
263.6401 438.25 l
336.6396 429 l
366.6396 433.75 l
366.3896 553.5 l
365.8896 562.5 356.8896 562.75 v
236.6401 562.5 l
229.8901 564.25 227.3901 554 v
f0 1 1 0 k
300.2646 521.75 m
302.3896 520 306.5146 521.375 v
310.6396 522.75 312.2646 526.625 312.8896 528 c
313.5146 529.375 314.2646 532.375 317.1396 533.375 c
320.0146 534.375 321.6396 533.75 325.2646 535.25 c
328.8896 536.75 331.1396 539.875 y
327.2646 542.5 l
321.1396 542 l
311.1396 537.625 l
306.1396 531.125 l
300.2646 521.75 l
f0 0.2 1 0 k
229.7651 502.125 m
229.2651 506.5 233.7651 508.875 v
238.2651 511.25 242.6401 510.625 y
237.2651 514.75 236.1401 515.5 v
235.0151 516.25 227.2651 522.875 y
227.7651 527.125 l
229.5151 527.875 235.0151 524.625 v
238.1401 526.625 242.6401 524.375 v
244.8901 525.75 247.7651 524.625 v
250.3901 527.25 255.7651 524.5 v
256.1401 526.375 258.3901 526.625 v
260.6401 526.875 266.3901 522.625 y
270.3901 526.5 275.8901 526.625 v
277.2651 531.25 277.6401 531.875 v
278.0151 532.5 279.0151 532.375 279.5151 531.625 c
280.5151 535 283.3901 531.875 v
285.8901 538.125 287.7651 533.375 v
288.5151 536.625 291.2651 536 v
294.0151 535.375 292.5151 527.5 289.1401 524.25 c
287.3901 524.625 285.0151 524.125 v
282.6401 523.625 276.5151 520.25 274.1401 515.5 c
285.2651 514.25 291.7651 500.625 v
293.0151 500.375 l
293.7651 503 298.3901 503.125 v
300.3896 506.625 305.5146 507.25 v
310.6396 507.875 312.2646 506.5 y
309.5146 504.875 l
305.7646 503.375 303.7646 501.625 v
301.7646 499.875 294.7651 494.875 293.2651 493.875 c
291.7651 492.875 284.6401 490.25 y
284.0151 489.25 l
278.3901 489.875 275.7651 490 v
273.1401 490.125 271.1401 490.125 y
272.1401 492.875 278.2651 493.875 v
279.8901 496.5 283.8901 497.25 v
278.7651 504.375 273.2651 507.25 v
268.0151 503.5 262.6401 503 v
257.2651 502.5 252.8901 504 252.0151 504.25 c
251.1401 504.5 248.3901 504.625 246.6401 503.875 c
244.8901 503.125 242.2651 499.875 239.5151 498.625 c
236.7651 497.375 230.3901 497.5 229.7651 502.125 c
f327.0146 540.25 m
321.1396 538 316.6396 536.25 v
312.1396 534.5 311.0146 532.375 310.3896 529.5 c
309.7646 526.625 307.2646 520.875 302.1396 521.375 c
297.0151 521.875 298.5151 526.75 300.5146 529.375 c
302.5146 532 306.0146 536.625 306.2646 537.5 c
302.5146 538.125 300.8896 538.375 v
299.2646 538.625 296.8901 539.625 294.5151 539.25 c
292.1401 538.875 286.8901 537.75 283.5151 537.5 c
280.1401 537.25 278.8901 537.5 277.7651 538.375 c
276.6401 539.25 277.6401 539.875 279.0151 540.625 c
280.3901 541.375 285.3901 542 y
286.5151 546.125 291.3901 547.125 v
292.6401 551.25 298.6401 550.5 v
299.6396 552.75 303.2646 553.5 v
306.8896 554.25 310.6396 551 y
311.3896 554.625 317.8896 552.375 v
320.2646 555.875 324.3896 553 v
326.8896 557.625 332.1396 557.875 v
333.3896 561.5 336.2646 562.375 v
349.5146 562.625 l
352.2646 560.875 351.8896 556.25 v
351.5146 551.625 347.3896 549.75 344.3896 549.5 c
348.1396 546 349.8896 541 v
351.5146 538.375 352.0146 535.25 v
354.7646 532.375 355.1396 528.625 v
357.3896 525.5 358.2646 522.125 v
361.7646 518 362.2646 516.5 v
359.7646 516.25 356.3896 517.25 v
353.0146 518.25 349.8896 521.5 348.6396 524.125 c
347.3896 526.75 342.3896 534.5 338.6396 536.875 c
334.8896 539.25 328.5146 541.25 327.0146 540.25 c
f0 1 1 0 k
283.5151 489.125 m
285.3901 488.5 l
282.2651 487.25 281.1401 484.5 v
280.0151 481.75 281.8901 478.25 285.1401 477.875 c
288.3901 477.5 292.6401 479.375 295.0151 480.625 c
297.3901 481.875 300.7646 483.625 302.1396 483.75 c
303.5146 483.875 313.6396 483.625 319.5146 490.875 c
324.0146 489.25 326.3896 486.625 v
328.7646 484 331.7646 480.5 336.0146 478.125 c
340.2646 475.75 347.1396 475.625 349.5146 475.375 c
351.8896 475.125 353.5146 474.625 355.6396 473.625 c
357.7646 472.625 361.8896 471.125 y
362.1396 472.125 362.1396 472.75 v
362.1396 473.375 355.8896 477.375 355.5146 477.625 c
355.1396 477.875 353.7646 481.5 348.2646 483.875 c
347.3896 487.5 344.1396 489.5 v
343.8896 491.875 340.3896 494.25 v
338.7646 496.75 337.1396 498 v
337.5146 500.125 334.8896 502.25 v
345.2646 500.125 344.7646 512 v
345.8896 512.25 346.0146 516.375 v
346.1396 520.5 344.7646 520.5 344.0146 520.375 c
343.2646 520.25 342.8896 519.375 y
341.6396 520.375 338.8896 519.75 v
337.2646 521.25 334.2646 518.375 v
330.7646 518.75 328.3896 516.375 v
326.0146 514 322.6396 510.25 y
315.8896 509.25 313.1396 507.125 v
310.3896 505 308.3896 504.375 y
303.5146 502.375 302.0146 500.5 v
300.5146 498.625 296.2651 495.5 292.2651 493.625 c
288.2651 491.75 284.2651 490 y
283.5151 489.125 l
f274.1401 515.5 m
286.3901 513.25 292.1401 500.375 v
293.0151 500.375 l
294.6401 502.625 297.8901 503.375 v
297.5151 504.625 l
297.7651 507 295.8901 508.625 v
296.3901 510.75 294.1401 512.875 v
294.5151 515 292.8901 516.5 v
293.0151 518.625 290.2651 520.375 v
290.2651 521.875 289.8901 523.125 v
289.5151 524.375 286.7651 524.25 y
278.7651 523 274.1401 515.5 v
f*u
1 D
0.65 0.53 0.51 1 k
237.3115 563.2085 m
231.4502 563.2085 226.6816 558.4399 226.6816 552.5786 C
226.6816 348.4199 L
226.6816 342.5586 231.4502 337.791 237.3115 337.791 C
356.4688 337.791 L
362.3301 337.791 367.0986 342.5586 367.0986 348.4199 C
367.0986 552.5786 L
367.0986 558.4399 362.3301 563.2085 356.4688 563.2085 C
237.3115 563.2085 L
f0 D
228.0986 348.4199 m
228.0986 552.5786 L
228.0986 557.6587 232.2314 561.7915 237.3115 561.7915 C
356.4688 561.7915 L
361.5488 561.7915 365.6807 557.6587 365.6807 552.5786 C
365.6807 348.4199 L
365.6807 343.3398 361.5488 339.209 356.4688 339.209 C
237.3115 339.209 L
232.2314 339.209 228.0986 343.3398 228.0986 348.4199 C
f*U
277.0234 532.3003 m
275.9644 531.0908 275.3325 528.2397 275.1118 527.0889 C
268.5874 525.8398 265.1313 522.4731 262.3604 519.7407 c
261.4688 518.8618 260.6265 518.0313 259.7939 517.397 c
256.3799 514.7959 249.4756 512.3374 246.5698 511.6919 c
245.5498 511.4648 244.1323 511.3984 242.6323 511.3276 c
239.7832 511.1934 236.5542 511.041 234.0732 509.8003 c
231.0005 508.2637 229.2891 505.8115 229.2891 503.2256 c
229.2891 502.332 229.4932 501.4229 229.916 500.5303 c
231.4282 497.3379 234.7573 496.1094 238.6035 497.3242 c
240.9424 498.063 242.9238 499.8911 244.3701 501.2261 C
245.9497 502.5767 L
247.3208 503.4912 250.2773 504.0752 252.1816 503.4893 c
256.1494 502.2676 260.29 502.0425 264.8403 502.8008 c
271.0059 503.8286 273.6318 506.5659 273.7407 506.6816 C
272.7085 507.6533 L
272.6851 507.6284 270.2578 505.1406 264.6069 504.1992 c
260.2788 503.4775 256.3511 503.6885 252.5986 504.8438 c
250.2236 505.5747 246.8364 504.8716 245.1636 503.7563 C
243.4092 502.2676 L
241.9858 500.9541 240.2139 499.3193 238.1768 498.6758 c
235.0103 497.6758 232.4014 498.5962 231.1973 501.1367 c
229.9048 503.8643 231.3154 506.8369 234.707 508.5327 c
236.9199 509.6392 239.9902 509.7842 242.6987 509.9116 c
244.2617 509.9854 245.7383 510.0552 246.8774 510.3081 c
249.7148 510.9385 256.9009 513.4111 260.6528 516.2695 c
261.5571 516.9585 262.4307 517.8198 263.3555 518.7314 c
266.0576 521.3955 269.4199 524.7109 275.8423 525.8013 C
276.3394 525.8857 L
276.4224 526.3833 L
276.5991 527.4414 277.2427 530.3994 278.0898 531.3667 c
278.3291 531.6401 278.4688 531.5879 278.5278 531.5654 c
279.0068 531.3853 279.6816 530.2119 279.6816 528.1665 C
281.0986 528.1665 L
281.0986 530.564 280.2856 532.4189 279.0269 532.8921 c
278.3164 533.1592 277.5854 532.9438 277.0234 532.3003 c
f279.0786 531.627 m
280.3672 531.0366 L
280.3926 531.0908 280.998 532.356 282.0845 532.1387 c
282.813 531.9927 283.2866 529.9146 283.3486 528.4702 C
284.7646 528.5293 L
284.7329 529.29 284.4683 533.1069 282.3628 533.5283 c
280.6084 533.8794 279.4473 532.438 279.0786 531.627 C
f286.165 535.5396 m
283.6675 535.332 282.895 531.7964 282.8633 531.646 C
284.25 531.3525 L
284.2554 531.3794 284.8574 534.0088 286.2822 534.1274 c
286.4858 534.144 286.6675 533.9233 286.7842 533.7349 c
287.6333 532.3623 287.7065 528.4741 285.6177 525.0342 C
286.8296 524.2988 L
289.1118 528.0571 289.2085 532.5103 287.9897 534.4805 c
287.3696 535.4824 286.5801 535.5742 286.165 535.5396 c
f266.6904 509.8203 m
266.7847 509.7925 276.2056 506.9238 282.8052 497.2666 C
283.9751 498.0664 L
277.0781 508.1592 267.4941 511.0615 267.0894 511.1802 C
266.6904 509.8203 L
f288.2109 525.042 m
278.5801 524.8701 273.4829 515.8926 273.2705 515.5107 C
272.7061 514.4946 L
273.8682 514.458 L
283.9883 514.1416 291.188 500.3164 291.2593 500.1768 C
292.521 500.8228 L
292.2251 501.4009 285.3989 514.4609 275.1143 515.7441 C
276.6128 517.9253 281.0811 523.4375 288.146 523.6128 C
288.3921 523.5313 289.2036 523.2192 289.5366 522.5176 c
289.6284 522.3232 289.6743 522.1089 289.6743 521.8745 c
289.6743 521.5488 289.5859 521.1855 289.4092 520.7876 C
290.7041 520.2124 L
291.186 521.2969 291.2222 522.2808 290.811 523.1372 c
290.1333 524.5493 288.4741 525.0005 288.4038 525.0186 C
288.3091 525.0439 L
288.2109 525.042 L
f285.7935 520.9912 m
281.5532 519.2959 277.0962 515.1938 276.9087 515.02 C
277.8716 513.98 L
277.9155 514.021 282.3262 518.0781 286.3198 519.6753 c
288.5103 520.5513 290.3169 519.7485 291.2773 518.7041 c
291.8828 518.0464 291.998 517.4668 291.9229 517.3169 C
293.1904 516.6831 L
293.5908 517.4844 293.25 518.6548 292.3203 519.6641 c
291.04 521.0557 288.6528 522.1348 285.7935 520.9912 c
f289.1577 518.0391 m
283.5845 517.5166 280.4624 513.603 280.332 513.4365 C
281.4473 512.562 L
281.4756 512.5981 284.3428 516.1641 289.2896 516.6279 c
290.7144 516.7617 291.8276 516.4756 292.5986 515.7783 c
293.8208 514.6733 293.8477 512.8491 293.8481 512.8311 C
295.2651 512.8335 L
295.2651 512.9326 295.2461 515.2847 293.561 516.8188 c
292.4819 517.8013 291.0005 518.2119 289.1577 518.0391 c
f290.6694 514.2065 m
286.0693 513.8525 283.9126 511.0444 283.8232 510.9253 C
284.9551 510.0723 L
285.0303 510.1709 286.8457 512.4907 290.7778 512.7935 c
292.9404 512.96 294.3628 511.7607 294.9727 510.5825 c
295.3359 509.8818 295.3032 509.3818 295.2285 509.292 C
295.2397 509.3003 L
295.8735 508.0327 L
296.6035 508.3979 296.8711 509.2974 296.5708 510.3809 c
296.0083 512.4126 293.7485 514.4434 290.6694 514.2065 c
f287.1074 507.9834 m
287.6724 506.6836 L
287.7095 506.6997 291.3945 508.2817 294.353 508.126 c
295.6016 508.0601 296.1948 507.3408 296.4727 506.749 c
296.8354 505.9771 296.7549 505.2192 296.6406 505.0659 C
296.6919 505.1074 L
297.4214 503.8926 L
298.1895 504.3535 298.2817 505.5698 298.0327 506.5713 c
297.6934 507.9331 296.5684 509.4282 294.4272 509.541 c
291.1323 509.7148 287.2705 508.0542 287.1074 507.9834 C
f328.0801 516.8579 m
326.4131 515.3428 322.96 511.6416 322.208 510.832 C
321.1318 510.6699 316.6836 509.8999 313.1885 507.772 c
309.2861 505.396 303.0625 497.8804 302.1221 496.3755 c
301.4277 495.2642 297.4951 492.5044 295.6479 491.8325 c
295.061 491.6191 293.8975 491.3701 292.5503 491.082 c
289.8042 490.4946 286.3867 489.7637 284.2266 488.627 c
282.1831 487.5518 280.6885 485.7212 280.229 483.7305 c
280.1353 483.3242 280.0889 482.9209 280.0889 482.5264 c
280.0889 481.5127 280.3936 480.5542 280.9854 479.7476 c
282.7729 477.3091 286.0688 476.7305 291.062 477.979 c
293.0571 478.4775 294.8428 479.5728 296.5703 480.6318 c
298.3892 481.7476 300.1074 482.8008 301.79 482.9609 C
302.9238 483.0381 L
304.6143 483.1318 306.9277 483.2607 311.4092 484.4829 c
317.1123 486.0381 319.3975 489.6406 319.4922 489.7935 C
318.2881 490.5415 L
318.2676 490.5088 316.1719 487.251 311.0361 485.8501 c
306.6992 484.6675 304.4727 484.5435 302.8457 484.4531 C
301.6563 484.3721 L
299.6455 484.1807 297.7925 483.0439 295.8291 481.8403 c
294.1934 480.8369 292.502 479.7998 290.7183 479.354 c
286.3467 478.2612 283.5371 478.6641 282.1279 480.5854 c
281.3921 481.5894 281.4399 482.6763 281.6099 483.4116 c
281.9722 484.9824 283.228 486.5 284.8867 487.373 c
286.874 488.4189 290.3262 489.1572 292.8467 489.6963 c
294.3032 490.0073 295.4536 490.2534 296.1323 490.5005 c
297.939 491.1577 302.3389 494.0474 303.3242 495.6245 c
304.1982 497.0239 310.2705 504.3364 313.9248 506.561 c
317.5801 508.7861 322.5977 509.457 322.6475 509.4639 C
322.9023 509.4966 L
323.0762 509.6851 L
323.1182 509.73 327.2441 514.1821 329.0332 515.8091 c
330.6143 517.2466 332.8779 517.9351 334.5361 517.4829 C
334.9092 518.8501 L
332.7754 519.4321 330.0303 518.6313 328.0801 516.8579 c
f333.8213 518.6416 m
333.0557 517.8345 L
331.6826 516.4614 328.5889 511.5859 328.458 511.3794 C
329.6553 510.6206 L
329.6865 510.6699 332.7949 515.5693 334.0576 516.8325 C
334.8623 517.6792 L
335.7451 518.6333 336.5068 519.458 337.3896 519.458 c
338.5537 519.458 339.2002 518.8525 339.2275 518.8271 C
340.2236 519.8345 L
340.1816 519.877 339.1631 520.875 337.3896 520.875 c
335.8877 520.875 334.8369 519.7397 333.8213 518.6416 C
f340.6807 520.7285 m
339.3916 520.6553 337.75 520.0288 337.3691 518.5054 c
337.0391 517.1831 334.1338 513.8086 332.3799 511.9922 C
333.3994 511.0078 L
333.8906 511.5166 338.2139 516.0391 338.7441 518.1616 c
338.9248 518.8843 339.916 519.2656 340.7617 519.3135 c
341.5908 519.3608 342.1543 519.1094 342.2266 518.9175 C
343.5527 519.4155 L
343.2236 520.2939 342.0957 520.8096 340.6807 520.7285 c
f341.1074 518.0181 m
340.6416 517.2036 337.209 513.0503 335.0156 510.4575 C
336.0977 509.5425 L
336.665 510.2124 341.6582 516.126 342.3379 517.3149 c
343.7695 519.8198 344.3809 519.8633 344.4072 519.8638 C
344.8203 519.6538 345.3525 518.5034 345.3525 516.7959 c
345.3525 516.2866 345.3057 515.7285 345.1934 515.1309 c
344.7656 512.8511 341.4531 509.4932 338.8887 508.125 C
339.5557 506.8745 L
342.0684 508.2144 346.0166 511.8325 346.5859 514.8691 c
347.1143 517.6846 346.4346 520.4365 345.04 521.1338 c
343.3662 521.9707 341.7832 519.2007 341.1074 518.0181 c
f313.4424 491.8008 m
313.5215 491.7876 321.4326 490.4463 325.7129 486.0083 C
327.1055 484.5537 L
330.7988 480.6836 333.0283 478.3477 337.626 476.5088 c
340.583 475.3257 344.1543 475.0488 347.3057 474.8042 c
349.5381 474.6309 351.6465 474.4673 352.9883 473.9976 c
356.0654 472.9214 360.082 470.9463 361.2393 470.3662 c
361.7734 470.0991 362.3809 470.3052 362.7158 470.8687 c
363.1729 471.6353 363.1387 473.1904 361.6289 474.2471 C
360.9453 474.7637 L
358.5332 476.6304 352.125 481.5889 343.9385 480.1987 C
344.1748 478.8013 L
351.749 480.0874 357.7998 475.4053 360.0781 473.6426 C
360.8164 473.0859 L
361.377 472.6934 361.5156 472.2617 361.5488 472.0391 c
361.5566 471.9858 361.5596 471.9365 361.5596 471.8906 c
361.5596 471.8423 361.5459 471.8379 361.54 471.7993 C
360.0732 472.5269 356.3809 474.312 353.457 475.3354 c
351.9404 475.8662 349.8428 476.0288 347.415 476.2173 c
344.3652 476.4536 340.9092 476.7222 338.1533 477.8242 c
333.8408 479.5493 331.6914 481.8013 328.1309 485.5322 C
326.7324 486.9917 L
322.1221 491.7729 314.0137 493.1436 313.6709 493.1992 C
313.4424 491.8008 L
f339.2021 486.2085 m
339.2432 484.7915 L
350.3301 485.1084 355.2344 477.2139 355.2822 477.1343 C
356.4971 477.8647 L
356.2842 478.2192 351.1455 486.5498 339.2021 486.2085 C
f332.9775 492.5376 m
333.1357 491.1294 L
344.2695 492.3838 347.916 483.7676 348.0654 483.4004 C
349.3799 483.9316 L
349.3398 484.0317 345.2051 493.9155 332.9775 492.5376 C
f329.4932 496.3721 m
329.6201 494.9609 L
341.8184 496.0552 343.9551 489.1045 344.04 488.8081 C
345.4053 489.189 L
345.3105 489.5322 342.9277 497.5776 329.4932 496.3721 C
f326.999 499.873 m
327.1143 498.46 L
338.5527 499.3877 339.6504 494.1055 339.6914 493.8799 C
341.0889 494.1133 L
341.0439 494.3916 339.8379 500.9136 326.999 499.873 C
f344.0273 511.6963 m
344.0352 511.6577 344.7451 507.8398 342.207 505.1528 c
339.623 502.4165 336.3848 502.7114 334.6455 502.8701 c
332.918 503.0273 331.335 503.6519 331.3193 503.6582 C
331.0566 503.7627 L
330.7939 503.6582 L
330.7529 503.6416 326.6455 502.0146 321.96 501.3687 C
322.1533 499.9644 L
326.3955 500.5493 330.0752 501.8687 331.0625 502.2427 C
331.5967 502.0493 332.957 501.6006 334.4922 501.4609 c
336.3545 501.291 340.1816 500.9429 343.2383 504.1797 c
346.2871 507.4092 345.4541 511.7876 345.418 511.9727 C
344.0273 511.6963 L
f333.7051 501.3848 m
336.6553 499.6987 336.5225 498.1128 336.5205 498.0972 C
337.9219 497.8833 L
337.9639 498.1377 338.2266 500.4331 334.4082 502.6152 C
333.7051 501.3848 L
f334.3799 482.2085 m
334.3994 480.7915 L
340.1816 480.8726 342.8584 479.4375 344.0859 478.2188 c
345.3428 476.9717 345.3486 475.731 345.3477 475.6787 C
346.7646 475.647 L
346.7666 475.7212 346.7959 477.4897 345.1338 479.1753 c
343.0781 481.2593 339.46 482.2803 334.3799 482.2085 C
f329.6494 486.1289 m
340.1738 485.0293 342.3779 479.9531 342.3994 479.9019 C
343.7158 480.4263 L
343.6211 480.6675 341.2588 486.3408 329.7959 487.5381 C
329.6494 486.1289 L
f326.3691 491.2915 m
336.9551 490.98 338.4697 484.4658 338.5293 484.1885 C
339.917 484.4756 L
339.8506 484.7974 338.1689 492.3623 326.4102 492.7085 C
326.3691 491.2915 L
f322.0352 495.125 m
332.1816 494.8179 333.0146 490.4404 333.0215 490.3965 C
334.4248 490.5938 L
334.3945 490.8223 333.5479 496.1943 322.0781 496.542 C
322.0352 495.125 L
f319.6621 500.3726 m
319.7832 498.9604 L
328.6074 499.7207 329.4883 494.4585 329.5205 494.2344 C
330.9248 494.4287 L
330.916 494.4971 329.8818 501.2534 319.6621 500.3726 C
f269.9717 490.5664 m
269.1621 489.3838 L
270.5938 489.459 L
276.7646 489.7832 285.9946 487.9893 286.0869 487.9712 C
286.3604 489.3618 L
286.0127 489.4302 278.5508 490.876 272.4316 490.9102 C
274.5679 492.397 279.6436 494.499 289.7075 491.8154 C
290.0728 493.1846 L
274.7642 497.2671 270.1602 490.8423 269.9717 490.5664 C
f299.7539 499.25 m
298.5215 498.1968 297.3579 497.2021 296.1694 496.4272 c
292.4399 493.9946 282.8916 490.1968 282.7954 490.1587 C
283.3179 488.8413 L
283.7153 488.999 293.0947 492.73 296.9438 495.2397 c
298.209 496.0649 299.4063 497.0889 300.6738 498.1724 c
303.2959 500.4131 306.2676 502.9531 310.7861 504.4961 C
310.3271 505.8369 L
305.5527 504.2065 302.4717 501.5732 299.7539 499.25 c
f277.3032 494.2305 m
278.4746 493.4326 L
278.6357 493.6641 282.5557 499.0454 294.6328 494.3398 C
295.1475 495.6602 L
281.939 500.8066 277.4858 494.502 277.3032 494.2305 C
f283.167 497.4385 m
284.2778 496.5581 L
284.4453 496.7656 288.5122 501.604 299.502 497.9932 C
299.9443 499.3398 L
287.9453 503.2822 283.3569 497.6792 283.167 497.4385 C
f291.2944 500.2178 m
292.4839 499.4463 L
292.6099 499.6377 295.6714 504.1074 303.6699 501.4932 C
304.1094 502.8398 L
295.0283 505.8086 291.4429 500.4473 291.2944 500.2178 C
f297.6963 503.6396 m
298.7505 502.6924 L
298.9761 502.9424 304.375 508.7876 312.1377 505.8374 C
312.6416 507.1626 L
303.9551 510.4634 297.7578 503.7085 297.6963 503.6396 C
f289.1025 505.314 m
289.6772 504.0186 L
289.9009 504.1172 295.1914 506.396 297.8149 502.7524 C
298.9653 503.5806 L
296.3262 507.2461 291.3599 506.3174 289.1025 505.314 C
f296.3501 495.1558 m
296.3652 495.1509 297.8613 494.6763 299.1963 493.1924 C
300.25 494.1406 L
298.6362 495.9341 296.8364 496.4893 296.7603 496.5122 C
296.3501 495.1558 L
f300.6055 498.1348 m
300.625 498.1313 302.4609 497.8154 303.4785 497.0898 C
304.3008 498.2432 L
303.0156 499.1611 300.9277 499.5176 300.8398 499.5322 C
300.6055 498.1348 L
f291.1572 492.3306 m
292.9907 491.6929 295.103 490.8711 295.4648 490.5996 C
296.3154 491.7334 L
295.5972 492.2725 292.2808 493.4404 291.623 493.6694 C
291.1572 492.3306 L
f280.793 470.6187 m
281.6172 469.3281 L
283.396 475.1094 L
283.9434 476.7524 285.2681 477.3203 285.3242 477.3438 C
284.7935 478.6582 L
284.7129 478.626 282.813 477.8433 282.0513 475.5576 C
281.6006 474.0923 281.2061 472.8115 V
280.6528 474.0088 280.4385 475.0537 280.4385 475.936 c
280.4385 478.3062 281.9063 479.5376 281.9995 479.6133 C
281.1167 480.7222 L
281.0718 480.6865 276.6626 477.0835 280.793 470.6187 C
f236.5015 516.3882 m
235.7817 516.0581 235.6113 515.6401 235.5952 515.3477 c
235.5771 515.0259 235.7383 514.731 236.0254 514.5586 c
236.686 514.1626 240.9019 511.0825 242.4702 509.9292 C
243.3101 511.0708 L
243.1157 511.2139 239.2871 514.0269 237.5303 515.251 C
239.0259 515.6284 243.0337 515.6621 248.958 511.105 C
249.8223 512.228 L
243.2202 517.3066 238.3428 517.2324 236.5015 516.3882 c
f242.2656 516.2075 m
243.1797 515.124 L
243.1992 515.1401 245.1738 516.7568 247.9824 516.4619 c
250.9219 516.1528 254.2783 513.7808 254.312 513.7568 C
255.1357 514.9102 L
254.9863 515.0166 251.4453 517.5225 248.1309 517.8711 c
244.7021 518.2319 242.3638 516.29 242.2656 516.2075 C
f252.6411 520.5371 m
249.5508 520.1738 247.5815 517.709 247.4995 517.6045 C
248.6128 516.7275 L
248.6294 516.7485 250.3125 518.8364 252.8062 519.1299 c
254.853 519.3701 257.6597 517.1831 258.5684 516.3198 C
259.5454 517.3467 L
259.3926 517.4922 255.7686 520.9048 252.6411 520.5371 c
f254.0898 520.1504 m
255.353 519.5078 L
255.3872 519.5718 256.2256 521.0713 258.9858 520.7949 c
261.9399 520.4995 262.8921 519.6621 262.9009 519.6538 C
263.8911 520.6675 L
263.7705 520.7881 262.6118 521.8564 259.127 522.2051 c
255.3511 522.583 254.1396 520.25 254.0898 520.1504 C
f226.7607 522.6299 m
236.4272 514.2969 L
237.353 515.3701 L
227.6865 523.7031 L
226.7607 522.6299 L
f227.0029 527.5938 m
227.7451 526.3872 L
227.7822 526.4058 231.5806 528.1182 243.3823 516.0054 C
244.3975 516.9946 L
231.6914 530.0352 227.4453 527.8818 227.0029 527.5938 C
f234.3589 524.9414 m
235.0869 523.7251 L
235.1099 523.7388 237.3926 525.0771 239.5845 524.6387 c
241.9751 524.1606 246.542 521.2778 248.2563 517.8496 C
249.5239 518.4834 L
247.5918 522.3472 242.5947 525.4819 239.8628 526.0283 c
237.1255 526.5757 234.4707 525.0083 234.3589 524.9414 C
f241.7905 525.1567 m
242.3203 523.8423 L
242.5532 523.9346 248.0786 526.0254 253.1616 519.4019 C
254.2856 520.2646 L
248.5239 527.7729 241.8569 525.1836 241.7905 525.1567 C
f247.1245 525.228 m
247.9844 524.1016 L
248.063 524.1597 249.9512 525.5229 253.3501 524.4883 c
256.752 523.4536 257.5337 521.6475 257.5654 521.5708 C
258.8853 522.0879 L
258.8457 522.1895 257.8799 524.5918 253.7627 525.8442 c
249.6279 527.1025 247.2251 525.3047 247.1245 525.228 C
f254.8843 524.3906 m
256.2275 523.9385 L
256.2559 524.0195 256.939 525.9224 259.0127 525.793 c
261.0156 525.6675 264.8198 522.9727 266.1162 521.9448 C
266.9971 523.0552 L
266.7925 523.2173 261.957 527.0288 259.1006 527.207 c
256.561 527.3657 255.2319 525.4341 254.8843 524.3906 C
f287.2144 533.2134 m
288.5654 532.7847 L
288.5737 532.811 289.4229 535.3809 291.2964 535.1309 c
291.6987 535.0771 291.9243 534.6362 292.0425 534.2754 c
292.6782 532.3374 291.8237 527.9819 288.5649 524.8438 C
289.5483 523.8232 L
293.0288 527.1748 294.252 532.0874 293.3892 534.7173 c
293.0435 535.7725 292.3667 536.418 291.4839 536.5361 c
289.0396 536.8618 287.6221 534.5049 287.2144 533.2134 C
f226.6001 496.3335 m
228.0171 496.3335 L
228.0171 498.6465 230.3428 500.7871 230.3662 500.8086 C
229.415 501.8594 L
229.2998 501.7554 226.6001 499.2808 226.6001 496.3335 C
f226.5244 492.1167 m
227.9229 491.8833 L
228.6626 496.3228 233.1685 497.2666 233.3599 497.3047 C
233.0889 498.6958 L
233.0327 498.6846 227.4287 497.5396 226.5244 492.1167 C
f235.5566 504.6665 m
234.2236 504.3335 234.2236 503.3335 v
234.2236 502.3335 234.8896 502.3335 235.5566 502.3335 c
236.2236 502.3335 237.3901 502.6665 236.8901 503.6665 c
236.3901 504.6665 235.5566 504.6665 y
f286.1401 485.125 m
285.1401 485.125 285.1401 484.25 v
285.1401 483.375 285.8901 483 286.3901 483 c
286.8901 483 287.2651 483.125 287.2651 484.25 c
287.2651 485.375 286.1401 485.125 y
f303.8066 527.4585 m
302.8066 527.4585 302.8066 526.5835 v
302.8066 525.7085 303.5566 525.3335 304.0566 525.3335 c
304.5566 525.3335 304.9316 525.4585 304.9316 526.5835 c
304.9316 527.7085 303.8066 527.4585 y
f323.4229 552.3169 m
322.1865 549.8428 319.1826 546.3076 314.7861 544.4883 c
309.8242 542.4351 304.3301 536.6938 303.7266 535.0825 c
303.3066 533.9653 301.9004 531.5132 299.9102 529.689 c
298.479 528.376 297.5596 526.1318 297.6753 524.2319 c
297.7573 522.8823 298.3232 521.7959 299.3105 521.0898 c
301.6133 519.4453 305.7988 518.8184 310.0195 522.4639 c
312.3027 524.4355 313.085 526.6284 313.7129 528.3911 c
314.1377 529.5835 314.5049 530.6133 315.2236 531.3325 c
316.916 533.0249 318.5449 532.8101 318.6133 532.7998 C
318.7295 532.7827 L
318.8525 532.8032 L
328.8818 534.6733 331.873 539.4307 331.9951 539.6323 C
330.7861 540.3711 L
330.7588 540.3271 327.9434 535.9614 318.6533 534.2109 C
318.1826 534.2598 316.2236 534.3364 314.2217 532.3345 c
313.2764 531.3896 312.8398 530.1641 312.3779 528.8667 c
311.7754 527.1777 311.0938 525.2637 309.0938 523.5361 c
305.4951 520.4287 302.0186 520.8975 300.1348 522.2432 c
299.4971 522.6987 299.1455 523.397 299.0898 524.3184 c
298.9995 525.7974 299.748 527.6162 300.8691 528.644 c
303.0566 530.6494 304.5703 533.2954 305.0527 534.5845 c
305.4561 535.6592 310.5322 541.1943 315.3271 543.1787 c
320.0801 545.1455 323.2803 548.8613 324.6904 551.6831 c
325.8145 553.9331 330.083 557.4302 332.0059 557.293 C
332.1074 558.707 L
329.4248 558.8984 324.665 554.8027 323.4229 552.3169 c
f330.0166 553.2319 m
331.4277 553.1001 L
331.4346 553.1675 332.124 559.8525 336.9717 561.6699 C
336.4736 562.9971 L
330.7891 560.8657 330.0459 553.543 330.0166 553.2319 C
f326.5117 540.126 m
326.5898 540.1211 334.333 539.5928 338.5967 535.9604 c
343.1279 532.1006 348.2686 523.9624 349.957 521.2881 c
352.1553 517.8076 356.1748 515.9595 362.9883 515.2949 C
364.4346 515.1533 L
363.6543 516.3804 L
363.6055 516.4575 362.4131 518.3125 359.0693 521.8223 c
355.7803 525.2759 352.5596 527.0693 350.002 526.873 C
350.1113 525.46 L
352.2051 525.6211 355.0967 523.9385 358.0439 520.8447 c
359.707 519.0986 360.8086 517.7881 361.5039 516.9072 C
356.1641 517.6411 352.9229 519.2466 351.1553 522.0449 c
349.4385 524.7642 344.2109 533.0396 339.5166 537.0396 c
334.8896 540.9805 326.9375 541.5195 326.6006 541.541 C
326.5117 540.126 L
f345.4199 533.3047 m
355.8018 531.2598 357.7813 521.6099 357.8604 521.2002 C
359.2529 521.4658 L
359.2314 521.5757 357.0322 532.4619 345.6934 534.6953 C
345.4199 533.3047 L
f342.5479 539.9795 m
352.4893 537.4546 354.8447 528.0962 354.8672 528.002 C
356.2461 528.3301 L
356.2217 528.4326 353.6885 538.6123 342.8975 541.3535 C
342.5479 539.9795 L
f339.0566 545.2915 m
349.9482 545.2915 351.4609 535.1689 351.5205 534.7383 C
352.9248 534.9277 L
352.9092 535.0454 351.2031 546.7085 339.0566 546.7085 C
339.0566 545.2915 L
f338.1172 550.6328 m
347.502 549.2251 349.6133 540.3862 349.6982 540.0107 C
351.0811 540.3213 L
351.0586 540.4229 348.6885 550.4805 338.3281 552.0342 C
338.1172 550.6328 L
f349.0186 562.2461 m
348.9971 562.0713 348.4316 557.9268 342.1045 555.1489 C
342.6748 553.8511 L
347.5938 556.0107 349.377 558.9849 350.0342 560.7075 C
350.626 559.8984 351.3301 558.6021 351.3301 556.7568 c
351.3301 556.123 351.2451 555.4326 351.04 554.6885 c
349.8633 550.4258 343.7656 550.21 343.7041 550.2085 C
343.7402 548.7915 L
344.0342 548.7988 350.9482 549.0317 352.4053 554.3115 c
353.8438 559.521 350.332 562.5791 350.1816 562.7065 C
349.0186 562.2461 L
f337.709 555.4883 m
338.7363 554.5117 L
341.2285 557.1318 345.3545 561.4185 345.8145 561.7666 C
344.9648 562.9004 L
344.2842 562.3906 338.8018 556.6367 337.709 555.4883 C
f334.2686 554.8413 m
335.5107 554.1582 L
336.5049 555.9653 339.4131 560.8462 340.9141 561.7212 C
340.1992 562.9458 L
338.0908 561.7158 334.6533 555.5415 334.2686 554.8413 C
f277.5557 540.3345 m
276.627 539.4058 276.6626 538.6548 276.856 538.188 c
277.2915 537.1362 278.8838 536.625 281.7236 536.625 c
283.375 536.625 285.7681 537.0596 288.3013 537.52 c
291.7002 538.1377 295.5522 538.8379 297.7734 538.4673 C
305.918 536.9717 L
306.1953 538.3613 L
298.0068 539.8652 L
295.5415 540.2764 291.7319 539.584 288.0479 538.9146 c
285.5791 538.4658 283.2476 538.042 281.7236 538.042 c
279.0518 538.042 278.2393 538.5518 278.165 538.7305 c
278.1553 538.7549 278.1826 538.9575 278.5576 539.3325 c
279.6729 540.4473 293.2646 542.8525 303.6182 541.2993 C
303.8281 542.7007 L
294.2622 544.1357 279.415 542.1938 277.5557 540.3345 c
f290.4795 547.332 m
285.1538 545.3789 284.5479 542.0889 284.5244 541.9502 C
285.9214 541.709 L
285.9419 541.8159 286.4761 544.354 290.9678 546.001 c
295.6392 547.7144 306.4912 542.9019 306.6006 542.853 C
307.1797 544.1465 L
306.7129 544.3555 295.6904 549.2427 290.4795 547.332 c
f296.6694 551.2065 m
291.981 550.8457 290.1592 547.1294 290.084 546.9712 C
291.3623 546.3594 L
291.4243 546.4873 292.9282 549.4971 296.7778 549.7935 c
300.8672 550.1084 311.1406 545.0815 311.2441 545.0308 C
311.8691 546.3022 L
311.4336 546.5166 301.1436 551.5508 296.6694 551.2065 c
f297.7178 550.7241 m
299.0596 550.269 L
299.0957 550.3721 300.0098 552.7915 304.2227 552.7915 c
308.6963 552.7915 315.3105 545.9141 315.377 545.8442 C
316.4023 546.8223 L
316.1152 547.124 309.3018 554.2085 304.2227 554.2085 c
298.9399 554.2085 297.7651 550.8662 297.7178 550.7241 C
f310.2822 551.1978 m
311.4951 550.4653 L
311.5479 550.5508 312.8174 552.5527 315.6172 552.1328 c
318.6299 551.6807 321.1445 548.5879 321.1699 548.5566 C
322.2764 549.4424 L
322.1602 549.5874 319.3955 552.999 315.8281 553.5342 c
312.0684 554.0981 310.3525 551.3164 310.2822 551.1978 C
f317.0791 552.6899 m
318.0342 551.6426 L
318.0674 551.6733 321.4346 554.6812 323.7539 552.6353 C
324.6914 553.6978 L
322.0723 556.0083 318.5664 554.0488 317.0791 552.6899 C
f299.0713 539.5171 m
300.041 538.4824 L
300.1191 538.5557 307.9756 545.7783 318.8691 545.458 C
318.9102 546.875 L
307.417 547.2124 299.4063 539.8315 299.0713 539.5171 C
f299.4385 512.1523 m
300.7646 512.5239 L
300.7637 512.5679 300.6563 516.9165 303.543 519.6519 C
302.5684 520.6807 L
300.8184 519.0225 300.0313 516.9346 299.6641 515.272 C
299.4316 516.1138 299.332 516.8921 299.332 517.5845 c
299.332 519.7964 300.2451 521.1748 300.3066 521.2646 C
299.1416 522.0713 L
299.0225 521.8999 296.2578 517.8086 299.4385 512.1523 C
f227.5566 455.8335 m
278.3901 462.75 318.1396 446.25 v
344.3896 446 366.1396 435.25 v
366.3896 347.166 l
366.2148 339 356.4688 338.5 v
235.8901 338.5 l
227.8901 339.6738 227.3901 348.4199 v
227.5566 455.8335 l
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
