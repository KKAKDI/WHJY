%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (844.ai)
%%CreationDate: 3/25/2002 6:33 PM
%%BoundingBox: 218 343 372 583
%%HiResBoundingBox: 218.085 343.9131 371.1563 582.0234
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 12804 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD08FC444B204B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B204B204B20
%4B204B204B204B204B204B204B204B204B204B204B204B204B204B68FD07
%FC99FFFD06FC4BF827275251522752515227525152275251522752515227
%525152275251522752515227525152275251522752515227525152275251
%5227525152275251522752515227272093FD05FCC2FFFD05FC27F8A8FD42
%FFA851F88CFD04FCBBFFFD04FC6FF827F827A8FD42FF5220FD04FCC2FFFD
%04FCF852F8F8F827FD43FFF868FCFCFCBBFFFCFCFC8CF8A8FD04F87DFD42
%FF274BFCFCFCC2FFFCFCFC6EF8FF52FD04F8FD42FF5226FCFCFCBCFFFCFC
%FC6827FFFF27F8F8F852FD41FF274BFCFCFCC2FFFCFCFC6EF8FFFFA8FD04
%F8FD41FF5220FCFCFC99FFFCFCFC6827FFFFFF52F8F8F87DFD40FF274BFC
%FCFCC2FFFCFCFC6FF8FFFFFFA8FD04F8FD40FF5220FCFCFCBBFFFCFCFC68
%27FD04FF4BF8F8F8A8FD3FFF4B4BFCFCFCC2FFFCFCFC68F8FD04FFA8F8F8
%F827FD3FFF5220FCFCFCBBFFFCFCFC6827FD05FF27F8F8F8FD3FFF514BFC
%FCFCC2FFFCFCFC6EF8FD05FF52F8F8F852FD3EFF5226FCFCFCBCFFFCFCFC
%6827FD06FFF8F8F827FD3EFF274BFCFCFCC2FFFCFCFC6EF8FD06FF27F8F8
%F8FD3EFF5220FCFCFC99FFFCFCFC6827FD06FF7DF8F8F852FD3DFF274BFC
%FCFCC2FFFCFCFC6FF8FD07FFF8F8F827FD3DFF5220FCFCFCBBFFFCFCFC68
%27FD07FF27F8F8F8FD3DFF4B4BFCFCFCC2FFFCFCFC68F8FD07FF52F8F8F8
%7CFD3CFF5220FCFCFCBBFFFCFCFC6827FD07FFA8F8F8F852FD3CFF514BFC
%FCFCC2FFFCFCFC6EF8FD08FFFD04F8FD3CFF5226FCFCFCBCFFFCFCFC6827
%FD08FF27F8F8F8FD3CFF274BFCFCFCC2FFFCFCFC6EF8FD08FF52F8F8F87D
%FD3BFF5220FCFCFC99FFFCFCFC6827FD08FF7DF8F8F827FD3BFF274BFCFC
%FCC2FFFCFCFC6FF8FD09FFF8F8F827FD3BFF5220FCFCFCBBFFFCFCFC6827
%FD09FF27F8F8F8FD36FF7DFD04FF4B4BFCFCFCC2FFFCFCFC68F8FD09FFFD
%04F8A8FD32FF27F8F8F8FD04FF5220FCFCFCBBFFFCFCFC6827FD09FF52F8
%F8F87DFD31FF4BF8F8F827FD04FF514BFCFCFCC2FFFCFCFC6EF8FD09FF52
%F8F8F852FD30FF7DFD04F852FD04FF5226FCFCFCBCFFFCFCFC6827FD09FF
%7DF8F8F852FD2FFFA8FD04F852FD05FF274BFCFCFCC2FFFCFCFC6EF8FD09
%FFA8FD04F8FD2FFFFD04F827FD06FF5220FCFCFC99FFFCFCFC6827FD0AFF
%F8F8F827FD2EFF7DFD04F8FD07FF274BFCFCFCC2FFFCFCFC6FF8FD0AFF27
%F8F8F8FD2EFFFD04F8A7FD07FF5220FCFCFCBBFFFCFCFC6827FFA82727F8
%F8F8277DFFFD04F8A8FD2CFF7DF8F8F827FD08FF4B4BFCFCFCC2FFFCFCFC
%68F876F84A68FC68F820F82727F8F8F87DFD2CFFFD04F8A1FD08FF5220FC
%FCFCBBFFFCFCFC6827F893FCFCFC4B20FC8C27FD04F87DFD2BFF52FD04F8
%FD09FF514BFCFCFCC2FFFCFCFC6EF820F8268CFCF86EFCFC8CFD04F852FD
%2BFF27F8F8F852FD09FF5226FCFCFCBCFFFCFCFC6827FC9320F844F88CFC
%FCFC20F8F8F84BFD2AFFA8F8F8F827FD0AFF274BFCFCFCC2FFFCFCFC6EF8
%FCFCFC44F8F8FD04FC92F8F8F852FD2AFF4BFD04F8FD0AFF5220FCFCFC99
%FFFCFCFC6827FD04FC20F8FD05FCF8F8F827FFFFFF7D7DA8FD24FF27F8F8
%F87DFD0AFF274BFCFCFCC2FFFCFCFC6FF8FD05FCF8FD05FCF8F8F827A820
%F827F8F8F8A8FD22FFFD04F8A7FD0AFF5220FCFCFCBBFFFCFCFC4427FD05
%FCF868FCFCFC68FD04F820F8B4FCFC8C4BF87DFD20FFA8FD04F8FD0BFF4B
%4BFCFCFCC2FFFCFCFC4AF8FD05FCF84AFCFCFC26FD04F82026FD05FC4AF8
%A8FD1FFF7DF8F8F827FD0BFF5220FCFCFCBBFFFCFCFC682168FD04FC4B20
%FCFC93FD05F8B5F8FD06FC4B27FD1FFF52F8F8F851FD0BFF514BFCFCFCC2
%FFFCFCFC6EF8278CFCFCFC8CF88C6FF827F8F8F86EFC2068FC684B2020F8
%F8FD1FFF52F8F8F876FD0BFF5226FCFCFCBCFFFCFCFC68272727206F686F
%F827F8527DF8F8F88CFC2027F820206F686FF87DFD1EFF27F8F8F87DFD0B
%FF274BFCFCFCC2FFFCFCFC6EF8FF7D4BF826F82751CFFF7DF8F8F8FC68F8
%F86EFD05FCF87CFD17FFA87DA8FD04FF52F8F8F8A7FD0BFF5220FCFCFC99
%FFFCFCFC6827FD0AFF7DF8F8F868F820FD06FCB4F8FD17FFA827F827FD04
%FFFD04F8FD0CFF274BFCFCFCC2FFFCFCFC6FF8FD0AFF7DFD04F820FD07FC
%2027FD17FF7DF8F8F8FD04FF27F8F8F8FD0CFF5220FCFCFCBBFFFCFCFC68
%27FD0AFF27FD04F893FD05FCB42027A8FD17FF4BF8F827FD04FF27F8F8F8
%FD0CFF4B4BFCFCFCC2FFFCFCFC68F8FD0AFF52F8F8F84BF84B68684427F8
%27A1FD18FF27F8F8F8FD04FF27F8F8F8FD0CFF5220FCFCFCBBFFFCFCFC68
%27FD0AFF27F8F8F87DA82727F82751A8FD1AFFF8F8F852FD04FF27F8F8F8
%FD0CFF514BFCFCFCC2FFFCFCFC6EF8FD0AFF27F8F8F8FD22FFF8F8F852FD
%04FF52F8F8F8FD0CFF5226FCFCFCBCFFFCFCFC6827FD0AFFF8F8F827FD22
%FFF8F8F8A8FD04FF27F8F8F87DFD0BFF274BFCFCFCC2FFFCFCFC6EF8FD0A
%FFFD04F8FD21FF7DF8F8F8FD05FF52F8F8F87D7C27F8F8F84BFD05FF5220
%FCFCFC99FFFCFCFC6827FD09FFA8F8F8F852FD21FF7DF8F8F8FD05FF52F8
%F8F8272744936827F827A8FFFFFF274BFCFCFCC2FFFCFCFC6FF8FD09FF7D
%F8F8F852FD21FF27F8F827FD05FF7DFD04F868FC8CF82092F827FFFFFF52
%20FCFCFCBBFFFCFCFC6827FD09FF52F8F8F8A8FD21FF52F8F827FD05FFA8
%FD04F84B202720FCFC93F8FFFFFF4B4BFCFCFCC2FFFCFCFC68F8FD09FF27
%F8F8F8FD22FF27F8F852FD06FFF8F8F84B2026F8F8208CFC207DFFFF5220
%FCFCFCBBFFFCFCFC6827A84BF82720277CFFFF27F8F827FD22FF27F8F876
%FD06FF27F827FD04FC8C27F86F207DFFFF514BFCFCFCC2FFFCFCFC6EF8F8
%206E684BF8F826FFF8F8F851FD22FFF8F8F87DFD06FF27F8F8FD06FC6EF8
%F87DFFFF5226FCFCFCBCFFFCFCFC68F820FCFC6FF86F8C2720F8F8F852FD
%22FFF8F8F87DFD06FF52F8F868FD06FC4BF8FFFFFF274BFCFCFCC2FFFCFC
%FC6EF8FCFCFCF84AFCFC8CFD04F8A7FD20FFA87DF8F8F82752FD05FF27F8
%F8F88CFD04FC4BF87CFFFFFF5220FCFCFC99FFFCFCFC682768FC4427FD04
%FCFD04F8FFA85252275251A8FD18FF7627F82744934427F8FD04FFA1F8F8
%F827204B2027F87DFD04FF274BFCFCFCC2FFFCFCFC6FFD04F844FCFCFC8C
%FD04F827F827204A2027F8F851FD15FF52F844FD04FC92F8F8F8FFFFFF7D
%F8F8F8525227527DFD06FF5220FCFCFCBBFFFCFCFC6827FC6FF8278CFCFC
%6FF8F8F8272092FD06FC6820F8FD13FFA82768FD04FC92F86FFC2727FFFF
%7DF8F8F87CFD0AFF4B4BFCFCFCC2FFFCFCFC68F8FCFCFCF820FCFCFD04F8
%20FD09FC8C20F8FD12FF7DF820206EFCFCF826FCFC68F8FFFF7DF8F8F827
%FD0AFF5220FCFCFCBBFFFCFCFC6827FCFCFCB5F84B8CFD04F8B5FD0BFC27
%52FD11FF274B684BF8272027FD04FCF8A8FF7DF8F8F87DFD0AFF514BFCFC
%FCC2FFFCFCFC6EF84BFCFC4427FD05F84AFD0CFC4427FD07FFA8274B2776
%A8FD04FF4B20FCFCFC44F868FD04FC207DFF27F8F8F87DFD0AFF5226FCFC
%FCBCFFFCFCFC6827F827F8204493FC6FF8F868FD0CFC92F87D7DFFFFFFA8
%27F827444BF82752FFFFFF4B27FCFCFC6FF8FD05FCF87DFF52F8F8F87DFD
%0AFF274BFCFCFCC2FFFCFCFC6EF8A8F8F88CFD05FC68FD0DFC8C26F8F8F8
%277D20204AF86EFCFC68F852FFFF7DF8FCFCFCF84AFD04FC8CF8A8FFFD04
%F820FD04F851A8FD04FF5220FCFCFC99FFFCFCFC6827A8278CFD09FC68FC
%20FC20FD0AFC93202720FCFC4BF8B4FCFC68F8A8FFFF2744FCFCF88CFD04
%FC4B20FFA8FD04F84B68FCFC6F20F87DFFFFFF274BFCFCFCC2FFFCFCFC6F
%F85220FD0AFCF868F88CF8FC928CFD09FC44F88CFCFC2720FCFCFC2027FF
%FF7DF84492F8FD04FC4AF8A8FF52F8F8F820FD04FC6827F8F8A8FFFF5220
%FCFCFCBBFFFCFCFC68274B4BFD08FC204B2027F84B206FF86F8CB4FD08FC
%F84BFCFC4427FCFCFC93F8FFFFFF7CF8F827FCFC8C4BF87CFFFF27FD04F8
%6FFCB420F820932052FFFF4B4BFCFCFCC2FFFCFCFC68F84B20FD08FC68F8
%4B448CFC6E686E20F844FD08FC4A20FCFCFCF88CFCFCFCF8FD04FFA827FD
%05F8A8FFFF7CFD04F827F8F8F8208CFCFC6EF8FFFF5220FCFCFCBBFFFCFC
%FC68274B4BFD07FC4BF82768C0C6C6C6C0682768FD09FC6827FCFCFC2720
%4B6893F8FD06FF27F8F827FD04FF27F8F8F827FCFC6827F86FFCFC6827FF
%FF514BFCFCFCC2FFFCFCFC6EF87DF8FD06FC92F826F899FD05C6C04427F8
%6EFD07FC6EF8FCFCFCF8272020F8F8FD06FFF8F8F827FFFFFF52FD04F820
%FD04FC6FF826FC6FF8FFFF5226FCFCFCBCFFFCFCFC6827A82768FCFCFC8C
%4B2027F827FD07C6B4686F8CFD07FC204BFCFCFC4B20FCFC2727FD06FF52
%F8F8F8FFFF7DFD05F892FD05FCB4F8272052FFFF274BFCFCFCC2FFFCFCFC
%6EF8FF2726FCFC20F820262020F851C6C69E75264B4AF8F8268CFD06FCF8
%68FCFCFCF84AFC6FF8A8FD06FF27F8F8F8277DFD05F826FD08FCF8F8A1FF
%FF5220FCFCFC99FFFCFCFC6827FFFFF82720278CFD04FC6FF87B51F8F84B
%4427F84B68FD06FC4BF86FFCFCFC27684BF8A7FD07FF7DFD09F827F893FD
%06FC8C2727FFFFFF274BFCFCFCC2FFFCFCFC6FF8FFFFA8F8F868FD06FC4A
%F8F868FD04FC8CF86FFD05FC6EF827F820204BF8F8F8A8FD08FFA8FD09F8
%7D27F84A8CFCFCFC44F827FD04FF5220FCFCFCBBFFFCFCFC6827FFFFFF7D
%F8FD08FCF844FD06FC6F20FD04FC6FF87CFFFF7C5127527DFD0BFFFD08F8
%52FFFF7D27FD04F82752FD05FF4B4BFCFCFCC2FFFCFCFC68F8FFFFFF7C26
%FD08FC204AFD06FC8CF8FCFC6820F87DFD05FFA72727F826F87DFD07FF4B
%FD06F827FD06FFA8A1FD08FF5220FCFCFCBBFFFCFCFC6827FD04FFF8B4FD
%07FC4B20FD06FC93F84BF82727FD05FFA827F84B686F2027F827FD05FFA8
%FD06F827FD11FF514BFCFCFCC2FFFCFCFC6EF8FD04FF2720FD05FC684BF8
%F8F84B44FCFCFC202051A8FD06FFA82720FCFCFC68F868FCF827FD04FFFD
%07F8FD12FF5226FCFCFCBCFFFCFCFC6827FD04FFA82744FCFC9320F8206F
%686F2027F8274427A8FD08FF2720FD04FC2744FCFC93F8A8FFFF4BFD06F8
%FD13FF274BFCFCFCC2FFFCFCFC6EF8FD05FF7DF8F820F84BFD07FC8CF8F8
%52FD08FFA8FD07F8FD04FC2727FF7CFD06F8CFFD13FF5220FCFCFC99FFFC
%FCFC6827FD07FF51F893FD0AFC4427A8FD07FF5227FCFCFCB4F84BFD04FC
%4452A827FD05F8FD15FF274BFCFCFCC2FFFCFCFC6FF8FD06FFA8F88CFD0C
%FC2027FD07FF5220FD04FCF868FD04FC4B2727FD05F8A8FD15FF5220FCFC
%FCBBFFFCFCFC6827FD06FFF84BFD0DFCB4F87DFD06FF5227FCFCFC93F8FD
%05FCF84BFD05F8A8FD16FF4B4BFCFCFCC2FFFCFCFC68F8FF27FD05F8FD0F
%FC2620FD06FFA8F8FCFCFC6826FC8C2026FD07F84BFD17FF5220FCFCFCBB
%FFFCFCFC6827F82768FC8C6F68FD0FFC68274B7DA8FD04FF2720FCFC9320
%4BF8274493FCFC684BF8F827FD17FF514BFCFCFCC2FFFCFCFC6EF84BFD16
%FC204BF8F827FFFFFFA8F820FC44F8F88CFD08FCF820FD10FF7D527DA8FF
%FFFF5226FCFCFCBCFFFCFCFC6827FD0DFC27FC92FD0AFC8C27F8FFFFFFA8
%27F8F820FD0AFCB4F852FD0DFF4BF8272027F851FFFF274BFCFCFCC2FFFC
%FCFC6EF8FD0AFC8CF8FCF8FCF868FC6EFD09FC20F8FD04FF52F8FD0CFC68
%F87D7DFD0AFF27F88CFCFCFC8CF827FF5220FCFCFC99FFFCFCFC6827FD08
%FC8C4B8C2768F8FC27684BF8FD09FC8C2752FFFFFF276FFD0DFC4B20F8F8
%4B7DFD06FFA8F8B4FD04FC8C27F8A8274BFCFCFCC2FFFCFCFC6FF8FD09FC
%F820446E44B4208CF89244FD09FC4427A85227F88CFD10FC8C20F8F8A1FD
%04FF274BFD04FC8C202027515220FCFCFCBBFFFCFCFC6827FD07FC4B44FC
%68BAFD04C6BA92F827FD09FC92F827204B68FD13FC8C4BF876FFFFFF27F8
%6FFC92442720B420524B4BFCFCFCC2FFFCFCFC68F8FD07FC44F8F86EC0FD
%05C6B44AF8F8FD09FCF844FD18FC6EF87DFFFF2720FD04F844FCFCF85152
%20FCFCFCBBFFFCFCFC6827FD07FCB5684B6EFD06C6C06893FD0AFCF893FD
%0BFC938C6F8CB5FD09FC4BF8FFFF7DF893FC93F8B5FC93F8FF514BFCFCFC
%C2FFFCFCFC6EF8FD06FC20F82720BAFD07C64AF8278CFD08FCF88CFD09FC
%44FCF86FF82068FD0AFCF852FFFF27F86FFC2020FC2027FF5226FCFCFCBC
%FFFCFCFC6827FD08FC8C6FBAFD07C6444B68B4FD07FC93F8FD08FC924427
%44274427F86FF893FD08FC4427FFFFFF76F82020F8F827A8FF274BFCFCFC
%C2FFFCFCFC6EF8FD07FC8CF8F8B4FD06C69227F8F8FD08FCF827FD07FC8C
%68F8202744B4446F204A206FFD07FC6EF8A7274B27767D76277DFFFFFF52
%20FCFCFC99FFFCFCFC6827F893FD05FCB4449320BAFD04C6C027206FFD08
%FC20278CFD07FC68F8206FBAC6C6C6C0B4F82768FD07FC6827F84BF827F8
%27A8FD05FF274BFCFCFCC2FFFCFCFC6FF851F827FD05FC8CF86F68B4B4B4
%9220686FF8FD05FC684BF8F820FD07FC68272020BAFD05C6C092F8F8FD07
%FC4BF8FC8CF8FCFCF827FD05FF5220FCFCFCBBFFFCFCFC6827FF5220FD05
%FC8C926820FC20442768F844FD06FC27F87D7C27FD07FC6F202744FD04C6
%9F2627F8F82093FD06FCF8F8206FF8FCFCB4F8FD05FF4B4BFCFCFCC2FFFC
%FCFC68F8FFF84AFD07FC4AF8FCF8FCF86E8C8CFD06FC68F8FFA8F8FD05FC
%44F8F8262020F851C69FF82668FC8C20F88CFD04FC68F86820F820FCFCFC
%F8FD05FF5220FCFCFCBBFFFCFCFC6827FFF88CFD07FC8C93FC27FC938CFD
%09FCF8A1FF2720FCFCFC68F844FD04FC6FF851204BFD04FC8C2720FCFCFC
%68F820FCFC27F8FCFC93F8FD05FF514BFCFCFCC2FFFCFCFC6EF8FFF8FD18
%FC2627FFA8F844FCFCF844FD06FC8CF8F88CFD05FC44F8684A20F82020F8
%9268FD06F87DFFFFFF5226FCFCFCBCFFFCFCFC6827FFF8FD18FC4451FFFF
%7DF8F84BF8FD08FC27F8FD07FCF827204B8CFCFC27F827F86FFCFC8C4BF8
%7CFFFF274BFCFCFCC2FFFCFCFC6EF8FFF8FD18FC4B27FFFFFFA8F8F8F8FD
%08FC20F88CFD05FC68F8FD07FCF8F8FD05FC20F8F8A8FF5220FCFCFC99FF
%FCFCFC6827FFF88CFD17FCF852FD04FFF8F8F8B4FD07FC27F84BFD05FC27
%F86FFD05FC93F8B5FCFCFC6F2027684B52FF274BFCFCFCC2FFFCFCFC6FF8
%FFF84BFD16FC8CF8F827A7FF7DF8F8F820FD06FC92F8F8F892FCFC8C27F8
%4AF8F8F826204BF8F8204BF8F8F84B8CFC4427FF5220FCFCFCBBFFFCFCFC
%6827FF7DF893FD14FC8CFD05F8277DFD05F892FCFCFC6FFD05F82720F8F8
%B4FCFC8CF8444B2027204B204BF8FD04FC6FF8FF4B4BFCFCFCC2FFFD04FC
%F8FFFF52F84BFD07FC8C2026FD08FC8CFD18F8277DF88CFCFC68F8FCFCFC
%2027FCFCFCF88CFCFCFC2027FF2720FCFCFCBBFFFD04FC277DFFFFA120F8
%204B684B2027F827F82744B4FCFCFC6F20FD19F8FFFF27278CFC6827FCFC
%FC93F8B4FCFC2027FCFCFC2776FFF893FCFCFCC2FFFD04FC4420A8FFFFFF
%7D522027F84B52FFFFFF5227FD1FF8FFFFFF26F8202620FCFC8CF8F8F8FC
%FCFCF826FC4BF8FF2727FD04FCBCFFFD05FC2027A8FD11FFA827FD1AF87D
%FFFFFF7D27F8F8F827F827A827F84B446FF820F8A727F868FD04FCC2FFFD
%06FC20F8F8522752275227522752275227522752275227FD1AF827275227
%5227522727275227522727FD05F827F8278CFD05FC99FFFD07FC8C6F204B
%444B204B444B204B444B204B444B204B444B204B444B204B444B204B444B
%204B444B204B444B204B444B204B4B4B264B4B4B264B4B4B264B4B4B264B
%4B4B4A93FD07FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
371.1563 343.9131 m
218.085 343.9131 L
218.085 582.0234 L
371.1563 582.0234 L
371.1563 343.9131 L
fu0 0 0 0 k
226.1895 566.3018 m
226.1895 360.6348 l
226.3564 352.3018 236.5234 351.4678 v
355.0225 351.3018 l
363.1895 353.8018 363.1895 361.4678 v
363.1895 565.9678 l
362.3564 573.9678 353.8564 574.6348 v
236.0234 574.6348 l
227.6895 574.4688 226.1895 566.3018 v
f0 1 1 0 k
244.4395 455.4678 m
242.0645 460.2178 236.6895 461.5928 v
231.3145 462.9678 226.5645 459.8428 226.3145 456.9678 c
226.0645 454.0928 226.1895 446.5928 y
225.9395 443.3428 231.6895 442.2178 v
228.3145 440.0928 229.1895 432.4678 v
230.0645 424.8428 235.5645 422.4678 y
234.3145 417.3428 236.8145 414.5928 v
239.3145 411.8428 243.1895 410.4678 y
239.4395 406.2178 238.5645 403.8428 v
234.4395 404.9678 231.3145 403.9678 v
228.1895 402.9678 226.1895 399.5928 y
226.0645 380.8428 l
227.5645 378.9678 231.4395 377.7178 v
230.1895 373.7178 229.9395 368.8428 v
229.6895 363.9678 232.8145 358.9678 238.8145 357.2178 c
244.8145 355.4678 252.0645 357.9678 253.4395 359.0928 c
258.9395 354.4678 267.0645 356.2178 v
275.1895 357.9678 277.1895 364.5928 y
279.0645 370.7178 275.4395 376.7178 v
279.6895 377.7178 281.0645 379.3428 v
281.5645 370.9678 289.0645 367.8428 v
293.3145 360.0928 l
302.4395 356.8428 l
316.6895 360.7178 l
319.9395 361.7178 320.5645 361.9678 v
321.4395 355.9678 328.5645 354.2178 v
335.6895 352.4678 339.6895 355.9678 340.0645 356.7178 c
343.6895 353.2178 348.5645 352.7178 v
353.4395 352.2178 358.0645 356.7178 358.0645 361.0928 c
358.0645 365.4678 356.8145 369.7178 350.6895 371.2178 c
352.6895 375.8428 349.4395 379.4678 v
346.1895 383.0928 340.0645 381.3428 337.5645 378.9678 c
338.9395 384.5928 334.1895 390.0928 v
329.4395 395.5928 319.6895 395.9678 y
317.9395 400.7178 313.8145 402.9678 v
309.6895 405.2178 306.1895 404.7178 y
309.6895 409.0928 306.4395 414.0928 v
303.1895 419.0928 296.5645 420.9678 290.1895 416.8428 c
283.8145 412.7178 284.6895 405.5928 286.8145 402.4678 c
288.9395 399.3428 293.1895 398.0928 293.6895 398.0928 c
291.8145 394.2178 291.5645 392.8428 v
287.6895 393.2178 284.4395 389.9678 v
283.9395 400.7178 270.9395 401.9678 v
269.5645 409.2178 264.8145 411.8428 v
268.5645 414.4678 269.0645 416.4678 v
278.5645 416.8428 283.3145 424.7178 v
287.6895 420.5928 293.9395 422.3428 v
300.1895 424.0928 303.5645 428.4678 302.6895 435.3428 c
301.8145 442.2178 294.5645 444.4678 292.8145 444.7178 c
291.0645 444.9678 284.6895 443.9678 282.8145 438.9678 c
278.9395 442.4678 273.3145 442.3428 v
273.0645 449.4678 265.9395 452.3428 v
258.8145 455.2178 249.4395 453.8428 246.3145 447.9678 c
244.4395 455.4678 l
f0 0.2 1 0 k
253.3145 392.3428 m
250.1895 392.9678 248.0645 389.4678 v
245.9395 385.9678 247.3223 380.8535 250.4395 379.4678 c
253.8145 377.9678 260.3145 378.7178 260.4395 385.3428 c
260.5645 391.9678 254.8145 392.5928 253.3145 392.3428 c
f249.8145 426.3428 m
249.6895 430.8428 253.3145 432.4678 v
256.9395 434.0928 263.4395 432.2178 263.3145 425.9678 c
257.1895 426.9678 252.9395 421.8428 v
249.8145 426.3428 l
f303.4395 374.9678 m
303.9395 379.0928 307.9395 380.7178 v
311.9395 382.3428 316.9395 379.7178 316.9395 376.4678 c
309.9395 375.7178 309.6895 369.4678 v
308.4395 370.7178 l
307.0645 374.2178 303.4395 374.9678 v
f0 1 1 0 k
226.1895 503.7178 m
226.0645 492.9678 l
228.4395 486.8428 234.0645 486.4678 v
239.6895 486.0928 247.0645 488.7178 248.9395 494.9678 c
250.8145 501.2178 247.4395 504.5928 y
244.6895 509.5928 238.1895 510.4678 v
231.6895 511.3428 227.3145 507.0928 226.1895 503.7178 c
f264.8145 497.7178 m
258.3145 499.0928 254.0645 492.9678 v
249.8145 486.8428 251.6895 483.2178 y
252.8145 480.5928 256.8145 478.4678 v
260.8145 476.3428 271.0645 477.9678 273.3145 484.8428 c
275.5645 491.7178 268.0645 497.2178 264.8145 497.7178 c
f317.8145 455.8428 m
309.6895 455.3428 307.6895 449.2178 v
305.6895 443.0928 309.1895 436.4678 316.0645 434.3428 c
322.9395 432.2178 327.5645 437.3428 329.0645 442.7178 c
330.5645 448.0928 327.3145 456.3428 317.8145 455.8428 c
f347.9395 471.0928 m
342.4395 472.2178 339.0645 466.8428 v
335.6895 461.4678 338.1895 456.4678 341.3145 454.5928 c
344.4395 452.7178 352.5645 453.7178 354.9395 458.8428 c
357.3145 463.9678 354.0645 470.3428 347.9395 471.0928 c
f339.6895 440.0928 m
334.5645 426.4678 l
337.0645 421.0928 343.3145 420.8428 v
349.5645 420.5928 355.9395 424.0928 356.4395 430.8428 c
356.9395 437.5928 351.3145 444.0928 341.9395 440.7178 c
339.6895 440.0928 l
f350.6895 399.4678 m
344.6895 399.0928 342.8145 394.3428 v
340.9395 389.5928 344.4395 384.0928 350.8145 383.2178 c
357.1895 382.3428 359.9395 387.4678 359.8145 390.8428 c
359.6895 394.2178 358.1895 399.5928 350.6895 399.4678 c
f*u
1 D
0.65 0.53 0.51 1 k
236.1113 575.1768 m
230.25 575.1768 225.4814 570.4082 225.4814 564.5469 C
225.4814 361.3896 L
225.4814 355.5283 230.25 350.7598 236.1113 350.7598 C
353.2686 350.7598 L
359.1299 350.7598 363.8984 355.5283 363.8984 361.3896 C
363.8984 564.5469 L
363.8984 570.4082 359.1299 575.1768 353.2686 575.1768 C
236.1113 575.1768 L
f0 D
226.8984 361.3896 m
226.8984 564.5469 L
226.8984 569.627 231.0313 573.7598 236.1113 573.7598 C
353.2686 573.7598 L
358.3486 573.7598 362.4805 569.627 362.4805 564.5469 C
362.4805 361.3896 L
362.4805 356.3096 358.3486 352.1768 353.2686 352.1768 C
236.1113 352.1768 L
231.0313 352.1768 226.8984 356.3096 226.8984 361.3896 C
f*U
238.2832 404.5264 m
228.2734 406.9521 225.5459 399.5264 225.5195 399.4492 C
226.8584 398.9844 L
226.9541 399.2549 229.2979 405.5654 238.502 403.0352 C
239.1074 402.8682 L
239.3457 403.4492 L
239.543 403.9297 244.3066 415.207 255.8818 414.2617 c
266.5303 413.3926 269.4502 405.9502 270.2422 401.5908 C
270.3516 400.9902 L
270.9629 401.0098 L
271.4102 401.0234 281.9326 401.2266 283.4883 390.1201 c
284.0225 386.2998 283.4023 383.2588 281.6436 381.0801 c
279.1611 378.0049 275.1787 377.6777 275.1387 377.6748 C
273.8623 377.5811 L
274.6191 376.5479 L
274.6592 376.4932 278.6025 370.9941 276.0244 363.9619 c
274.8291 360.7012 271.2363 358.0195 266.6484 356.9629 c
261.6738 355.8164 256.9189 356.8516 253.9316 359.7285 C
253.5381 360.1074 L
253.0703 359.8232 L
252.9844 359.7705 244.2949 354.6016 235.5264 359.3418 c
226.9521 363.9756 232.2891 377.0635 232.3438 377.1953 C
232.6152 377.8467 L
231.9648 378.1211 L
230.2295 378.8525 227.3047 380.416 226.8408 381.4971 C
225.5381 380.9385 L
226.2324 379.3184 229.3398 377.751 230.793 377.0898 C
230.3076 375.7256 229.2471 372.3262 229.2471 368.6299 c
229.2471 364.7021 230.4551 360.4717 234.8525 358.0947 c
243.3545 353.499 251.4863 357.3447 253.3809 358.373 C
256.7256 355.4434 261.7373 354.377 266.9668 355.582 c
272.0156 356.7451 275.9961 359.7686 277.3555 363.4736 c
278.0645 365.4102 278.333 367.2295 278.333 368.875 c
278.333 372.3965 277.1123 375.0908 276.3506 376.4385 C
277.8838 376.7559 280.6885 377.6494 282.7354 380.1758 c
284.3027 382.1104 285.0918 384.5947 285.0918 387.584 c
285.0918 388.4521 285.0244 389.3633 284.8916 390.3164 c
283.3789 401.124 273.9785 402.291 271.5215 402.4102 C
270.6494 406.4922 267.4736 414.7373 255.9971 415.6738 c
244.8926 416.5811 239.4629 406.9434 238.2832 404.5264 C
f252.4951 398.8428 m
252.1035 398.8271 251.7998 398.4971 251.8154 398.1064 C
251.9814 393.9395 L
251.9971 393.5488 252.3271 393.2441 252.7178 393.2598 c
253.1094 393.2754 253.4131 393.6055 253.3975 393.9961 C
253.2314 398.1631 L
253.2158 398.5537 252.8857 398.8584 252.4951 398.8428 c
f248.3281 397.8154 m
247.9521 397.708 247.7344 397.3164 247.8418 396.9395 C
248.8418 393.4395 L
248.9492 393.0635 249.3418 392.8457 249.7178 392.9531 c
250.0938 393.0605 250.3125 393.4531 250.2041 393.8291 C
249.2041 397.3291 L
249.0967 397.7051 248.7051 397.9238 248.3281 397.8154 c
f243.7617 394.8525 m
243.5488 394.5244 243.6426 394.0859 243.9717 393.873 C
246.8047 392.0391 L
247.1328 391.8271 247.5713 391.9209 247.7842 392.249 c
247.9971 392.5781 247.9033 393.0166 247.5742 393.2295 C
244.7412 395.0625 L
244.4121 395.2754 243.9746 395.1816 243.7617 394.8525 c
f240.8721 390.9141 m
240.7178 390.5537 240.8848 390.1377 241.2441 389.9834 C
245.9102 387.9834 L
246.2705 387.8291 246.6865 387.9961 246.8408 388.3555 c
246.9951 388.7148 246.8271 389.1318 246.4688 389.2861 C
241.8027 391.2861 L
241.4424 391.4404 241.0264 391.2725 240.8721 390.9141 c
f244.7393 387.167 m
239.7393 386.333 L
239.3535 386.2695 239.0928 385.9043 239.1572 385.5176 c
239.2217 385.1318 239.5869 384.8711 239.9727 384.9355 C
244.9727 385.7686 L
245.3584 385.833 245.6191 386.1982 245.5557 386.585 c
245.4912 386.9707 245.126 387.2314 244.7393 387.167 C
f244.7881 383.5518 m
242.1221 381.7188 L
241.7988 381.4971 241.7178 381.0557 241.9395 380.7334 c
242.1611 380.4102 242.6025 380.3291 242.9248 380.5508 C
245.5908 382.3838 L
245.9141 382.6055 245.9951 383.0469 245.7734 383.3691 c
245.5518 383.6924 245.1104 383.7734 244.7881 383.5518 C
f246.5547 380.499 m
243.7207 377.999 L
243.4277 377.7402 243.3994 377.293 243.6582 376.999 c
243.917 376.7061 244.3652 376.6777 244.6582 376.9365 C
247.4922 379.4365 L
247.7852 379.6953 247.8135 380.1436 247.5547 380.4365 c
247.2959 380.7305 246.8477 380.7588 246.5547 380.499 C
f247.9951 377.2734 m
247.3281 373.9404 L
247.252 373.5566 247.5 373.1836 247.8838 373.1064 c
248.2676 373.0303 248.6416 373.2783 248.7178 373.6621 C
249.3848 376.9951 L
249.4609 377.3789 249.2129 377.7529 248.8291 377.8291 c
248.4453 377.9063 248.0713 377.6572 247.9951 377.2734 C
f251.8145 376.6348 m
251.8145 373.3018 L
251.8145 372.9102 252.1318 372.5928 252.5234 372.5928 c
252.915 372.5928 253.2314 372.9102 253.2314 373.3018 C
253.2314 376.6348 L
253.2314 377.0254 252.915 377.3428 252.5234 377.3428 c
252.1318 377.3428 251.8145 377.0254 251.8145 376.6348 C
f255.0264 377.7617 m
254.6797 377.5791 254.5469 377.1504 254.7295 376.8047 C
256.3965 373.6377 L
256.5781 373.292 257.0068 373.1582 257.3535 373.3408 c
257.6992 373.5234 257.833 373.9521 257.6504 374.2979 C
255.9834 377.4648 L
255.8008 377.8105 255.3721 377.9443 255.0264 377.7617 c
f257.2607 378.5195 m
257.0488 378.1904 257.1426 377.752 257.4717 377.5391 c
258.6221 376.7949 260.3809 375.6084 260.6885 375.3008 c
260.9658 375.0234 261.4141 375.0234 261.6904 375.3008 c
261.9678 375.5771 261.9678 376.0254 261.6904 376.3027 c
261.1641 376.8291 258.7246 378.417 258.2412 378.7295 c
257.9121 378.9424 257.4736 378.8486 257.2607 378.5195 c
f259.7168 380.6064 m
259.5479 380.2529 259.6992 379.8301 260.0518 379.6621 C
263.5518 377.9951 L
263.9053 377.8262 264.3271 377.9775 264.4961 378.3301 c
264.6641 378.6836 264.5137 379.1055 264.1611 379.2744 C
260.6611 380.9414 L
260.3076 381.1094 259.8848 380.959 259.7168 380.6064 c
f260.8291 382.9463 m
260.75 382.5625 260.9951 382.1875 261.3789 382.1074 C
265.3789 381.2744 L
265.7617 381.1943 266.1367 381.4404 266.2168 381.8232 c
266.2969 382.207 266.0508 382.582 265.668 382.6621 C
261.668 383.4951 L
261.2842 383.5752 260.9092 383.3291 260.8291 382.9463 c
f262.2822 385.8389 m
261.8926 385.7979 261.6104 385.4492 261.6514 385.0605 c
261.6924 384.6709 262.041 384.3887 262.4307 384.4297 c
263.7305 384.5664 265.3506 384.6318 265.6904 384.5127 c
266.0273 384.3936 266.4492 384.5215 266.6084 384.8408 c
266.7686 385.1602 266.7139 385.5264 266.416 385.7246 c
265.9434 386.0391 264.5527 386.0781 262.2822 385.8389 c
f265.5254 390.3242 m
262.0254 389.4912 L
261.6445 389.4004 261.4092 389.0186 261.5 388.6377 c
261.5908 388.2568 261.9727 388.0215 262.3535 388.1123 C
265.8535 388.9453 L
266.2344 389.0361 266.4697 389.418 266.3789 389.7988 c
266.2881 390.1797 265.9063 390.4141 265.5254 390.3242 C
f263.7529 392.957 m
260.9199 391.79 L
260.5576 391.6406 260.3857 391.2266 260.5342 390.8643 c
260.6836 390.5029 261.0977 390.3301 261.46 390.4795 C
264.293 391.6465 L
264.6553 391.7949 264.8271 392.209 264.6787 392.5713 c
264.5293 392.9336 264.1152 393.1055 263.7529 392.957 C
f261.3711 396.3184 m
258.7051 393.8184 L
258.4199 393.5508 258.4053 393.1025 258.6729 392.8164 c
258.9404 392.5313 259.3887 392.5166 259.6748 392.7842 C
262.3408 395.2842 L
262.626 395.5518 262.6406 396.001 262.373 396.2861 c
262.1055 396.5713 261.6572 396.5859 261.3711 396.3184 C
f255.9844 397.3652 m
255.6504 393.6982 L
255.6152 393.3086 255.9023 392.9639 256.292 392.9287 c
256.6816 392.8936 257.0264 393.1807 257.0615 393.5703 C
257.3955 397.2373 L
257.4307 397.627 257.1436 397.9717 256.7539 398.0068 c
256.3643 398.043 256.0195 397.7559 255.9844 397.3652 C
f*u
1 D
291.9961 372.1621 m
290.3789 369.8652 290.0273 367.0879 291.0303 364.542 c
293.3066 358.7627 299.6807 358.9131 300.0186 358.9258 C
302.8662 358.5313 305.7305 359.2969 307.6973 360.9932 c
309.3555 362.4238 310.2314 364.374 310.2314 366.6348 c
310.2314 371.9766 305.877 375.9893 299.8789 376.1768 c
296.8262 376.2715 293.8066 374.7334 291.9961 372.1621 c
f0 D
292.3486 365.0615 m
291.5117 367.1865 291.7979 369.4189 293.1553 371.3457 c
294.6709 373.499 297.292 374.8389 299.834 374.7598 c
305.0371 374.5977 308.8135 371.1797 308.8135 366.6348 c
308.8135 364.7988 308.1074 363.2188 306.7715 362.0664 c
305.1143 360.6367 302.5684 359.9736 300.126 360.3359 C
300.0566 360.3457 L
299.9854 360.3418 L
299.7539 360.3311 294.2969 360.1162 292.3486 365.0615 c
f*U
*u
1 D
314.082 376.4551 m
309.5752 374.5645 309.126 370.5205 309.126 368.9854 c
309.126 368.7002 309.1387 368.5391 309.1465 368.4561 C
309.0742 368.1113 309.0195 367.7607 309.0195 367.4023 c
309.0195 365.5342 309.9824 363.5479 311.667 362.0781 c
313.8389 360.1816 316.625 359.6455 319.1191 360.6436 c
324.1455 362.6543 326.1318 365.7607 325.5605 370.7158 c
325.3008 372.9697 323.9893 374.9424 321.9619 376.1279 c
319.665 377.4727 316.793 377.5918 314.082 376.4551 c
f0 D
312.5986 363.1455 m
310.958 364.5781 310.1318 366.6475 310.5439 368.2959 C
310.5762 368.4238 L
310.5596 368.5566 L
310.5361 368.7461 310.043 373.2246 314.6309 375.1484 c
316.9258 376.1104 319.3369 376.0225 321.2461 374.9053 c
322.8848 373.9463 323.9443 372.3604 324.1523 370.5537 c
324.6514 366.2285 323.041 363.7383 318.5938 361.959 c
316.6025 361.1631 314.3623 361.6064 312.5986 363.1455 c
f*U
291.1436 366.9277 m
291.2363 368.3418 L
281.8818 368.9551 282.0527 379.1797 282.0645 379.6143 C
280.6475 379.6553 L
280.6445 379.5352 280.418 367.6309 291.1436 366.9277 C
f304.417 404.835 m
293.5762 403.2012 291.3311 395.4502 290.9111 393.2754 C
285.2383 392.7695 283.9268 390.0391 283.874 389.9189 C
285.167 389.3398 L
285.1787 389.3623 286.3252 391.6279 291.5635 391.9268 C
292.1738 391.9619 L
292.2295 392.5723 L
292.2627 392.9443 293.1895 401.71 304.6279 403.4336 c
316.0156 405.1494 318.8936 395.9902 319.0098 395.5996 C
319.1523 395.124 L
319.6494 395.0938 L
319.7637 395.0879 331.1504 394.3535 335.2393 387.1191 c
337.4844 383.1475 337.5 378.1201 335.2773 374.6104 c
333.2627 371.4268 329.6982 369.8516 325.2402 370.1748 C
325.1387 368.7607 L
330.1416 368.3984 334.167 370.207 336.4746 373.8516 c
337.7217 375.8213 338.3447 378.208 338.3447 380.6543 c
338.3447 383.1025 337.7207 385.6094 336.4736 387.8164 c
332.4326 394.9658 322.459 396.2656 320.1992 396.4707 C
319.3984 398.5088 315.5176 406.5078 304.417 404.835 C
f297.5273 378.2207 m
297.3877 377.8545 297.5713 377.4453 297.9375 377.3057 C
301.4375 375.9727 L
301.8027 375.833 302.2119 376.0166 302.3516 376.3818 c
302.4912 376.748 302.3076 377.1572 301.9414 377.2969 C
298.4414 378.6299 L
298.0762 378.7695 297.667 378.5859 297.5273 378.2207 c
f299.1191 381.3887 m
298.8867 381.0732 298.9541 380.6299 299.2695 380.3975 C
302.4365 378.0645 L
302.751 377.832 303.1953 377.8994 303.4268 378.2139 c
303.6592 378.5293 303.5918 378.9727 303.2764 379.2051 C
300.1094 381.5381 L
299.7949 381.7705 299.3506 381.7031 299.1191 381.3887 c
f301.373 383.8193 m
301.0869 383.5527 301.0713 383.1045 301.3379 382.8184 C
303.6709 380.3184 L
303.9385 380.0322 304.3867 380.0166 304.6729 380.2832 c
304.959 380.5508 304.9746 380.999 304.707 381.2852 C
302.375 383.7852 L
302.1074 384.0713 301.6592 384.0869 301.373 383.8193 c
f304.54 385.4355 m
304.1895 385.2607 304.0479 384.835 304.2227 384.4844 C
305.5557 381.8174 L
305.7305 381.4678 306.1563 381.3252 306.5059 381.501 c
306.8564 381.6758 306.998 382.1016 306.8232 382.4512 C
305.4902 385.1182 L
305.3154 385.4688 304.8896 385.6104 304.54 385.4355 c
f308.2822 387.0059 m
307.8936 386.9658 307.6104 386.6162 307.6514 386.2275 C
307.9844 383.0605 L
308.0254 382.6709 308.374 382.3887 308.7637 382.4297 c
309.1523 382.4707 309.4355 382.8193 309.3945 383.209 C
309.0615 386.376 L
309.0205 386.7646 308.6719 387.0469 308.2822 387.0059 c
f310.8135 386.6348 m
310.8135 383.1348 L
310.8135 382.7432 311.1309 382.4258 311.5225 382.4258 c
311.9141 382.4258 312.2314 382.7432 312.2314 383.1348 C
312.2314 386.6348 L
312.2314 387.0254 311.9141 387.3428 311.5225 387.3428 c
311.1309 387.3428 310.8135 387.0254 310.8135 386.6348 C
f313.8262 386.4336 m
313.1602 382.9336 L
313.0869 382.5498 313.3398 382.1787 313.7236 382.1055 c
314.1084 382.0322 314.4795 382.2842 314.5527 382.6689 C
315.2188 386.1689 L
315.292 386.5537 315.0391 386.9248 314.6553 386.998 c
314.2705 387.0713 313.8994 386.8184 313.8262 386.4336 C
f317.6689 384.7822 m
315.6689 382.6152 L
315.4033 382.3271 315.4209 381.8789 315.709 381.6133 c
315.9961 381.3486 316.4453 381.3662 316.71 381.6543 C
318.71 383.8213 L
318.9756 384.1084 318.958 384.5566 318.6699 384.8223 c
318.3828 385.0879 317.9336 385.0693 317.6689 384.7822 C
f320.3877 382.1094 m
317.5547 380.7754 L
317.2002 380.6094 317.0488 380.1865 317.2148 379.833 c
317.3818 379.4785 317.8037 379.3262 318.1582 379.4932 C
320.9912 380.8271 L
321.3457 380.9932 321.4971 381.416 321.3311 381.7695 c
321.1641 382.124 320.7422 382.2754 320.3877 382.1094 C
f321.2529 379.29 m
318.4199 378.123 L
318.0576 377.9746 317.8848 377.5596 318.0342 377.1982 c
318.1836 376.8359 318.5977 376.6641 318.959 376.8125 C
321.792 377.9795 L
322.1543 378.1279 322.3271 378.542 322.1777 378.9043 c
322.0283 379.2666 321.6143 379.4385 321.2529 379.29 C
f*u
1 D
342.2939 369.6191 m
340.4785 368.2959 338.3135 365.7783 338.3135 361.3018 c
338.3135 352.21 348.9033 351.9277 349.0107 351.9258 C
349.0469 351.9258 L
349.084 351.9287 L
352.7861 352.25 356.54 353.043 358.2031 358.7705 c
359.8105 364.3096 357.2471 369.6992 352.2393 371.3096 c
349.6045 372.1563 345.5078 371.9619 342.2939 369.6191 c
f0 D
339.7314 361.3018 m
339.7314 364.373 340.9063 366.8535 343.1289 368.4736 c
345.9248 370.5117 349.5869 370.6729 351.8057 369.96 c
355.1973 368.8701 357.2607 365.707 357.2607 362.0488 c
357.2607 361.1113 357.125 360.1416 356.8418 359.166 c
355.4307 354.3066 352.4561 353.6475 348.9971 353.3447 C
348.3896 353.3594 339.7314 353.7148 339.7314 361.3018 C
f*U
347.5 363.9844 m
341.998 362.4561 339.9346 363.7119 339.9141 363.7246 C
339.1191 362.5518 L
339.3691 362.3789 341.7363 360.9121 347.8789 362.6191 c
354.1279 364.3545 355.7686 367.8623 355.8359 368.0107 C
354.5449 368.5967 L
354.5313 368.5664 353.0547 365.5273 347.5 363.9844 c
f352.4668 352.71 m
353.2461 353.8936 L
347.374 357.7568 347.7109 362.6982 347.7285 362.9072 C
346.3164 363.0322 L
346.2949 362.79 345.8555 357.0596 352.4668 352.71 C
f327.8027 353.7939 m
335.791 351.1895 340.8135 356.0908 341.0234 356.3008 C
340.0225 357.3037 L
339.8359 357.1191 335.3799 352.8145 328.2422 355.1416 c
321.2412 357.4248 321.3877 361.9043 321.3965 362.0938 C
319.9824 362.1807 L
319.9668 361.9473 319.7061 356.4346 327.8027 353.7939 c
f333.8447 371.6152 m
333.8926 371.6035 338.627 370.3359 339.5059 367.1152 C
340.873 367.4883 L
339.7773 371.5059 334.4268 372.9287 334.1992 372.9873 C
333.8447 371.6152 L
f323.752 364.7441 m
323.9512 364.5869 328.7656 360.9111 338.9385 362.0977 C
338.7744 363.5049 L
329.2334 362.3926 324.6699 365.8252 324.625 365.8604 C
323.752 364.7441 L
f328.9824 354.0205 m
330.3965 353.916 L
330.7217 358.3203 331.5439 362.625 331.5527 362.668 C
330.1602 362.9355 L
330.1523 362.8916 329.3145 358.5098 328.9824 354.0205 C
f336.7705 378.7002 m
337.9404 377.9004 L
338.0469 378.0527 340.6152 381.6318 346.6846 380.1143 c
348.1895 379.7373 349.248 378.9727 349.8311 377.8408 c
351.1768 375.2275 349.7119 371.4326 349.6973 371.3945 C
351.0156 370.874 L
351.0859 371.0527 352.7314 375.2949 351.0938 378.4844 c
350.3164 379.998 348.9482 381.0088 347.0283 381.4893 c
339.9639 383.2559 336.8975 378.8867 336.7705 378.7002 C
f342.8174 369.5654 m
344.2275 369.7031 L
344.002 372.0098 343.668 378.4678 344.8154 380.6367 C
343.5635 381.2998 L
341.9814 378.3115 342.7822 369.9209 342.8174 369.5654 C
f336.5977 376.9014 m
342.5977 372.4014 L
343.4473 373.5352 L
337.4473 378.0352 L
336.5977 376.9014 L
f*u
1 D
344.2354 397.4502 m
342.3662 395.4795 341.5674 392.7285 341.9873 389.7041 c
342.8887 383.2148 351.4365 382.457 351.7998 382.4277 C
351.8359 382.4258 L
354.3408 382.3545 356.4619 383.1328 357.9707 384.6787 c
359.7783 386.5303 360.3232 389.0752 360.2305 390.8389 c
360.123 392.874 359.2178 399.5625 352.083 400.1738 c
348.9902 400.4395 346.1299 399.4463 344.2354 397.4502 c
f0 D
343.3916 389.8994 m
343.3271 390.3584 343.2959 390.8096 343.2959 391.25 c
343.2959 393.2949 343.9746 395.1162 345.2637 396.4746 c
346.8828 398.1807 349.2617 398.9932 351.9619 398.7617 c
357.793 398.2617 358.6973 393.002 358.8145 390.7646 c
358.8916 389.2998 358.4443 387.1924 356.957 385.668 c
355.7188 384.4004 354.0176 383.7861 351.8994 383.8428 C
351.7471 383.8555 344.1318 384.5654 343.3916 389.8994 C
f*U
350.3555 390.6563 m
345.3818 389.4512 343.1436 391.8379 343.0508 391.9404 C
341.9912 390.999 L
342.1045 390.8701 344.8408 387.8613 350.6895 389.2793 c
356.543 390.6982 357.8262 395.7539 357.8779 395.9678 C
356.501 396.3027 L
356.4561 396.1221 355.3467 391.8672 350.3555 390.6563 c
f354.2461 383.1484 m
354.7988 384.4541 L
351.0059 386.0586 351.2188 389.7598 351.2295 389.916 C
349.8164 390.0225 L
349.8125 389.9736 349.498 385.1582 354.2461 383.1484 C
f288.1553 416.1445 m
285.5059 413.751 284.168 410.5635 284.4844 407.3975 c
285.3945 398.2998 293.3896 397.6006 293.4707 397.5947 C
293.5771 399.0078 L
293.2969 399.0303 286.6846 399.6475 285.8945 407.5381 c
285.623 410.251 286.7939 413.0049 289.1055 415.0928 c
291.959 417.6699 295.9873 418.7344 299.8809 417.9404 c
304.2402 417.0508 305.8496 413.8984 306.4199 412.0986 c
307.373 409.0938 306.7471 406.2598 305.6738 405.1201 C
306.7051 404.1484 L
308.3193 405.8623 308.7676 409.3867 307.7715 412.5273 c
307.1064 414.623 305.2334 418.2939 300.1641 419.3291 c
295.8311 420.2129 291.3418 419.0225 288.1553 416.1445 c
f294.1553 399.3662 m
295.5576 399.5693 L
295.542 399.6807 294.0537 410.7764 301.9844 417.5977 C
301.0605 418.6719 L
292.5293 411.335 294.085 399.8516 294.1553 399.3662 C
f285.7363 412.166 m
285.9756 410.7695 L
286.0322 410.7793 291.7109 411.7246 296.1621 410.4531 C
296.5508 411.8154 L
291.7852 413.1777 285.9814 412.208 285.7363 412.166 C
f236.3066 425.082 m
234.4229 422.7695 234.0811 419.3604 235.417 416.1855 c
236.8809 412.707 239.9492 410.4297 243.626 410.0957 C
243.7539 411.5068 L
240.6084 411.793 237.9805 413.748 236.7236 416.7354 c
235.5918 419.4258 235.8525 422.2813 237.4053 424.1865 c
239.0049 426.1494 241.625 427.2344 244.416 427.0898 c
247.1475 426.9482 249.583 425.6357 250.9307 423.5801 c
253.8271 419.1592 252.2783 415.5771 252.2109 415.4268 C
253.5 414.8389 L
253.582 415.0166 255.459 419.2539 252.1162 424.3564 c
250.5215 426.7891 247.6709 428.3398 244.4893 428.5049 c
241.249 428.6738 238.1904 427.3936 236.3066 425.082 c
f252.3896 421.7852 m
253.6563 421.1484 L
253.7383 421.3096 255.7285 425.0928 261.1895 425.0928 c
264.2695 425.0928 266.0049 423.7988 266.917 422.7139 c
268.125 421.2773 268.6514 419.2998 268.3252 417.4229 c
267.7344 414.0313 264.7041 412.6748 264.5752 412.6182 C
265.1357 411.3164 L
265.293 411.3838 268.9971 413.0156 269.7217 417.1797 c
270.1191 419.4639 269.4756 421.873 268.002 423.626 c
266.8955 424.9414 264.8154 426.5098 261.1895 426.5098 c
254.8252 426.5098 252.4854 421.9775 252.3896 421.7852 C
f257.3232 454.5098 m
248.1543 454.0859 245.5322 447.1006 244.8613 444.4199 C
243.2988 445.2598 239.8496 446.6611 235.6641 445.4834 c
231.1338 444.21 227.1396 438.9307 228.6621 431.6563 c
230.2158 424.2334 234.8525 421.9238 235.0488 421.8291 C
235.666 423.1055 L
235.624 423.126 231.4521 425.2471 230.0498 431.9463 c
228.5293 439.2129 232.8037 443.207 236.0479 444.1191 c
240.9707 445.5039 244.9043 442.7539 244.9434 442.7256 C
245.916 442.0313 L
246.0596 443.2178 L
246.1064 443.6025 247.3057 452.6279 257.3887 453.0938 c
263.9844 453.3984 268.7012 450.334 270.916 447.3652 c
272.2285 445.6074 272.7793 443.7559 272.3535 442.5342 C
272.0215 441.5781 L
273.0342 441.5928 L
273.1328 441.5947 282.9746 441.6543 284.4971 434.6514 c
285.2764 431.0654 284.4473 427.2217 282.2227 424.1064 c
280.2568 421.3545 276.3281 417.8887 268.7734 417.0049 C
268.9385 415.5977 L
275.2344 416.334 280.3613 419.0625 283.376 423.2832 c
285.2256 425.873 286.2002 428.9238 286.2002 431.9707 c
286.2002 432.9707 286.0957 433.9697 285.8818 434.9521 c
284.3975 441.7842 276.4297 442.8232 273.8379 442.9805 C
273.8535 443.1348 273.9102 443.2725 273.9102 443.4336 c
273.9102 444.8926 273.2627 446.5908 272.0527 448.2129 c
269.6191 451.4727 264.4727 454.8389 257.3232 454.5098 c
f243.8564 428.6768 m
243.4648 428.6768 243.1475 428.3594 243.1475 427.9678 c
243.1475 427.5762 243.4648 427.2598 243.8564 427.2598 C
248.1895 427.2598 L
248.5811 427.2598 248.8984 427.5762 248.8984 427.9678 c
248.8984 428.3594 248.5811 428.6768 248.1895 428.6768 C
243.8564 428.6768 L
f243.6719 430.3184 m
243.5703 429.9404 243.7939 429.5518 244.1719 429.4502 C
248.5059 428.2832 L
248.8838 428.1816 249.2725 428.4063 249.374 428.7842 c
249.4756 429.1621 249.252 429.5508 248.874 429.6523 C
244.54 430.8184 L
244.1621 430.9209 243.7734 430.6963 243.6719 430.3184 c
f245.2285 432.9629 m
245.0469 432.6162 245.1807 432.1875 245.5273 432.0068 C
249.0273 430.1738 L
249.374 429.9922 249.8037 430.126 249.9844 430.4727 c
250.165 430.8193 250.0322 431.248 249.6846 431.4297 C
246.1846 433.2627 L
245.8379 433.4434 245.4092 433.3105 245.2285 432.9629 c
f247.0879 436.5273 m
246.7793 436.2871 246.7236 435.8418 246.9639 435.5332 C
249.2969 432.5332 L
249.5371 432.2236 249.9824 432.168 250.291 432.4082 c
250.6006 432.6484 250.6563 433.0938 250.416 433.4033 C
248.083 436.4033 L
247.8428 436.7119 247.3975 436.7676 247.0879 436.5273 c
f250.4473 439.1338 m
250.0801 439 249.8896 438.5938 250.0234 438.2256 C
251.3574 434.5596 L
251.4912 434.1914 251.8975 434.002 252.2656 434.1357 c
252.6328 434.2695 252.8232 434.6758 252.6895 435.0439 C
251.3555 438.71 L
251.2217 439.0781 250.8154 439.2676 250.4473 439.1338 c
f254.0684 440.166 m
253.6826 440.0986 253.4248 439.7324 253.4912 439.3467 C
254.1582 435.5127 L
254.2246 435.1279 254.5918 434.8691 254.9775 434.9365 c
255.3633 435.0029 255.6211 435.3701 255.5547 435.7559 C
254.8877 439.5898 L
254.8213 439.9746 254.4541 440.2334 254.0684 440.166 c
f257.3174 439.3604 m
256.9834 435.3604 L
256.9512 434.9707 257.2412 434.6279 257.6309 434.5957 c
258.0205 434.5625 258.3633 434.8525 258.3955 435.2422 C
258.7295 439.2422 L
258.7617 439.6328 258.4717 439.9756 258.082 440.0078 c
257.6924 440.04 257.3496 439.75 257.3174 439.3604 C
f262.3945 437.3398 m
260.0615 435.3398 L
259.7646 435.085 259.7305 434.6377 259.9854 434.3398 c
260.2402 434.043 260.6875 434.0088 260.9844 434.2637 C
263.3174 436.2637 L
263.6143 436.5186 263.6484 436.9658 263.3945 437.2627 c
263.1396 437.5596 262.6924 437.5938 262.3945 437.3398 C
f266.3604 435.0957 m
262.8604 433.2627 L
262.5137 433.0811 262.3799 432.6523 262.5615 432.3057 c
262.7432 431.959 263.1719 431.8252 263.5186 432.0068 C
267.0186 433.8398 L
267.3652 434.0215 267.499 434.4502 267.3174 434.7969 c
267.1357 435.1436 266.707 435.2773 266.3604 435.0957 C
f263.8154 430.165 m
263.7979 429.7744 264.1016 429.4434 264.4922 429.4268 C
268.3252 429.2598 L
268.7168 429.2432 269.0469 429.5459 269.0645 429.9375 c
269.0811 430.3281 268.7783 430.6592 268.3867 430.6758 C
264.5537 430.8428 L
264.1631 430.8594 263.832 430.5566 263.8154 430.165 c
f264.8203 426.7227 m
264.7715 426.334 265.0469 425.9795 265.4355 425.9316 C
269.4355 425.4316 L
269.8232 425.3828 270.1777 425.6582 270.2266 426.0469 c
270.2744 426.4346 269.999 426.7891 269.6113 426.8379 C
265.6113 427.3379 L
265.2227 427.3857 264.8682 427.1104 264.8203 426.7227 c
f226.1523 447.3135 m
225.7773 447.2012 225.5654 446.8057 225.6777 446.4307 c
227.3477 440.8643 232.459 441.9316 232.5098 441.9424 c
232.8906 442.0273 233.1299 442.4033 233.0469 442.7852 c
232.9639 443.166 232.5869 443.4082 232.2051 443.3271 c
232.0479 443.293 228.3203 442.5508 227.0352 446.8379 c
226.9229 447.2129 226.5273 447.4258 226.1523 447.3135 c
f225.665 456.959 m
225.5781 456.5791 225.8154 456.2012 226.1953 456.1133 c
226.5752 456.0244 226.9561 456.2607 227.0459 456.6406 c
227.0967 456.8525 228.3672 461.834 235.4336 460.9316 c
243.3223 459.9248 243.8145 452.707 243.8145 452.6348 c
243.8145 452.2432 244.1318 451.9258 244.5234 451.9258 c
244.915 451.9258 245.2314 452.2432 245.2314 452.6348 c
245.2314 454.4248 243.5996 461.3174 235.6133 462.3379 c
227.2393 463.4063 225.6797 457.0244 225.665 456.959 c
f226.4619 452.5957 m
233.6172 451.9736 237.0146 444.9053 237.0479 444.834 C
238.332 445.4346 L
238.1816 445.7559 234.5674 453.3135 226.585 454.0078 C
226.4619 452.5957 L
f231.499 451.625 m
232.8809 451.3105 L
232.8965 451.3799 234.5254 458.2725 239.2402 459.7939 C
238.8057 461.1426 L
233.3184 459.3721 231.5703 451.9404 231.499 451.625 C
f290.748 445.168 m
283.8936 444.1143 282.248 439.2256 282.1816 439.0186 C
283.5303 438.582 L
283.5879 438.7559 285.0098 442.8516 290.9639 443.7676 c
293.625 444.1768 296.292 443.3184 298.4736 441.3496 c
300.9355 439.1279 302.3096 435.8828 302.1484 432.6699 c
301.8223 426.1592 295.9541 423.3877 292.8965 422.832 c
289.4521 422.2061 285.3926 423.7852 284.2197 425.1055 C
283.1602 424.1641 L
284.6113 422.5313 289.1143 420.7041 293.1494 421.4375 c
296.5898 422.0625 303.1934 425.2002 303.5645 432.5986 c
303.7461 436.2334 302.1982 439.8975 299.4229 442.4023 c
296.9551 444.6289 293.7939 445.6367 290.748 445.168 c
f287.2578 442.9063 m
296.1055 436.1133 292.8701 422.7754 292.8359 422.6416 C
294.21 422.2939 L
294.3574 422.8779 297.7148 436.6641 288.1211 444.0303 C
287.2578 442.9063 L
f293.9316 431.3076 m
294.0947 431.2441 297.9932 429.7471 302.626 430.4336 C
302.4189 431.8359 L
298.1719 431.2061 294.4844 432.6143 294.4473 432.6279 C
293.9316 431.3076 L
f*u
1 D
317.8672 456.5098 m
317.751 456.5117 306.8242 456.5605 306.6475 445.8135 c
306.5859 442.0137 307.8506 438.915 310.4082 436.6025 c
313.8428 433.4971 318.4248 432.9004 320.1055 433.0977 c
323.0342 433.4414 330.7959 437.1875 329.8945 446.2051 c
329.4463 450.6885 327.2197 453.1904 325.4307 454.499 c
322.8408 456.3945 319.8066 456.8652 317.8672 456.5098 C
f0 D
318.0029 455.1084 m
319.5723 455.4385 322.3047 455.0313 324.5938 453.3555 c
326.8252 451.7227 328.1709 449.2012 328.4844 446.0645 c
329.2705 438.2002 322.3975 434.7939 319.9395 434.5049 c
318.5264 434.3389 314.4023 434.9014 311.3584 437.6543 c
309.1172 439.6797 308.0098 442.417 308.0654 445.79 c
308.2178 455.1143 317.4531 455.0977 317.8457 455.0928 C
317.9248 455.0918 L
318.0029 455.1084 L
f*U
314.3174 434.5381 m
315.7275 434.3975 L
317.166 448.7832 325.4248 453.126 325.5078 453.1689 C
324.8721 454.4355 L
324.5039 454.251 315.8389 449.752 314.3174 434.5381 C
f307.8008 448.2617 m
307.8613 448.2568 313.9258 447.7412 317.0342 444.7881 C
318.0107 445.8154 L
314.5342 449.1172 308.1807 449.6533 307.9121 449.6748 C
307.8008 448.2617 L
f338.9189 439.8594 m
339.793 438.7432 L
340.0293 438.9268 345.6631 443.207 351.9766 439.2031 c
354.4893 437.6094 355.7754 434.998 355.5986 431.8506 c
355.3838 428.0391 353.0322 424.3057 349.8799 422.7715 c
346.5762 421.165 342.418 421.1719 339.2861 422.7881 c
337.1191 423.9063 335.7354 425.6689 335.3887 427.751 C
333.9902 427.5176 L
334.4131 424.9834 336.0625 422.8564 338.6357 421.5283 c
342.1514 419.7139 346.8086 419.7021 350.499 421.4971 c
354.0928 423.2451 356.7715 427.4697 357.0137 431.7715 c
357.2178 435.4014 355.6592 438.5459 352.7363 440.4004 c
345.5635 444.9492 338.9844 439.9111 338.9189 439.8594 C
f339.0742 434.6025 m
339.1631 434.5879 348.0332 433.042 353.6172 425.3838 C
354.7617 426.2188 L
348.8262 434.3604 339.6895 435.9375 339.3037 436.001 C
339.0742 434.6025 L
f344.958 433.5635 m
346.0859 432.7051 L
346.1162 432.7441 349.1514 436.6299 354.583 437.0957 C
354.4619 438.5078 L
348.3848 437.9863 345.0957 433.7432 344.958 433.5635 C
f*u
1 D
345.6055 471.8379 m
338.1318 470.9482 337.1611 462.793 337.1523 462.7109 C
337.1514 462.7051 L
336.834 459.5332 337.6445 456.9277 339.4932 455.1699 c
341.3828 453.374 344.2881 452.6201 347.4629 453.1006 c
352.6416 453.8857 355.8574 457.1895 356.0645 461.9375 c
356.1572 464.0625 355.3848 467.3613 352.9053 469.6611 c
351.002 471.4277 348.4775 472.1797 345.6055 471.8379 c
f0 D
345.7734 470.4307 m
348.2539 470.7266 350.3301 470.1182 351.9414 468.6221 c
353.9307 466.7773 354.7344 463.9658 354.6484 461.999 c
354.4707 457.9199 351.7744 455.1875 347.25 454.502 c
344.5117 454.0869 342.04 454.7051 340.4697 456.1973 c
339.1729 457.4307 338.502 459.2139 338.502 461.4014 c
338.502 461.7764 338.5215 462.1631 338.5615 462.5605 C
338.5957 462.8662 339.4365 469.6758 345.7734 470.4307 C
f*U
338.4414 465.6719 m
338.6025 464.2637 L
338.7002 464.2754 348.4551 465.29 353.9678 458.3604 C
355.0771 459.2422 L
349.0674 466.7969 338.873 465.7217 338.4414 465.6719 C
f344.7324 464.8037 m
345.9805 464.1318 L
346.002 464.1719 348.2197 468.208 351.7012 469.1162 C
351.3438 470.4873 L
347.2578 469.4219 344.834 464.9922 344.7324 464.8037 C
f236.5098 511.1768 m
227.5889 511.002 225.3633 503.5713 225.3418 503.4961 C
226.7041 503.1055 L
226.7813 503.3701 228.6875 509.6055 236.5371 509.7598 c
239.8047 509.8232 242.6328 508.7783 244.7158 506.7363 c
246.8643 504.6289 248.1475 501.5381 248.1475 498.4678 c
248.1475 493.6357 245.3105 487.8213 237.3135 487.3418 c
233.5742 487.1172 230.6221 487.9941 228.7764 489.876 c
227.4268 491.2529 226.7412 493.1484 226.8965 495.0781 C
225.4834 495.1914 L
225.2959 492.8525 226.1279 490.5537 227.7646 488.8838 c
229.2578 487.3613 232.1406 485.6113 237.3984 485.9268 c
246.3789 486.4658 249.5645 493.0195 249.5645 498.4678 c
249.5645 501.9102 248.123 505.3799 245.708 507.748 c
243.3477 510.0625 240.167 511.248 236.5098 511.1768 c
f239.7129 487.1709 m
240.999 487.7656 L
235.0781 500.5684 240.5713 509.8398 240.6279 509.9316 C
239.4189 510.6719 L
239.1729 510.2715 233.458 500.6934 239.7129 487.1709 C
f227.0996 504.7646 m
227.1738 504.7559 234.5518 503.7324 236.8643 497.874 C
238.1826 498.3945 L
235.5586 505.041 227.6162 506.1279 227.2793 506.1709 C
227.0996 504.7646 L
f*u
1 D
260.5244 498.3232 m
252.4727 496.3975 251.8271 487.6797 251.8174 487.5234 C
251.7803 487.1348 251.7607 486.748 251.7607 486.3643 c
251.7607 483.5029 252.7832 480.8428 254.5957 479.084 c
256.6133 477.127 259.501 476.3252 262.9463 476.7646 c
272.1357 477.9385 274.0645 483.0518 274.0645 487.1348 c
274.0645 490.332 272.0732 494.1367 269.2207 496.3867 c
267.4385 497.793 264.4834 499.2705 260.5244 498.3232 c
f0 D
255.583 480.1016 m
253.8311 481.8008 252.9512 484.5293 253.2285 487.3994 C
253.2305 487.4248 L
253.251 487.7432 253.8037 495.2588 260.8545 496.9453 c
264.2607 497.7598 266.8066 496.4863 268.3428 495.2744 c
271.1689 493.0439 272.6475 489.4912 272.6475 487.1348 c
272.6475 482.0234 269.3232 479.0078 262.7666 478.1709 c
259.7637 477.7871 257.2803 478.4551 255.583 480.1016 c
f251.8154 487.5107 m
251.8174 487.5322 251.8174 487.5361 V
251.8154 487.5107 L
f*U
253.3604 480.8857 m
254.6846 480.3809 L
254.8301 480.7559 258.3975 489.5537 272.9844 488.7607 C
273.0615 490.1758 L
257.3916 491.0273 253.5176 481.3008 253.3604 480.8857 C
f259.0732 486.4521 m
260.3066 487.1504 L
260.2793 487.1982 257.6289 491.9678 258.7109 496.2959 C
257.3359 496.6396 L
256.1143 491.7549 258.9521 486.666 259.0732 486.4521 C
f239.8564 445.3018 m
247.4395 461.2178 247.9395 494.4678 v
250.0234 499.1348 247.1895 504.8018 v
244.8564 546.4678 229.6895 565.8018 v
228.0234 568.8008 230.1895 570.1348 v
232.3564 571.4678 234.6895 569.8018 236.1895 567.3018 c
237.6895 564.8018 252.9395 539.9678 254.6895 493.4678 c
250.6904 490.8018 253.5234 481.4678 v
253.8564 479.8018 253.8564 479.3018 v
253.8564 478.8018 251.3564 462.4678 248.3564 450.3018 c
245.5225 446.3018 245.3564 443.3018 v
239.8564 445.3018 l
f315.0225 455.3018 m
316.8564 478.3018 318.3564 482.9678 v
319.8564 487.6348 325.0234 485.4678 323.8564 481.1348 c
322.6895 476.8018 320.5234 463.4688 320.3564 455.8018 c
316.8555 456.1348 315.0225 455.3018 v
f315.5225 434.3018 m
315.3555 425.4688 318.0225 418.8018 v
310.0225 407.9688 307.6895 404.3018 v
313.8564 404.8018 317.6895 399.4678 v
317.0225 403.1348 317.6895 405.1348 v
318.3564 407.1348 334.1895 421.6348 337.6895 429.8018 c
341.1895 437.9678 341.8555 448.1348 341.0225 454.4678 c
334.6895 457.4688 339.6895 467.8018 v
336.8555 481.9688 341.0225 498.3018 v
345.1895 514.6348 352.1895 519.6348 353.1895 520.6348 c
354.1895 521.6348 354.8564 523.1348 353.6895 524.6348 c
352.5225 526.1348 348.6904 524.8018 347.3564 523.4678 c
346.0225 522.1348 339.1904 513.6348 335.3564 502.9678 c
331.5225 492.3018 332.1895 474.9678 333.1895 467.4678 c
334.1895 459.9678 340.0225 437.6348 324.0225 424.9678 c
320.8555 428.9678 321.0225 433.6348 v
318.1885 433.3018 315.5225 434.3018 v
f265.6895 355.8018 m
269.6895 351.9678 268.8564 351.6348 v
317.5225 351.6348 l
315.1895 356.3018 317.1895 360.4678 v
311.0225 362.1348 309.6895 365.4678 v
309.3574 360.1348 301.8564 359.6348 v
294.3564 359.1348 291.0234 364.3008 290.6895 367.1348 c
287.5234 368.4678 l
288.0234 366.3018 287.1895 364.9678 v
286.3564 363.6348 285.6895 360.8018 286.1895 359.4678 c
284.5234 361.4678 282.1895 362.4678 v
279.8564 363.4678 277.5234 364.4678 277.1895 365.4678 c
275.5234 357.8018 265.6895 355.8018 v
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
