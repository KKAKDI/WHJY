%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (864.ai)
%%CreationDate: 3/25/2002 6:36 PM
%%BoundingBox: 218 321 372 560
%%HiResBoundingBox: 218.2739 321.1855 371.3447 559.2959
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13756 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC8C444B204B204B204B
%204B204B204B204B204B204B204A204B204A204B204A204B204A204B204A
%204B204A204B204A204B204A204B204A204B204A204B204A204B204A68FD
%07FC99FFFD05FC8C27F82727525152275251522752515227525152275251
%522752515227525152275251522752515227525152275251522752515227
%52515227525152275251522752515227272093FD05FCC2FFFD04FC8C20F8
%FD44FF52F88CFD04FCBBFFFD04FC2727FD46FF52F8FD04FCC2FFFCFCFC8C
%F8A8FD0CFFC9FD3AFFF844FCFCFCBBFFFCFCFC6827FD0DFFB5CFFD39FF27
%4BFCFCFCC2FFFCFCFC6EF8FD0CFFC9FCB5FD39FF5226FCFCFCBCFFFCFCFC
%6827FD0CFFC2FCFCBCFD38FF274BFCFCFCC2FFFCFCFC6EF8FD0CFFC2FCFC
%FCC3FD07FFC992FD2EFF5220FCFCFC99FFFCFCFC6827FD0CFFBCFD04FCFD
%05FFC9BBFCB5FD2EFF274BFCFCFCC2FFFCFCFC6FF8FD0CFFC2FD04FCFD04
%FFB4FCFCFCB4FD2EFF5220FCFCFCBBFFFCFCFC6827FD0CFFC2FD04FCFFFF
%FFB4FD04FCC2FD2EFF4B4BFCFCFCC2FFFCFCFC68F8FD0CFFCFFCFCFCBBFF
%FF93FD05FCBBFD2EFF5220FCFCFCBBFFFCFCFC6827FD0DFFCF4A9ACFFFFF
%FD06FCC3FD18FFCFB5FD14FF514BFCFCFCC2FFFCFCFC6EF8FD0EFF2752FF
%FFFFFD05FCB4CAFD0DFFBBC2C3FD08FFBBFCC9FD13FF5226FCFCFCBCFFFC
%FCFC6827FD04FFC2C2BCC2BCC3CAFFFFFF4B52FFFFFFBBFD04FCC2FD0EFF
%C2FCFCFCBBC9FD04FFC9FCFCBBFD13FF274BFCFCFCC2FFFCFCFC6EF8FD04
%FFC3FD06FCBBFFFF5227FFFFFFF86F92BBC3FFFFFFBBFD0CFFB5FD04FC93
%FFFFCAFD04FCFD04FFA1B5FD0DFF5220FCFCFC99FFFCFCFC6827FD05FFC9
%FD06FCC2FF7D27FFFF7DF8A8FD05FFBBFCFD0CFFC9FD05FCBCFFBBFD04FC
%CAFFCAB5FCFCFD0DFF274BFCFCFCC2FFFCFCFC6FF8FD06FFBBFD05FCC2FF
%7DF8FFFF2727FD04FFBCFCFCFCFD0DFFB4FD05FCCAFD05FCC3BBFCFCFCB4
%FD0DFF5220FCFCFCBBFFFCFCFC6827FD07FFC9B4FCFCB57DFFA8F8FF7CF8
%FD04FFBCFD04FCFD0DFFCAFD05FCCAFD05FCBBFD04FCB5FD0DFF4B4BFCFC
%FCC2FFFCFCFC68F8FD09FFC9C94BF827FFF8A8F852FFFFFFC2FD05FCFD0E
%FFC3FD04FCCAB4FCFCFCB5FD05FCBBFD0DFF5220FCFCFCBBFFFCFCFC6827
%FD0CFF7D27F8272727FD04FFFD05FCBBFD08FFC9FD07FFBC934BFFC2FCFC
%B5B5FD05FCC2FD0DFF514BFCFCFCC2FFFCFCFC6EF8FD0DFFA827F8F852FF
%FFFFC3FD05FCBBFD07FFCAB4FCFCB4BCC3FFFFFFA82027FF4B4BCAB5FD05
%FCFD0EFF5226FCFCFCBCFFFCFCFC6827FD0FFF27F8FD04FFCAFD05FCFD09
%FFC9FD05FCB4C9FFFFA8F8522752FF99FD04FCCAFD0EFF274BFCFCFCC2FF
%FCFCFC6EF8FD05FFA0B5B4B592B5B4C2CAFF7DF8FD05FF93FCFC92CAFD04
%FFCAFD05FF93FD06FCC9FFFF7DF8F8A8FF274AC2BCFD10FF5220FCFCFC99
%FFFCFCFC6827FD06FFBBFD06FCB5CAFFF8FD04FFA8F8A1C9FD04FFCFB5CA
%FD06FFFD06FCB5FFFFFF4B27FF52F8FD13FF274BFCFCFCC2FFFCFCFC6FF8
%FD07FFBBFD06FCC2FF2752FFFFFF2727FD05FFC9FCFCC3FD06FFC2FD05FC
%B5FFFFFF52F87DF8A7FD04FFC2BCC9FD0CFF5220FCFCFCBBFFFCFCFC6827
%FD08FFBCFD05FCC2FF2752FFFFA8F8A8FD04FFC2FCFCFCCAFD07FFC2FD04
%FCB5FFFFFF2752F852FFFFC9BCFCFCFCFD0DFF4B4BFCFCFCC2FFFCFCFC68
%F8FD09FFC3BBFCB444F8527DF8FFFF2727FD04FFBBFD04FCFD09FFC9BBB5
%4427FFFFFF27F827FFFFBBFD04FCB4FD0DFF5220FCFCFCBBFFFCFCFC6827
%FD0EFF762726F8A8A1F8FD04FFC2FD05FCFD0DFFF827FFFFF8F8A8FFBCFD
%05FCB5FD0DFF514BFCFCFCC2FFFCFCFC6EF8FD10FF52F87DF852FFFFFFCA
%FD05FCB5FD0EFFF827A7F852FFCAFD06FCC2FD0DFF5226FCFCFCBCFFFCFC
%FC6827FD11FF5227F8A8FFFFFFC9FD05FCC2FFFFFFCFC2C2CACAFD07FFF8
%27F8FFFFC2FD06FCCAFD0DFF274BFCFCFCC2FFFCFCFC6EF8FD11FF7DF852
%FD04FFCAFD04FC8CFD05FFBCFD04FCB493CFFD04FFF827FFFFBCFD05FC99
%FD0EFF5220FCFCFC99FFFCFCFC6827FD0BFFCFC9CACAFFFFFFF8A8FD05FF
%6FFCFCB5CFFD06FFB5FD06FCC3FFFFFF5227FFFFCFFD04FCBBFD0FFF274B
%FCFCFCC2FFFCFCFC6FF8FD08FFC9B4FD06FCC9FF5127FD04FF52F8FD0BFF
%FD07FCFFFFFF2752FFFF7DF876C9FD11FF5220FCFCFCBBFFFCFCFC6827FD
%08FFCFB5FD07FCC97D27FFFFFF7DF8A8FD0BFFC3FD06FCC9FFFF2752FF7D
%277CFFFFCABBBBFCFCC9FD0BFF4B4BFCFCFCC2FFFCFCFC68F8FD09FFCAB5
%FD06FCB4FFF87DFFCFF852FD0DFFC3FD05FCCAFFFFF87DA8F852FFCABBFD
%05FCFD0CFF5220FCFCFCBBFFFCFCFC6827FD0AFFCFBBFD05FCB5FF5227FF
%2727FD10FFBCBBB46F27FFFF277D2727FFFFBBFD05FCB5FD0CFF514BFCFC
%FCC2FFFCFCFC6EF8FD0CFFC9B5FCFCB526F827F852F8A8FD13FF7DF827FF
%F827F8FFFFC3FD06FCBCFD0CFF5226FCFCFCBCFFFCFCFC6827FD12FF7D27
%F8F87CFD0BFFCAC2BCC2BCCACAFFFFFF7D275227F8FFFFFFBCFD06FCFD0D
%FF274BFCFCFCC2FFFCFCFC6EF8FD14FF52F8FD0DFFB4FD05FC92CAFFFF7D
%F8F87DFFFFFFC2FD05FCC3FD0DFF5220FCFCFC99FFFCFCFC6827FD15FF27
%7DFD0DFFFD07FCCAFFFF7DF852FFFFFF5293FCFCFCC9FD0EFF274BFCFCFC
%C2FFFCFCFC6FF8FD08FFC9BBB5B4FCFCB4BBCAFD04FF5227FD0DFFC9FD06
%FCBCFFFFFFF87DFFFF7DF87DCAC3FD10FF5220FCFCFCBBFFFCFCFC6827FD
%08FFBBFD08FCCFFD04FFF87DFD0DFFC3FD05FCC2FFFFFF277DFFA82752FD
%13FF4B4BFCFCFCC2FFFCFCFC68F8FD09FFC2FD07FCBBFD04FF52F852FD0D
%FFCA92FCFC8C27FFFFFF2752FFF827FD14FF5220FCFCFCBBFFFCFCFC6827
%FD0AFFC9B5FD05FCC2FD05FF27F8277DFD0DFFCFCAA82727FFFF525127F8
%FD15FF514BFCFCFCC2FFFCFCFC6EF8FD0CFFC9BBB5926FF827A7FFFFFFFD
%05F8FD05FFA8FD09FFA827F8FF2727F8FD16FF5226FCFCFCBCFFFCFCFC68
%27FD11FFA827F827A8FF27FD05F8FD04FF7DF87DFD08FFA827F87DF8A8FD
%16FF274BFCFCFCC2FFFCFCFC6EF8FD13FFA827F827FD06F827FFFFFF7CF8
%F827A1FD08FF27F8F8FD17FF5220FCFCFC99FFFCFCFC6827FD15FFA827FD
%07F8A8FFFFA1FD04F852FD08FF27F8FD17FF274BFCFCFCC2FFFCFCFC6FF8
%FD09FF275227527D7DFD08FF52FD06F876FFFF7DFD05F827FD08FFF827FD
%16FF5220FCFCFCBBFFFCFCFC6827FD09FF27FD05F82727A8FD06FFFD06F8
%27FFFFA8FD06F87DFD06FF7DF8F852FD15FF4B4BFCFCFCC2FFFCFCFC68F8
%FD09FFA8FD08F8A7FD05FFA8FD05F8A8FFFFFFFD06F827FD06FF52F8F8F8
%52FD14FF5220FCFCFCBBFFFCFCFC6827FD0AFF76FD08F8FD07FF5227F8A1
%FD04FFFD06F827FD06FF27FD04F87DFFFFFFA827FD0EFF514BFCFCFCC2FF
%FCFCFC6EF8FD0BFFFD08F852FD08FF2727FD04FF52FD05F827FD06FFFD05
%F827FFFFFF27F87DFD0DFF5226FCFCFCBCFFFCFCFC6827FD0BFFA8FD07F8
%52FD08FFA8277DFD04FF52FD04F827FD06FFFD06F8FFFFFFF8F8F8FD0DFF
%274BFCFCFCC2FFFCFCFC6EF8FD0CFFCF27FD06F8A8FD08FF2727FD05FFA7
%2727F87DFD06FFFD06F8FFFF52F8F8F827FD0CFF5220FCFCFC99FFFCFCFC
%6827FD0EFFA87D27527D27F852FD06FF7D52F827275251527DA8FF7DF8FD
%06FF27FD05F8FFFF27FD04F8A8FFC9FD09FF274BFCFCFCC2FFFCFCFC6FF8
%FD14FF7DF8207DA72727F8F8F852275227522727FD05F8FD05FFA8FD05F8
%FFFFFD05F852FFB5C2FD08FF5220FCFCFCBBFFFCFCFC6827FD15FFA8F8F8
%F85252A8F87CFD08FFA87D27F8F8277CFFFFFF7C27F8277DFF7DFD05F827
%CFFCB5CFFD07FF4B4BFCFCFCC2FFFCFCFC68F8FD13FF5227F8277CFFFFCF
%F852FD0DFF7DF8F8F827A1FFFF52F8FFFF7DFD05F827BBFCFCC2FD07FF52
%20FCFCFCBBFFFCFCFC6827FD10FFA852F82752FD05FF274BFD0CFFA827F8
%4BA8A82727277DA8F8A8FFFF27FD04F827B5FCFCFCCFFD06FF514BFCFCFC
%C2FFFCFCFC6EF8FD0EFF7D27F827A7FD06FF2720A8FD0BFF27F827A8FD04
%FFA852F8F8F852FFFF27FD04F8A1FD04FCBBFD06FF5226FCFCFCBCFFFCFC
%FC6827FD0CFF7D27F852A8FD07FF5227A8FD0AFF52F8277DFD09FF27F8F8
%7DFFFF2727F87DC2FD04FCB5FD06FF274BFCFCFCC2FFFCFCFC6EF8FD0AFF
%76F8F84BFD09FF7DF87CFD05FF5127F85252F8F87DFD0CFFF827F827A8FF
%F87DFFC2FD05FCFD06FF5220FCFCFC99FFFCFCFC6827FD04FFA85227274B
%27F87DFD07FFA82727F8F827FD04FF52FD06F852FD0EFFA8F87D27F87627
%7DFFC2FD05FCFD04FF277D274BFCFCFCC2FFFCFCFC6FF8FFFFFF27FD05F8
%52FD08FFA8FD06F8FFFFFF27FD07F8A8FD0FFF7DF8FF52F8F852FFFFFD04
%FCB4FFFFFFF8F8275220FCFCFCBBFFFCFCFC6827FFFF27FD06F87DFD07FF
%A8FD07F87DFF52FD08F8A8FD10FF27F8FF7D27F8FFFFCA6E93BBFFFFA8F8
%F8F8524B4BFCFCFCC2FFFCFCFC68F8FF51FD07F87DFD07FFFD08F8A8A8FD
%09F8FD04FF7D5152277DA8FD07FFA8F827FFA8F8F8FFFF5227FFFFCFFD04
%F8275220FCFCFCBBFFFCFCFC68277DFD07F827FD07FFA8FD07F827FF27FD
%07F827FFFFFF7627FD06F827FD07FF7DF87DFFA827F8FF2752FFFF27FD04
%F852514BFCFCFCC2FFFCFCFC6EF820FD06F851FD08FF7DFD07F8FF7DFD04
%F8272776A8FFFFFF27FD0AF85227522727F827F8F8A8FFFF27F85127FFFF
%FD05F8275226FCFCFCBCFFFCFCFC68FD05F8277DA8FD09FF27FD04F8274B
%FFFF7D527DA8FD07FF5227FD0AF827524B52277D7D7DF827FFFFA827F852
%FFFFFD05F87C274BFCFCFCC2FFFCFCFC6EF8FD10FFF8F82751A7FD11FFA8
%27FD07F827FD08FFCFF852FFFFA8F8F8FFFFFD05F87D5220FCFCFC99FFFC
%FCFC6827FD10FFA8FD13FFA8A8FFFFFFA85227F82752FD0AFFA8F87DFFFF
%A8F852FF27F8F8F827FF274BFCFCFCC2FFFCFCFC6FF8FD24FF7DF8A8FD13
%FF76F8FFFFFF7DF87DFFF8F8F8FFFF5220FCFCFCBBFFFCFCFC6827FD24FF
%4BF8F8A8FD09FFCAFD09FF27F8FFFFFF52F8A8277DFFFFFF4B4BFCFCFCC2
%FFFCFCFC68F8FD24FF52F8F8F8A8FD07FFC9FCFD09FFA82727FFFFFFF827
%F8FD04FF5220FCFCFCBBFFFCFCFC6827FD24FF51FD04F8A8FD06FFB4FCBC
%FD09FFA8F852FFFFFFF8F8FD04FF514BFCFCFCC2FFFCFCFC6EF8FD24FF52
%FD05F8FD05FFC2FCFCFCFD06FFA8FFFFFF7DF87DFFFF7DF8A8FFFFFF5226
%FCFCFCBCFFFCFCFC6827FD24FF27FD05F84BFD04FFB5FCFCFCC3FD05FF7D
%4BFFFFFF52F87DFFFF52F8FFFFFF274BFCFCFCC2FFFCFCFC6EF8FD16FFC2
%FD04FCB4C2CAFD06FF7DFD05F827FFFFFFCFFD04FCBBFD05FFF8F87DFFFF
%FF27F8A8FFA8F852FFFF5220FCFCFC99FFFCFCFC6827FD12FFC9CAC9CFFF
%BBFD05FCB5CFFD05FFA8FD06F8FFFFFFC9FD04FCB5FD05FF27F827FD04FF
%2727FFFF7627A8FF274BFCFCFCC2FFFCFCFC6FF8FD0FFFCAB5FD05FCB5C2
%B4FD05FCC2FD06FF27FD05F8FFFFFFC9FD05FCFD04FF7DF8F8F852FD04FF
%F827FFFFF851FF5220FCFCFCBBFFFCFCFC6827FD10FFCAB4FD06FCC2FD05
%FCB5FD07FF27FD04F8FFFFFFCAFD05FCFD04FF27FD04F8FD04FFA8F87DFF
%A8F8A84B4BFCFCFCC2FFFCFCFC68F8FD11FFC9FD06FCB5C2FD04FCB5FD08
%FFA152F827FD04FF99FCFCFC93FD04FFFD05F852FD04FFA7F87DFF27F852
%20FCFCFCBBFFFCFCFC6827FD08FFFD06FCB5CFFFFFC2FD06FCFFC9B5FCFC
%75FD0BFFF84BFD04FF9A6FB5FD04FFA8FD05F852FD05FF7DF8A8A827274B
%FCFCFCC2FFFCFCFC6EF8FD08FFC9FD07FCC3FFFFBBFD04FCBBFD04FF7DF8
%51FD0AFFA7F851FFFFFF7DF8FD05FF7DFD06F8FD04FF52FF51F8FF272026
%FCFCFCBCFFFCFCFC6827FD09FFC3FD07FCFFFFFFCAC2B56FF87DFD04FF7D
%F827FD0AFFA8F87DFFFF2727FD05FFA8FD05F827FFFFFF52F87DFF2727FF
%F827FCFCFCC2FFFCFCFC6EF8FFFFFFC2C3A1CFFFFFFFBBFD06FCA1FD06FF
%52F84BA8FFFFFFA8F8F8FD0AFFA7F876FFF852FD06FFFD05F84BFFFFA7F8
%F8F8FFA8272727F8FCFCFC99FFFCFCFC6827FFFFCFB5FCFCFCB5B5C3CFBC
%FD05FCFD08FFA827277DFFFFFFA827F8FD04FF7D272752FFFFA8F852F8FD
%07FF76FD04F8FFFFFFFD04F87DFFA8F8274BFCFCFCC2FFFCFCFC6FF8FFFF
%FFC3FD06FCB4C9C9B4FC8C27F876FD08FF27F8F852F827F8F8F827FD06F8
%267D7D52F827FD08FF27F827FFFFFF52FD04F827FFFF7DF820FCFCFCBBFF
%FCFCFC6827FD04FFBBFD06FCB5FD05FF7CF82727A8FF7D2727F827F84B27
%27277D7D7D27FD08F827F827F87CFD07FF7DF8FD04FF27FD04F827FFFFFF
%274BFCFCFCC2FFFCFCFC68F8FD05FFB4FD06FCC9FD06FF7D27FD04F852A8
%FFFFFFA8F8A8FFFF4BFD08F852FFFFFFA8F852FD06FF7D27FD04FFFD05F8
%27FFFFFF5220FCFCFCBBFFFCFCFC6827FD06FFB4FD05FC7CFD04FFA82727
%F8527D2727FFFFFFCACA274BFFFF52FD08F827A1CAC9FFFFA8F87DFD05FF
%5227FD04FFFD05F827FFFFFF514BFCFCFCC2FFFCFCFC6EF8FD07FFBCB5FC
%FC6F27F8275127F8F87DFFFF7DF8FFFFFFC2FCFCFC9AFF7D27F827F827F8
%F8F82792FD04FCC27D52F827FD04FF2752FD04FFFD05F827FFFFFF5226FC
%FCFCBCFFFCFCFC6827FD0DFF7DF8F8272752FFCAC3267CFFFFFFB4FCFCFC
%B4FD0AFFB4FD06FC272727F827FFFFFF277DFD04FF52FD04F852FFFFFF27
%4BFCFCFCC2FFFCFCFC6EF8FD0BFFA827F852A8A7F8FFC9FCFCFCB4FFFFCF
%FD05FCFD09FF99FD07FCA1FFFFCFF827FFFFF8A8FD05FF27F8277DFD04FF
%5220FCFCFC99FFFCFCFC6827FD06FFC2B5FCC27DF827A8FFFF274BFFBBFD
%04FCC9FFC9FD05FCFD08FFCAB5FD06FCB4FD04FFA7F827A8F8FD06FFF8A1
%FD06FF274BFCFCFCC2FFFCFCFC6FF8FD05FFB5FD04FC4B52FFFFFFA8F87D
%FFFD05FCC9FFC9FD04FCB4FD08FFBBFD04FCB4BBC3FD05FFF87DF8F8F8FD
%06FFF87DFD06FF5220FCFCFCBBFFFCFCFC6827FD04FFBBFD05FCB4FD04FF
%7DF8FFFFFD05FCC9FFCAFD04FCC2FD07FFCFB5C2C3CAFD09FFF8F8A827F8
%A8FD05FFF8FD07FF4B4BFCFCFCC2FFFCFCFC68F8FFFFFFCAFD06FCBBFFFF
%BBFCFC93CAFFFD05FCFFFFFFFD04FCCAFD15FFF8F8F87D27F87DFFFFFF7D
%F8FD07FF5220FCFCFCBBFFFCFCFC6827FFFFFFC2FD06FCC9FFC2FD04FCC2
%FFB5FCFCFCBCFFFFFFBCFCFCC9FD15FF7DFD04F87D522752FFFFA127FD07
%FF514BFCFCFCC2FFFCFCFC6EF8FFFFFFB4FD05FCC2FFFFB5FD04FCB4FFBB
%FCFCFCCAFFFFFFC2FCBBFD16FF7DFD05F8A852F827C24B27FD07FF5226FC
%FCFCBCFFFCFCFC6827FFFFFFB4FCFCFCBBC9FFFFFFFD05FCBBFFCAFCFCCA
%FD05FFFCFD17FF7DFD05F827FF7D278CB44BFD07FF274BFCFCFCC2FFFCFC
%FC6EF8FFFFCAFCB49ACFFD04FFC3FD05FC9AFFFFB4A0FD06FFC9FD17FF7D
%FD05F827FFFFA1FCFCB4CAFD06FF5220FCFCFC99FFFCFCFC6827FFFFC9CA
%FD07FFCFFD05FCFFFFFFC9FD1FFFA8FD06F8FFFFC3FCFCFCBBFD06FF274B
%FCFCFCC2FFFCFCFC6FF8FD0CFFFD04FCC9FD0EFFA852F8F8F8277DFD0FFF
%27FD04F820FFFFB4FCFCFC8C51FD05FF5220FCFCFCBBFFFCFCFC6827FD0C
%FFBBFCFCC2FD0EFF5227FD07F8FD04277D7DFD09FFFD04F827FFFFBBFD04
%FC20277DFFFFFF4B4BFCFCFCC2FFFCFCFC68F8FD0CFFC9FCBBFD0EFF27FD
%08F87D7C7D5252FD04F8277DA8FD05FF522727FFFFFFB4FD04FCC927F851
%FFFF5220FCFCFCBBFFFCFCFC6827FD0DFFC3FD0EFF27FD08F827FD08FF7D
%52F8F8F852A8FFFFFF5152FFFFFFBBFD04FCC9FF7D27F8A8514BFCFCFCC2
%FFFCFCFC6EF8FD1BFF51FD08F827A8FD0BFFA85227F8F852A75227FFFFFF
%C9FD04FCFD04FF52F82720FCFCFCBCFFFCFCFC6827FD1BFF52F8272727F8
%274BA8FD11FF7D27F8F827FD04FFCA514BFD06FFA8F84BFCFCFCC2FFFCFC
%FC6EF8FD36FFA827F8F8F852FFFFFF52F8FD07FF5220FCFCFC99FFFCFCFC
%6827FD2EFFA87D7DA8FFFF7D4BF8277DFF5227F852A8FFF8FD07FF274BFC
%FCFCC2FFFCFCFC6FF8FD2CFF7DFD05F827F8F827A8FD05FF7DF8F8522052
%FD06FF5220FCFCFCBBFFFCFCFC6827FD2BFF52FD07F876FD0AFF7D27F827
%FD06FF4B4BFCFCFCC2FFFCFCFC68F8FD29FFA8FD09F8A1FD0AFFCF27F8F8
%277DFD04FF4B20FCFCFCBBFFFCFCFC8CF8A8FD27FFA827FD09F8FD05FFC9
%BBFCB5BC52F8277DFF27F851FFFFFFF86FFCFCFCC2FFFD04FC2027FD27FF
%27FD08F827FD05FFC2FD05FC267DFD04FF7D27F87D2727FD04FCBCFFFD04
%FCB4F827A8FD2AFFA87DFD07FFC2FD06FCC2FD07FF52F8F868FD04FCC2FF
%FD06FCF8F8F8522752275227522752275227522752275227522752275227
%52275227522752275227522752275227522752275227522752274B204A20
%4B204A2752275227522727F82768FD05FC99FFFD07FC8C6F204B444B204B
%444B204B444B204B444B204B444B204B444B204B444B204B444B204B444B
%204B444B204B444B204B444B204B444B204B444B204B444B204B444B4493
%FD07FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
371.3447 321.1855 m
218.2739 321.1855 L
218.2739 559.2959 L
371.3447 559.2959 L
371.3447 321.1855 L
fu0 0 0 0 k
225.9683 542.7412 m
225.9683 337.5742 l
225.6353 329.0752 236.3018 328.9082 v
355.1357 328.7412 l
362.6357 329.4082 363.4688 338.2412 v
363.4688 543.2412 l
362.8027 551.2412 353.6357 551.7412 v
234.6348 551.9077 l
226.4683 551.2412 225.9683 542.7412 v
fu0.65 0.53 0.51 1 k
302.1357 333.0742 m
305.3018 335.5752 306.4688 336.9082 v
307.6357 338.2412 313.4688 342.7422 318.4688 341.9082 c
323.4688 341.0742 323.3027 335.7422 320.6357 333.9082 c
317.9688 332.0742 313.4688 332.2422 310.4688 332.4082 c
307.4688 332.5742 302.1357 333.0742 y
f277.8018 346.5742 m
280.9678 350.0752 282.1348 351.4082 v
283.3018 352.7412 289.4692 357.2422 294.6353 355.9082 c
299.8018 354.5742 299.1348 350.4082 295.8013 348.2412 c
292.4683 346.0742 286.8013 345.7422 284.1348 345.9082 c
281.4683 346.0742 277.8018 346.5742 y
f326.8018 372.0742 m
326.6357 368.5742 326.1357 365.7412 v
325.6357 362.9082 325.1357 355.5742 329.4688 353.0742 c
333.8018 350.5742 337.8018 352.7412 336.8018 358.7412 c
335.8018 364.7412 332.6357 365.9072 330.6357 367.5742 c
328.6357 369.2412 326.8018 372.0742 y
f351.3018 392.9082 m
348.9697 389.4082 347.6357 387.7412 v
346.3018 386.0742 343.9697 381.0752 345.6357 376.9082 c
347.3018 372.7412 352.8018 373.7402 354.3018 376.0742 c
355.8018 378.4082 355.8018 383.2422 354.4688 386.4082 c
353.1357 389.5742 351.3018 392.9082 y
f335.3018 406.9082 m
334.3027 402.0742 333.6357 400.5742 v
332.9688 399.0742 330.1357 393.2412 332.6357 388.2412 c
335.1357 383.2412 340.1357 385.2402 341.6357 389.0742 c
343.1357 392.9082 341.1357 397.7402 339.1357 401.0742 c
337.1357 404.4082 335.3018 406.9082 y
f296.3013 416.9082 m
295.6353 412.4082 295.6353 409.9082 v
295.6353 407.4082 295.1353 400.4082 300.6357 397.7412 c
306.1357 395.0742 307.9678 398.0752 307.3018 402.4082 c
306.6357 406.7412 304.4678 408.9082 301.8018 411.2412 c
299.1357 413.5742 296.3013 416.9082 y
f290.3018 377.7412 m
293.1353 380.2412 294.6353 382.2412 v
296.1353 384.2412 301.4688 387.7412 304.9688 387.2412 c
308.4688 386.7412 311.6357 382.4072 308.9688 379.5742 c
306.3018 376.7412 302.4697 377.4082 299.1357 377.7412 c
295.8013 378.0742 290.3018 377.7412 y
f359.9688 432.5742 m
356.3018 429.4072 353.9688 427.5742 v
351.6357 425.7412 349.4688 421.5742 350.9688 417.5742 c
352.4688 413.5742 358.1357 413.4082 359.6357 418.7412 c
361.1357 424.0742 359.9688 432.5742 y
f295.4683 421.2412 m
300.1357 424.5752 302.4688 425.4082 v
304.8018 426.2412 314.9688 426.9082 315.9688 421.7412 c
316.9688 416.5742 311.3018 415.9082 305.3018 417.7412 c
299.3018 419.5742 295.4683 421.2412 y
f274.6348 420.7412 m
276.9683 423.9082 277.9683 426.2412 v
278.9683 428.5742 282.8013 433.2412 288.6348 433.7412 c
294.4683 434.2412 295.9683 429.0752 293.3018 425.9082 c
290.6348 422.7412 283.6348 422.2422 281.4683 421.9082 c
279.3018 421.5742 274.6348 420.7412 y
f257.3018 417.7412 m
258.9688 422.2412 259.3018 424.2412 v
259.6348 426.2412 262.8018 431.4082 267.3018 432.2412 c
271.8018 433.0742 275.1348 430.0742 273.9683 426.0742 c
272.8018 422.0742 267.9688 420.0742 263.8018 419.2412 c
259.6348 418.4082 257.3018 417.7412 y
f226.1348 420.0742 m
229.6348 424.0752 230.6348 425.9082 v
231.6348 427.7412 235.6348 432.0742 239.9683 432.0742 c
244.3018 432.0742 246.3018 427.2402 242.8018 424.0742 c
239.3018 420.9082 233.4678 419.9082 231.6348 419.9082 c
229.8018 419.9082 226.1348 420.0742 y
f244.1348 459.7412 m
247.6353 454.5747 249.3018 451.7412 v
250.9683 448.9077 255.3018 447.0747 259.3018 447.0747 c
263.3018 447.0747 264.8018 449.4077 262.9683 453.2412 c
261.1348 457.0747 257.1348 458.9077 252.1348 459.2412 c
247.1348 459.5747 244.1348 459.7412 y
f270.8018 472.2412 m
271.1348 467.2407 270.9683 464.9077 v
270.8018 462.5747 271.6348 457.5747 275.6348 455.0747 c
279.6348 452.5747 283.9683 455.4082 283.9683 458.0747 c
283.9683 460.7412 282.4688 465.5747 277.8018 467.7412 c
273.1348 469.9077 270.8018 472.2412 y
f290.6348 466.5747 m
290.6353 461.4082 290.8018 458.5747 v
290.9683 455.7412 291.4692 450.5747 296.6353 449.0747 c
301.8018 447.5747 304.1357 451.4082 303.1357 455.0747 c
302.1357 458.7412 299.9688 460.9082 296.3013 463.0747 c
292.6348 465.2412 290.6348 466.5747 y
f317.3018 461.9077 m
316.8027 457.0742 316.1357 454.9077 v
315.4688 452.7412 314.1768 447.9668 317.6357 444.0747 c
320.3018 441.0747 326.1357 441.7417 326.1357 447.0747 c
326.1357 452.4077 323.9697 454.9082 322.1357 456.5747 c
320.3018 458.2412 317.3018 461.9077 y
f333.9688 454.9077 m
332.1348 450.7417 331.3018 448.5747 v
330.4688 446.4077 328.1357 440.7422 331.6357 436.9082 c
335.1357 433.0742 339.1357 436.2412 340.1357 438.9077 c
341.1357 441.5747 339.9688 445.7407 337.9688 448.9077 c
335.9688 452.0747 333.9688 454.9077 y
fU277.7993 445.4297 m
264.6201 442.1968 241.8711 430.4883 241.6431 430.3711 C
242.2935 429.1113 L
242.52 429.2285 265.1211 440.8604 278.1372 444.0527 c
290.603 447.1108 304.9082 444.3467 323.1553 435.3555 c
337.8281 428.126 352.3789 411.0244 363.0781 388.4375 C
364.3594 389.0449 L
357.9932 402.4844 344.2559 426.5381 323.7822 436.627 c
305.2188 445.7739 290.6074 448.5708 277.7993 445.4297 c
f321.6357 436.0879 m
321.749 435.9248 333.0117 419.6816 342.4229 408.29 C
362.6768 384.0342 L
363.7607 384.9482 L
343.5146 409.1924 L
334.1436 420.5371 322.9141 436.7324 322.8018 436.8945 C
321.6357 436.0879 L
f313.9307 421.9492 m
314.0068 420.5332 L
332.5068 421.5332 L
332.4307 422.9492 L
313.9307 421.9492 L
f317.5273 458.5869 m
318.9102 458.8955 L
318.8535 459.1514 313.3057 484.8081 321.8965 513.0347 C
320.541 513.4478 L
311.8369 484.8496 317.4688 458.8462 317.5273 458.5869 C
f312.168 513.7578 m
312.5146 513.063 317.3086 507.5977 318.7695 505.9395 C
319.834 506.876 L
316.9355 510.1655 313.707 513.9214 313.4297 514.4023 C
312.168 513.7578 L
f317.0459 496.6343 m
318.2256 495.8481 L
321.5439 500.8262 327.2734 509.0186 328.5166 509.8101 C
327.7549 511.0054 L
325.8506 509.793 317.9414 497.9775 317.0459 496.6343 C
f308.0234 501.2178 m
309.2324 499.1465 316.0371 492.9775 316.3262 492.7158 C
317.2773 493.7666 L
315.3535 495.5078 310.1592 500.3691 309.248 501.9316 C
308.0234 501.2178 L
f307.1348 484.9067 m
316.125 475.584 L
317.1465 476.5654 L
308.1367 485.9087 L
307.1348 484.9067 L
f315.9404 479.8799 m
316.9971 478.9355 L
318.0098 480.0684 326.9131 490.0459 327.6025 491.4243 C
326.335 492.0581 L
325.8799 491.1484 319.7178 484.1055 315.9404 479.8799 C
f306.165 470.8779 m
316.9863 460.8887 L
317.9512 461.9268 L
307.1064 471.9375 L
306.165 470.8779 L
f316.9229 465.5264 m
318.0146 464.623 L
328.4316 477.2251 328.5889 477.6953 328.6406 477.8501 C
327.334 478.3872 L
326.9541 477.7339 320.7461 470.1519 316.9229 465.5264 C
f254.2622 529.1836 m
257.4063 490.7871 271.2305 468.5815 271.3696 468.3618 C
272.5669 469.1201 L
272.4297 469.3374 258.7881 491.2769 255.6743 529.2988 C
254.2622 529.1836 L
f257.166 510.3882 m
258.4375 509.7612 L
258.4951 509.8789 264.2534 521.5405 266.1729 523.7803 C
265.0967 524.7021 L
263.062 522.3281 257.4058 510.8745 257.166 510.3882 C
f248.1514 516.6074 m
250.3872 515.4897 256.7876 510.2461 256.8521 510.1934 C
257.7515 511.2891 L
257.4834 511.5088 251.1626 516.6865 248.7852 517.875 C
248.1514 516.6074 L
f251.6348 501.1157 m
254.6235 499.5215 259.3223 496.9404 260.0146 496.3633 C
260.9219 497.4521 L
259.8955 498.3071 253.0762 501.9536 252.3018 502.3662 C
251.6348 501.1157 L
f261.3428 492.5742 m
262.5938 491.9082 L
262.6753 492.0615 270.7632 507.2446 271.7422 508.8765 C
270.5269 509.606 L
269.5293 507.9429 261.6768 493.2012 261.3428 492.5742 C
f258.625 482.5552 m
259.0869 482.4224 262.9365 480.5923 266.3237 478.938 C
266.9458 480.2114 L
265.249 481.04 259.6597 483.7573 258.9731 483.9287 C
258.625 482.5552 L
f266.2207 479.147 m
267.3828 478.3354 L
277.0493 492.1689 L
275.8872 492.9805 L
266.2207 479.147 L
f257.3145 467.7754 m
257.8257 467.5166 269.8477 461.4263 271.3472 460.7603 C
271.9224 462.0552 L
270.4561 462.707 258.0801 468.9766 257.9551 469.04 C
257.3145 467.7754 L
f279.4727 455.3223 m
279.584 455.0298 282.2427 448.1187 285.5117 445.3657 C
286.4248 446.4497 L
283.4365 448.9663 280.8228 455.7588 280.7969 455.8271 C
279.4727 455.3223 L
f261.6201 448.124 m
265.2476 446.0791 270.585 442.9678 271.0923 442.4526 C
272.2017 443.333 L
271.689 444.0166 265.7881 447.4014 262.3164 449.3584 C
261.6201 448.124 L
f270.2495 431.1855 m
271.354 430.2969 L
275.7656 435.7783 282.5439 444.1484 283.1357 444.7402 C
282.1338 445.7422 L
281.2974 444.9058 271.3779 432.5869 270.2495 431.1855 C
f291.6255 432.0283 m
292.311 430.7881 L
292.4673 430.875 307.9775 439.4478 311.2324 440.75 C
310.7051 442.0654 L
307.3701 440.731 292.2666 432.3828 291.6255 432.0283 C
f299.4004 449.8184 m
304.5586 442.8296 L
305.7129 443.6528 L
300.5371 450.6641 L
299.4004 449.8184 L
f321.2861 443.3848 m
321.3555 443.1348 323.0068 437.2314 324.5684 435.1494 C
325.7031 435.999 L
324.2998 437.8696 322.668 443.7056 322.6514 443.7646 C
321.2861 443.3848 L
f334.0967 436.1738 m
334.3262 433.7637 334.7598 428.9697 334.7598 428.0742 C
336.1777 428.0742 L
336.1777 429.2607 335.5342 436.0215 335.5068 436.3086 C
334.0967 436.1738 L
f344.0938 418.7061 m
345.5098 418.7764 L
345.3457 422.0449 345.5088 428.8232 345.5098 428.8906 C
344.0938 428.9258 L
344.0869 428.6455 343.9277 422.0273 344.0938 418.7061 C
f352.125 408.4492 m
353.4746 408.0176 L
353.6455 408.5322 354.2529 413.7676 354.5059 415.9941 C
353.0977 416.1543 L
352.7871 413.4199 352.2471 408.9092 352.125 408.4492 C
f303.9434 397.0986 m
304.2773 396.7295 337.6465 360.0176 362.793 346.1211 C
363.4785 347.3613 L
338.5391 361.1436 305.3271 397.6826 304.9941 398.0498 C
303.9434 397.0986 L
f345.7656 359.9951 m
347.1719 359.8213 L
347.8994 365.7061 349.0283 374.6689 349.1572 375.2402 C
347.7813 375.5801 L
347.6123 374.9063 346.0723 362.4795 345.7656 359.9951 C
f335.2715 386.7813 m
335.9072 383.2881 333.1348 369.0205 333.1064 368.877 C
334.4971 368.6055 L
334.6143 369.2031 337.3486 383.2803 336.666 387.0352 C
335.2715 386.7813 L
f318.7598 395.4082 m
318.7598 390.959 316.0225 385.1025 315.9951 385.0439 C
317.2764 384.4385 L
317.3945 384.6895 320.1777 390.6377 320.1777 395.4082 C
318.7598 395.4082 L
f245.2183 370.3145 m
246.0513 369.168 L
271.668 387.7686 299.5898 384.0791 299.8691 384.04 C
300.0684 385.4424 L
299.7842 385.4834 271.3159 389.2646 245.2183 370.3145 C
f308.2881 384.7822 m
308.3154 383.3652 L
316.8154 383.5322 L
316.7881 384.9502 L
308.2881 384.7822 L
f317.8789 376.7773 m
318.0586 375.3711 L
324.5586 376.2051 L
324.3789 377.6113 L
317.8789 376.7773 L
f295.9263 354.2813 m
296.0093 352.8672 L
296.2905 352.8828 324.5371 354.2207 359.2334 330.3242 C
360.0381 331.4922 L
324.9102 355.6846 296.2124 354.2988 295.9263 354.2813 C
f345.4492 347.8994 m
347.7344 338.8994 347.9785 337.9355 V
347.1172 337.4697 340.1318 333.6982 Y
340.8057 332.4502 L
349.625 337.2129 L
346.8223 348.249 L
345.4492 347.8994 L
f332.5996 352.1455 m
333.4023 346.2598 333.5273 345.3447 V
332.6104 344.9473 320.1865 339.5586 Y
320.751 338.2578 L
335.0762 344.4717 L
334.0039 352.3369 L
332.5996 352.1455 L
f281.8379 394.2051 m
293.0044 384.5381 L
293.9321 385.6104 L
282.7656 395.2773 L
281.8379 394.2051 L
f270.7373 391.3213 m
281.5708 383.9873 L
282.3657 385.1611 L
271.5322 392.4951 L
270.7373 391.3213 L
f256.6338 385.7402 m
257.1313 385.2422 263.3813 382.6611 268.5366 380.584 C
269.0664 381.8984 L
264.9575 383.5547 258.2075 386.3447 257.5894 386.7832 C
256.6338 385.7402 L
f248.0776 378.5693 m
256.0776 375.9023 L
256.5259 377.2461 L
248.5259 379.9131 L
248.0776 378.5693 L
f256.145 366.6748 m
257.4585 366.1416 L
262.4585 378.4746 L
261.145 379.0078 L
256.145 366.6748 L
f267.8618 374.1074 m
269.0747 373.375 L
274.4082 382.208 L
273.1953 382.9404 L
267.8618 374.1074 L
f283.1626 376.8809 m
284.4409 376.2676 L
288.2739 384.2676 L
286.9956 384.8809 L
283.1626 376.8809 L
fu0 1 1 0 k
252.1348 544.9077 m
252.1348 542.0747 251.4683 540.2412 v
250.8018 538.4077 250.1348 532.0742 252.4683 529.9077 c
254.8018 527.7412 258.3018 528.4077 258.9683 532.4077 c
259.6348 536.4077 256.6348 539.5747 254.9683 541.0747 c
253.3018 542.5747 252.1348 544.9077 y
f235.3018 524.2412 m
237.6348 522.5742 238.6348 520.9077 v
239.6348 519.2412 242.9683 516.4077 246.4683 516.2412 c
249.9683 516.0747 252.2163 520.5142 248.9683 522.9077 c
245.8018 525.2412 241.8018 524.7412 239.8018 524.7412 c
237.8018 524.7412 235.3018 524.2412 y
f275.8018 538.4077 m
271.6348 536.0747 269.1348 535.0747 v
266.6348 534.0747 263.3013 530.7417 262.9683 528.0747 c
262.6353 525.4077 265.6353 521.4077 270.3018 523.2412 c
274.9683 525.0747 274.8018 531.0747 274.9683 533.2412 c
275.1348 535.4077 275.8018 538.4077 y
f279.6348 523.4077 m
276.8018 520.5747 274.4683 519.7412 v
272.1348 518.9077 268.9688 514.9077 268.3018 512.4077 c
267.6348 509.9077 269.8018 505.5747 274.3018 507.5747 c
278.8018 509.5747 279.1353 513.4077 279.3018 516.9077 c
279.4683 520.4077 279.6348 523.4077 y
f237.6348 508.0747 m
239.9678 506.0747 242.1348 504.0747 v
244.3018 502.0747 246.9683 500.0747 249.9683 500.0747 c
252.9683 500.0747 256.1348 503.0747 253.1348 506.2412 c
250.1348 509.4077 245.8018 508.2417 243.9683 508.5747 c
242.1348 508.9077 237.6348 508.0747 y
f285.6348 507.7412 m
282.4683 505.0747 280.4683 503.5747 v
278.4683 502.0747 274.6353 499.2412 273.8018 496.2412 c
272.9683 493.2412 275.6348 489.2407 279.9683 490.9077 c
284.3018 492.5747 284.8013 498.4082 285.1348 501.0747 c
285.4683 503.7412 285.6348 507.7412 y
f243.4683 489.4077 m
247.1348 485.4077 249.1348 483.9077 v
251.1348 482.4077 253.8018 480.9082 257.4683 481.5747 c
261.1348 482.2412 261.6348 486.2412 258.4683 488.7412 c
255.3018 491.2412 251.6353 490.7407 248.8018 490.4077 c
245.9683 490.0747 243.4683 489.4077 y
f242.4683 473.7412 m
246.1348 471.0742 247.4683 469.9077 v
248.8018 468.7412 252.3018 466.7407 255.3018 466.9077 c
258.3018 467.0747 260.1348 467.7417 259.9683 470.5747 c
259.8018 473.4077 255.9683 475.9077 250.4683 475.2412 c
244.9683 474.5747 242.4683 473.7412 y
f300.1357 526.5747 m
302.9678 523.0747 303.8018 521.0747 v
304.6357 519.0747 306.4688 515.7407 308.9688 514.4077 c
311.4688 513.0747 315.4697 513.2407 315.1357 517.9077 c
314.8018 522.5747 309.6348 524.5747 306.8018 525.5747 c
303.9688 526.5747 300.1357 526.5747 y
f323.3018 529.4077 m
321.4688 525.9077 319.9688 524.2412 v
318.4688 522.5747 316.4697 519.0747 317.1357 516.0747 c
317.8018 513.0747 321.8018 509.9077 324.8018 514.7412 c
327.8018 519.5747 325.8027 522.5742 325.1357 524.9077 c
324.4688 527.2412 323.3018 529.4077 y
f337.3018 523.9077 m
332.9697 521.0747 330.6357 520.2412 v
328.3018 519.4077 324.9688 515.4082 324.9688 512.0747 c
324.9688 508.7412 328.3018 507.0747 332.3018 509.2412 c
336.3018 511.4077 336.4678 516.9077 336.8018 518.4077 c
337.1357 519.9077 337.3018 523.9077 y
f302.9688 511.7412 m
311.752 509.7148 311.1357 503.9077 310.3018 502.2412 c
309.4678 500.5747 306.8018 499.9077 303.9688 501.0747 c
301.1357 502.2417 298.9683 504.9077 297.9683 507.0747 c
296.9683 509.2417 294.1353 513.0747 y
300.8018 512.2412 302.9688 511.7412 v
f337.4688 504.5747 m
331.4678 503.0747 329.8018 502.2412 v
328.1357 501.4077 323.3027 497.5747 323.6357 494.0747 c
323.9688 490.5747 326.3018 489.7417 330.3018 490.5747 c
334.3018 491.4077 336.1357 496.5747 336.4688 498.7412 c
336.8018 500.9077 337.4688 504.5747 y
f292.6348 495.0747 m
295.9692 491.2407 297.1353 488.9077 v
298.3013 486.5747 300.9688 484.4082 305.4688 483.5747 c
309.9688 482.7412 310.3018 487.7417 308.8018 490.0747 c
307.3018 492.4077 304.6357 493.5747 300.3018 494.0747 c
296.5669 494.5054 292.6348 495.0747 y
f339.6357 488.5747 m
335.4697 487.9077 333.6357 487.7412 v
331.8018 487.5747 326.6357 485.2407 325.6357 481.4077 c
324.6357 477.5747 326.8018 475.2407 330.8018 475.4077 c
334.8018 475.5747 337.1357 479.9077 338.1357 482.9077 c
339.1357 485.9077 339.6357 488.5747 y
f292.1348 480.0747 m
294.3022 478.0747 295.1353 476.2412 v
295.9683 474.4077 299.9697 470.7417 303.1357 470.0747 c
306.3018 469.4077 308.1357 471.0747 308.4688 473.5747 c
308.8018 476.0747 305.8018 479.2412 300.3018 479.7412 c
294.8013 480.2412 292.1348 480.0747 y
f344.3018 446.4077 m
343.3018 443.0747 342.4688 441.5747 v
341.6357 440.0747 339.3027 434.0752 341.1357 430.4082 c
342.9688 426.7412 348.1348 427.0752 349.8018 430.4082 c
351.4688 433.7412 348.8027 438.5742 347.1357 441.4077 c
345.4688 444.2412 344.3018 446.4077 y
f319.4688 412.9082 m
316.6348 408.4082 315.8018 406.2412 v
314.9688 404.0742 313.4688 399.4072 316.4688 396.0742 c
319.4688 392.7412 323.9688 394.0752 323.9688 399.4082 c
323.9688 404.7412 321.4688 408.4072 320.9688 410.0742 c
320.4688 411.7412 319.4688 412.9082 y
f269.3018 404.4082 m
271.8018 402.0742 272.8018 400.2412 v
273.8018 398.4082 276.3018 394.7422 280.3018 393.9082 c
284.3018 393.0742 285.4678 396.9072 284.1348 400.0742 c
282.8018 403.2412 279.9678 404.4072 275.6348 404.5742 c
271.3018 404.7412 269.3018 404.4082 y
f257.3018 400.4082 m
259.9688 398.2402 260.8018 397.0742 v
261.6348 395.9082 263.4678 392.2412 267.6348 391.2412 c
271.8018 390.2412 273.4678 391.5742 273.6348 394.7412 c
273.8018 397.9082 270.8018 401.4082 265.4683 401.4082 c
260.1348 401.4082 257.3018 400.4082 y
f242.1348 395.0742 m
244.4678 392.9082 245.1348 391.9082 v
245.8018 390.9082 248.8018 386.5742 252.4683 385.2412 c
256.1348 383.9082 258.8018 385.5742 259.3018 388.2412 c
259.8018 390.9082 256.9678 394.5742 252.6348 395.2412 c
248.3018 395.9082 242.6348 395.2402 242.1348 395.0742 c
f232.8018 388.4082 m
235.4683 384.7422 236.9683 382.4082 v
238.4683 380.0742 240.6348 378.2412 244.6348 377.2412 c
248.6348 376.2412 251.1348 380.0752 249.4683 383.4082 c
247.8018 386.7412 244.6348 387.0742 239.6348 388.0742 c
234.6348 389.0742 232.8018 388.4082 y
f232.4683 357.5742 m
233.8018 361.2422 233.9683 363.4082 v
234.1348 365.5742 236.3013 370.2422 240.6348 372.4082 c
244.9683 374.5742 248.6348 370.0742 246.6348 365.7412 c
244.6348 361.4082 239.4688 360.4072 237.3018 359.5742 c
235.1348 358.7412 232.4683 357.5742 y
f252.1348 350.0742 m
250.6348 354.2412 250.1348 356.2412 v
249.6348 358.2412 249.3018 363.2412 252.4683 366.2412 c
255.6348 369.2412 262.1348 366.4082 260.1348 360.4082 c
258.1348 354.4082 252.1348 350.0742 y
f265.8018 357.9082 m
264.1348 362.9082 263.6348 364.4082 v
263.1348 365.9082 262.4678 369.9082 264.1348 373.2412 c
265.8018 376.5742 272.1348 376.9072 272.4683 371.0742 c
272.8018 365.2412 269.6348 362.4082 268.6348 361.4082 c
267.6348 360.4082 265.8018 357.9082 y
f280.3018 359.4082 m
279.6353 363.9082 278.8018 365.2412 v
277.9683 366.5742 276.8018 372.5742 278.4683 376.5742 c
280.1348 380.5742 286.8018 379.5752 286.9683 374.4082 c
287.1348 369.2412 284.1348 365.5752 282.9683 364.4082 c
281.8018 363.2412 280.3018 359.4082 y
f301.6357 368.2412 m
303.8018 372.0752 304.9688 373.9082 v
306.1357 375.7412 308.1348 379.7412 313.8018 379.2412 c
319.4688 378.7412 320.6357 372.9082 316.6357 371.4082 c
312.6357 369.9082 308.8027 369.5742 306.6357 369.2412 c
304.4688 368.9082 301.6357 368.2412 y
f344.1357 363.5742 m
343.4697 359.7402 342.6357 358.0742 v
341.8018 356.4082 340.8027 351.4072 342.6357 348.5742 c
344.4688 345.7412 349.9697 346.4072 350.6357 349.5742 c
351.3018 352.7412 349.6348 357.9082 347.8018 359.4082 c
345.9688 360.9082 344.1357 363.5742 y
f327.8018 328.5742 m
329.9688 333.0742 333.4688 334.7412 v
336.9688 336.4082 340.1357 335.9082 341.4688 332.9082 c
342.8018 329.9082 341.1357 328.5742 340.1357 328.5742 c
339.1357 328.5742 327.8018 328.5742 y
fU*u
1 D
0.65 0.53 0.51 1 k
235.8896 552.4497 m
230.0283 552.4497 225.2598 547.6812 225.2598 541.8198 C
225.2598 338.6621 L
225.2598 332.8008 230.0283 328.0322 235.8896 328.0322 C
353.5479 328.0322 L
359.4092 328.0322 364.1777 332.8008 364.1777 338.6621 C
364.1777 541.8198 L
364.1777 547.6812 359.4092 552.4497 353.5479 552.4497 C
235.8896 552.4497 L
f0 D
226.6768 338.6621 m
226.6768 541.8198 L
226.6768 546.8999 230.8096 551.0327 235.8896 551.0327 C
353.5479 551.0327 L
358.6279 551.0327 362.7598 546.8999 362.7598 541.8198 C
362.7598 338.6621 L
362.7598 333.582 358.6279 329.4502 353.5479 329.4502 C
235.8896 329.4502 L
230.8096 329.4502 226.6768 333.582 226.6768 338.6621 C
f*U
ULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
