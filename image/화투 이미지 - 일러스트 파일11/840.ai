%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (840.ai)
%%CreationDate: 3/25/2002 6:32 PM
%%BoundingBox: 221 303 375 542
%%HiResBoundingBox: 221.7764 303.7617 374.8467 541.8721
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 8316 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD06FC8C4BF826F827F826F8
%27F826F827F826F827F826F827F826F827F826F827F826F827F826F827F8
%26F827F826F827F826F827F826F827F826F827F826F827F826F827F82620
%8CFD06FC99FFFD05FC6827277D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7D
%A17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17D
%7D7DA17D7D7DA17D7D7DA17D7D7DA17D7D764BF84BFD05FCC2FFFD04FC68
%F852FD44FFA8F84BFD04FCBBFFFD04FC274BFD46FF7DF8B4FCFCFCC2FFFC
%FCFC8CF8FD48FF2744FCFCFCBBFFFCFCFC6827FD48FF514BFCFCFCC2FFFC
%FCFC6EF8FD48FF5226FCFCFCBCFFFCFCFC6827FD48FF274BFCFCFCC2FFFC
%FCFC6EF8FD33FFA8FD14FF5220FCFCFC99FFFCFCFC6827FD2FFFA8A87DF8
%F826FD13FF274BFCFCFCC2FFFCFCFC6FF8FD2DFFA8A852F8F87B9E2726FF
%7DFD10FF5220FCFCFCBBFFFCFCFC6827FD2DFFA8F8FFF8F8C6C69EF85227
%FD10FF4B4BFCFCFCC2FFFCFCFC68F8FD2CFFA85127275126C6C6C6F82727
%27FD0FFF5220FCFCFCBBFFFCFCFC6827FD2CFFA8FD0527C6C6C627F852F8
%FFF8FD0DFF514BFCFCFCC2FFFCFCFC6EF8FD2CFF7D7DF82727F8C6C6C6F8
%F82727522052FD0CFF5226FCFCFCBCFFFCFCFC6827FD2CFFF87D52F8F8F8
%9EC6C627F827522752F8A8FD0BFF274BFCFCFCC2FFFCFCFC6EF8FD2AFF4B
%7D7DF8FF27F8F827C6C6F8F8F87DF852F8527DFD0AFF5220FCFCFC99FFFC
%FCFC6827FD2AFF52F8A827277DF8F8F8519E27F8F8F8272752F8A8FD0AFF
%274BFCFCFCC2FFFCFCFC6FF8FD29FF51FF27207DFD0DF827277D27FD09FF
%5220FCFCFCBBFFFCFCFC6827FD29FF2727FFF82727FD0CF8277C2752A8FD
%08FF4B4BFCFCFCC2FFFCFCFC68F8FD28FF7DA8F852FFF827FD0DF8FFF852
%F8FD08FF5220FCFCFCBBFFFCFCFC6827FD28FFF8527DF87DA8FD0DF8277D
%2727527DFD07FF514BFCFCFCC2FFFCFCFC6EF8FD28FFA8F87D52F852FD0E
%F82727F87DF8FD07FF5226FCFCFCBCFFFCFCFC6827FD27FFF87D7DF8A827
%27FD0FF852275227FD07FF274BFCFCFCC2FFFCFCFC6EF8FD27FF52F8A827
%F8A8FD11F852F8A7F8A8FD05FF5220FCFCFC99FFFCFCFC6827FD26FFF8A8
%2727FF27FD12F85227A827FD06FF274BFCFCFCC2FFFCFCFC6FF8FD26FF51
%F8FFF851A8FD13F85252F8A8A8FD04FF5220FCFCFCBBFFFCFCFC6827FD25
%FF7CA82727A8F87DFD13F8FF277CF87DFD04FF4B4BFCFCFCC2FFFCFCFC68
%F8FD25FF27F87DF8527DFD14F827F876F8FD05FF5220FCFCFCBBFFFCFCFC
%6827FD26FFF84B7DF87D27FD15F852277D27FFFFFF514BFCFCFCC2FFFCFC
%FC6EF8FD24FF7627FFF8522720FD15F827F8A7F876FFFFFF5226FCFCFCBC
%FFFCFCFC6827FD24FFA8277CA8F87DFD17F8277DF87D52FFFF274BFCFCFC
%C2FFFCFCFC6EF8FD25FF52F8A852F827FD17F8FD0427FFFF5220FCFCFC99
%FFFCFCFC6827FD24FF27FF2727FF52FD19F8A8F8A827FF274BFCFCFCC2FF
%FCFCFC6FF8FD24FF2027FFF827A7FD18F82052207D20FF5220FCFCFCBBFF
%FCFCFC6827FD24FFA82727A8F827FD19F827522727A84B4BFCFCFCC2FFFC
%FCFC68F8FD23FFF8FF7DF8527DFD1BF8A8F8A7F84B20FCFCFCBBFFFCFCFC
%6827FD23FF4BF8FF76277DFD1AF82752275227514BFCFCFCC2FFFCFCFC6E
%F8FD24FF2727FF51FD1DF85227522726FCFCFCBCFFFCFCFC6827FD22FF52
%27A82727FFFD1DF8A8F852F84BFCFCFCC2FFFCFCFC6EF8FD23FFF8527DF8
%5227FD1CF82727F82720FCFCFC99FFFCFCFC6827FD23FFA8F8A17DFD1EF8
%FD04274BFCFCFCC2FFFCFCFC6FF8FD22FF272752F8FF52FD1EF827275120
%FCFCFCBBFFFCFCFC6827272751FD1FFF7D277C27277DFD1FF8A8F827FCFC
%FCC2FFFCFCFC6EF82774F84BFD1DFFA8FF52F87DFD21F87DF820FCFCFCBB
%FFFCFCFC6827C6C67427A87DFD1BFF52F8FF27277DFD20F827F84BFCFCFC
%C2FFFCFCFC6EF8C6C67BF8272752FD1AFFA82027FFF827FD21F85126FCFC
%FCBCFFFCFCFC6827C6C65027F876F8FD19FFA87DA8F852A8FD22F8274BFC
%FCFCC2FFFCFCFC6EF8C6C64BF852F87CF87DFD17FFA8F87D7DF85252FD22
%F820FCFCFC99FFFCFCFC6827C6C6F8FD0627A8FD17FF7DF8FF762727FD22
%F84BFCFCFCC2FFFCFCFC6FF8C626F8F8F852F827F8A8FD16FF27A827F8FF
%51FD23F820FCFCFCBBFFFCFCFC682750FD04F82727277D27FD16FF2727A8
%274BFFFD23F84BFCFCFCC2FFFCFCFC68FD07F827274BF852A1FD15FFF852
%7DF87DFD23F820FCFCFCBBFFFCFCFC68FD08F8A7F8A1F8A8FD14FF7DA8F8
%A852FD24F84BFCFCFCC2FFFCFCFC6EFD09F8522727F8A8FD12FF7DF87D52
%F8FFFD24F820FCFCFCBCFFFCFCFC68FD08F827A8F84B277DFD13FF2727A8
%27277DFD23F84BFCFCFCC2FFFCFCFC6EFD09F82720F851F8FD12FFA8CFF8
%27A8FD25F820FCFCFC99FFFCFCFC68FD0AF852FD0427FD11FF7DF8A8F87D
%7DFD24F84BFCFCFCC2FFFCFCFC6FFD0BF851F82727FD12FF27F87DF8A7FD
%24F820FCFCFCBBFFFCFCFC68FD0AF827F87CF8FF52FD11FFA8272752F827
%FD23F84BFCFCFCC2FFFCFCFC68FD0BF852F85251F8FD10FFF87D7DF87C27
%FD24F820FCFCFCBBFFFCFCFC68FD0BF85227A8F82727FD0FFF7DF8A85227
%7DFD24F84BFCFCFCC2FFFCFCFC6EFD0CF82727F8F87DFD10FF52F8FF2727
%FD24F820FCFCFCBCFFFCFCFC68FD0CF87DF827277D7DFD0EFF27A827F8FF
%FD25F84BFCFCFCC2FFFCFCFC6EFD0DF827F8A8F87DFD0EFFF827FF272752
%FD24F820FCFCFC99FFFCFCFC68FD0EF8A1F82727FD0FFFF87DA827FD25F8
%4BFCFCFCC2FFFCFCFC6FFD0DF8FD0527FD0DFF7D527DF8A87DFD25F820FC
%FCFCBBFFFCFCFC68FD0DF827F85227A8A8FD0CFF7DF87D52F8FF27FD24F8
%4BFCFCFCC2FFFCFCFC68FD0EF827F85252F8FD0DFF4BF8A8F82727FD24F8
%20FCFCFCBBFFFCFCFC68FD0EF852F8A8F8A8FD0CFF52FF27277DFD26F84B
%FCFCFCC2FFFCFCFC6EFD0FF87DF8522727FD0AFFA82027FFF85227FD25F8
%20FCFCFCBCFFFCFCFC68FD0EF82727277DF87DFD0BFF7DF852A8F87DFD25
%F84BFCFCFCC2FFFCFCFC6EFD10F8A8F827F851FD0BFF52F87D76FD26F820
%FCFCFC99FFFCFCFC68FD0FF82752F82727FD0AFFA1F8FF2727A852FD25F8
%4BFCFCFCC2FFFCFCFC6FFD0FF827F827F8FF7DFD0AFF27F8FFF827FFFD25
%F820FCFCFCBBFFFCFCFC68FD10F827F8A82727FD0AFFA8274BFFF852FD25
%F84BFCFCFCC2FFFCFCFC68FD11F8767DF87D76FD0AFF7DF852A7FD26F820
%FCFCFCBBFFFCFCFC68FD10F827A827522727FD08FFA8F8A852F8A87DFD25
%F84BFCFCFCC2FFFCFCFC6EFD11F851F87DF8FFA8FD08FF52F8FF2720A8FD
%25F820FCFCFCBCFFFCFCFC68FD12F8A7F87DF852FD09FF27F8FFF827FD25
%F827FCFCFCC2FFFCFCFC6EFD11F852F84B7DF8A8FD08FF7D7D27F8FFFD26
%F820FCFCFC99FFFCFCFC68FD11F82727A8275252A8FD07FF7DF87D272752
%FD25F84BFCFCFCC2FFFCFCFC6FFD12F87D52F87DF8FD09FF27F8A82027FD
%25F820FCFCFCBBFFFCFCFC68FD12F8FFF87D2752FD08FF7DFF27277DFD26
%F827FCFCFCC2FFFCFCFC68FD12F82627A1FD04F87DFD05FF27F8A8F82752
%FD25F820FCFCFCBBFFFCFCFC68FD13F8A827F851C675F8FF272752FFFF27
%27FFF852FD25F827FCFCFCC2FFFCFCFC6EFD13F8FFF84BC6C6C6F8F8274A
%27F8FFA82027A7FD26F820FCFCFCBCFFFCFCFC68FD12F8274B27C6C6C69F
%F8279EC69E27F8A87C27527DFD25F827FCFCFCC2FFFCFCFC6EFD14F89EC6
%C6C65027F8C6C6C62626F8F852F827FD25F820FCFCFC99FFFCFCFC68FD13
%F820C6C6C6A4272727C6C6C69F2627F8FF27FD26F84BFCFCFCC2FFFCFCFC
%6FFD13F851C6C6C627F8A7F8C6C6C6742727F827FD27F820FCFCFCBBFFFC
%FCFC68FD13F874C6C627F827A8F89EC6C67BF82751F827A8FD25F827FCFC
%FCC2FFFCFCFC68FD13F84B9E27F8F8F8FF274BC6C67420F827FD28F820FC
%FCFCBBFFFCFCFC68FD14F8272727F827277DF8A5C651F827F87DF827FD25
%F827FCFCFCC2FFFCFCFC6EFD15F827FD04F87D27F89FFD04F827FD27F820
%FCFCFCBCFFFCFCFC68FD14F827F84BF820272727FD07F852A8FD25F827FC
%FCFCC2FFFCFCFC6EFD4AF820FCFCFC99FFFCFCFC68FD15F87D27F851FD0B
%F827FD25F84BFCFCFCC2FFFCFCFC6FFD15F820F827FD32F820FCFCFCBBFF
%FCFCFC68FD16F87DFD33F827FCFCFCC2FFFCFCFC68FD15F827FD34F820FC
%FCFCBBFFFCFCFC68FD15F851FD34F827FCFCFCC2FFFCFCFC6EFD4AF820FC
%FCFCBCFFFCFCFC68FD4AF827FCFCFCC2FFFCFCFC6EFD4AF820FCFCFC99FF
%FCFCFC68FD4AF84BFCFCFCC2FFFCFCFC6FFD4AF820FCFCFCBBFFFCFCFC68
%FD4AF827FCFCFCC2FFFCFCFC68FD4AF820FCFCFCBBFFFCFCFC68FD4AF827
%FCFCFCC2FFFCFCFC6EFD4AF820FCFCFCBCFFFCFCFC68FD4AF827FCFCFCC2
%FFFCFCFC6EFD4AF820FCFCFC99FFFCFCFC68FD4AF84BFCFCFCC2FFFCFCFC
%6FFD4AF820FCFCFCBBFFFCFCFC68FD4AF827FCFCFCC2FFFCFCFC68FD4AF8
%20FCFCFCBBFFFCFCFC8CFD4AF84BFCFCFCC2FFFD04FCFD4AF88CFCFCFCBC
%FFFD04FC6FFD48F844FD04FCC2FFFD05FC68FD46F820FD05FC99FFFD06FC
%B54427F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F84B8CFD06FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
374.8467 303.7617 m
221.7764 303.7617 L
221.7764 541.8721 L
374.8467 541.8721 L
374.8467 303.7617 L
fu0 0 0 0 k
229.5615 524.5854 m
229.2275 437.0854 l
250.5615 384.4189 l
261.2275 344.085 l
267.8945 338.085 l
296.2285 348.0859 296.8945 347.9189 v
297.5615 347.752 308.5615 347.9189 y
346.2285 402.9189 l
367.2285 443.752 l
367.0615 525.9185 l
365.8945 535.4189 356.3945 535.0854 v
239.2275 535.0854 l
230.5615 534.9189 229.5615 524.5854 v
f0 0.2 1 0 k
229.5615 452.627 m
231.4365 455.377 234.1865 455.002 v
236.9365 454.627 238.1865 450.002 235.9365 443.502 c
233.6865 437.002 229.6865 437.252 y
229.5615 452.627 l
f264.8115 362.252 m
263.4365 365.502 264.6865 369.502 v
265.9365 373.502 269.0615 377.252 271.3115 378.752 c
273.5615 380.252 275.9365 379.502 276.5615 376.502 c
277.1865 373.502 275.5615 370.627 273.8115 367.752 c
272.0615 364.877 267.1865 361.877 265.9365 361.627 c
264.6865 361.377 264.8115 362.252 y
f280.9365 377.002 m
278.0615 376.252 278.0615 370.502 v
278.0615 364.752 282.1865 359.502 283.1865 358.252 c
284.1865 357.002 286.1865 356.502 y
287.0615 362.252 l
287.6865 367.502 287.0615 371.627 v
286.4365 375.752 283.0615 378.002 280.9365 377.002 c
f325.8115 518.752 m
323.6865 519.877 322.4365 515.627 v
321.1865 511.377 323.5615 505.252 324.8115 503.752 c
326.0615 502.252 327.3115 499.752 y
331.3115 500.877 l
331.6865 507.377 l
331.1865 512.752 330.3115 515.752 v
329.4365 518.752 327.0615 519.127 325.8115 518.752 c
f*u
1 D
0.65 0.53 0.51 1 k
239.4824 535.6011 m
233.6211 535.6011 228.8525 530.8325 228.8525 524.9712 C
228.8525 320.6631 L
228.8525 314.8018 233.6211 310.0332 239.4824 310.0332 C
357.1406 310.0332 L
363.002 310.0332 367.7705 314.8018 367.7705 320.6631 C
367.7705 524.9712 L
367.7705 530.8325 363.002 535.6011 357.1406 535.6011 C
239.4824 535.6011 L
f0 D
230.2695 320.6631 m
230.2695 524.9712 L
230.2695 530.0513 234.4023 534.1841 239.4824 534.1841 C
357.1406 534.1841 L
362.2207 534.1841 366.3525 530.0513 366.3525 524.9712 C
366.3525 320.6631 L
366.3525 315.583 362.2207 311.4512 357.1406 311.4512 C
239.4824 311.4512 L
234.4023 311.4512 230.2695 315.583 230.2695 320.6631 C
f*U
228.9717 452.8115 m
230.1494 452.0234 L
230.2217 452.1299 231.9424 454.6196 234.7559 454.0571 c
235.2646 453.9551 235.6523 453.6055 235.9414 452.9868 c
237.0215 450.6733 236.1855 445.6821 234.7725 443.0913 c
233.4375 440.6431 231.3145 438.7349 229.6113 438.4512 C
229.8447 437.0527 L
231.9814 437.4092 234.4619 439.5635 236.0166 442.4126 c
237.6514 445.4092 238.5156 450.8247 237.2256 453.5869 c
236.7461 454.6128 235.9883 455.2559 235.0342 455.4468 c
231.2783 456.1978 229.0645 452.9502 228.9717 452.8115 C
f*u
1 D
272.3271 379.8428 m
270.8408 379.4316 267.9678 377.9824 265.4277 372.9023 c
261.7803 365.6084 264.209 361.9961 264.3145 361.8457 C
264.3604 361.7793 L
264.4209 361.7256 L
264.7451 361.4336 265.3301 361.1074 266.2764 361.209 c
268.625 361.4609 272.3623 364.3828 274.9697 368.0049 c
277.2324 371.1475 277.5674 374.6885 277.168 376.7676 c
276.916 378.0771 276.377 379.0273 275.6084 379.5166 c
274.7363 380.0713 273.5713 380.1875 272.3271 379.8428 c
f0 D
264.8516 365.5879 m
264.8516 367.1631 265.252 369.3818 266.6953 372.2676 c
268.3711 375.6201 270.5615 377.8838 272.7061 378.4766 c
273.5459 378.71 274.3262 378.6523 274.8477 378.3213 c
275.2666 378.0547 275.6055 377.3906 275.7764 376.5 c
276.123 374.6982 275.8184 371.6094 273.8193 368.833 c
271.501 365.6133 268.0498 362.8252 266.125 362.6182 c
265.8076 362.584 265.5801 362.6426 265.4199 362.7627 C
265.2822 363.0137 264.8516 363.917 264.8516 365.5879 C
f*U
*u
1 D
281.2949 377.6201 m
280.5469 377.5137 279.4473 376.9756 278.6035 375.7852 c
277.6777 374.4766 276.7686 371.9385 277.7002 367.2803 c
279.2607 359.4766 284.1172 357.6582 284.3232 357.585 C
284.4648 357.5342 L
284.6162 357.5449 L
287.4053 357.7607 288.4482 361.1709 288.1025 368.9502 c
287.9512 372.3584 286.9648 374.8418 285.1709 376.3301 c
283.6748 377.5713 282.0303 377.7256 281.2949 377.6201 c
f0 D
279.0898 367.5576 m
278.8291 368.8623 278.7217 369.9707 278.7217 370.9102 c
278.7217 372.9707 279.2344 374.2236 279.7607 374.9668 c
280.3848 375.8477 281.1445 376.168 281.4951 376.2178 c
281.873 376.2715 283.1074 376.2002 284.2656 375.2393 c
285.7188 374.0342 286.5557 371.8379 286.6865 368.8877 c
286.7275 367.9795 286.7471 367.1328 286.7471 366.3486 c
286.7471 361.667 286.0186 359.2266 284.5977 359.0078 C
283.748 359.4014 280.334 361.3389 279.0898 367.5576 C
f*U
*u
1 D
325.9541 519.6187 m
324.5518 519.4033 323.5264 518.8223 322.8174 517.8423 c
321.623 516.1929 321.3652 513.4541 322.0293 509.4688 c
323.2559 502.1094 327.6826 500.7886 327.8701 500.7358 C
327.9072 500.7266 L
328.5244 500.5898 329.168 500.7642 329.7197 501.2183 c
331.2627 502.4883 332.0508 505.7031 331.9365 510.2695 c
331.8398 514.187 330.7979 517.1709 329.0049 518.6709 c
328.082 519.4429 326.998 519.7798 325.9541 519.6187 c
f0 D
323.4277 509.7017 m
323.2012 511.0591 323.0889 512.2573 323.0889 513.293 c
323.0889 514.9595 323.3809 516.2046 323.9648 517.0112 c
324.4541 517.6865 325.1338 518.0586 326.1689 518.2178 c
326.8057 518.3159 327.4893 518.0908 328.0957 517.5835 c
328.9502 516.8682 330.4023 514.9629 330.5205 510.2344 c
330.6377 505.5225 329.7178 503.0527 328.8193 502.313 c
328.6123 502.1426 328.416 502.0752 328.2344 502.1084 C
327.9854 502.1851 324.4805 503.3804 323.4277 509.7017 C
f*U
366.7285 444.5854 m
343.7285 501.4185 331.2285 508.5854 v
331.0625 501.5854 328.7285 501.252 v
326.3945 500.9185 323.2285 506.5854 322.7285 508.752 c
292.0615 453.252 299.0615 353.002 v
292.7285 360.5859 287.3945 363.4189 v
286.5615 358.085 285.0615 358.085 v
283.5615 358.085 281.8945 360.085 y
276.0605 354.7529 269.2275 344.9189 v
267.7275 357.4189 266.7275 361.9189 v
263.2275 359.918 264.5615 369.585 v
254.5615 426.0854 236.2275 444.5854 v
234.8945 438.752 229.8945 438.252 v
229.3945 437.085 229.3945 436.4185 v
229.3945 320.252 l
229.2373 311.2324 239.4824 310.7422 v
357.1406 310.7422 l
367.0615 311.7412 367.0615 320.6631 v
366.7285 444.5854 l
f366.25 456.2129 m
363.584 450.3799 L
363.4209 450.0239 363.5781 449.603 363.9336 449.4409 c
364.29 449.2783 364.7109 449.4351 364.873 449.791 C
367.5391 455.624 L
367.7021 455.98 367.5449 456.4009 367.1895 456.563 c
366.833 456.7256 366.4121 456.5688 366.25 456.2129 C
f365.2373 464.6836 m
360.7373 453.5166 L
360.5908 453.1538 360.7666 452.7407 361.1299 452.5947 c
361.4922 452.4482 361.9053 452.624 362.0518 452.9873 C
366.5518 464.1533 L
366.6982 464.5166 366.5225 464.9297 366.1592 465.0757 c
365.7959 465.2222 365.3838 465.0464 365.2373 464.6836 C
f363.7246 469.3174 m
359.3916 456.8174 L
359.2637 456.4478 359.46 456.0439 359.8291 455.916 c
360.1992 455.7876 360.6025 455.9834 360.7314 456.3535 C
365.0645 468.8535 L
365.1924 469.2231 364.9961 469.627 364.627 469.7549 c
364.2568 469.8833 363.8535 469.6875 363.7246 469.3174 C
f361.7314 473.6689 m
357.0654 461.3359 L
356.9268 460.9702 357.1113 460.561 357.4775 460.4229 c
357.8438 460.2842 358.2529 460.4688 358.3916 460.8345 C
363.0576 473.1675 L
363.1963 473.5337 363.0117 473.9429 362.6455 474.0811 c
362.2793 474.2197 361.8701 474.0352 361.7314 473.6689 C
f359.2295 477.6641 m
355.2295 466.8311 L
355.0938 466.4639 355.2822 466.0562 355.6494 465.9209 c
356.0166 465.7852 356.4238 465.9727 356.5596 466.3398 C
360.5596 477.1729 L
360.6953 477.54 360.5068 477.9478 360.1396 478.083 c
359.7725 478.2188 359.3652 478.0313 359.2295 477.6641 C
f357.4053 482.0186 m
352.7383 470.5186 L
352.5908 470.1558 352.7656 469.7427 353.1279 469.5952 c
353.4912 469.4482 353.9043 469.623 354.0508 469.9854 C
358.7178 481.4854 L
358.8652 481.8481 358.6904 482.2612 358.3281 482.4087 c
357.9658 482.5557 357.5518 482.3809 357.4053 482.0186 C
f354.7295 485.8291 m
351.0635 475.8291 L
350.9287 475.4619 351.1172 475.0547 351.4844 474.9199 c
351.8525 474.7852 352.2588 474.9741 352.3936 475.3413 C
356.0596 485.3413 L
356.1943 485.709 356.0059 486.1162 355.6387 486.251 c
355.2705 486.3857 354.8643 486.1968 354.7295 485.8291 C
f352.5479 490.7813 m
349.3809 479.7813 L
349.2725 479.4053 349.4893 479.0127 349.8652 478.9043 c
350.2412 478.7964 350.6338 479.0132 350.7422 479.3892 C
353.9092 490.3892 L
354.0176 490.7656 353.8008 491.1582 353.4248 491.2666 c
353.0488 491.3745 352.6563 491.1577 352.5479 490.7813 C
f350.5781 495.2002 m
345.7441 484.0337 L
345.5889 483.6743 345.7539 483.2568 346.1133 483.1016 c
346.4717 482.9463 346.8896 483.1113 347.0449 483.4702 C
351.8789 494.6367 L
352.0342 494.9961 351.8691 495.4131 351.5098 495.5688 c
351.1514 495.7241 350.7334 495.5591 350.5781 495.2002 C
f348.3984 499.002 m
344.0654 487.502 L
343.9277 487.1357 344.1123 486.7266 344.4785 486.5889 c
344.8447 486.4507 345.2539 486.6357 345.3916 487.002 C
349.7246 498.502 L
349.8623 498.8682 349.6777 499.2773 349.3115 499.415 c
348.9453 499.5532 348.5361 499.3682 348.3984 499.002 C
f346.2197 502.1362 m
342.7197 491.3032 L
342.5996 490.9307 342.8047 490.5313 343.1768 490.4111 c
343.5488 490.291 343.9482 490.4951 344.0693 490.8677 C
347.5693 501.7007 L
347.6895 502.0732 347.4844 502.4727 347.1123 502.5928 c
346.7402 502.7129 346.3408 502.5088 346.2197 502.1362 C
f343.5703 505.5151 m
338.9033 493.8486 L
338.7578 493.4854 338.9346 493.0728 339.2979 492.9277 c
339.6621 492.7822 340.0742 492.959 340.2197 493.3223 C
344.8867 504.9888 L
345.0322 505.3521 344.8555 505.7646 344.4912 505.9102 c
344.1279 506.0552 343.7158 505.8784 343.5703 505.5151 C
f341.5537 508.8032 m
338.2197 498.4697 L
338.0996 498.0972 338.3047 497.6978 338.6768 497.5776 c
339.0498 497.4575 339.4492 497.6621 339.5693 498.0342 C
342.9033 508.3677 L
343.0234 508.7402 342.8184 509.1396 342.4463 509.2598 c
342.0732 509.3799 341.6738 509.1753 341.5537 508.8032 C
f339.2178 511.2969 m
335.8848 500.6299 L
335.7686 500.2563 335.9766 499.8589 336.3506 499.7422 c
336.7236 499.6255 337.1211 499.8335 337.2383 500.207 C
340.5713 510.874 L
340.6875 511.2476 340.4795 511.645 340.1055 511.7617 c
339.7324 511.8784 339.335 511.6704 339.2178 511.2969 C
f335.5381 513.0767 m
333.7041 505.0767 L
333.6162 504.6953 333.8545 504.3149 334.2363 504.2275 c
334.6182 504.1401 334.998 504.3784 335.085 504.7603 C
336.9189 512.7603 L
337.0068 513.1416 336.7686 513.5215 336.3867 513.6094 c
336.0049 513.6968 335.625 513.4585 335.5381 513.0767 C
f333.1982 515.7197 m
331.3662 506.2197 L
331.292 505.8354 331.543 505.4639 331.9268 505.3896 c
332.3115 505.3154 332.6836 505.5669 332.7568 505.9512 C
334.5908 515.4512 L
334.6641 515.8354 334.4131 516.207 334.0283 516.2813 c
333.6445 516.3555 333.2725 516.104 333.1982 515.7197 C
f319.8037 517.8188 m
319.4902 517.584 319.4268 517.1396 319.6611 516.8267 C
321.6611 514.1602 L
321.8965 513.8472 322.3408 513.7837 322.6533 514.0186 c
322.9668 514.2534 323.0303 514.6973 322.7959 515.0107 C
320.7959 517.6772 L
320.5605 517.9902 320.1162 518.0537 319.8037 517.8188 c
f316.5186 516.0195 m
316.1865 515.812 316.0859 515.3745 316.2939 515.043 C
322.1279 505.71 L
322.335 505.3779 322.7725 505.2769 323.1045 505.4844 c
323.4355 505.6919 323.5371 506.1294 323.3291 506.4609 C
317.4951 515.7939 L
317.2881 516.126 316.8506 516.2266 316.5186 516.0195 c
f314.793 512.9775 m
314.4844 512.7368 314.4287 512.2915 314.6699 511.9829 C
322.3359 502.1499 L
322.5762 501.8408 323.0215 501.7861 323.3301 502.0264 c
323.6387 502.2671 323.6943 502.7124 323.4531 503.021 C
315.7871 512.854 L
315.5469 513.1631 315.1016 513.2178 314.793 512.9775 c
f313.3428 508.6802 m
313.0146 508.4673 312.9209 508.0283 313.1338 507.7002 C
318.9668 498.7002 L
319.1797 498.3716 319.6182 498.2778 319.9473 498.4907 c
320.2754 498.7036 320.3691 499.1426 320.1563 499.4707 C
314.3232 508.4707 L
314.1104 508.7993 313.6719 508.8931 313.3428 508.6802 c
f309.9463 505.8008 m
309.6436 505.5532 309.5977 505.1069 309.8457 504.8037 C
318.0127 494.8037 L
318.2598 494.5005 318.707 494.4556 319.0098 494.7031 c
319.3125 494.9507 319.3584 495.397 319.1104 495.7002 C
310.9434 505.7002 L
310.6963 506.0034 310.249 506.0483 309.9463 505.8008 c
f307.7764 501.4644 m
307.4756 501.2148 307.4336 500.7676 307.6826 500.4663 C
316.5156 489.7998 L
316.7656 489.4985 317.2119 489.4565 317.5137 489.7061 c
317.8154 489.9556 317.8564 490.4023 317.6074 490.7041 C
308.7744 501.3706 L
308.5244 501.6719 308.0781 501.7139 307.7764 501.4644 c
f305.7871 497.6396 m
305.4805 497.3955 305.4307 496.9497 305.6748 496.6436 C
315.5078 484.3101 L
315.751 484.0044 316.1973 483.9536 316.5029 484.1978 c
316.8096 484.4419 316.8594 484.8877 316.6152 485.1938 C
306.7822 497.5273 L
306.5391 497.833 306.0928 497.8838 305.7871 497.6396 c
f303.9639 493.481 m
303.6533 493.2432 303.5938 492.7983 303.832 492.4878 C
314.166 478.9878 L
314.4033 478.6768 314.8486 478.6177 315.1592 478.856 c
315.4697 479.0938 315.5293 479.5386 315.291 479.8491 C
304.957 493.3491 L
304.7197 493.6602 304.2744 493.7192 303.9639 493.481 c
f301.9639 489.481 m
301.6533 489.2432 301.5938 488.7983 301.832 488.4878 C
312.166 474.9878 L
312.4033 474.6768 312.8486 474.6177 313.1592 474.856 c
313.4697 475.0938 313.5293 475.5386 313.291 475.8491 C
302.957 489.3491 L
302.7197 489.6602 302.2744 489.7192 301.9639 489.481 c
f300.6152 484.9692 m
300.3115 484.7231 300.2646 484.2769 300.5107 483.9727 C
311.8438 469.9727 L
312.0898 469.6685 312.5361 469.6216 312.8408 469.8677 c
313.1445 470.1138 313.1914 470.5601 312.9453 470.8643 C
301.6123 484.8643 L
301.3662 485.1685 300.9199 485.2153 300.6152 484.9692 c
f299.4678 479.8179 m
299.1553 479.5825 299.0928 479.1382 299.3281 478.8257 C
309.9951 464.6592 L
310.2305 464.3467 310.6748 464.2837 310.9873 464.5195 c
311.3008 464.7549 311.3633 465.1992 311.1279 465.5117 C
300.4609 479.6782 L
300.2256 479.9907 299.7813 480.0537 299.4678 479.8179 c
f298.2773 473.9648 m
297.9756 473.7158 297.9326 473.2695 298.1816 472.9673 C
309.1816 459.6343 L
309.4307 459.3325 309.8779 459.2896 310.1797 459.5391 c
310.4814 459.7881 310.5244 460.2344 310.2754 460.5366 C
299.2754 473.8696 L
299.0264 474.1714 298.5791 474.2144 298.2773 473.9648 c
f296.6016 468.458 m
296.3037 468.2041 296.2676 467.7568 296.5215 467.459 C
308.0225 453.959 L
308.2764 453.6611 308.7227 453.625 309.0215 453.8789 c
309.3193 454.1328 309.3545 454.5801 309.1006 454.8779 C
297.6006 468.3779 L
297.3467 468.6758 296.8994 468.7119 296.6016 468.458 c
f295.8086 463.4897 m
295.4932 463.2583 295.4248 462.8149 295.6563 462.4995 C
304.8232 449.9995 L
305.0547 449.6836 305.498 449.6157 305.8135 449.8472 c
306.1289 450.0786 306.1973 450.522 305.9658 450.8374 C
296.7988 463.3374 L
296.5674 463.6533 296.124 463.7212 295.8086 463.4897 c
f295.1279 458.1465 m
294.8184 457.9072 294.7607 457.4619 295 457.1523 C
305.168 443.9854 L
305.4072 443.6758 305.8516 443.6182 306.1611 443.8574 c
306.4717 444.0967 306.5283 444.542 306.2891 444.8516 C
296.1221 458.0186 L
295.8828 458.3281 295.4375 458.3857 295.1279 458.1465 c
f293.6055 452.6279 m
293.3057 452.3755 293.2676 451.9287 293.5195 451.6294 C
305.0195 437.9624 L
305.2715 437.6626 305.7178 437.6245 306.0176 437.876 c
306.3174 438.1284 306.3555 438.5752 306.1035 438.8745 C
294.6035 452.5415 L
294.3516 452.8413 293.9043 452.8794 293.6055 452.6279 c
f292.3027 447.6523 m
291.9893 447.4175 291.9258 446.9731 292.1611 446.6602 C
304.1611 430.6602 L
304.3965 430.3472 304.8408 430.2837 305.1533 430.5186 c
305.4668 430.7534 305.5303 431.1978 305.2959 431.5107 C
293.2949 447.5107 L
293.0596 447.8237 292.6152 447.8872 292.3027 447.6523 c
f290.9697 442.4854 m
290.6563 442.2505 290.5928 441.8062 290.8281 441.4932 C
304.8271 422.8267 L
305.0625 422.5137 305.5068 422.4502 305.8193 422.6851 c
306.1328 422.9199 306.1963 423.3643 305.9619 423.6772 C
291.9619 442.3438 L
291.7266 442.6567 291.2822 442.7202 290.9697 442.4854 c
f290.4717 436.1538 m
290.1572 435.9199 290.0928 435.4761 290.3262 435.1621 C
301.9932 419.4961 L
302.2266 419.1816 302.6709 419.1172 302.9844 419.3506 c
303.2988 419.584 303.3633 420.0283 303.1299 420.3418 C
291.4629 436.0088 L
291.2295 436.3228 290.7852 436.3877 290.4717 436.1538 c
f290.2939 430.3125 m
289.9844 430.0732 289.9277 429.6279 290.167 429.3184 C
302.668 413.1514 L
302.9072 412.8418 303.3525 412.7852 303.6621 413.0244 c
303.9717 413.2637 304.0283 413.709 303.7891 414.0186 C
291.2881 430.1855 L
291.0488 430.4951 290.6035 430.5518 290.2939 430.3125 c
f288.9316 424.6221 m
288.6357 424.3662 288.6025 423.9189 288.8584 423.6226 C
303.5254 406.6221 L
303.7803 406.3262 304.2275 406.293 304.5244 406.5488 c
304.8203 406.8037 304.8535 407.251 304.5977 407.5479 C
289.9316 424.5483 L
289.6758 424.8447 289.2285 424.8774 288.9316 424.6221 c
f289.1543 418.332 m
288.834 418.1074 288.7568 417.665 288.9814 417.3447 C
301.1484 400.0117 L
301.373 399.6914 301.8154 399.6143 302.1357 399.8389 c
302.4561 400.0635 302.5332 400.5059 302.3086 400.8262 C
290.1416 418.1592 L
289.916 418.4795 289.4746 418.5566 289.1543 418.332 c
f288.2939 412.4795 m
287.9844 412.2402 287.9277 411.7949 288.167 411.4854 C
301.834 393.8184 L
302.0732 393.5088 302.5186 393.4521 302.8281 393.6914 c
303.1377 393.9307 303.1943 394.376 302.9551 394.6855 C
289.2881 412.3525 L
289.0488 412.6621 288.6035 412.7188 288.2939 412.4795 c
f286.9521 406.9727 m
286.6465 406.7275 286.5967 406.2822 286.8418 405.9766 C
302.1748 386.8096 L
302.4199 386.5039 302.8652 386.4541 303.1709 386.6982 c
303.4766 386.9434 303.5264 387.3887 303.2822 387.6943 C
287.9482 406.8613 L
287.7041 407.167 287.2578 407.2168 286.9521 406.9727 c
f286.7939 400.3125 m
286.4844 400.0723 286.4277 399.627 286.668 399.3184 C
301.001 380.8184 L
301.2412 380.5088 301.6865 380.4521 301.9951 380.6914 c
302.3047 380.9316 302.3613 381.377 302.1221 381.6855 C
287.7881 400.1855 L
287.5479 400.4951 287.1035 400.5518 286.7939 400.3125 c
f286.8477 392.6729 m
286.6201 392.3779 286.6738 391.9463 286.9521 391.6992 c
287.5752 391.1465 296.707 380.6846 302.6934 373.7871 c
302.9502 373.4922 303.3975 373.46 303.6934 373.7168 c
303.9883 373.9736 304.0205 374.4209 303.7637 374.7168 c
298.0137 381.3418 288.292 392.5059 287.7881 392.8418 c
287.4775 393.0479 287.0752 392.9678 286.8477 392.6729 c
f288.1045 386.2939 m
287.8057 386.042 287.7666 385.5947 288.0195 385.2959 C
304.8525 365.2959 L
305.1045 364.9961 305.5518 364.958 305.8506 365.21 c
306.1504 365.4619 306.1885 365.9092 305.9365 366.208 C
289.1035 386.208 L
288.8516 386.5078 288.4043 386.5459 288.1045 386.2939 c
f287.7725 380.4619 m
287.4727 380.21 287.4336 379.7627 287.6855 379.4629 C
302.5186 361.7959 L
302.7705 361.4961 303.2178 361.457 303.5176 361.709 c
303.8174 361.9609 303.8564 362.4082 303.6045 362.708 C
288.7705 380.375 L
288.5186 380.6738 288.0723 380.7129 287.7725 380.4619 c
f287.123 374.1416 m
286.8154 373.8994 286.7627 373.4541 287.0039 373.1465 C
303.0049 352.8135 L
303.2471 352.5059 303.6924 352.4531 304 352.6953 c
304.3076 352.9375 304.3604 353.3828 304.1182 353.6904 C
288.1182 374.0234 L
287.876 374.3311 287.4307 374.3838 287.123 374.1416 c
f288.0547 367.874 m
287.7109 367.6855 287.585 367.2549 287.7734 366.9121 C
299.4395 345.5791 L
299.6279 345.2354 300.0586 345.1094 300.4014 345.2969 c
300.7451 345.4854 300.8711 345.916 300.6836 346.2588 C
289.0166 367.5918 L
288.8291 367.9355 288.3984 368.0615 288.0547 367.874 c
f300.7578 360.4482 m
294.7568 355.1143 L
294.4648 354.8545 294.4385 354.4063 294.6982 354.1143 c
294.958 353.8213 295.4063 353.7949 295.6982 354.0557 C
301.6992 359.3896 L
301.9922 359.6494 302.0186 360.0977 301.7578 360.3896 c
301.498 360.6826 301.0498 360.709 300.7578 360.4482 C
f300.1523 368.832 m
292.9854 358.832 L
292.7568 358.5137 292.8301 358.0713 293.1484 357.8428 c
293.4668 357.6152 293.9092 357.6875 294.1377 358.0059 C
301.3047 368.0059 L
301.5322 368.3242 301.46 368.7666 301.1416 368.9951 c
300.8232 369.2227 300.3809 369.1504 300.1523 368.832 C
f296.625 371.291 m
289.625 359.957 L
289.4189 359.624 289.5225 359.1875 289.8555 358.9824 c
290.1885 358.7764 290.625 358.8789 290.8311 359.2129 C
297.8311 370.5469 L
298.0361 370.8799 297.9336 371.3164 297.6006 371.5215 c
297.2676 371.7275 296.8301 371.625 296.625 371.291 C
f290.8672 372.3965 m
288.3672 360.3965 L
288.2881 360.0137 288.5332 359.6377 288.917 359.5586 c
289.2998 359.4785 289.6748 359.7246 289.7549 360.1074 C
292.2549 372.1074 L
292.335 372.4902 292.0889 372.8662 291.7061 372.9453 c
291.3223 373.0254 290.9473 372.7793 290.8672 372.3965 C
f275.4658 362.6357 m
267.2988 349.9688 L
267.0869 349.6396 267.1816 349.2012 267.5107 348.9893 c
267.8398 348.7773 268.2783 348.8721 268.4902 349.2012 C
276.6572 361.8682 L
276.8691 362.1973 276.7744 362.6357 276.4453 362.8477 c
276.1162 363.0596 275.6777 362.9648 275.4658 362.6357 C
f277.2744 358.7617 m
269.2744 344.2617 L
269.085 343.9189 269.21 343.4883 269.5527 343.2988 c
269.8955 343.1094 270.3252 343.2334 270.5156 343.5762 C
278.5156 358.0762 L
278.7041 358.4189 278.5801 358.8496 278.2373 359.0391 c
277.8945 359.2285 277.4639 359.1045 277.2744 358.7617 C
f274.6377 367.3125 m
266.3047 354.8125 L
266.0879 354.4863 266.1758 354.0469 266.502 353.8291 c
266.8271 353.6123 267.2676 353.7002 267.4844 354.0254 C
275.8174 366.5254 L
276.0342 366.8516 275.9463 367.291 275.6211 367.5088 c
275.2949 367.7256 274.8555 367.6377 274.6377 367.3125 C
f272.9863 365.6641 m
272.667 365.4395 272.5898 364.9971 272.8154 364.6768 C
281.1484 352.8438 L
281.374 352.5234 281.8154 352.4473 282.1357 352.6729 c
282.4561 352.8975 282.5322 353.3398 282.3076 353.6602 C
273.9746 365.4932 L
273.749 365.8125 273.3066 365.8896 272.9863 365.6641 c
f271.1504 362.6621 m
270.8311 362.4355 270.7568 361.9922 270.9844 361.6738 C
279.6504 349.5078 L
279.8779 349.1895 280.3203 349.1143 280.6387 349.3418 c
280.958 349.5684 281.0322 350.0117 280.8047 350.3301 C
272.1387 362.4961 L
271.9111 362.8145 271.4688 362.8896 271.1504 362.6621 c
f267.8057 360.8213 m
267.4912 360.5879 267.4258 360.1445 267.6582 359.8301 C
274.8252 350.1631 L
275.0586 349.8486 275.502 349.7822 275.8164 350.0156 c
276.1309 350.249 276.1973 350.6924 275.9639 351.0068 C
268.7969 360.6738 L
268.5635 360.9883 268.1201 361.0547 267.8057 360.8213 c
f267.4492 353.7031 m
267.1182 353.5537 266.9404 353.2051 267.0557 352.8604 c
267.1084 352.7012 267.2705 352.2158 273.374 345.6045 c
273.6396 345.3164 274.0879 345.2988 274.375 345.5645 c
274.6631 345.8301 274.6807 346.2783 274.415 346.5654 c
271.6895 349.5186 268.6436 352.9131 268.3662 353.3877 c
268.1836 353.7012 267.7793 353.8535 267.4492 353.7031 c
f270.7471 384.373 m
266.7471 375.373 L
266.5879 375.0146 266.749 374.5967 267.1074 374.4375 c
267.4648 374.2783 267.8828 374.4395 268.042 374.7969 C
272.042 383.7969 L
272.2012 384.1543 272.041 384.5732 271.6826 384.7324 c
271.3252 384.8916 270.9063 384.7305 270.7471 384.373 C
f269.6152 389.1074 m
261.7822 375.6074 L
261.585 375.2695 261.7002 374.8359 262.0391 374.6387 c
262.3779 374.4424 262.8115 374.5576 263.0078 374.8965 C
270.8408 388.3965 L
271.0371 388.7344 270.9219 389.168 270.583 389.3652 c
270.2451 389.5615 269.8115 389.4463 269.6152 389.1074 C
f268.3076 393.4814 m
260.3076 381.6484 L
260.0889 381.3242 260.1738 380.8838 260.498 380.665 c
260.8223 380.4453 261.2627 380.5313 261.4814 380.8555 C
269.4814 392.6885 L
269.7012 393.0127 269.6162 393.4531 269.292 393.6719 c
268.9678 393.8916 268.5273 393.8057 268.3076 393.4814 C
f266.4785 396.8213 m
258.3115 384.9873 L
258.0889 384.665 258.1699 384.2236 258.4922 384.002 c
258.8145 383.7793 259.2559 383.8604 259.4785 384.1826 C
267.6445 396.0166 L
267.8672 396.3389 267.7861 396.7803 267.4639 397.002 c
267.1416 397.2246 266.7002 397.1436 266.4785 396.8213 C
f265.835 402.3535 m
256.002 389.6865 L
255.7617 389.377 255.8174 388.9316 256.127 388.6924 c
256.4355 388.4521 256.8809 388.5078 257.1211 388.8174 C
266.9541 401.4844 L
267.1943 401.7939 267.1387 402.2393 266.8291 402.4785 c
266.5205 402.7188 266.0752 402.6631 265.835 402.3535 C
f264.4707 405.8105 m
256.3037 393.4766 L
256.0879 393.1494 256.1768 392.71 256.5039 392.4941 c
256.8301 392.2783 257.2695 392.3672 257.4854 392.6934 C
265.6523 405.0273 L
265.8682 405.3545 265.7793 405.7939 265.4521 406.0098 c
265.126 406.2256 264.6865 406.1367 264.4707 405.8105 C
f262.9844 409.9961 m
253.4844 396.6631 L
253.2568 396.3447 253.3311 395.9014 253.6504 395.6748 c
253.9688 395.4473 254.4111 395.5215 254.6387 395.8408 C
264.1387 409.1738 L
264.3652 409.4922 264.291 409.9355 263.9727 410.1621 c
263.6533 410.3887 263.2109 410.3154 262.9844 409.9961 C
f261.125 414.458 m
253.292 401.792 L
253.0859 401.459 253.1885 401.0215 253.5225 400.8164 c
253.8545 400.6104 254.292 400.7129 254.4971 401.0459 C
262.3301 413.7119 L
262.5361 414.0449 262.4336 414.4824 262.1006 414.6875 c
261.7676 414.8936 261.3301 414.791 261.125 414.458 C
f260.3184 417.832 m
252.3184 406.665 L
252.0908 406.3467 252.1641 405.9033 252.4824 405.6758 c
252.7998 405.4482 253.2432 405.5215 253.4707 405.8389 C
261.4707 417.0059 L
261.6992 417.3242 261.626 417.7676 261.3076 417.9951 c
260.9893 418.2227 260.5459 418.1494 260.3184 417.832 C
f258.9678 422.4722 m
251.1348 410.4727 L
250.9209 410.1445 251.0127 409.7051 251.3408 409.4912 c
251.668 409.2773 252.1074 409.3691 252.3213 409.6973 C
260.1543 421.6973 L
260.3682 422.0254 260.2764 422.4648 259.9482 422.6782 c
259.6211 422.8921 259.1816 422.8003 258.9678 422.4722 C
f257.458 424.9575 m
249.958 412.791 L
249.7529 412.458 249.8564 412.0215 250.1895 411.8154 c
250.5225 411.6104 250.959 411.7139 251.1641 412.0469 C
258.6641 424.2134 L
258.8701 424.5469 258.7666 424.9834 258.4336 425.1885 c
258.0996 425.394 257.6631 425.2905 257.458 424.9575 C
f255.2627 429.5723 m
249.2627 417.7393 L
249.0859 417.3906 249.2246 416.9639 249.5742 416.7871 c
249.9238 416.6104 250.3506 416.749 250.5264 417.0986 C
256.5264 428.9316 L
256.7041 429.2803 256.5654 429.7075 256.2148 429.8838 c
255.8662 430.061 255.4395 429.9219 255.2627 429.5723 C
f253.9668 432.1377 m
245.9668 419.8047 L
245.7539 419.4766 245.8477 419.0371 246.1758 418.8242 c
246.5039 418.6113 246.9434 418.7051 247.1563 419.0332 C
255.1563 431.3662 L
255.3691 431.6948 255.2754 432.1338 254.9473 432.3467 c
254.6182 432.5596 254.1797 432.4658 253.9668 432.1377 C
f252.2783 435.1006 m
245.7783 423.6006 L
245.585 423.2598 245.7051 422.8276 246.0459 422.6348 c
246.3867 422.4424 246.8193 422.5625 247.0117 422.9033 C
253.5117 434.4033 L
253.7041 434.7441 253.584 435.1763 253.2432 435.3687 c
252.9023 435.5615 252.4707 435.4414 252.2783 435.1006 C
f250.5977 438.2417 m
243.9307 425.2417 L
243.752 424.8936 243.8887 424.4663 244.2383 424.2881 c
244.5859 424.1094 245.0137 424.2461 245.1914 424.5952 C
251.8584 437.5952 L
252.0371 437.9434 251.9004 438.3706 251.5508 438.5488 c
251.2031 438.7275 250.7754 438.5908 250.5977 438.2417 C
f248.4639 440.6328 m
241.1299 429.1328 L
240.9199 428.8027 241.0166 428.3652 241.3467 428.1543 c
241.6768 427.9438 242.1143 428.041 242.3252 428.3711 C
249.6592 439.8711 L
249.8691 440.2012 249.7725 440.6387 249.4424 440.8496 c
249.1123 441.0601 248.6748 440.9629 248.4639 440.6328 C
f246.8047 444.145 m
239.1377 432.645 L
238.9209 432.3193 239.0088 431.8789 239.335 431.6621 c
239.6602 431.4453 240.1006 431.5332 240.3174 431.8589 C
247.9844 443.3589 L
248.2012 443.6846 248.1133 444.125 247.7881 444.3418 c
247.4619 444.5586 247.0225 444.4707 246.8047 444.145 C
f244.96 446.627 m
237.793 435.127 L
237.5859 434.7944 237.6875 434.3579 238.0195 434.1504 c
238.3525 433.9434 238.7891 434.0449 238.9961 434.377 C
246.1631 445.877 L
246.3701 446.2095 246.2686 446.646 245.9365 446.8535 c
245.6035 447.0605 245.167 446.959 244.96 446.627 C
f242.793 449.293 m
236.46 439.1265 L
236.2529 438.7944 236.3545 438.3574 236.6865 438.1504 c
237.0186 437.9434 237.4551 438.0449 237.6631 438.3774 C
243.9961 448.5439 L
244.2031 448.876 244.1016 449.3125 243.7695 449.52 c
243.4375 449.7271 243.001 449.6255 242.793 449.293 C
f240.2871 451.1167 m
233.7871 440.2832 L
233.5859 439.9473 233.6943 439.5117 234.0303 439.3105 c
234.3662 439.1094 234.8008 439.2183 235.002 439.5537 C
241.502 450.3872 L
241.7041 450.7231 241.5947 451.1582 241.2598 451.3594 c
240.9238 451.561 240.4883 451.4521 240.2871 451.1167 C
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
