%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (843.ai)
%%CreationDate: 3/25/2002 6:32 PM
%%BoundingBox: 215 323 369 562
%%HiResBoundingBox: 215.9136 323.0723 368.9844 561.1821
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 11732 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD07FC8C444B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B204B
%204B204B204B204B204B204B204B204B204B204B204B204B204B204B68FD
%07FC99FFFD06FC4BF8272752515227525152275251522752515227525152
%275251522752515227525152275251522752515227525152275251522752
%5152275251522752515227525152272720B4FD05FCC2FFFD05FC27F8A8FD
%42FFA827F8FD05FCBBFFFD04FC6FF8FD46FF274BFD04FCC2FFFD04FCF852
%FD46FF7DF8FD04FCBBFFFD04FC277DFD47FFF893FCFCFCC2FFFD04FCF8FD
%48FF2768FCFCFCBCFFFD04FCF8FD48FFF86FFCFCFCC2FFFD04FCF8FD48FF
%2768FCFCFC99FFFD04FCF8FD48FFF893FCFCFCC2FFFD04FCF8FD48FF2768
%FCFCFCBBFFFD04FCF8FD48FF276FFCFCFCC2FFFD04FCF8FD48FF2768FCFC
%FCBBFFFD04FCF8FD31FFA87DFD15FF276FFCFCFCC2FFFD04FCF8FD31FFF8
%F8A7FD14FF2768FCFCFCBCFFFD04FCF8FD31FF27F827FD14FFF86FFCFCFC
%C2FFFD04FCF8FD31FFF8F8F8FD14FF2768FCFCFC99FFFD04FCF8FD31FF52
%F8F8FD14FFF893FCFCFCC2FFFD04FCF8FD31FF27F8F8FD14FF2768FCFCFC
%BBFFFD04FCF8FD31FF7DF8F87DFD13FF276FFCFCFCC2FFFD04FCF8FD31FF
%7DF8F876FD13FF2768FCFCFCBBFFFD04FCF8FD32FFF8F851FD13FF276FFC
%FCFCC2FFFD04FCF8FD0BFF51FD26FFF8F827FD13FF2768FCFCFCBCFFFD04
%FCF8FD0AFF7DF8F8A8FD24FFF8F8F8FD13FFF86FFCFCFCC2FFFD04FCF8FD
%0AFFA8F8F827FD24FF27F8F8FD13FF2768FCFCFC99FFFD04FCF8FD0BFFF8
%F827FD24FF27F8F8FD13FFF893FCFCFCC2FFFD04FCF8FD0BFF27F8F8A8FD
%23FF52F8F87DFD12FF2768FCFCFCBBFFFD04FCF8FD0BFF7DF8F852FD23FF
%27F8F87DFD12FF276FFCFCFCC2FFFD04FCF8FD0BFFA1F8F8F8FD23FF52F8
%F827FD12FF2768FCFCFCBBFFFD04FCF8FD0CFFF8F8F8FD23FF52F8F827FD
%12FF276FFCFCFCC2FFFD04FCF8FD0CFF27F8F852FD22FF7DF8F8F8FD12FF
%2768FCFCFCBCFFFD04FCF8FD0CFF52F8F852FD22FF7DF8F827FD12FFF86F
%FCFCFCC2FFFD04FCF8FD0CFFA7F8F8F8FD22FF7DF8F8F8FD12FF2768FCFC
%FC99FFFD04FCF8FD0DFFF8F8F8FD22FFA8F8F8F8A8FD11FFF893FCFCFCC2
%FFFD04FCF8FD0DFFF8F8F87DFD22FFF8F8F87DFD11FF2768FCFCFCBBFFFD
%04FCF8FD0DFF52F8F852FD22FFF8F8F87DFD11FF276FFCFCFCC2FFFD04FC
%F8FD0DFF27F8F84BFD1DFF7D527DA8FFF8F8F852FD11FF2768FCFCFCBBFF
%FD04FCF8FD0DFF7DF8F827FD1BFF52F8F82720F8F827F8F827FD11FF276F
%FCFCFCC2FFFD04FCF8FD0DFF7DF8F8F8FD1AFFF8F868FCFCFC8C26F8F8F8
%52FD11FF2768FCFCFCBCFFFD04FCF8FD0EFFF8F8F8FD19FF7DF8F827FCFC
%FC6FF827F8F827FD11FFF86FFCFCFCC2FFFD04FCF8FD0EFFF8F8F87DFD18
%FF2720FCF84BFC26F86EFCF8F827FD11FF2768FCFCFC99FFFD04FCF8FD0E
%FFF8F8F8A1FD18FF206FFC93F827F893FCFCF8F827FD11FFF893FCFCFCC2
%FFFD04FCF8FD0EFF27F8F852FD18FF2720FCFCF8F8FD04FCF8F827FD11FF
%2768FCFCFCBBFFFD04FCF8FD0EFFF8F8F852FD18FF2727FCFCF86FFD04FC
%F8F8F8FD11FF276FFCFCFCC2FFFD04FCF8FD0EFF27F8F827FD18FFCFF84B
%FC2068FCFCFC20F8F8F8FD11FF2768FCFCFCBBFFFD04FCF8FD0EFF27F8F8
%52FD19FFA8F827F893FCB444FD04F8FD11FF276FFCFCFCC2FFFD04FCF8FD
%0EFF52F8F827FD1BFF27FD04F82752F8F8F8FD11FF2768FCFCFCBCFFFD04
%FCF8FD0EFF4BF8F852FD1EFFA8FFFF7DF8F8F8A8FD10FFF86FFCFCFCC2FF
%FD04FCF8FD0EFF52F8F8F8FD21FF7DF8F8F87DFD10FF2768FCFCFC99FFFD
%04FCF8FD0EFF51F8F827FD21FF7DF8F8F87DFD10FFF893FCFCFCC2FFFD04
%FCF8FD0EFF27F8F8F8FD21FF7DF8F8F87DFF5251275152FD0AFF2768FCFC
%FCBBFFFD04FCF8FD0EFFF8F8F827FD21FF7DF8F8F852F820204B4427F8A8
%FD08FF276FFCFCFCC2FFFD04FCF8FD0EFF27F8F827FD21FF7CFD06F84A8C
%FCFC4AF8FD08FF2768FCFCFCBBFFFD04FCF8FD0EFFF8F8F852FD21FFA1F8
%F8F827FC93202768FCFC2727FD07FF206FFCFCFCC2FFFD04FCF8FD0EFFF8
%F8F827FD21FF7DF8F8F820FCFCFC44F868FC8CF8FD07FF2768FCFCFCBCFF
%FD04FCF8FD0EFFF8F8F852FD21FF7DF8F8F827FD04FCF8F88CFCF8A8FD06
%FFF86FFCFCFCC2FFFD04FCF8FD0EFFF8F8F827FD21FF7DFD04F8FCFCFC68
%F8F827FC207CFD06FF2768FCFCFC99FFFD04FCF8FD0DFFA1F8F8F8A1FF7D
%2752517DA8FD1AFF7DF8F8F827FCFC8C272093F8B4F8A8FD06FFF893FCFC
%FCC2FFFD04FCF8FD0DFF7DF8F8F84B20F826204BF8F852FD19FF7DFD04F8
%FC8C2720FCFC2744F8FD07FF2768FCFCFCBBFFFD04FCF8FD0DFF52FD04F8
%20FD05FC68F852FD18FF7DF8F8F827682720FCFCFC202752FD07FF206FFC
%FCFCC2FFFD04FCF8FD0DFF27FD05F844FD04FC4BF8F8A8FD17FF7CFD05F8
%20FCFC9220F820FD08FF2768FCFCFCBBFFFD04FCF8FD0DFF27F8F820FC68
%2768FC8C27F86FF87DFD17FFA1FD09F8277DFD09FF206FFCFCFCC2FFFD04
%FCF8FD0DFFF8F8F892FCFC44F868F820FCFC4A27FD17FFA7FD04F8FFFF7D
%FD0DFF2768FCFCFCBCFFFD04FCF8FD0DFFF8F8F8FD04FCF8F820FCFCFC68
%27FD18FFFD04F87DFD0FFFF86FFCFCFCC2FFFD04FCF8FD04FFA82627F8F8
%F852A8CFF8F8F8FD04FCF8F8FD04FC6FF8FD18FFFD04F87DFD0FFF2768FC
%FCFC99FFFD04FCF8FFFFFF7CF84B6893686F20F827F8F827FCFCFC4BF8FD
%05FC4452FD0AFFA87D2752517DA8FD07FFFD04F87DFD0FFFF893FCFCFCC2
%FFFD04FCF8FFFFA8F84AFD05FC92FD05F8FCFC92F88CFD05FC2752FD08FF
%7DF8F8F826204BF8F827FD06FFFD04F87DFD0FFF2768FCFCFCBBFFFD04FC
%F8FFFFF8F8206FFD04FCF84B44F8F82720FC204BFD05FC6FF8FD07FFA827
%F82744FD05FC8C27F8FD05FFFD04F84BFD0FFF206FFCFCFCC2FFFD04FCF8
%FFA8F8684BF826FCFC44F8FCFCFD04F844F88CFD04FC92F852FD07FFF8F8
%6E44F8F892FD04FC44F827FD04FFFD04F852FD0FFF2768FCFCFCBBFFFD04
%FCF8FF7DF8FCFC93F84BFC2744FCFC27F8277D27F893FCFC8C4BF852FD07
%FF52F8FD04FC4BF893FCB520272027FD04FFFD04F851FD0FFF206FFCFCFC
%C2FFFD04FCF8FF2726FD04FCF84BF8FCFCFCF8F8F8FFA827F827F8F8F87D
%FD08FFF86EFD05FC4BF8FCF8278CFCF8A8FFFF7DFD05F827A8FD0DFF2768
%FCFCFCBCFFFD04FCF8FF7D20FD04FC6FF84BFCFCFCF8F852FD04FF7D7DA8
%FD09FF7D27FD07FC2720278CFCFC277DFF27F8F8278CFC6827F87DFD0CFF
%F86FFCFCFCC2FFFD04FCF8FF7DF88CFCFCFC8CF88CFCFC6EF8F827FFFFA8
%2727F827F852A1FD06FF7DF8FD07FC20F88CFCFCFCF87D4BF868FCF827FC
%FCFC6FF87DFD0BFF2768FCFCFC99FFFD04FCF8FFFF204BFCFCFC6FF8FCFC
%FC20F8F852A827F8274493686F20F827FD05FF7D27FD07FC2744FD04FC27
%7D2768FCFCB5F86FFCFCFC4BF8FD0BFFF893FCFCFCC2FFFD04FCF8FFFF7D
%F88CFCFC204AFCFC44F8F8F827F820FD07FCF8F827FD05FFF892FD05FC6E
%F8FD05FCF87DF8FD04FC6FF8FD04FCF852FD0AFF2768FCFCFCBBFFFD04FC
%F8FFFFFF7CF84B8C2768B44420F8F8F827F8F8F86FFD04FC20278C274BFD
%04FF2720FD05FCF84BFD04FC20277D27FD04FC8CF8686F206F2051FD0AFF
%206FFCFCFCC2FFFD04FCF8FD04FF7DF8F8F826F82676FD04F8FCFC4AF86F
%FCFC44F88CFC68F8A8FFFFFFA8F820FCFC8C20F8FD04FC68F87C7DF8FD05
%FCF8F8F826F8F827FD0AFF2768FCFCFCBBFFFD04FCF8FD06FFA8A17DFFFF
%FFF8F8F827FCFCFC93F86F8C2768FCFCFCF87CFD04FFA827F8F8F827F827
%206F20F852FF7DF8FD05FC2720FCFCFC2052FD0AFF206FFCFCFCC2FFFD04
%FCF8FD0CFFFD04F8FD04FC6FF826F8FD04FC4B27FD04FF27F84B8CFCFCFC
%4420F827A8FF7D4BF820F82744FC204BFCFCFC207DFD0AFF2768FCFCFCBC
%FFFD04FCF8FD0CFFF8F8F827FD05FC27F8B4FD04FC6827FFFFFF52F8B4FD
%07FC6FF852F820206F686F2027202720FCFC4BF8FD0BFFF86FFCFCFCC2FF
%FD04FCF8FD0CFFFD04F8FD05FCF84BFD05FC68F8FFFFA8F88CFD09FC4AF8
%6FFD07FC4BF84AFC92F87DFD0BFF2768FCFCFC99FFFD04FCF8FD0CFFF8F8
%F827FD04FC2027FD06FC204BFFFF274BFD0BFCB5FD09FC4BF84BF87DFD0C
%FFF893FCFCFCC2FFFD04FCF8FD0CFFFD04F8FCFCFC8CF82027F820F84B8C
%2052FFFF2768FD16FCF8F8A8FD0DFF2768FCFCFCBBFFFD04FCF8FD0CFFFD
%04F8FCFC8C27F827446F686F20F8F8A8FFFF206FFD16FC4451FD0EFF206F
%FCFCFCC2FFFD04FCF8FD0CFF27F8F8F89244F82092FD06FC8C26F8CFFF27
%44FD16FC6EF8FD0EFF2768FCFCFCBBFFFD04FCF8FD0CFF27FD05F868FD0A
%FC27F8FF4B27FD16FC444BFD0EFF206FFCFCFCC2FFFD04FCF8FD0CFF27FD
%04F868FD0BFC8CF852FFF826FD05F82768FCFC27446E44FD08FC2752FD0E
%FF2768FCFCFCBCFFFD04FCF8FD0CFF27F8F8F868FD0DFC442752F8F86F8C
%FC8C6F2020F827F8274427686FFD05FC92F827277DFD0CFFF86FFCFCFCC2
%FFFD04FCF8FD08FFCF2727FD05F8FD0FFCF8F844FD07FC8C26F8F8F84BF8
%4A206E68FD05FC8C4BF851FD0BFF2768FCFCFC99FFFD04FCF8FD07FF52F8
%27446F68936893FD0FFC2044FD0AFC27F8B59293204BF84B68FD06FC93F8
%7DFD0AFFF893FCFCFCC2FFFD04FCF8FD05FFA827F88CFD16FCF86EFD0AFC
%8CF874C6C0BA4427F84AFD07FC6EF8FD0AFF2768FCFCFCBBFFFD04FCF8FD
%05FF27F8B4FD17FC2768FD0BFC204BC6C6C6C08C4BF820FD07FC2752FD09
%FF206FFCFCFCC2FFFD04FCF8FD04FF7DF8FD0EFC6EFD0AFCF8F8F84AFD09
%FC6EF826F8274A98FC6F68FD07FC2027FD09FF2768FCFCFCBBFFFD04FCF8
%FD04FF206FFD0BFCB420FCF893F8FC6893FD06FC8C6FF8278CFD07FC8C6F
%68934427F827F82768FD06FC6FF8FD09FF206FFCFCFCC2FFFD04FCF8FFFF
%FFA8F88CFD0AFC4B44F88CF8442044F88CFD09FCF84BFD0EFC4420F8FD07
%FC4427FD09FF2768FCFCFCBCFFFD04FCF8FFFFFF7DF8FD09FC8C4B442020
%4B206F44F8684B20FD08FC92F8FD0FFC8C2720FD06FC2752FD09FFF86FFC
%FCFCC2FFFD04FCF8FFFFFF7D20FD0AFCF8202092B4B4FCFC8CF8F88CFD09
%FCF8449244F8444B68FD09FC8CF844FCFC92204AF84B52CFFD07FF2768FC
%FCFC99FFFD04FCF8FFFFFFA8F8FD08FC27F82720BAFD04C6C0B4684B206F
%FD08FCF8272027F84B20F8686FFD08FC68278C27F827204B4427F87DFD06
%FFF893FCFCFCC2FFFD04FCF8FF2727F8F8F827208CFD04FC20272092FD06
%C6C0FCF82744FD08FCF8F820204A446F202020FC68FD07FCF8F820FD05FC
%20F8F876FD05FF2768FCFCFCBBFFFD04FCFD04F893FC924427F84BFCFCFC
%6F204BBAFD07C69827F827FD07FC6FF8BA9EC0C0C0FCFC684BF827FD07FC
%27F8B4FD04FC8CF8686FF8A8FD04FF206FFCFCFCC2FFFD04FCF82768F844
%FD04FC92F8268C4BFD05F851C6C69E26FD04F820FCFCFC8C27F8F8F82674
%FD05C6FCFC4420F827FD06FCF820F84AFCFCFC2020FCFC2027FD04FF2768
%FCFCFCBBFFFD04FCF88CFC68278CFD04FC93F827F86FFCFC8C6FF827A4F8
%2693FCFC8C4BF8B44427206FFC9344F826C6C675F827204B684B68B4FD05
%FC27686FF84BFCB4F893FCFC6827FD04FF206FFCFCFCC2FFFD04FCF8FCFC
%FC2027FD05FC20F892FD06FCF82720FD06FCF844F868FD05FC8CF84A27F8
%4A686F20F8F82744FD04FC8CF8FCFC8CF84B4420FCFCFC6EF8FD04FF2768
%FCFCFCBCFFFD04FCF8FCFCFCB4F86FFD04FC2027FD07FC6FF86FFD06FC20
%2720FD07FC68F8F8FD05FC44F88CFD05FC4427FCFCFC92F82744FCFCFC44
%27FD04FFF86FFCFCFCC2FFFD04FCF8FCFCFC6820F86E68FCFC2668FD07FC
%8CF868FD06FC26F86FFD08FCF86EFD06FCF84AFD04FC8CF820FD04FC4AF8
%6EFCFCFC264BFFFFFF52F868FCFCFC99FFFD04FCF82027F827F82720F8F8
%27F84BFD07FC6FF827FD05FCB4F8F844FD08FCF868FD06FC4B20FD04FC4B
%F8F88CFCFCFC8CF88CFCFC6FF8FF7627F8F8F893FCFCFCC2FFFD04FCF826
%68FD07FC8C4BF88CFD06FCF8F8F82768FC8C6FFD04F8FD07FC6FF826FD06
%FC2026FCFC8C20F8FF27208CFCFCFCF8FCFC8CF827FD06F868FCFCFCBBFF
%FD04FCF88CFD09FC68F8F827446F684BFD0DF8278CFD04FC6FF8F8F8B4FD
%04FC20FD06F827275220F8206F68F8684BFD09F86FFCFCFCC2FFFD04FCF8
%6FFD09FCF827A827FD14F820F820FD05F8202027FD1CF868FCFCFCBBFFFD
%04FCF8F8B4FD07FC27F8FFFF52FD15F827F820FD1FF8527DFF206FFCFCFC
%C2FFFD04FCF827F84A8CFCFCFC4427F8FFFF7DFD13F86FFCFCFC92FD1BF8
%27277DA8FD04FF2768FCFCFCBCFFFD04FCF8FF7D27F8F827F82727FFFFFF
%FD13F827206F8C92F827FCFCFD11F8FD04277D7DFD09FFF86FFCFCFCC2FF
%FD04FCF8FD04FFA77CFD05FFFD14F8684AF8F8F820FD04FCF8F8F827277D
%7DFD18FF2768FCFCFC99FFFD04FCF8FD0AFF51FD13F844FCFCFC8C27F84B
%FCFCFC2752FD1DFFF893FCFCFCC2FFFD04FCF8FD09FF52FD10F8202752F8
%6FFD05FC6EF827FCFC2052FD1DFF2768FCFCFCBBFFFD04FCF8FD08FF52FD
%0EF8274BA8FFFFFF2744FD06FCB4F827FC4B27FD1DFF206FFCFCFCC2FFFD
%04FCF8A8FD06FF52FD0EF827A8FD05FF2726FD08FCF827F87DFD1DFFF868
%FCFCFCBBFFFD04FC2751FD05FF52FD0EF87DFD07FFA8F893FD07FCB5F8F8
%A8FD1CFFA8F8FD04FCC2FFFD04FC68F8A8FFFFFF52FD0EF8A8FD09FF27F8
%92FD06FC8C2727FD1DFFF84BFD04FCBCFFFD05FC20277DFF27FD0EF87CFD
%0BFF52F827446F686F442027FD1DFF27278CFD04FCC2FFFD06FC20FD10F8
%202752275227522752275227522727FD05F8272752275227522752275227
%52275227522752275227522752275227522727F8278CFD05FC99FFFD07FC
%8C4B264B2727204B2627204B274B264B4B4B264B4B4B264B4B4B264B4B4B
%264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B
%4B4B264B4B4B2093FD07FCC2FFFD52FCBBFFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
368.9844 323.0723 m
215.9136 323.0723 L
215.9136 561.1821 L
368.9844 561.1821 L
368.9844 323.0723 L
fu0 0 0 0 k
224.6152 545.7109 m
224.2822 339.7109 l
225.1157 331.0449 232.7822 330.5449 v
240.4487 330.0449 258.7822 330.377 y
351.6162 330.377 l
360.2822 331.7109 360.4492 340.2109 v
360.6162 545.0439 l
359.9482 553.0439 351.2822 553.8774 v
233.2822 554.0439 l
226.4482 553.5444 224.6152 545.7109 v
f0 1 1 0 k
252.9487 412.5439 m
255.4487 420.2109 265.2822 420.2109 v
275.1157 420.2109 282.9478 413.543 277.7817 400.043 c
282.6157 396.7109 284.1157 389.877 v
288.9487 393.377 l
284.2817 398.2109 286.7817 404.377 v
289.2817 410.5439 293.4487 411.0439 y
285.7827 413.7109 287.1157 421.7109 v
288.4487 429.7109 295.7827 433.377 304.6162 432.5439 c
313.4492 431.7109 315.7832 422.8779 313.1162 415.7109 c
311.1162 409.7109 305.1162 409.877 v
309.4492 406.043 l
312.2822 408.043 317.7822 409.377 v
315.4502 414.2109 317.6162 418.877 v
319.7822 423.5439 325.7822 424.8774 y
329.6162 425.0439 333.1162 422.8774 v
336.6162 420.7109 340.4502 415.377 338.6162 410.377 c
336.7822 405.377 331.7832 402.377 331.1162 402.377 c
332.6152 396.2109 330.2822 393.0449 v
337.1162 392.877 339.9492 385.877 v
342.7822 378.877 339.1162 375.5449 y
345.2822 376.043 348.4492 371.2109 v
351.6162 366.377 351.7832 358.7109 344.6162 354.2109 c
337.4492 349.7109 329.9492 351.7109 y
332.4492 355.7109 l
327.6152 358.377 327.2822 361.877 v
325.6162 356.043 319.4492 354.7109 v
313.2822 353.377 304.4492 350.0449 y
302.7822 346.2109 l
304.6152 337.2109 300.2822 333.877 v
295.9487 330.5449 279.4497 328.7109 280.6157 344.5449 c
259.1152 351.2109 l
252.9487 354.0449 l
248.6157 355.377 246.7822 356.7109 v
245.1157 348.2109 236.2822 348.0449 v
227.4487 347.877 224.6152 352.2109 224.6152 355.0449 c
224.6152 357.877 224.2822 367.7109 y
225.6152 372.543 233.6152 372.2109 v
231.1157 381.3789 237.7822 387.0449 v
241.7817 391.377 250.6152 390.7109 v
252.9487 412.5439 l
f0 0.2 1 0 k
255.6152 368.5449 m
255.4482 372.8789 260.1152 375.0449 v
264.7822 377.2109 270.2827 372.8789 271.1157 369.0449 c
264.4487 367.7109 263.9487 363.0449 v
263.4487 358.377 263.2822 363.377 y
260.7817 368.7109 255.6152 368.5449 v
f292.1157 368.7109 m
294.9487 371.377 300.4492 370.7109 v
305.9492 370.0449 305.9492 366.5449 y
300.7832 366.7109 299.1162 361.5449 v
297.4487 356.377 299.4502 360.8789 298.1157 363.5449 c
296.7817 366.2109 293.6157 368.543 292.1157 368.7109 c
f307.7822 388.377 m
309.6152 385.7109 309.2822 383.2109 v
314.4502 383.8789 320.1162 381.5449 v
316.1152 389.7109 307.7822 388.377 v
f0 1 1 0 k
249.7822 430.8774 m
247.4487 435.5444 239.4487 435.7109 v
231.4487 435.8774 228.2822 427.5444 229.4487 421.7109 c
230.6152 415.877 235.2822 412.877 240.4487 412.877 c
245.6152 412.877 249.1152 416.0449 250.4487 419.7109 c
251.7822 423.3774 251.6157 429.2109 249.7822 430.8774 c
f255.4487 442.3774 m
258.1147 448.5439 266.7817 447.5439 v
275.4487 446.5439 276.7827 438.3779 275.1157 432.7109 c
273.4487 427.0439 267.7827 422.7104 261.4487 424.5439 c
255.1152 426.3774 252.7822 432.2109 252.7822 434.7109 c
252.7822 437.2109 255.4487 442.3774 y
f322.7822 482.5439 m
319.6162 486.2104 314.4492 486.5439 v
309.2822 486.8774 305.4502 483.3779 304.6162 478.7109 c
303.7822 474.0439 307.9492 470.2109 313.9492 468.8774 c
319.9492 467.5439 322.6162 472.5439 323.4492 474.8774 c
324.2822 477.2109 324.2822 480.5439 322.7822 482.5439 c
f327.2822 456.5439 m
327.9492 442.3774 l
331.9482 439.7109 338.7822 441.7109 v
345.6162 443.7109 346.2832 448.3774 345.1162 453.8774 c
343.9492 459.3774 337.4482 461.7109 333.2822 460.7109 c
329.2822 459.2104 327.2822 456.5439 v
f*u
1 D
0.65 0.53 0.51 1 k
234.3701 554.5859 m
228.5088 554.5859 223.7402 549.8174 223.7402 543.9561 C
223.7402 340.2988 L
223.7402 334.4375 228.5088 329.668 234.3701 329.668 C
350.5283 329.668 L
356.3896 329.668 361.1582 334.4375 361.1582 340.2988 C
361.1582 543.9561 L
361.1582 549.8174 356.3896 554.5859 350.5283 554.5859 C
234.3701 554.5859 L
f0 D
225.1572 340.2988 m
225.1572 543.9561 L
225.1572 549.0361 229.29 553.1689 234.3701 553.1689 C
350.5283 553.1689 L
355.6084 553.1689 359.7402 549.0361 359.7402 543.9561 C
359.7402 340.2988 L
359.7402 335.2188 355.6084 331.0859 350.5283 331.0859 C
234.3701 331.0859 L
229.29 331.0859 225.1572 335.2188 225.1572 340.2988 C
f*U
*u
1 D
254.1392 369.418 m
253.8218 369.4414 249.7715 369.6895 247.0088 367.3086 c
245.5439 366.0449 244.7251 364.291 244.5752 362.0918 c
244.3306 358.5059 245.7534 354.0762 253.9214 353.3496 C
254.0508 353.3379 L
257.0708 353.0645 262.999 354.2324 263.8179 360.6211 c
264.1162 362.9434 263.3721 365.0137 261.666 366.6035 c
259.271 368.8379 255.5688 369.6055 254.1392 369.418 C
f0 D
254.2539 368.0156 m
255.0625 368.1777 258.5347 367.5859 260.6997 365.5684 c
262.0771 364.2832 262.6533 362.6797 262.4126 360.8008 c
261.5601 354.1543 254.4805 354.7227 254.1797 354.75 C
254.0469 354.7617 L
248.3276 355.2715 245.6919 357.6367 245.9893 361.9961 c
246.1123 363.7988 246.7646 365.2246 247.9282 366.2305 c
250.2886 368.2695 254.022 368.0078 254.0596 368.0039 C
254.1572 367.9961 L
254.2539 368.0156 L
f*U
*u
1 D
271.4351 369.5859 m
268.4644 369.5293 266.2231 368.6426 264.7729 366.9551 c
262.6577 364.4922 263.0615 361.2539 263.0796 361.1172 C
263.0737 361.2109 L
263.0737 359.5996 264.6431 355.002 271.6157 355.002 c
279.5288 355.002 279.9858 361.7715 279.9897 361.8398 C
280.0005 361.9219 280.3247 364.9395 278.2632 367.209 c
276.7778 368.8457 274.481 369.6445 271.4351 369.5859 c
f0 D
264.4907 361.2109 m
264.4907 361.2559 L
264.4849 361.3027 L
264.4814 361.3301 264.1543 364.0684 265.8569 366.041 c
267.0327 367.4043 268.9185 368.1191 271.4624 368.168 c
274.0737 368.2188 276.0054 367.5801 277.2036 366.2676 c
278.8345 364.4824 278.5806 361.9824 278.5776 361.957 C
278.5601 361.6934 278.1636 356.4199 271.6157 356.4199 c
265.8003 356.4199 264.4907 359.9668 264.4907 361.2109 C
f*U
224.103 368.2461 m
223.9922 367.873 224.2036 367.4844 224.5752 367.3711 c
224.9468 367.2559 225.3418 367.4668 225.4595 367.8359 c
225.5112 367.998 226.8115 371.8066 234.4204 371.502 c
242.2256 371.1914 244.8286 366.2559 244.8286 364.959 c
244.8286 364.5684 245.1455 364.25 245.5371 364.25 c
245.9282 364.25 246.2456 364.5684 246.2456 364.959 c
246.2456 366.6113 243.4272 372.5605 234.4771 372.918 c
225.6934 373.2695 224.1636 368.4512 224.103 368.2461 c
f246.5454 357.5684 m
246.1621 357.5293 245.8818 357.1758 245.9116 356.793 c
245.9458 356.3555 245.1636 354.0664 243.0952 351.9531 c
241.46 350.2832 238.6104 348.3418 234.3223 348.584 c
226.2222 349.043 225.3501 354.4141 225.3169 354.6426 c
225.2612 355.0293 224.9033 355.2988 224.5171 355.2441 c
224.1309 355.1895 223.8608 354.8359 223.9131 354.4492 c
223.9219 354.3828 224.9331 347.6973 234.2422 347.1699 c
239.209 346.8887 242.4692 349.2031 244.3296 351.1934 c
246.4365 353.4492 247.4341 356.0371 247.3184 356.9648 c
247.2705 357.3477 246.9282 357.6074 246.5454 357.5684 c
f223.9673 358.0645 m
223.6826 357.8008 223.666 357.3594 223.9263 357.0723 c
224.1865 356.7832 224.6328 356.7617 224.9243 357.0195 c
224.9683 357.0586 229.5225 360.8867 245.3218 358.0137 c
245.707 357.9434 246.0757 358.1992 246.146 358.584 c
246.2158 358.9688 245.9604 359.3379 245.5757 359.4082 c
228.9185 362.4355 224.1616 358.2461 223.9673 358.0645 c
f227.3345 370.4941 m
231.644 366.9844 234.9307 359.3438 234.9634 359.2676 C
236.2671 359.8223 L
236.1284 360.1484 232.813 367.8594 228.23 371.5938 C
227.3345 370.4941 L
f264.1997 401.375 m
256.0308 398.3105 253.312 392.9551 252.6367 391.2793 C
252.4429 391.291 252.2422 391.3008 Y
248.3335 391.5293 241.0586 391.9512 235.9067 385.834 c
230.3618 379.25 233.1694 372.0801 233.292 371.7793 C
234.606 372.3086 L
234.4976 372.5801 232.0093 379.0059 236.9907 384.9219 c
241.6855 390.4961 248.2422 390.1133 252.1597 389.8867 C
253.6367 389.8066 L
253.7935 390.3379 L
253.813 390.4023 255.8398 396.7266 264.6978 400.0469 c
269.4917 401.8457 274.7925 401.1348 278.5317 398.1973 c
282.4429 395.123 284.1763 389.9492 283.4126 383.6289 C
283.312 382.7988 L
284.1489 382.8359 L
284.4067 382.8477 290.4868 383.0566 292.4468 377.4746 c
294.4155 371.8711 290.812 368.7168 290.6577 368.5859 C
291.5718 367.502 L
291.6079 367.5313 294.4429 369.9766 294.4429 374.2715 c
294.4429 375.377 294.2554 376.6055 293.7847 377.9453 c
291.9224 383.2461 286.8276 384.1016 284.8667 384.2324 C
284.936 384.9922 285.0063 385.7539 285.0063 386.4824 c
285.0063 391.9453 283.0679 396.4336 279.4077 399.3105 c
275.2817 402.5547 269.4546 403.3438 264.1997 401.375 c
f*u
1 D
289.7866 369.2539 m
289.5405 369.2559 280.7896 369.2754 280.0767 361.7773 c
279.8237 359.1211 280.5854 356.8047 282.2788 355.0801 c
284.8237 352.4902 288.7485 351.8047 291.3364 352.0039 c
294.0737 352.2148 296.5015 353.4199 297.9966 355.3086 c
299.3359 357 299.8496 359.1367 299.4824 361.4863 c
298.5933 367.1719 292.6753 369.5703 289.7866 369.2539 C
f0 D
289.8755 367.8418 m
291.979 368.123 297.3071 366.2246 298.0815 361.2676 c
298.3862 359.3184 297.9722 357.5625 296.8853 356.1895 c
295.6343 354.6074 293.5718 353.5977 291.2271 353.416 c
288.7622 353.2266 285.3521 353.9746 283.2905 356.0742 c
281.8794 357.5117 281.272 359.3848 281.4868 361.6426 c
282.0825 367.8965 289.4546 367.8418 289.7681 367.8359 C
289.8218 367.834 L
289.8755 367.8418 L
f*U
*u
1 D
290.1167 353.252 m
289.7026 353.2773 281.2876 353.6543 280.0786 343.6289 c
279.6626 340.1816 280.3833 337.332 282.2212 335.1621 c
285.2681 331.5645 290.2847 331.0684 291.7495 331.002 c
293.2397 330.9355 297.7739 330.7305 300.8525 333.623 c
302.8711 335.5215 303.9277 338.4063 303.9912 342.1992 c
304.0459 345.5039 302.9717 348.1602 300.7969 350.0957 c
297.4507 353.0742 292.2231 353.5059 290.1167 353.252 C
f0 D
290.2095 351.8418 m
291.4019 352.002 296.5337 351.9922 299.8555 349.0371 c
301.707 347.3887 302.6221 345.0957 302.5732 342.2227 c
302.5166 338.8262 301.6113 336.2813 299.8818 334.6563 c
297.2397 332.1719 293.1558 332.3574 291.814 332.418 c
289.0933 332.541 285.4292 333.5684 283.3022 336.0781 c
281.73 337.9355 281.1187 340.418 281.4849 343.459 c
282.5522 352.3086 289.7534 351.8613 290.0601 351.8379 C
290.1343 351.832 L
290.2095 351.8418 L
f*U
282.0454 348.416 m
282.1841 347.0059 L
282.2808 347.0137 291.9321 347.7871 300.8867 336.1133 C
302.0117 336.9766 L
292.5464 349.3145 282.4692 348.459 282.0454 348.416 C
f290.5552 345.9785 m
291.6763 345.1113 L
291.7036 345.1465 294.4604 348.6797 297.7778 350.416 C
297.1196 351.6719 L
293.5239 349.7891 290.6743 346.1328 290.5552 345.9785 C
f*u
1 D
306.0996 367.0859 m
298.4946 366.9043 298.4067 360.2773 298.4067 360.2109 C
298.4429 360.4336 L
297.9897 359.0723 298.272 356.6172 299.6904 354.75 c
300.7168 353.3945 302.7295 351.8203 306.4834 352.002 c
314.5459 352.3965 315.4141 358.1445 315.4863 358.7988 c
315.6094 359.9063 314.9805 362.3359 313.2012 364.2773 c
311.9814 365.6074 309.7598 367.1738 306.0996 367.0859 c
f0 D
300.8193 355.6055 m
299.6387 357.1621 299.5068 359.1387 299.7891 359.9863 C
299.8242 360.0938 L
299.8252 360.207 L
299.8262 360.4258 299.9336 365.5215 306.1328 365.6699 c
308.6445 365.7285 310.6709 364.9375 312.1563 363.3184 c
313.7734 361.5547 314.1357 359.4746 314.0781 358.9551 c
313.9824 358.0879 313.1611 353.7461 306.415 353.418 c
303.9316 353.2969 301.9971 354.0527 300.8193 355.6055 c
f*U
283.6899 389.9336 m
284.8726 389.1543 L
285.022 389.377 288.6138 394.6211 297.0503 393.8379 c
305.5918 393.0469 308.4336 386.3906 308.7432 382.9805 C
308.8066 382.2813 L
309.5078 382.3379 L
309.624 382.3477 321.1738 383.2168 326.041 376.4629 c
328.543 372.9922 328.4844 369.1191 327.9951 366.4824 c
327.2813 362.6387 325.1152 358.8633 322.7285 357.3027 c
318.7979 354.7344 314.1445 356.9883 314.0977 357.0117 C
313.4648 355.7441 L
313.6846 355.6348 318.8828 353.0957 323.5039 356.1172 c
326.2324 357.9004 328.5967 361.9629 329.3887 366.2246 c
329.9287 369.1328 329.9863 373.4141 327.1914 377.291 c
322.4775 383.832 312.6357 383.8887 310.04 383.7852 C
309.418 387.7363 306.1445 394.4199 297.1812 395.25 c
287.8647 396.1133 283.856 390.1855 283.6899 389.9336 C
f339.1035 376.0859 m
329.457 375.9102 328.2607 369.2246 328.25 369.1582 C
329.6484 368.9277 L
329.6875 369.1563 330.7109 374.5156 339.1289 374.668 c
342.3916 374.7285 345.0088 373.7637 346.9092 371.8027 c
348.9961 369.6484 349.8398 366.5488 349.7412 364.5801 c
349.5811 361.3691 346.3154 356.2539 343.0674 355.2188 c
339.6455 354.1309 335.3369 355.2188 335.2939 355.2305 C
334.9844 355.291 328.7539 356.5566 328.1533 361.9551 C
326.7451 361.7988 L
327.4609 355.3535 334.9082 353.8633 334.9834 353.8477 C
335.1299 353.8086 339.6797 352.6543 343.4971 353.8691 c
347.3975 355.1113 350.9688 360.7578 351.1572 364.5098 c
351.2744 366.8496 350.3213 370.3164 347.9277 372.7891 c
345.7432 375.043 342.7744 376.1523 339.1035 376.0859 c
f338.9102 353.9824 m
340.3223 354.1055 L
340.3125 354.2168 339.4375 365.4063 346.1494 373.0781 C
345.083 374.0117 L
337.9658 365.877 338.8682 354.4648 338.9102 353.9824 C
f329.0986 369.0254 m
329.1699 369.0059 336.2871 366.9922 339.2822 358.6387 C
340.6162 359.1172 L
337.3613 368.1953 329.7861 370.3086 329.4648 370.3945 C
329.0986 369.0254 L
f249.7471 371.8105 m
249.6919 371.4238 249.9609 371.0645 250.3486 371.0098 C
253.8486 370.5098 L
254.2358 370.4531 254.5947 370.7227 254.6504 371.1094 c
254.7056 371.498 254.4365 371.8574 254.0488 371.9121 C
250.5488 372.4121 L
250.1616 372.4668 249.8027 372.1973 249.7471 371.8105 c
f249.9312 374.5625 m
249.8291 374.1836 250.0532 373.7949 250.4312 373.6934 C
254.7646 372.5254 L
255.1426 372.4238 255.5313 372.6484 255.6328 373.0254 c
255.7349 373.4043 255.5107 373.793 255.1328 373.8945 C
250.7993 375.0625 L
250.4214 375.1641 250.0327 374.9395 249.9312 374.5625 c
f252.9307 377.8613 m
252.6636 377.5742 252.6792 377.127 252.9653 376.8594 C
255.4653 374.5254 L
255.7515 374.2598 256.1997 374.2754 256.4668 374.5605 c
256.7339 374.8477 256.7183 375.2949 256.4321 375.5625 C
253.9321 377.8945 L
253.646 378.1621 253.1978 378.1465 252.9307 377.8613 c
f256.0791 380.1484 m
255.7451 379.9453 255.6401 379.5098 255.8442 379.1758 C
257.6777 376.1758 L
257.8818 375.8418 258.3179 375.7363 258.6519 375.9395 c
258.9858 376.1445 259.0908 376.5801 258.8867 376.9141 C
257.0532 379.9141 L
256.8491 380.248 256.4131 380.3535 256.0791 380.1484 c
f259.019 381.7031 m
258.6558 381.5566 258.479 381.1445 258.624 380.7813 C
259.957 377.4473 L
260.1025 377.084 260.5151 376.9063 260.8784 377.0527 c
261.2417 377.1973 261.4185 377.6094 261.2734 377.9727 C
259.9404 381.3066 L
259.7949 381.6699 259.3823 381.8477 259.019 381.7031 c
f262.9072 382.4082 m
262.7407 378.5742 L
262.7236 378.1836 263.0269 377.8535 263.418 377.8359 c
263.8091 377.8203 264.1396 378.123 264.1567 378.5137 C
264.3232 382.3457 L
264.3403 382.7383 264.0371 383.0684 263.646 383.0859 c
263.2549 383.1016 262.9243 382.7988 262.9072 382.4082 C
f266.4321 382.0645 m
265.4321 378.3965 L
265.3291 378.0195 265.5513 377.6289 265.9292 377.5273 c
266.3071 377.4238 266.6968 377.6465 266.7993 378.0234 C
267.7993 381.6914 L
267.9028 382.0684 267.6802 382.459 267.3022 382.5605 c
266.9243 382.6641 266.5347 382.4414 266.4321 382.0645 C
f271.1147 381.3789 m
267.9478 378.2109 L
267.6714 377.9355 267.6704 377.4863 267.9478 377.209 c
268.2241 376.9316 268.6733 376.9316 268.9497 377.209 C
272.1167 380.377 L
272.394 380.6523 272.3931 381.1016 272.1167 381.3789 c
271.8403 381.6543 271.3911 381.6543 271.1147 381.3789 C
f273.9243 378.4902 m
269.9243 376.1563 L
269.5864 375.959 269.4722 375.5254 269.6694 375.1875 c
269.8667 374.8496 270.3003 374.7344 270.6392 374.9316 C
274.6392 377.2656 L
274.9771 377.4629 275.0913 377.8965 274.894 378.2344 c
274.6968 378.5723 274.2632 378.6875 273.9243 378.4902 C
f275.7495 374.252 m
272.0835 374.0859 L
271.6929 374.0684 271.3901 373.7363 271.4077 373.3457 c
271.4253 372.9551 271.7573 372.6523 272.1479 372.6699 C
275.814 372.8359 L
276.2046 372.8535 276.5073 373.1855 276.4897 373.5762 c
276.4722 373.9668 276.1401 374.2695 275.7495 374.252 C
f271.9077 371.2402 m
271.8911 370.8496 272.1938 370.5195 272.5854 370.502 C
276.4185 370.3359 L
276.8091 370.3203 277.1401 370.623 277.1567 371.0137 c
277.1733 371.4043 276.8706 371.7363 276.479 371.752 C
272.646 371.918 L
272.2554 371.9355 271.9243 371.6328 271.9077 371.2402 c
f293.6997 375.541 m
293.3335 375.4043 293.1479 374.9941 293.2856 374.6289 C
294.2856 371.9609 L
294.4224 371.5957 294.8315 371.4102 295.1978 371.5469 c
295.564 371.6836 295.7495 372.0918 295.6118 372.459 C
294.6118 375.127 L
294.4751 375.4922 294.0659 375.6777 293.6997 375.541 c
f294.9175 375.1523 m
294.5815 374.9512 294.4731 374.5156 294.6743 374.1797 C
296.1743 371.6797 L
296.3755 371.3438 296.811 371.2363 297.146 371.4375 c
297.4819 371.6387 297.5903 372.0742 297.3892 372.4082 C
295.8892 374.9082 L
295.688 375.2441 295.2524 375.3535 294.9175 375.1523 c
f297.7378 376.0547 m
297.3638 375.9375 297.1558 375.5391 297.272 375.166 C
298.105 372.5 L
298.2222 372.125 298.6196 371.918 298.9927 372.0332 c
299.3672 372.1504 299.5752 372.5488 299.459 372.9219 C
298.6255 375.5879 L
298.5083 375.9629 298.1108 376.1699 297.7378 376.0547 c
f300.4102 376.752 m
300.0195 376.7305 299.7197 376.3965 299.7412 376.0059 C
299.9082 373.0059 L
299.9307 372.6133 300.2646 372.3145 300.6553 372.3359 c
301.0459 372.3594 301.3457 372.6934 301.3242 373.084 C
301.1572 376.084 L
301.1348 376.4746 300.8008 376.7734 300.4102 376.752 c
f302.9248 376.1973 m
302.2578 373.1973 L
302.1729 372.8164 302.4131 372.4375 302.7949 372.3535 c
303.1777 372.2676 303.5557 372.5078 303.6406 372.8906 C
304.3076 375.8906 L
304.3926 376.2734 304.1523 376.6504 303.7695 376.7363 c
303.3877 376.8203 303.0098 376.5801 302.9248 376.1973 C
f305.9824 375.1953 m
304.8154 372.8613 L
304.6406 372.5117 304.7813 372.0859 305.1318 371.9102 c
305.4824 371.7363 305.9082 371.877 306.083 372.2266 C
307.25 374.5605 L
307.4248 374.9102 307.2842 375.3359 306.9336 375.5117 c
306.583 375.6855 306.1572 375.5449 305.9824 375.1953 C
f309.2598 374.0234 m
307.4268 372.0234 L
307.1621 371.7344 307.1816 371.2871 307.4707 371.0215 c
307.7588 370.7578 308.207 370.7773 308.4717 371.0664 C
310.3047 373.0664 L
310.5693 373.3535 310.5498 373.8027 310.2607 374.0664 c
309.9727 374.332 309.5244 374.3125 309.2598 374.0234 C
f313.334 371.8613 m
309.5 370.1953 L
309.1406 370.0391 308.9766 369.6211 309.1318 369.2617 c
309.2881 368.9023 309.7061 368.7383 310.0645 368.8945 C
313.8984 370.5605 L
314.2578 370.7168 314.4219 371.1348 314.2666 371.4922 c
314.1104 371.8516 313.6924 372.0156 313.334 371.8613 C
f314.8711 369.4141 m
311.8711 369.082 L
311.4824 369.0391 311.2021 368.6875 311.2451 368.2988 c
311.2881 367.9102 311.6387 367.6309 312.0273 367.6738 C
315.0273 368.0059 L
315.416 368.0488 315.6963 368.4004 315.6533 368.7891 c
315.6104 369.1777 315.2598 369.457 314.8711 369.4141 C
f312.2441 365.7813 m
312.2051 365.3906 312.4893 365.0449 312.8789 365.0059 C
316.2119 364.6719 L
316.6016 364.6328 316.9482 364.918 316.9873 365.3066 c
317.0264 365.6973 316.7422 366.043 316.3525 366.082 C
313.0195 366.416 L
312.6299 366.4551 312.2832 366.1699 312.2441 365.7813 c
f297.3853 412.3838 m
292.7173 412.1758 288.769 409.8672 286.8228 406.2109 c
282.4399 397.9707 288.5913 392.5586 288.6548 392.5059 C
289.5786 393.582 L
289.3579 393.7715 284.2358 398.3281 288.0747 405.5449 c
289.7817 408.7539 293.2866 410.7822 297.4487 410.9678 c
302.1445 411.1768 306.5156 409.0781 308.8555 405.4902 C
309.2656 404.8613 L
309.8701 405.3066 L
309.957 405.3711 318.5752 411.6055 326.2207 406.4551 c
333.752 401.3828 329.8232 393.5352 329.6523 393.2031 C
329.1074 392.1465 L
330.2988 392.1699 L
330.5518 392.1738 336.5264 392.2246 339.1299 386.0996 c
341.751 379.9336 338.6943 375.9863 338.5635 375.8203 C
339.668 374.9316 L
339.7764 375.0664 341.6064 377.3945 341.6064 381.2246 c
341.6064 382.7969 341.2979 384.623 340.4346 386.6543 c
338.1221 392.0938 333.3896 393.252 331.3125 393.502 C
331.6934 394.5273 332.207 396.2852 332.207 398.3359 c
332.207 401.2988 331.1299 404.8574 327.0117 407.6309 c
319.6475 412.5918 311.6318 408.123 309.5732 406.8066 C
306.8828 410.4502 302.3184 412.6035 297.3853 412.3838 C
f303.9111 393.5059 m
303.6563 393.209 303.6914 392.7617 303.9883 392.5059 C
307.4883 389.5059 L
307.7852 389.252 308.2324 389.2871 308.4873 389.584 c
308.7422 389.8809 308.707 390.3281 308.4102 390.582 C
304.9102 393.582 L
304.6133 393.8379 304.166 393.8027 303.9111 393.5059 c
f307.7988 395.2363 m
307.416 395.1543 307.1738 394.7773 307.2568 394.3945 C
308.0898 390.5605 L
308.1729 390.1777 308.5498 389.9355 308.9326 390.0176 c
309.3154 390.1016 309.5576 390.4785 309.4746 390.8613 C
308.6416 394.6953 L
308.5586 395.0781 308.1816 395.3203 307.7988 395.2363 c
f310.0732 394.377 m
310.0732 390.7109 L
310.0732 390.3184 310.3906 390.002 310.7822 390.002 c
311.1738 390.002 311.4912 390.3184 311.4912 390.7109 C
311.4912 394.377 L
311.4912 394.7695 311.1738 395.0859 310.7822 395.0859 c
310.3906 395.0859 310.0732 394.7695 310.0732 394.377 C
f313.4209 393.8496 m
312.7539 390.5156 L
312.6777 390.1328 312.9268 389.7598 313.3105 389.6816 c
313.6943 389.6055 314.0674 389.8555 314.1445 390.2383 C
314.8115 393.5723 L
314.8877 393.9551 314.6387 394.3281 314.2549 394.4063 c
313.8711 394.4824 313.498 394.2324 313.4209 393.8496 C
f316.2998 392.3281 m
315.1328 389.6621 L
314.9766 389.3027 315.1387 388.8848 315.498 388.7285 c
315.8564 388.5723 316.2754 388.7344 316.4316 389.0938 C
317.5986 391.7598 L
317.7549 392.1191 317.5928 392.5371 317.2334 392.6934 c
316.875 392.8496 316.4561 392.6875 316.2998 392.3281 C
f319.7988 390.7285 m
317.2988 388.3945 L
317.0127 388.1289 316.9971 387.6797 317.2637 387.3945 c
317.5313 387.1074 317.9795 387.0918 318.2656 387.3594 C
320.7656 389.6914 L
321.0518 389.959 321.0674 390.4082 320.8008 390.6934 c
320.5332 390.9805 320.085 390.9961 319.7988 390.7285 C
f322.3711 388.709 m
319.2041 387.543 L
318.8369 387.4063 318.6484 387 318.7842 386.6328 c
318.9199 386.2656 319.3271 386.0762 319.6943 386.2129 C
322.8613 387.3789 L
323.2285 387.5156 323.416 387.9219 323.2813 388.2891 c
323.1455 388.6563 322.7383 388.8438 322.3711 388.709 C
f324.5742 386.084 m
321.7402 385.918 L
321.3496 385.8945 321.0518 385.5586 321.0752 385.168 c
321.0977 384.7773 321.4336 384.4805 321.8242 384.5039 C
324.6582 384.6699 L
325.0488 384.6934 325.3467 385.0293 325.3232 385.4199 c
325.3008 385.8105 324.9648 386.1074 324.5742 386.084 C
f322.0781 382.4551 m
322.0352 382.0664 322.3154 381.7168 322.7041 381.6738 C
325.7041 381.3398 L
326.0928 381.2969 326.4434 381.5781 326.4863 381.9668 c
326.5293 382.3555 326.249 382.7051 325.8604 382.748 C
322.8604 383.082 L
322.4717 383.125 322.1211 382.8438 322.0781 382.4551 c
f323.3301 424.626 m
319.7383 423.4414 317.0918 420.7847 316.4238 417.6934 c
315.0176 411.1914 317.7031 408.7754 317.8184 408.6758 C
318.7529 409.7402 L
318.7314 409.7598 316.5977 411.79 317.8086 417.3945 c
318.3711 419.9966 320.6572 422.252 323.7734 423.2803 c
327.5479 424.5254 331.6123 423.6777 334.6484 421.0112 c
337.4785 418.5264 338.6484 414.9629 337.8584 411.2354 c
337.0156 407.2598 334.1602 404.0605 330.4053 402.8867 C
330.8271 401.5352 L
335.0713 402.8613 338.2969 406.4648 339.2451 410.9414 c
340.1445 415.1855 338.8096 419.2441 335.584 422.0767 c
332.166 425.0771 327.5859 426.0303 323.3301 424.626 c
f290.0903 429.041 m
287.6802 426.7529 286.4067 423.8149 286.4067 420.5439 c
286.4067 412.6162 293.1675 410.3896 293.2349 410.3682 C
293.6636 411.7188 L
293.4253 411.7959 287.8247 413.6758 287.8247 420.5439 c
287.8247 423.4165 288.9448 425.9995 291.0659 428.0132 c
294.02 430.8184 298.7026 432.2729 303.9121 432.0034 c
306.9941 431.8438 309.3711 430.8335 310.9785 428.9995 c
313.6006 426.0068 313.5527 421.5464 313.4102 419.7676 c
313.1543 416.5762 311.0957 410.5859 305.1357 410.752 C
305.0967 409.3359 L
311.1973 409.166 314.415 414.5654 314.8223 419.6543 c
314.9795 421.6128 315.0234 426.5342 312.0439 429.9336 c
310.1758 432.0664 307.4639 433.2388 303.9854 433.4185 c
298.3892 433.708 293.3247 432.1128 290.0903 429.041 c
f321.8086 422.7393 m
330.5391 418.5293 328.2764 405.6348 328.252 405.5059 C
329.6465 405.248 L
329.752 405.8203 332.1338 419.335 322.4238 424.0156 C
321.8086 422.7393 L
f328.5879 413.3203 m
329.3096 412.1006 L
329.3516 412.125 333.5752 414.5508 338.167 412.5605 C
338.7314 413.8613 L
333.46 416.1455 328.7842 413.4375 328.5879 413.3203 C
f301.1035 416.4141 m
300.7246 415.1504 299.1338 412.9014 298.5522 412.1406 C
299.6797 411.2813 L
299.7705 411.4004 301.9297 414.2373 302.4609 416.0078 c
302.9541 417.6504 307.335 426.1011 312.5918 427.1831 C
312.3066 428.5718 L
306.3516 427.3457 301.6592 418.2676 301.1035 416.4141 c
f292.103 429.0024 m
300.4707 428.8477 303.1621 420.522 303.2725 420.1675 C
304.626 420.5864 L
304.5967 420.6831 301.5332 430.2456 292.1284 430.4194 C
292.103 429.0024 L
f251.6187 400.6289 m
253.2349 396.3184 256.4907 395.5488 256.6284 395.5195 C
256.9409 396.9004 L
256.8325 396.9258 254.2798 397.5684 252.9458 401.127 C
251.6187 400.6289 L
f264.3794 420.916 m
253.7681 419.873 252.7539 412.3701 252.7451 412.2949 C
254.1519 412.124 L
254.1855 412.3867 255.0845 418.5781 264.5181 419.5059 c
268.4712 419.8945 271.769 419.0215 274.3198 416.9121 c
276.7856 414.873 278.439 411.6582 278.7427 408.3125 c
279.2837 402.3691 276.8589 400.2813 276.8345 400.2598 C
277.7231 399.1563 L
277.8481 399.2559 280.771 401.666 280.1548 408.4414 c
279.8169 412.1553 277.9731 415.7305 275.2231 418.0039 c
272.4116 420.3306 268.6616 421.3374 264.3794 420.916 c
f261.4907 399.8789 m
262.7397 399.209 L
262.8032 399.3262 269.105 411.0527 274.6558 417.585 C
273.5757 418.5029 L
267.9263 411.8555 261.5542 399.998 261.4907 399.8789 C
f254.8647 416.4141 m
255.0298 415.0068 L
255.2959 415.0361 261.5923 415.627 265.6392 406.9121 C
266.9243 407.5098 L
262.4258 417.1973 255.1714 416.4512 254.8647 416.4141 C
f*u
1 D
232.7891 433.896 m
229.1245 430.9839 228.5098 426.2969 228.4087 424.9297 c
228.1802 421.8452 229.4824 418.2559 231.7266 415.7871 c
233.8149 413.4893 236.5952 412.2383 239.7671 412.1689 c
246.5439 412.0215 250.8623 416.6914 251.3218 424.6606 C
251.3286 424.7236 251.3604 425.021 251.3604 425.5288 c
251.3604 427.978 250.5742 434.6157 242.2241 435.9111 c
238.394 436.5054 235.2197 435.8276 232.7891 433.896 c
f0 D
239.7974 413.5859 m
237.0244 413.6465 234.5962 414.7363 232.7754 416.7402 c
230.5068 419.2373 229.6572 422.6001 229.8218 424.8252 c
229.9126 426.0474 230.457 430.2324 233.6709 432.7866 c
235.7788 434.4619 238.5835 435.042 242.0063 434.5107 c
250.856 433.1372 249.9551 425.1406 249.9121 424.8008 C
249.9077 424.7515 L
249.7124 421.3325 248.3359 413.4004 239.7974 413.5859 c
f1 D
251.3218 424.6606 m
251.3208 424.6553 251.3184 424.6211 251.3179 424.6196 C
251.3228 424.6704 L
251.3228 424.667 251.3218 424.6641 251.3218 424.6606 C
f*U
0 D
238.5762 412.7734 m
239.9883 412.6484 L
239.998 412.7598 241.0596 423.8774 247.999 432.4312 C
246.8984 433.3237 L
239.6782 424.4243 238.6177 413.2441 238.5762 412.7734 C
f230.7026 429.3398 m
230.9912 429.3066 237.8032 428.439 240.4473 420.9741 C
241.7832 421.4478 L
238.8354 429.7705 231.1846 430.7124 230.8604 430.748 C
230.7026 429.3398 L
f*u
1 D
258.0537 446.1431 m
255.2651 444.1279 253.4878 440.9004 252.9136 436.8096 c
251.5112 426.8198 262.1406 423.563 262.248 423.5313 C
262.1763 423.5566 L
263.606 422.9614 266.9644 423.2627 269.896 424.7886 c
272.1274 425.9502 274.9937 428.27 275.9741 432.7251 c
276.9644 437.229 276.4673 441.1436 274.5356 444.0454 c
273.0396 446.2939 270.8052 447.7446 268.0757 448.2412 c
264.4609 448.8984 260.8081 448.1333 258.0537 446.1431 c
f0 D
262.7212 424.8652 m
262.6865 424.8794 L
262.6499 424.8901 L
262.2588 425.0068 253.0859 427.8413 254.3169 436.6123 c
254.8438 440.3652 256.3804 443.1851 258.8838 444.9941 c
261.3271 446.7603 264.5854 447.4351 267.8218 446.8467 c
270.1646 446.4209 272.0776 445.1807 273.356 443.2603 c
275.0688 440.686 275.4956 437.1484 274.5894 433.0298 c
273.7271 429.1089 271.2056 427.0679 269.2417 426.0459 c
266.4722 424.605 263.5688 424.5122 262.7212 424.8652 C
f*U
258.1021 426.2422 m
259.4624 425.8452 L
259.4966 425.9619 263.0234 437.6104 274.2505 442.9028 C
273.647 444.1851 L
261.8267 438.6128 258.2485 426.7446 258.1021 426.2422 C
f256.8579 443.3413 m
257.0571 443.3145 261.7642 442.6128 263.6011 436.1826 C
264.9634 436.5723 L
262.8599 443.938 257.2734 444.7173 257.0366 444.7471 C
256.8579 443.3413 L
f326.7832 456.1201 m
328.1143 455.6318 L
328.1895 455.834 330.0459 460.5757 337.0752 460.1699 c
340.5127 459.9717 343.2432 457.625 344.3789 453.8921 c
345.5371 450.085 344.6367 446.1313 342.1885 444.2759 c
337.0098 440.3521 329.7412 441.7891 329.0215 442.6284 C
327.8721 441.7993 L
328.4824 440.9448 330.4648 440.5605 331.2891 440.4351 c
332.8867 440.1919 338.4531 439.6685 343.0439 443.146 c
345.9561 445.3521 347.0625 449.9409 345.7344 454.3047 c
344.4189 458.6294 341.2119 461.3511 337.1572 461.585 c
329.041 462.0532 326.8047 456.1792 326.7832 456.1201 C
f329.4502 458.022 m
329.9385 457.9038 341.416 454.9932 341.5732 443.5342 C
342.9912 443.5537 L
342.8184 456.1255 329.9121 459.3687 329.7813 459.3999 C
329.4502 458.022 L
f327.041 442.2104 m
327.5234 440.8774 L
335.543 443.7778 339.4316 452.0635 339.5928 452.4146 C
338.3057 453.0073 L
338.2686 452.9268 334.4932 444.9058 327.041 442.2104 C
f*u
1 D
313.9199 487.252 m
313.833 487.2485 305.1494 486.8057 304.0801 479.1421 c
303.7148 476.5225 304.4004 474.1279 306.0635 472.2168 c
308.4834 469.4355 312.4531 468.1689 315.1162 468.1689 c
317.7666 468.1689 323.9521 469.0972 324.1572 477.6938 c
324.3271 484.7822 317.8447 487.0366 313.9883 487.2515 C
313.9541 487.2534 L
313.9199 487.252 L
f0 D
307.1328 473.1475 m
305.9805 474.4717 305.4004 476.0215 305.4004 477.7676 c
305.4004 478.1509 305.4277 478.5439 305.4844 478.9458 c
306.3799 485.3643 313.499 485.8115 313.9453 485.833 C
314.9463 485.7744 322.7432 485.0864 322.7432 477.9648 c
322.7432 477.8867 322.7422 477.8076 322.7412 477.728 c
322.5801 470.9985 318.5059 469.5859 315.1162 469.5859 c
312.6885 469.5859 309.167 470.8096 307.1328 473.1475 c
f*U
306.5508 482.7075 m
306.8262 482.6113 313.2695 480.2227 311.2529 469.6772 C
312.6455 469.4106 L
314.9014 481.2124 307.0898 484.021 307.0107 484.0483 C
306.5508 482.7075 L
f311.6787 476.9346 m
312.5537 475.8203 L
312.8408 476.0454 319.5908 481.3521 321.2559 482.8506 C
320.3086 483.9043 L
318.6777 482.437 311.748 476.9897 311.6787 476.9346 C
f322.1162 423.3774 m
321.6162 471.8774 l
323.4492 474.5444 323.4492 478.7109 v
323.4492 482.8774 320.6162 484.2109 y
319.6162 503.0444 318.9492 509.7109 v
318.2822 516.3774 316.9502 526.5439 316.6162 528.0439 c
316.2822 529.5439 317.1162 530.0439 318.4492 530.3774 c
319.7822 530.7109 320.9502 528.5439 321.1162 526.8774 c
321.2822 525.2109 324.4492 503.0439 325.4492 495.0439 c
326.4492 487.0439 328.1162 457.7109 y
329.6152 433.7109 329.7822 431.7109 v
329.9492 429.7109 330.1162 424.3774 y
326.2832 424.7104 322.1162 423.3774 v
f254.7822 397.377 m
253.9487 413.5439 253.9487 418.877 v
253.9487 424.2109 254.4487 430.3774 y
253.2822 433.2109 253.7822 437.2109 v
254.2822 441.2109 256.9487 443.5439 256.9487 445.5439 c
256.9487 447.5439 258.6157 457.7104 257.2822 476.0439 c
255.9487 494.3774 249.6157 511.5439 249.2822 512.0439 c
248.9487 512.5439 247.7817 513.3779 246.1152 513.7109 c
244.4487 514.0439 244.9492 512.8779 245.2822 511.2109 c
245.6152 509.5439 249.7173 496.4858 250.9487 485.7109 c
252.2822 474.0439 253.2822 465.0444 250.4487 442.2109 c
248.9487 432.877 248.9487 431.5439 v
250.9487 429.0439 250.4487 423.5439 v
249.9487 418.0439 247.6152 416.2109 y
247.6157 399.7109 248.7822 390.7109 v
253.1152 390.5449 l
255.1157 394.043 255.7822 394.7109 v
256.4487 395.377 257.6157 396.543 254.7822 397.377 c
f230.9487 331.0449 m
237.1152 335.377 242.9487 341.877 v
248.7822 348.377 251.7822 353.877 y
260.6147 353.0449 263.1152 359.877 v
264.1152 360.043 264.4487 359.2109 v
264.7822 358.377 267.4497 355.543 271.6157 355.7109 c
275.7817 355.877 278.6157 358.877 278.9487 360.377 c
279.2817 361.877 280.6147 361.877 280.7817 360.2109 c
280.9487 358.5449 280.9478 353.5449 288.2817 352.877 c
281.1157 350.877 280.6157 343.2109 v
275.7817 342.877 271.1157 341.2109 v
266.4497 339.5449 261.1152 334.7109 259.1152 330.7109 c
241.6152 330.2109 l
230.9487 331.0449 l
f293.1157 352.877 m
298.2827 356.5449 298.6157 357.0449 v
298.9487 357.5449 299.2832 356.7109 299.6162 356.0449 c
299.9492 355.377 301.6162 353.0449 305.9492 352.877 c
310.2822 352.7109 313.4492 355.877 y
315.2832 356.2109 316.1162 355.7109 v
316.9492 355.2109 321.1162 355.7109 y
329.9492 355.7109 331.4492 355.5449 v
332.9492 355.377 333.4482 354.5449 338.2822 354.0449 c
343.1162 353.5449 345.7822 356.0449 346.2822 356.377 c
346.7822 356.7109 360.1162 361.377 y
360.6162 353.877 l
348.9482 350.377 339.2822 348.7109 v
329.6162 347.0449 320.6152 347.8789 316.7822 347.5449 c
312.9492 347.2109 303.1162 345.7109 y
299.9502 352.0449 293.1157 352.877 v
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
