%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (\260\355\267\301 ) (\260\355\267\301\300\307\307\320)
%%Title: (858.ai)
%%CreationDate: 3/25/2002 6:35 PM
%%BoundingBox: 220 312 375 551
%%HiResBoundingBox: 220.9492 312.5039 374.0195 550.6143
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 15.5 14.3887 581.5 826.3887
%AI3_DocumentPreview: None
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -194.5 742.3887 1 1002 661 18 0 1 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:15.5 14.3887
%%AI3_PaperRect:-15 827 580 -15
%%AI3_Margin:15 -15 -14 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 84 128 8
%%BeginData: 13138 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD52FCC2FFFD52FCBCFFFD52FCC2FFFD08FC444B204B204B204B20
%4B204B204B204B204B204B20272027202720272027204B204B204B204B20
%27204B204B204B204B204B204B204B204B204B204B204B204B204A8CFD07
%FC99FFFD06FC4BF8272752515227525152275251522752515227525127FD
%0DF827204B2027F84B204B444B204B4427F8275152275251522752515227
%525152272720B4FD05FCC2FFFD05FC27F8A8FD16FFFD0BF8208CFCFCF8F8
%92FD09FC6EF87DFD0EFFA827F8FD05FCBBFFFD04FC6FF8A8FD18FF27FD09
%F88CFCFC93F8FD0CFC4BF8FD10FF274AFD04FCC2FFFD04FCF852FD1AFFA1
%522727FD05F8FCFCFC6826FD0CFC8CF8A8FD09FFA87D27A8FFFF7CF8FD04
%FCBBFFFD04FC277DFD1FFFA87DF8F88CFCFC93F8FD0DFCF8272727F82727
%27F827F8F8F852FD04FFF893FCFCFCC2FFFD04FCF8FD23FFF84B68F8F8F8
%20FD0CFC20FD0AF827A8FD05FF2768FCFCFCBCFFFD04FCF8FD23FF7DF827
%44FC6827F86F8CFD09FCFD09F8277DFD07FFF86FFCFCFCC2FFFD04FCF8FD
%23FF7DF8F8FD04FC6EF8F8206E8CFD05FC8CFD08F84BA8FD08FF2768FCFC
%FC99FFFD04FCF8FD17FFA8FD0427F82751522727F8F8F84BFD06FC684B20
%F820B5FCFCFC27FD07F8A1FD0AFFF893FCFCFCC2FFFD04FCF8FD15FFA851
%FD0EF820FD09FC8C20F8FCFC4AFD05F82752FD0CFF2768FCFCFCBBFFFD04
%FCF8FD14FF7D27FD0FF84BFD0AFC8C204427F82727527DFD0FFF276FFCFC
%FCC2FFFD04FCF8FD14FF27F827F827FD0DF8FD0BFC44F820FD14FF2768FC
%FCFCBBFFFD04FCF8FD1AFF2727FD0AF88CFD0AFC93F8A8FD14FF276FFCFC
%FCC2FFFD04FCF8FD1CFF7D2727F820F827277DF84AFD0AFC8CF8F8277DFD
%12FF2768FCFCFCBCFFFD04FCF8FD0BFFA8FD047DA8FD14FF7DF892FD09FC
%4BFD04F8277DFD10FFF86FFCFCFCC2FFFD04FCF8FD09FF7D52FD09F82727
%7DFD0FFF52F84AFD07FC4AFD07F8277DFD0EFF2768FCFCFC99FFFD04FCF8
%FD06FF52F8F827277DFF7D27FD09F827A1FD0DFF76F827204B68934427FD
%0AF827FD0DFFF893FCFCFCC2FFFD04FCF8FD07FF52FD05F827FFA852FD09
%F8277DFD0BFF27277D522727F84B52FFA727FD09F8A7FD0BFF2768FCFCFC
%BBFFFD04FCF8FD08FF27FD06F852FFA8FD0AF827FD09FFA8F8A8FD0BFF52
%27FD07F8A8FD0AFF276FFCFCFCC2FFFD04FCF8FD09FFFD07F827A8FF27FD
%0AF8A8FD07FF5227FD0FFF7D27FD05F8CFFD09FF2768FCFCFCBBFFFD04FC
%F8FD09FF27FD08F87DFF27FD0AF8A8FD06FFF8A1FD11FFA827FD04F8FD09
%FF276FFCFCFCC2FFFD04FCF8FD09FF52FD09F87DFFFD0BF8A8FD04FF5220
%FD06FFA87D51522752277DA8FD05FF7D27F8F852FD08FF2768FCFCFCBCFF
%FD04FCF8FD0AFFFD0AF87DA8FD0BF8FD04FF2752FFFFFFA852FD0BF852A8
%FD04FF7DF827FD08FFF86FFCFCFCC2FFFD04FCF8FD0AFF52FD0AF87DFD0C
%F8FFFFA8F8FFFFA827FD0FF827FD05FF7DCFFD07FF2768FCFCFC99FFFD04
%FCF8FD0BFF27FD09F82727FD0BF8527D27275127FD13F87DFD0CFFF893FC
%FCFCC2FFFD04FCF8FD0BFF7DFD16F827F800F827FD15F852FD0BFF2768FC
%FCFCBBFFFD04FCF84B52F8272727F8FD04277D27FD06F827072F072F072F
%072F072F072F072F072F072F0728FD0BF827275227522727F8F8F87CFD0A
%FF276FFCFCFCC2FFFD04FCF84BFD13F8FD130706FD0AF852FD07FF7DF8F8
%F87DFD09FF2768FCFCFCBBFFFD04FCF8FFFF7D27FD0FF827072F072F072F
%072F072F05270529072F072F072FFD08F827FD0BFF52F8F8FD09FF276FFC
%FCFCC2FFFD04FCF8FFFFFFA827FD0FF8FD0A0727F8F8F827FD0507FD07F8
%52FD0DFF7DF87DFD08FF2768FCFCFCBCFFFD04FCF8FD05FF27FD0EF8072F
%072F0727062F072F0728F8F8F829072F072FFD05F8277DFD0FFFA87CFD08
%FFF86FFCFCFCC2FFFD04FCF8FD06FF52FD0DF8FD040700F8F805FD040705
%F8F800FD040700FD04F87DFD1AFF2768FCFCFC99FFFD04FCF8FD07FF7DFD
%0CF8072F072F0728F8F8062F062F06F8F827072F072F00F8F8F87DFD1BFF
%F893FCFCFCC2FFFD04FCF8FD08FFA7FD0BF8FD0607FD05F80607F8F8F8FD
%040728F8F87DFD1CFF2768FCFCFCBBFFFD04FCF8FD0AFF27FD09F8062F07
%2F0627FD05F8280727F8F8072F072F06F87DFD1DFF276FFCFCFCC2FFFD04
%FCF8FD0BFF7CFD08F8280707FD08F8000700F8F828FD0407F8FD1EFF2768
%FCFCFCBBFFFD04FCF8FD0CFFA852FD06F8052F07FD04F82706F8F82F0627
%F8F8062F072F07277DFD1DFF276FFCFCFCC2FFFD04FCF8FD0FFF2720F8F8
%F8270707002705070727F8F805FD04F828FD0407F852FD05FF7D2727FD07
%F852A7FD0CFF2768FCFCFCBCFFFD04FCF8FD11FF7D27F8F82F072F072F07
%28F8F805FD05F8052F072F072827FFFFFF5227FD0DF87DFD0AFFF86FFCFC
%FCC2FFFD04FCF8FD13FF52F8FD050728F8F8F828F80006F8F827FD040700
%27FFCFFD12F827A8FD07FF2768FCFCFC99FFFD04FCF852FD12FFA8F82F07
%2F072FFD05F828072FF8F8052F072F072FF8A8FD15F827277DA8FFFFFFF8
%93FCFCFCC2FFFD04FCF8F827FD12FFF8FD0407FD07F8280727F827FD0507
%FD1CF827272768FCFCFCBBFFFD04FCF827F827FD11FFF828072F05F8F800
%0627F8F8F82FF8F8052F072F072FFD1CF827FF276FFCFCFCC2FFFD04FCF8
%27F8F8F8A8FD0FFF27050707F8F8F8060706F8F8F806F8F828FD050727FD
%19F827A8FFFF2768FCFCFCBBFFFD04FCF851FD04F827A8FD0DFF2728072F
%0528072F072F06270627F8F8072F072F072F0627FD17F852FD04FF276FFC
%FCFCC2FFFD04FCF87DFD07F827F827F82727527DFD04FF76F8FD0A0728F8
%F8F8FD0707FD17F87DFD05FF2768FCFCFCBCFFFD04FCF87DFD10F8277CFF
%7D27072F072F072F072F0729F8F8F800052F072F072F0727FD15F827A8FD
%05FFF86FFCFCFCC2FFFD04FCF8FFFD13F852F829FD0807FD07F829FD0407
%00FD17F87DFD04FF2768FCFCFC99FFFD04FCF8FF27FD13F827062F072F07
%2F072F06F8F8270627F8F8F82F072F0729FD18F87DFFFFFFF893FCFCFCC2
%FFFD04FCF8FF27FD14F827FD070727F80007070727F8F806FD0407FD19F8
%A7FFFF2768FCFCFCBBFFFD04FCF8FF7DFD15F82F072F072F072FF8F8062F
%072F06F8F828072F072FFD19F827FFFF276FFCFCFCC2FFFD04FCF8FFFFFD
%15F8FD070700F82807070728F8F806FD040728FD19F852FF2768FCFCFCBB
%FFFD04FCF8FFFF27FD14F82F072F072F072F00F8062F072F05F8F82F072F
%072F06FD1AF8A8276FFCFCFCC2FFFD04FCF8FFFFFFFD14F800FD060728F8
%F8060706F8F827FD0607FD1BF82768FCFCFCBCFFFD04FCF87DFFFF52FD13
%F827072F072F072F0727FD05F800072F072F072F0727FD1BF86FFCFCFCC2
%FFFD04FCFD19F8FD070706FD05F800FD070706FD1BF868FCFCFC99FFFD04
%FCF827FD17F8062F072F072F072F0728F8F8002F072F072F072F072FFD15
%F8277DA15227F893FCFCFCC2FFFD04FCF8A8FD17F827FD080700F8F8FD0A
%0727FD15F827A8FFFFF868FCFCFCBBFFFD04FCF8FF27FD17F82F072F072F
%072F06F8F828072F072F072F072F072F06FD16F827FFFF276FFCFCFCC2FF
%FD04FCF8FFA8FD13F8204AF8F8FD070728F800FD0C07FD17F87DFF2768FC
%FCFCBBFFFD04FCF8FFFF27FD0CF827F8F8F8278CFCFCFCF828072F072F07
%2FF8F8052F072F072F0629072F072F0728FD16F827FF276FFCFCFCC2FFFD
%04FCF8FFFFFFFD0AF8206E4427F8F820FD04FC2700FD0607F8F8FD0507F8
%F8F8000607070706FD17F8A82768FCFCFCBCFFFD04FCF8FFFFFFA8FD07F8
%278CFD04FC27F82768FCFCFC6827072F072F072FF8F8072F072F0729FD04
%F8002F072FFD17F87CF86FFCFCFCC2FFFD04FCF8FFFFFF27F8F827204A68
%FD06FC20F820F8F8F826F8F8F828FD0507F8F829FD050706FD04F8000707
%28F852FD0FF827277D52F8272768FCFCFC99FFFD04FCF8FFFF7DF868FD0A
%FC4BF8B5FCFCFC93686F6827052F072F072FF8F8062F0728F8280728F8F8
%F827072F0727A8FF764BFD09F82727A8FD05FFA8F893FCFCFCC2FFFD04FC
%F8FFFF2720FD0AFC92F88CFD08FC44F8FD050727F8F805FD04F8270727F8
%F8F8070707F827FD04FFA87D5252277D7DFD0AFF2768FCFCFCBBFFFD04FC
%F8FFFFF893FD0AFC4427FD0AFCF829072F072F0727FD05F827072F0727F8
%F8062F0729F8FD15FF276FFCFCFCC2FFFD04FCF8FFFFF8FD06FC4420F826
%F8F8F826F84AFD05FC8C6827F8FD050706FD05F806070727F8F8F8050707
%07F852FD14FF2768FCFCFCBBFFFD04FCF8FF7DF8FD04FCB5F8274493686F
%F827686FF82768FC6827F827F827072F072F072FF8F8F827072F0728FD05
%F82F072F0527FD14FF276FFCFCFCC2FFFD04FCF8FF7D20FD04FCF827FD04
%FC68F88CFCFCFC20F820F844FCFCFCF828FD0507F8F8F807070729F8F8F8
%27F8F8F8290707F87DFD13FF2768FCFCFCBCFFFD04FCF8FF7D20FCFCFC44
%27FD05FC4BF8FD05FC44F844FD04FC4BF82F072F072FF8F8F82F072F00F8
%F8F806FD04F828072727FD13FFF86FFCFCFCC2FFFD04FCF8FF7C26FCFCFC
%F844FD05FC4426FD06FCF8FD05FC8CF806FD0407FD04F828FD05F807FD05
%F82806F8A1FD12FF2768FCFCFC99FFFD04FCF8FF5220FCFC93F8FD06FC93
%20FD06FCF8FD06FC2027072F072F05FD08F8280728F82706F8F82F0027FD
%12FFF893FCFCFCC2FFFD04FCF8FFF86FFCFC2027FD06FC6827FD06FCF8FD
%06FC6EF8FD040729FD07F827070706F8F807F8F80607F8FD12FF2768FCFC
%FCBBFFFD04FCF8FFF88CFCFC4B20FD06FC6FF8FD06FCF8686F20F8F84B8C
%27052F072F0728FD05F827072F072FF8F806F8F828072727FD11FF276FFC
%FCFCC2FFFD04FCF8A8F8FCFCFCF868FD06FC204AFD06FC20F8F875745120
%F8F8F8FD0607062806FD060727FD04F8060706F8A8FD10FF2768FCFCFCBB
%FFFD04FCF8A8F8FCFCFCF88CFD06FC2768FD06FC93F89FFD04C6A451F829
%072F072F072F072F072F072F072F06F8F8F8052F072FF852FD10FF276FFC
%FCFCC2FFFD04FCF8FFF8FCFC92F8FD06FC6FF8FD07FC68F8FD07C64BF8FD
%0D0706F8F8F806FD040728F8FD10FF2768FCFCFCBCFFFD04FCF8FFF8FCFC
%4427FD05FC92F84BFD07FC6FF8FD07C69EF8062F072F072F072F072F072F
%0500F8F8F82F072F072F072727FD0FFFF86FFCFCFCC2FFFD04FCF8FFF8FC
%FC2020FD04FC4BF82020FD07FCF8F89EFD07C62600FD0A0705F8F82700F8
%00FD050706F8A1FD0EFF2768FCFCFC99FFFD04FCF8A8F8FCFCF893FCFC8C
%27F893204BFD05FC93F8272027C6C6C6C72627F851F829072F072F072F07
%2F06F8F8280728F827072F072F072F0027FD0EFFF893FCFCFCC2FFFD04FC
%F87DF8FC68F8FCFC8C2020FCFC4A20FD04FC6FF8268C92F851C6C6202668
%6F20F8F8FD080728F8F8070707F8F8070707F8F80607F8A8FD0DFF2768FC
%FCFCBBFFFD04FCF87D27FC6F20FCFC2720FCFCFC6827FCFCFC92F86FFCFC
%FC93F8272627FD04FC8CF8062F072F072F072F05F8052F072F00F80728FD
%04F80627F8FD0DFF276FFCFCFCC2FFFD04FCF87DF8FC68F8FC6EF8FD04FC
%8CF8FCFCFCF84AFD06FC44F820FD05FC2000FD070728F8F806070728F805
%FD05F82906F87CFD0CFF2768FCFCFCBBFFFD04FCF87D27FCFCF893F86FFD
%05FC2720FC68F88CFD07FC444BFD06FCF828072F072F072F0727F8270528
%05FD06F828072F0527FD0CFF276FFCFCFCC2FFFD04FCF87DF8FCFC4BF8F8
%FD06FC68F8204BF8FD08FC8CF8FD06FC4AF8FD070700FD0AF828FD0407F8
%52FD0BFF2768FCFCFCBCFFFD04FCF87D27FCFC8C2720FD07FC20F82020FD
%09FC4BF8B4FD05FC27052F072F072F072F00FD08F82F072F072F0729F8A8
%FD0AFFF86FFCFCFCC2FFFD04FCF8FFF892FCFC204BFD07FC2044FCF892FD
%08FC8CF8F86FFD04FC68F806FD07070627F827F8F8F8FD080727F8FD0AFF
%2768FCFCFC99FFFD04FCF8FF52F8B4FC4B20FD06FC93F8B4FC4BF893FD07
%FC4B206FF8F8204B444BF827072F072F072F072F072F0728F8F8072F072F
%072F072F072776FD09FFF893FCFCFCC2FFFD04FCF8FFFFF8F86E8CF88CFD
%05FC4427FCFCFC4BF82668FD04FC4BF88CFCFC20F8204B204AF828FD0A07
%06F8F8FD090705F8A8FD08FF2768FCFCFCBBFFFD04FCF8FF7CF86FF8F8F8
%276827FD04F820FD04FC932020F82720F8F86FFCFCFCB4F892FCFCFC6FF8
%2F072F072F072F072F0728F827072F072F072F072F072FF827FD08FF276F
%FCFCFCC2FFFD04FCF8FFF84AFCFCFC8CF8F8208CFCFC204AFD07FC8C686E
%8CFD06FC2720FD04FC21F8FD090700F800FD0B07F87DFD07FF2768FCFCFC
%BBFFFD04FCF8FFF868FCFCFC8CF868FD04FC4B20FD11FC4427FD04FC8C27
%062F072F072F072F0728F829072F072F072F072F072F0728F8FD07FF276F
%FCFCFCC2FFFD04FCF8FFF84AFCFCFC2620FD05FC2026FD11FC6FF8FD05FC
%44F806FD070700F805FD0C0727F8FD06FF2768FCFCFCBCFFFD04FCF8FF27
%F8FCFCFCF892FD05FC93F8B4FD10FC204BFD04FC4420F827072F072F072F
%0728F827072F072F072F072F072F072F072752FD05FFF86FFCFCFCC2FFFD
%04FCF8FFA1F820FCFCF8FD07FC2620FD10FC20F826F820F8F844FCF827FD
%060706F800FD0D0706F87DFD04FF2768FCFCFC99FFFD04FCF8FFFFA827F8
%27F8FD07FC68F820FD0EFC93F893686F6893FCFCFC93F828072F072F072F
%062F072F072F072F072F072F072F072F0527A8FFFFFFF893FCFCFCC2FFFD
%04FCF8FD04FFF8F8F844FD07FC6820F84B8CFD0BFCF84AFD09FC4BF8FD17
%07F827FFFFFF2768FCFCFCBBFFFD04FCF8FFFFFF52F8F8F8278CFD08FC6F
%2020F827F84B446F8CFCFC92F827FD0BFC4BF829072F072F072F072F072F
%072F072F072F072F072F072FF852FFFF276FFCFCFCC2FFFD04FCF8FFFFFF
%FD07F82044FD09FC686E204BFD05F84AFD0DFC27F8FD160728F87DFF2768
%FCFCFCBBFFFD04FCF8FFFFA8FD0AF8B4FD0CFC8C4B442720FD0DFC8CF8F8
%2805270027052700270027F827F827F827F827F827F8F8F8A8276FFCFCFC
%C2FFFD04FCF8FFFF7DFD0BF8FD0FFC68F88CFD0CFC27FD11F827FD087DA8
%2768FCFCFCBCFFFD04FCF8FFFF7DFD0BF820B4FD0EFC204BFD0AFC6827FD
%13F8FD09FFF86FFCFCFCC2FFFD04FCF8FFFFA8FD13F86FFD07FC4B20FD05
%FC20FD19F827FD08FF2768FCFCFC99FFFD04FCF8FFFFFFFD15F844FD05FC
%204BFD04FC44FD1AF827FD08FFF893FCFCFCC2FFFD04FCF8FFFFFF27FD16
%F827446EF8F8F820204BFD1DF8FD08FF2768FCFCFCBBFFFD04FCF8FFFFFF
%7DFD19F827FD22F8A8FD07FF276FFCFCFCC2FFFD04FCF8FFFFFFA8FD18F8
%FFFFFD22F87DFD07FF2768FCFCFCBBFFFD04FCF8FD04FF27FD16F8A8FFFF
%27FD21F852FD07FF276FFCFCFCC2FFFD04FCF8FD04FF7DFD15F8A7FD04FF
%FD21F827FD07FF2768FCFCFCBCFFFD04FCF8FD05FF27FD12F827FD06FF52
%FD21F8FD07FFF86FFCFCFCC2FFFD04FCF8FD05FF7CFD11F852FD08FF27FD
%20F87DFD06FF2768FCFCFC99FFFD04FCF8FD06FFFD0FF87DFD0AFFA827FD
%1FF84BFD06FFF893FCFCFCC2FFFD04FCF8FD06FF27FD0BF852A8FD0DFFA8
%27FD1FF8FD06FF2768FCFCFCBBFFFD04FCF8FD06FF27FD07F8277DA8FD12
%FF52FD1EF827FD05FF276FFCFCFCC2FFFD04FCF8A8FD05FF27FD04F827A8
%FD17FF7DFD07F8275127FD0FF852275227F827FD04FFF868FCFCFCBBFFFD
%04FC2752FD05FFF8F8F87DFD1CFF2727FD04F827FFFFFF7D52FD0427F8FD
%04277DA8FD05FFA82752FFFFA8F8FD04FCC2FFFD04FC68F8A8FFFFFFA8F8
%27FD1FFFA827F8F8F827FD17FFA8FFFFF84BFD04FCBCFFFD05FC2027A8FF
%FF7D27FD22FF7DF8F827FD19FF27278CFD04FCC2FFFD06FC20F82752F852
%275227522752275227522752275227522752275227522752275227522752
%275227522727F82727522752275227522752275227522752275227522752
%2727F8278CFD05FC99FFFD07FC8C4B264B4B4B264B4B4B264B4B4B264B4B
%4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B4B264B4B27264B4B4B26
%4B4B4B264B4B4B264B4B4B264B4B4B264B4B4B2093FD07FCC2FFFD52FCBB
%FFFD52FCC2FFFD52FCBBFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([\265\356\267\317]) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(\267\271\300\314\276\356 1) Ln
0 A
0 O
0 1 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
374.0195 312.5039 m
220.9492 312.5039 L
220.9492 550.6143 L
374.0195 550.6143 L
374.0195 312.5039 L
fu0 0 0 0 k
229.6504 534.397 m
229.4844 329.7305 l
230.1514 320.3975 238.3174 319.8975 v
354.6514 319.5635 l
365.3184 319.7314 365.6514 329.3975 v
365.6514 534.397 l
364.6504 542.564 355.3174 543.2305 v
238.1504 543.2305 l
230.8174 542.397 229.6504 534.397 v
f0 1 1 0 k
327.1094 543.2305 m
299.6094 543.1055 l
296.1094 541.9805 295.7344 537.3555 v
295.3594 532.7305 299.3594 529.7305 y
296.2344 517.2305 305.2344 512.9805 v
314.2344 508.7305 323.3594 512.8555 324.1094 515.7305 c
324.8594 518.6055 323.6094 521.6055 y
328.4844 522.7305 330.9844 527.2305 v
333.4844 531.7305 333.4844 538.6055 327.1094 543.2305 c
f240.1094 425.6055 m
237.2344 424.8555 236.1094 423.1055 v
234.9844 421.3555 234.4844 415.1055 234.3594 412.9805 c
234.2344 410.8555 234.2344 407.6055 233.3594 406.2305 c
232.4844 404.8555 232.6094 401.4805 232.6094 400.1055 c
232.6094 398.7305 233.7344 395.3555 233.3594 393.9805 c
232.9844 392.6055 232.6094 388.8555 232.3594 386.9805 c
232.1094 385.1055 232.3594 379.8555 235.4844 376.9805 c
234.1094 374.2305 233.4844 371.9805 v
232.8594 369.7305 233.1094 364.9805 240.8594 362.9805 c
242.3594 357.2305 l
261.4844 347.8555 l
270.7344 345.3555 l
279.4844 345.2305 l
282.6094 345.6055 l
286.3594 345.9805 286.9844 346.2305 v
287.6094 346.4805 295.7344 339.7305 296.3594 339.8555 c
296.9844 339.9805 307.3594 344.9805 y
314.8594 353.7305 l
315.3594 356.6055 l
303.4844 369.6055 295.3594 384.9805 v
287.2344 400.3555 279.2344 419.4805 274.6094 434.7305 c
261.3594 435.8555 l
248.6094 433.1055 l
240.1094 425.6055 l
f0 0.2 1 0 k
287.2344 401.2305 m
280.8594 404.1055 276.9844 404.4805 v
273.1094 404.8555 271.3594 401.3555 271.7344 396.9805 c
272.1094 392.6055 276.9844 388.2305 280.2344 388.2305 c
280.3594 391.2305 282.8594 392.6055 v
285.3594 393.9805 286.8594 393.6055 288.2344 392.6055 c
289.6094 391.6055 292.2344 391.3555 y
287.2344 401.2305 l
f1 0.6 0 0 k
305.6094 496.4805 m
264.8594 495.9805 l
266.6094 477.2305 267.7344 468.8555 v
268.8594 460.4805 274.4844 435.8555 277.8594 425.3555 c
281.2344 414.8555 295.4844 376.6055 316.7344 354.7305 c
361.1094 356.1055 l
360.3594 357.3555 l
334.3174 387.5635 320.3174 429.2305 v
316.3154 441.1411 309.9844 464.2305 y
307.1514 476.897 307.1514 481.2305 v
307.1514 485.564 308.1514 491.564 y
305.6094 496.4805 l
f0.65 0.53 0.51 1 k
279.1094 479.9805 m
277.1094 478.3555 275.8594 478.2305 v
274.6094 478.1055 273.3594 478.3555 272.9844 477.6055 c
272.6094 476.8555 272.9844 474.7305 273.4844 473.9805 c
273.9844 473.2305 279.6094 473.2305 284.2344 476.9805 c
284.6094 476.2305 284.3594 475.2305 v
284.1094 474.2305 279.3594 467.9805 275.8594 463.6055 c
275.1094 462.3555 275.1094 461.4805 v
275.1094 460.6055 275.8594 460.1055 279.1094 461.6055 c
282.3594 463.1055 283.1094 465.9805 y
283.9844 466.2305 284.3594 465.2305 v
284.7344 464.2305 286.4844 461.9805 287.8594 460.3555 c
289.2344 458.7305 291.1094 460.1055 291.4844 461.3555 c
291.8594 462.6055 290.9844 464.6055 289.3594 466.6055 c
287.7344 468.6055 285.1094 469.1055 y
288.2344 474.7305 288.6094 477.2305 v
288.9844 479.7305 287.3594 481.3555 286.4844 481.9805 c
285.6094 482.6055 282.9844 481.4805 y
281.3594 483.7305 280.7344 484.7305 v
280.1094 485.7305 277.9844 486.1055 277.3594 486.4805 c
276.7344 486.8555 275.3594 485.4805 275.3594 484.6055 c
275.3594 483.7305 278.1094 483.6055 278.6094 482.6055 c
279.1094 481.6055 279.1094 479.9805 y
f*u
290.1094 485.9805 m
289.4844 487.1055 287.8594 487.1055 286.9844 488.3555 c
286.1094 489.6055 287.2344 490.8555 289.9844 490.1055 c
292.7344 489.3555 294.8594 488.3555 295.7344 485.6055 c
296.6094 482.8555 297.9844 473.7305 297.9844 467.3555 c
297.9844 460.9805 295.6094 457.2305 y
297.4844 456.9805 302.2344 454.9805 302.8594 450.6055 c
303.4844 446.2305 300.8594 441.7305 298.8594 439.3555 c
296.8594 436.9805 293.3594 431.8555 293.2344 427.3555 c
293.1094 422.8555 295.4844 420.2305 296.3594 420.7305 c
297.2344 421.2305 300.9844 423.1055 301.8594 423.4805 c
302.7344 423.8555 305.3594 422.9805 305.4844 421.8555 c
305.6094 420.7305 304.7344 418.9805 303.2344 417.9805 c
301.7344 416.9805 298.3594 415.4805 298.4844 413.2305 c
298.6094 410.9805 300.1094 407.9805 303.6094 410.2305 c
307.1094 412.4805 308.6094 416.7305 308.9844 417.3555 c
309.3594 417.9805 310.1094 418.2305 310.8594 417.7305 c
311.6094 417.2305 312.2344 415.9805 y
311.8594 409.4805 309.8594 405.1055 304.8594 403.7305 c
299.8594 402.3555 295.9844 404.1055 294.3594 408.4805 c
292.7344 412.8555 294.7344 417.2305 y
291.4844 419.3555 289.1094 423.7305 290.3594 429.8555 c
291.6094 435.9805 294.7344 438.6055 y
292.1094 437.4805 289.4844 440.7305 v
286.3662 444.5908 285.9844 448.8555 287.3594 452.2305 c
288.7344 455.6055 292.3594 458.7305 293.7344 462.2305 c
295.1094 465.7305 293.7344 471.1055 y
289.4844 468.2305 288.4844 468.4805 v
287.4844 468.7305 286.4844 470.9805 287.3594 471.4805 c
288.2344 471.9805 292.9844 475.8555 y
291.8594 481.4805 290.7344 484.8555 290.1094 485.9805 c
f1 D
294.9844 453.4805 m
291.4844 453.8555 290.1094 449.3555 v
288.7344 444.8555 292.3594 442.1055 294.1094 441.9805 c
295.8594 441.8555 298.2344 443.2305 298.7344 447.9805 c
299.2344 452.7305 295.7344 453.4805 294.9844 453.4805 c
f*U
*u
0 D
307.4844 429.6055 m
309.8594 428.8555 313.8594 426.6055 314.2344 424.9805 c
314.6094 423.3555 317.7344 414.6055 y
320.1094 412.6055 322.4844 411.1055 v
324.8594 409.6055 325.8594 405.4805 324.9844 403.1055 c
324.1094 400.7305 321.8594 399.7305 321.3594 399.2305 c
320.8594 398.7305 320.9844 398.1055 y
323.8594 386.8555 l
325.4844 387.4805 326.8594 389.1055 327.4844 390.2305 c
328.1094 391.3555 330.2344 392.6055 331.2344 392.3555 c
332.2344 392.1055 334.7344 391.3555 334.7344 390.1055 c
334.7344 388.8555 334.6094 387.2305 332.4844 385.6055 c
330.3594 383.9805 325.9844 381.1055 y
326.3594 379.8555 326.7344 377.8555 v
327.1094 375.8555 325.7344 373.1055 325.3594 371.4805 c
324.9844 369.8555 325.7344 367.1055 325.8594 365.4805 c
325.9844 363.8555 324.1094 363.3555 324.1094 363.9805 c
324.1094 364.6055 323.3594 365.4805 322.8594 367.8555 c
322.3594 370.2305 322.3594 373.2305 322.9844 375.6055 c
323.6094 377.9805 322.3594 380.7305 y
321.6094 380.7305 316.1094 379.1055 312.7344 382.8555 c
309.3594 386.6055 308.8594 390.9805 310.6094 393.6055 c
312.3594 396.2305 317.4844 400.1055 y
316.9844 403.4805 313.4844 413.3555 v
309.9844 423.2305 305.2344 426.2305 304.2344 427.3555 c
303.2344 428.4805 303.6094 429.4805 y
305.1094 430.3555 307.4844 429.6055 v
fu1 D
318.2344 411.3555 m
319.8594 404.6055 320.1094 402.8555 v
322.4844 404.1055 321.7344 407.3555 v
320.9844 410.6055 318.2344 411.3555 y
f313.2344 391.4805 m
312.2344 388.4805 314.1094 386.2305 316.6094 385.7305 c
319.1094 385.2305 321.3594 386.1055 y
318.3594 396.7305 l
314.2344 394.4805 313.2344 391.4805 v
fU*U
*u
239.4053 543.939 m
233.5439 543.939 228.7754 539.1704 228.7754 533.3091 C
228.7754 329.6514 L
228.7754 323.79 233.5439 319.0215 239.4053 319.0215 C
355.5635 319.0215 L
361.4248 319.0215 366.1934 323.79 366.1934 329.6514 C
366.1934 533.3091 L
366.1934 539.1704 361.4248 543.939 355.5635 543.939 C
239.4053 543.939 L
f0 D
230.1924 329.6514 m
230.1924 533.3091 L
230.1924 538.3892 234.3252 542.522 239.4053 542.522 C
355.5635 542.522 L
360.6436 542.522 364.7754 538.3892 364.7754 533.3091 C
364.7754 329.6514 L
364.7754 324.5713 360.6436 320.4395 355.5635 320.4395 C
239.4053 320.4395 L
234.3252 320.4395 230.1924 324.5713 230.1924 329.6514 C
f*U
*u
1 D
304.9658 497.2725 m
264.9121 496.2539 L
264.9424 495.5342 L
268.9082 401.3398 315.6875 355.1758 316.1592 354.7207 C
316.3701 354.5176 L
362.792 355.2109 L
361.8662 356.3457 L
309.6328 420.4053 305.7256 495.8408 305.6924 496.5952 C
305.6611 497.29 L
304.9658 497.2725 L
f0 D
304.3184 495.8384 m
304.8125 488.3525 310.752 417.6084 359.874 356.585 C
357.207 356.5449 317.5137 355.9521 316.9404 355.9434 C
313.6426 359.2871 270.4121 404.875 266.3994 494.874 C
267.7822 494.9092 303.0234 495.8052 304.3184 495.8384 C
f*U
268.4102 433.7305 m
264.6348 432.3716 264.7236 427.7881 265.2979 425.5537 C
266.6709 425.9063 L
266.6162 426.1191 265.3857 431.1348 268.8906 432.3975 c
272.5869 433.7275 274.9219 431.7783 275.0205 431.6948 C
275.9512 432.7637 L
275.8291 432.8701 272.918 435.3535 268.4102 433.7305 c
f272.8975 403.7188 m
271.6729 402.5879 270.9424 400.7852 270.9424 398.8975 c
270.9424 396.6494 271.6445 389.1748 280.6787 387.3682 C
280.957 388.7588 L
273.1973 390.3096 272.3594 396.3652 272.3594 398.8975 c
272.3594 400.3975 272.9199 401.8096 273.8594 402.6768 c
274.71 403.4619 275.8545 403.8037 277.2607 403.6914 c
281.2305 403.374 286.4336 400.6318 286.4854 400.6045 C
287.1504 401.8564 L
286.9268 401.9746 281.6387 404.7627 277.374 405.1035 c
275.582 405.2471 274.0342 404.7676 272.8975 403.7188 c
f282.8662 393.3594 m
281.0889 392.5947 279.9932 391.1572 279.7803 389.3115 c
279.1572 383.9141 282.3955 379.5811 288.4424 377.7197 c
295.1045 375.6699 299.4014 377.333 299.5811 377.4053 C
299.0566 378.7227 L
299.0166 378.707 295.0088 377.1826 288.8594 379.0752 c
283.4375 380.7432 280.6416 384.415 281.1885 389.1494 c
281.3447 390.5078 282.0977 391.4863 283.4268 392.0576 c
285.1113 392.7822 287.0596 392.5381 287.5586 392.1631 c
288.9834 391.0957 292 390.25 292.1279 390.2148 C
292.5078 391.5801 L
291.708 391.8027 289.4141 392.5439 288.4092 393.2979 c
287.4082 394.0479 284.9424 394.252 282.8662 393.3594 c
f273.4277 415.832 m
271.001 414.6318 269.5859 412.4785 269.4434 409.7676 c
269.1016 403.2881 271.1084 401.252 271.3389 401.041 C
272.3057 402.0771 L
272.2881 402.0947 270.5518 403.8789 270.8584 409.6934 c
271.0049 412.4834 272.6777 413.8809 274.0557 414.5615 c
276.25 415.6465 279.2637 415.6094 280.918 414.4785 C
281.7178 415.6484 L
279.6465 417.0654 276.082 417.1445 273.4277 415.832 c
f268.001 393.1973 m
266.1084 392.251 262.7422 389.8711 261.4619 384.5635 c
261.0273 382.7646 261.4346 380.9248 262.6367 379.2412 c
264.7617 376.2686 269.085 374.1416 273.9189 373.6914 c
277.9619 373.3154 280.4961 374.7725 281.9111 376.0615 c
283.708 377.6992 284.5264 379.8027 284.5264 381.0635 C
283.1094 381.0635 L
283.1094 380.293 282.5244 378.5381 280.9561 377.1094 c
279.7529 376.0127 277.5781 374.7744 274.0498 375.1035 c
269.6816 375.5098 265.6533 377.458 263.7891 380.0654 c
262.833 381.4033 262.5049 382.8438 262.8398 384.2314 c
263.9863 388.9814 266.9619 391.0938 268.6348 391.9297 c
270.7783 393.002 272.502 395.5615 272.5742 395.6699 C
271.3945 396.457 L
271.3789 396.4336 269.8047 394.0996 268.001 393.1973 c
f258.2686 417.2529 m
256.3975 415.9814 255.665 413.4766 255.7773 411.6865 C
255.8428 410.751 L
256.0459 408.0215 256.3857 403.4512 254.6836 400.0469 c
252.6055 395.8896 253.8457 387.2832 256.2549 384.1328 c
258.2627 381.5078 261.1055 382.0986 262.3281 382.7783 C
261.6426 384.0186 L
261.541 383.9639 259.1377 382.6963 257.3809 384.9941 c
255.4619 387.5029 254.0322 395.5742 255.9512 399.4131 c
257.8281 403.167 257.4707 407.9805 257.2568 410.8564 C
257.1914 411.7744 L
257.1016 413.2207 257.7158 415.1641 259.0654 416.0801 c
260.2275 416.8701 261.7813 416.8174 263.6826 415.9219 c
268.8828 413.4746 269.626 411.0703 269.6328 411.0469 C
271.0049 411.4023 L
270.9287 411.709 270.0889 414.4736 264.2861 417.2051 c
261.3135 418.6035 259.373 418.0029 258.2686 417.2529 c
f255.4424 372.0635 m
255.4424 365.376 259.6475 360.6299 266.6924 359.3662 c
269.2285 358.9111 271.3076 358.71 273.1416 358.5322 c
275.9619 358.2598 277.999 358.0625 279.8203 357.1035 c
281.2422 356.3555 283.2637 356.5049 285.3701 357.5137 c
288.1455 358.8428 291.4355 361.9268 292.3457 366.5947 c
293.7305 373.6904 289.6865 378.3398 289.5137 378.5342 C
288.4531 377.5938 L
288.4912 377.5508 292.2012 373.251 290.9551 366.8662 c
290.1445 362.7139 287.2227 359.9727 284.7578 358.791 c
283.085 357.9902 281.4863 357.8281 280.4805 358.3574 c
278.4121 359.4463 276.1465 359.665 273.2783 359.9434 c
271.4707 360.1182 269.4229 360.3164 266.9424 360.7607 c
260.6289 361.8936 256.8594 366.1191 256.8594 372.0635 c
256.8594 378.2539 259.7119 382.6279 259.7412 382.6709 C
258.5605 383.457 L
258.4336 383.2656 255.4424 378.7021 255.4424 372.0635 c
f291.708 366.2363 m
291.2598 364.8916 L
291.624 364.7695 300.2451 361.9883 306.3193 368.0625 C
305.3164 369.0645 L
299.8711 363.6191 291.7891 366.209 291.708 366.2363 C
f260.3164 424.3984 m
257.3203 421.4023 257.1162 416.3027 257.1094 416.0869 C
258.5254 416.0391 L
258.5273 416.0869 258.7227 420.7998 261.3184 423.3965 c
264.0537 426.1318 267.9766 424.8516 268.7354 424.5674 c
269.8135 424.1621 275.873 422.6475 278.6328 425.2109 C
277.668 426.25 L
275.6445 424.3701 270.4473 425.4385 269.2334 425.8936 c
268.332 426.2324 263.666 427.748 260.3164 424.3984 c
f247.9082 417.0635 m
243.832 415.5801 241.2871 409.6973 240.7822 405.9932 c
240.3057 402.4971 239.1621 396.8369 238.1455 393.7871 c
237.041 390.4756 236.959 384.5068 241.2578 381.6406 C
242.0439 382.8203 L
238.4316 385.2285 238.5605 390.5508 239.4902 393.3398 c
240.5322 396.4658 241.7012 402.2422 242.1865 405.8018 c
242.6299 409.0566 244.9102 414.4639 248.3926 415.7314 c
251.8574 416.9922 257.5137 416.3662 257.5703 416.3594 C
257.7314 417.7676 L
257.4863 417.7959 251.6885 418.4385 247.9082 417.0635 c
f249.6035 394.8281 m
246.0742 392.583 239.877 385.501 240.6152 379.9697 c
241.3086 374.7725 244.8584 371.5088 245.0088 371.3721 C
245.96 372.4219 L
245.9268 372.4521 242.6426 375.4893 242.0205 380.1572 c
241.416 384.6816 246.6426 391.2646 250.3643 393.6328 c
253.917 395.8926 254.5586 396.4697 254.6514 396.5625 C
253.6621 397.5771 L
253.6377 397.5547 253.0332 397.0107 249.6035 394.8281 c
f247.208 374.5498 m
245.0889 373.6533 243.3037 371.6338 242.3125 369.0098 c
241.25 366.2021 241.2627 363.1797 242.3457 360.9238 c
244.0859 357.2969 246.0811 357.0732 247.6836 356.8936 C
248.7979 356.7139 L
249.7051 356.4941 L
251.2285 356.1484 252.668 355.8232 254.0557 353.6787 c
255.8867 350.8496 258.3975 349.3545 261.3174 349.3545 C
263.5742 349.5127 L
265.9844 349.751 268.9844 350.0469 271.6787 348.7578 C
273.8418 347.6426 L
276.4932 346.2197 278.7822 344.9912 283.9658 344.8555 c
286.3379 344.793 288.0137 346.0537 288.5615 348.3154 c
289.3652 351.627 287.5293 356.8125 283.959 358.5352 C
283.3428 357.2598 L
286.2012 355.8789 287.8447 351.3721 287.1846 348.6494 c
286.791 347.0273 285.7207 346.2266 284.0029 346.2715 c
279.1563 346.3984 277.1064 347.499 274.5117 348.8916 C
272.29 350.0371 L
269.2383 351.4971 265.8838 351.165 263.4346 350.9229 C
261.3174 350.7725 L
258.8672 350.7725 256.8242 352.0088 255.2451 354.4482 c
253.5439 357.0771 251.6709 357.502 250.0186 357.876 C
249.1709 358.0811 L
247.8418 358.3018 L
246.3926 358.4648 245.0244 358.6182 243.623 361.5371 c
242.7051 363.4502 242.7109 366.0566 243.6377 368.5088 c
244.4932 370.7715 245.9961 372.498 247.7607 373.2451 c
251.8223 374.9639 256.1211 374.0479 256.1641 374.0381 C
256.4717 375.4219 L
256.2783 375.4648 251.6982 376.4502 247.208 374.5498 c
f303.9043 351.4385 m
302.6807 351.5742 301.873 351.6641 301.3066 351.3496 c
300.7451 351.0381 300.2734 350.4502 299.7285 349.7695 c
298.5391 348.2861 297.0596 346.4395 293.9844 346.4395 c
289.6191 346.4395 288.0566 348.3164 288.041 348.3359 C
286.9229 347.4658 L
286.999 347.3652 288.8604 345.0215 293.9844 345.0215 c
297.7402 345.0215 299.6025 347.3457 300.834 348.8828 c
301.2676 349.4238 301.6768 349.9346 301.9951 350.1113 C
302.2031 350.2012 303.0586 350.1055 303.7471 350.0293 c
306.9473 349.6738 312.9033 349.0117 316.1318 356.2754 C
314.8369 356.8516 L
312.0293 350.5342 307.1396 351.0781 303.9043 351.4385 c
f252.2637 429.1523 m
248.7129 427.5527 L
246.708 426.7227 244.6338 426.6162 242.8037 426.5225 c
240.2998 426.3945 237.9346 426.2744 236.4248 424.332 c
233.8438 421.0146 233.627 413.0303 233.7803 411.6523 c
233.9365 410.2402 233.417 407.626 232.4873 405.1465 c
231.8896 403.5537 232.0879 400.9678 232.2783 398.4668 c
232.4238 396.5693 232.5732 394.6084 232.2998 393.5801 c
231.8311 391.8232 231.8311 389.3203 231.8311 387.1123 C
231.7773 384.1074 L
231.585 381.0313 233.5527 376.8174 237.1797 375.0908 c
240.9111 373.3135 243.3057 374.1973 243.4053 374.2363 C
242.9023 375.5615 L
242.8828 375.5547 240.9268 374.876 237.7891 376.3701 c
234.3896 377.9893 233.0537 381.8184 233.1914 384.0195 C
233.248 387.1123 L
233.248 389.2334 233.248 391.6377 233.6689 393.2148 c
234.0049 394.4756 233.8525 396.4668 233.6914 398.5742 c
233.5205 400.8125 233.3271 403.3496 233.8145 404.6484 c
234.8311 407.3594 235.3701 410.1699 235.1885 411.8086 c
235.0225 413.3027 235.3779 420.6777 237.5439 423.4619 c
238.6553 424.8916 240.5176 424.9873 242.877 425.1074 c
244.8203 425.207 247.0244 425.3193 249.2549 426.2422 C
252.8711 427.8721 L
255.3271 429.0371 256.8096 429.7402 258.7393 429.5264 c
261.4902 429.2207 263.6299 426.6885 264.1836 425.5811 C
265.4512 426.2139 L
264.7627 427.5938 262.2529 430.5625 258.8955 430.9346 c
256.5654 431.1934 254.7617 430.3379 252.2637 429.1523 C
f232.4531 370.8555 m
232.1133 368.9531 232.8281 367.0078 234.4639 365.377 c
236.6367 363.2109 240.1396 361.917 242.6113 362.3662 C
242.3574 363.7607 L
240.335 363.3926 237.3076 364.5439 235.4639 366.3809 c
234.5459 367.2959 233.5205 368.7715 233.8486 370.6055 c
234.6074 374.8604 236.2256 376.1504 236.2422 376.1631 C
235.4014 377.3037 L
235.3164 377.2422 233.3262 375.7471 232.4531 370.8555 c
f*u
1 D
300.6719 532.4194 m
299.3486 531.2061 298.2021 528.5835 298.2021 525.2251 c
298.2021 523.0903 298.665 520.6582 299.8398 518.1011 c
302.7461 511.7759 308.2275 511.2324 308.7119 511.1963 C
313.7715 509.7085 319.0342 510.4824 322.1445 513.1885 c
324.1855 514.9644 325.0879 517.3848 324.6846 520.0049 c
324.1611 523.4102 322.3623 527.6646 316.7676 528.5962 c
314.9648 528.896 310.8906 530.4785 308.5342 531.9932 c
304.4893 534.5942 302.0264 533.6606 300.6719 532.4194 c
f0 D
309.0215 512.5757 m
308.9443 512.5986 L
308.8623 512.604 L
308.6543 512.6182 303.7383 513.0112 301.1279 518.6929 c
298.4326 524.5596 299.834 529.728 301.6299 531.3745 c
303.0645 532.6899 305.1299 532.4971 307.7686 530.8008 c
310.0801 529.3145 314.3408 527.5635 316.5352 527.1978 c
320.3545 526.562 322.625 524.0693 323.2842 519.7891 c
323.6152 517.6367 322.8994 515.7236 321.2148 514.2578 c
318.4414 511.8457 313.6553 511.1855 309.0215 512.5757 C
f*U
305.2842 540.4463 m
303.4824 537.124 305.251 532.6538 305.3271 532.4653 C
306.6416 532.9951 L
306.626 533.0352 305.0469 537.0435 306.5322 539.7749 c
307.2158 541.0313 308.4785 541.8477 310.2871 542.2017 C
310.0156 543.5923 L
307.7695 543.1533 306.1777 542.0947 305.2842 540.4463 c
f325.624 542.189 m
325.8184 542.1797 330.3867 541.8809 331.4492 534.1343 c
331.9941 530.1636 330.2559 527.3486 328.7012 525.6865 c
326.624 523.4639 324.2402 522.5571 323.8027 522.5874 C
323.457 521.2158 L
324.4336 520.9365 326.7803 522.0547 328.6875 523.708 c
330.5645 525.3359 333.6006 528.8794 332.8535 534.3267 c
331.6201 543.3169 325.916 543.5977 325.6738 543.6055 C
325.624 542.189 L
f296.7617 541.228 m
295.8887 539.9995 294.9541 537.9683 295.4541 535.2681 c
296.3408 530.4761 299.2119 528.9912 299.334 528.9302 C
299.9727 530.1953 L
299.876 530.2456 297.5977 531.4712 296.8477 535.5259 c
296.4375 537.7388 297.2031 539.4019 297.917 540.4072 c
298.9092 541.8037 300.2266 542.5635 301.0918 542.6963 C
300.876 544.0972 L
299.46 543.8794 297.8447 542.7529 296.7617 541.228 c
f298.1465 496.792 m
299.4883 496.3359 L
302.2715 504.5195 306.4053 512.4902 306.4463 512.5698 C
305.1895 513.2241 L
305.1475 513.144 300.9648 505.0811 298.1465 496.792 C
f298.8174 543.064 m
272.8174 543.397 l
277.3174 541.2305 278.9844 539.2305 v
280.6504 537.2305 283.4844 537.0635 287.4844 536.397 c
291.4844 535.7305 295.3174 534.897 296.4844 533.397 c
294.9844 537.231 298.8174 543.064 v
f298.7344 530.2305 m
297.8594 528.3555 293.6094 527.6055 v
289.3594 526.8555 284.2344 527.4805 281.8594 527.7305 c
279.4844 527.9805 276.4844 527.6055 273.7344 526.2305 c
270.9844 524.8555 267.6094 521.8555 y
268.2344 521.1055 269.8594 521.4805 v
271.4844 521.8555 276.1094 522.1055 278.7344 520.7305 c
281.3594 519.3555 283.8594 517.8555 290.6094 517.6055 c
297.3594 517.3555 299.9844 519.9805 y
297.7344 524.7305 299.8594 529.2305 v
298.7344 530.2305 l
f332.3594 534.6055 m
336.7344 535.4805 342.2344 535.2305 v
347.7344 534.9805 353.1094 535.3555 356.9844 536.7305 c
357.3594 535.4805 356.1094 535.1055 v
354.8594 534.7305 347.6094 530.3555 345.6094 528.8555 c
343.6094 527.3555 336.3594 522.9805 328.2344 523.9805 c
332.4844 527.4805 332.3594 534.6055 v
f324.3594 519.6055 m
333.2344 516.1055 339.8594 511.7305 v
346.4844 507.3555 349.3594 500.1055 y
349.1094 499.4805 344.4844 502.1055 v
339.8594 504.7305 335.8594 507.3555 331.6094 508.2305 c
327.3594 509.1055 322.3594 511.4805 320.3594 512.8555 c
324.6094 514.7305 324.3594 519.6055 v
f302.7344 496.4805 m
304.9844 496.564 l
306.9844 477.4805 l
316.2344 488.9805 324.6094 492.7305 v
332.9844 496.4805 341.9844 492.9805 347.9844 486.3555 c
348.1094 486.7305 347.7344 488.3555 v
347.3594 489.9805 342.6094 498.2305 331.4844 501.7305 c
320.3594 505.2305 309.4844 501.2305 302.7344 496.4805 c
f272.3594 495.6055 m
272.6094 497.6055 270.9844 501.7305 v
269.3594 505.8555 261.4844 512.9805 248.1094 514.8555 c
256.2344 516.4805 269.9844 514.1055 v
283.7344 511.7305 293.4844 499.7305 294.1094 496.2305 c
272.3594 495.6055 l
f272.3594 495.6055 m
268.6094 500.6055 263.8594 504.7305 v
259.1094 508.8555 251.2344 513.4805 242.2344 513.3555 c
246.3594 509.8555 247.2344 506.9805 v
248.1094 504.1055 250.1094 497.3555 255.4844 492.6055 c
248.6094 494.3555 242.2344 494.2305 v
235.8594 494.1055 229.4844 493.4805 y
229.4844 492.7305 l
234.8594 491.6055 237.3594 489.3555 v
239.8594 487.1055 246.6094 480.9805 253.1094 476.9805 c
259.6094 472.9805 267.4844 470.6055 267.7344 469.9805 c
266.1924 491.0225 265.6504 495.564 v
272.3594 495.6055 l
f275.8594 432.3555 m
272.9844 434.1055 269.4844 433.3555 v
265.9844 432.6055 265.8594 429.4805 265.7344 426.1055 c
264.7344 425.6055 l
263.1094 428.2305 260.6094 429.7305 v
258.1094 431.2305 254.7344 429.6055 253.6094 428.9805 c
252.4844 428.3555 250.1094 426.6055 246.8594 426.2305 c
243.6094 425.8555 239.3594 425.2305 y
235.4844 429.3555 233.8594 432.8555 v
232.2344 436.3555 230.4844 439.7305 y
229.7344 440.9805 l
232.1094 441.3555 233.6094 440.7305 v
235.1094 440.1055 238.2344 439.7305 y
238.4844 440.6055 237.8594 441.1055 v
237.2344 441.6055 234.2344 446.4805 232.9844 452.1055 c
231.7344 457.7305 230.6094 466.8555 230.4844 467.6055 c
230.3594 468.3555 231.6094 467.4805 231.9844 466.8555 c
232.3594 466.2305 236.3594 462.2305 240.9844 459.9805 c
245.6094 457.7305 250.4844 459.7305 258.7344 457.7305 c
266.9844 455.7305 270.7344 452.9805 y
275.8594 432.3555 l
f309.8174 465.397 m
313.9844 469.73 318.4844 471.897 v
322.9844 474.064 333.3174 475.8975 341.8174 472.064 c
350.3174 468.2305 356.8174 466.3975 364.3174 466.064 c
360.8174 464.2305 358.4844 462.7305 v
356.1514 461.2305 352.4834 457.7305 350.8174 457.2305 c
356.1514 454.3975 358.9844 450.064 v
361.8174 445.7305 365.4844 441.397 y
365.6514 436.2305 l
363.9844 438.064 359.9844 438.7305 v
355.9844 439.397 354.4844 438.2305 y
358.8174 436.7305 360.9844 431.7305 v
363.1514 426.7305 363.3174 423.7305 y
360.4844 425.3975 358.9844 425.8975 v
357.4844 426.3975 354.3174 425.7314 353.4844 424.8975 c
352.6514 424.0635 347.3174 421.8975 339.9844 421.7305 c
332.6514 421.5635 323.1514 425.2314 320.9844 427.3975 c
313.1504 446.23 309.8174 465.397 v
f239.8174 363.0635 m
235.8174 360.2295 235.6504 354.0635 v
235.4844 347.8975 239.1504 339.7295 241.1504 336.0635 c
243.1504 332.3975 242.6504 324.7295 239.9844 320.5635 c
243.8174 325.0645 247.3174 326.8975 v
250.8174 328.7305 258.4834 330.2314 267.6504 333.3975 c
276.8174 336.5635 282.3174 343.3975 283.3174 345.3975 c
277.1504 346.0635 274.4844 348.0635 v
271.8174 350.0635 269.4844 350.2295 264.3174 350.0635 c
259.1504 349.8975 256.6504 351.2295 254.6504 354.0635 c
252.6504 356.8975 249.8174 357.5635 247.9844 357.5635 c
246.1504 357.5635 243.6504 359.0645 242.6504 361.8975 c
242.8174 363.5635 239.8174 363.0635 v
f285.9844 345.9805 m
287.7344 347.2305 l
289.8594 345.9805 293.6094 345.8555 v
297.3594 345.7305 300.7344 350.1055 y
301.7344 351.1055 302.8594 350.7305 v
306.2344 349.2305 309.8594 351.1055 v
313.4844 352.9805 315.3594 356.1055 y
316.4844 355.2305 317.7344 355.2305 v
318.9844 355.2305 345.1094 355.7305 y
348.9844 350.8555 349.2344 345.8555 v
349.4844 340.8555 351.7344 332.9805 353.7344 330.3555 c
355.7344 327.7305 357.8594 325.4805 y
357.9844 324.6055 356.8594 325.4805 v
355.7344 326.3555 353.9844 328.4805 349.4844 328.7305 c
344.9844 328.9805 342.4844 327.3555 339.4844 326.4805 c
336.4844 325.6055 320.7344 325.6055 312.7344 329.7305 c
313.3594 327.3555 312.9844 324.4805 v
312.6094 321.6055 312.9844 319.7305 y
310.7344 319.7305 l
309.1094 322.6055 306.3594 324.3555 v
303.6094 326.1055 287.8594 332.7305 285.9844 345.9805 c
fULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
